//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from G.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SQLParser.Parsers.TSql {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SELECT=1, FROM=2, AS=3, DISTINCT=4, WHERE=5, GROUP=6, BY=7, ORDER=8, HAVING=9, 
		LIMIT=10, OR=11, AND=12, IN=13, NOT=14, BETWEEN=15, LIKE=16, IS=17, NULL=18, 
		TRUE=19, FALSE=20, ASC=21, DESC=22, CASE=23, WHEN=24, THEN=25, ELSE=26, 
		END=27, JOIN=28, CROSS=29, OUTER=30, INNER=31, LEFT=32, RIGHT=33, FULL=34, 
		ON=35, CAST=36, UNION=37, EQ=38, NSEQ=39, NEQ=40, NEQJ=41, LT=42, LTE=43, 
		GT=44, GTE=45, PLUS=46, MINUS=47, ASTERISK=48, SLASH=49, PERCENT=50, QUESTION=51, 
		CONCAT=52, COMMA=53, LPAREN=54, RPAREN=55, DOT=56, STRING=57, BIGINT_LITERAL=58, 
		SMALLINT_LITERAL=59, TINYINT_LITERAL=60, BYTELENGTH_LITERAL=61, INTEGER_VALUE=62, 
		DECIMAL_VALUE=63, SCIENTIFIC_DECIMAL_VALUE=64, DOUBLE_LITERAL=65, IDENTIFIER=66, 
		BACKQUOTED_IDENTIFIER=67, SIMPLE_COMMENT=68, BRACKETED_COMMENT=69, WS=70, 
		UNRECOGNIZED=71, EXPONENT=72, DIGIT=73, LETTER=74;
	public const int
		RULE_singleExpression = 0, RULE_query = 1, RULE_queryNoWith = 2, RULE_queryOrganization = 3, 
		RULE_queryTerm = 4, RULE_queryPrimary = 5, RULE_sortSet = 6, RULE_sortItem = 7, 
		RULE_querySpecification = 8, RULE_fromClause = 9, RULE_whereClause = 10, 
		RULE_groupByClause = 11, RULE_havingClause = 12, RULE_aggregation = 13, 
		RULE_setQuantifier = 14, RULE_relation = 15, RULE_joinType = 16, RULE_joinCriteria = 17, 
		RULE_relationPrimary = 18, RULE_tableIdentifier = 19, RULE_namedExpression = 20, 
		RULE_namedExpressionSeq = 21, RULE_expression = 22, RULE_booleanExpression = 23, 
		RULE_predicated = 24, RULE_predicate = 25, RULE_valueExpression = 26, 
		RULE_primaryExpression = 27, RULE_constant = 28, RULE_comparisonOperator = 29, 
		RULE_booleanValue = 30, RULE_dataType = 31, RULE_whenClause = 32, RULE_qualifiedName = 33, 
		RULE_identifier = 34, RULE_strictIdentifier = 35, RULE_quotedIdentifier = 36, 
		RULE_number = 37, RULE_nonReserved = 38;
	public static readonly string[] ruleNames = {
		"singleExpression", "query", "queryNoWith", "queryOrganization", "queryTerm", 
		"queryPrimary", "sortSet", "sortItem", "querySpecification", "fromClause", 
		"whereClause", "groupByClause", "havingClause", "aggregation", "setQuantifier", 
		"relation", "joinType", "joinCriteria", "relationPrimary", "tableIdentifier", 
		"namedExpression", "namedExpressionSeq", "expression", "booleanExpression", 
		"predicated", "predicate", "valueExpression", "primaryExpression", "constant", 
		"comparisonOperator", "booleanValue", "dataType", "whenClause", "qualifiedName", 
		"identifier", "strictIdentifier", "quotedIdentifier", "number", "nonReserved"
	};

	private static readonly string[] _LiteralNames = {
		null, "'SELECT'", "'FROM'", "'AS'", "'DISTINCT'", "'WHERE'", "'GROUP'", 
		"'BY'", "'ORDER'", "'HAVING'", "'LIMIT'", "'OR'", "'AND'", "'IN'", "'NOT'", 
		"'BETWEEN'", "'LIKE'", "'IS'", "'NULL'", "'TRUE'", "'FALSE'", "'ASC'", 
		"'DESC'", "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'", "'CROSS'", 
		"'OUTER'", "'INNER'", "'LEFT'", "'RIGHT'", "'FULL'", "'ON'", "'CAST'", 
		"'UNION'", "'='", "'<=>'", "'<>'", "'!='", "'<'", "'<='", "'>'", "'>='", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'?'", "'||'", "','", "'('", "')'", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SELECT", "FROM", "AS", "DISTINCT", "WHERE", "GROUP", "BY", "ORDER", 
		"HAVING", "LIMIT", "OR", "AND", "IN", "NOT", "BETWEEN", "LIKE", "IS", 
		"NULL", "TRUE", "FALSE", "ASC", "DESC", "CASE", "WHEN", "THEN", "ELSE", 
		"END", "JOIN", "CROSS", "OUTER", "INNER", "LEFT", "RIGHT", "FULL", "ON", 
		"CAST", "UNION", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", 
		"PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "QUESTION", "CONCAT", 
		"COMMA", "LPAREN", "RPAREN", "DOT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
		"TINYINT_LITERAL", "BYTELENGTH_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", 
		"SCIENTIFIC_DECIMAL_VALUE", "DOUBLE_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
		"SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "EXPONENT", 
		"DIGIT", "LETTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "G.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GParser.Eof, 0); }
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterSingleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitSingleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_singleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			query();
			State = 79;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryNoWithContext queryNoWith() {
			return GetRuleContext<QueryNoWithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryOrganizationContext queryOrganization() {
			return GetRuleContext<QueryOrganizationContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			queryNoWith();
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER || _la==LIMIT) {
				{
				State = 82;
				queryOrganization();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryNoWithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext[] queryTerm() {
			return GetRuleContexts<QueryTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext queryTerm(int i) {
			return GetRuleContext<QueryTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION() { return GetTokens(GParser.UNION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION(int i) {
			return GetToken(GParser.UNION, i);
		}
		public QueryNoWithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryNoWith; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterQueryNoWith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitQueryNoWith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryNoWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryNoWithContext queryNoWith() {
		QueryNoWithContext _localctx = new QueryNoWithContext(Context, State);
		EnterRule(_localctx, 4, RULE_queryNoWith);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			queryTerm(0);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNION) {
				{
				{
				State = 86;
				Match(UNION);
				State = 87;
				queryTerm(0);
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryOrganizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(GParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(GParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortSetContext sortSet() {
			return GetRuleContext<SortSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(GParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(GParser.INTEGER_VALUE, 0); }
		public QueryOrganizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryOrganization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterQueryOrganization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitQueryOrganization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryOrganization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryOrganizationContext queryOrganization() {
		QueryOrganizationContext _localctx = new QueryOrganizationContext(Context, State);
		EnterRule(_localctx, 6, RULE_queryOrganization);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ORDER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				Match(ORDER);
				State = 94;
				Match(BY);
				State = 95;
				sortSet();
				}
				break;
			case LIMIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(LIMIT);
				State = 97;
				Match(INTEGER_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryPrimaryContext queryPrimary() {
			return GetRuleContext<QueryPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryTermContext queryTerm() {
			return GetRuleContext<QueryTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(GParser.UNION, 0); }
		public QueryTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterQueryTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitQueryTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryTermContext queryTerm() {
		return queryTerm(0);
	}

	private QueryTermContext queryTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		QueryTermContext _localctx = new QueryTermContext(Context, _parentState);
		QueryTermContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_queryTerm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 101;
			queryPrimary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 108;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QueryTermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
					State = 103;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 104;
					Match(UNION);
					State = 105;
					queryPrimary();
					}
					} 
				}
				State = 110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QueryPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterQueryPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitQueryPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryPrimaryContext queryPrimary() {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(Context, State);
		EnterRule(_localctx, 10, RULE_queryPrimary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			querySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext[] sortItem() {
			return GetRuleContexts<SortItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortItemContext sortItem(int i) {
			return GetRuleContext<SortItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GParser.COMMA, i);
		}
		public SortSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterSortSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitSortSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortSetContext sortSet() {
		SortSetContext _localctx = new SortSetContext(Context, State);
		EnterRule(_localctx, 12, RULE_sortSet);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			sortItem();
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 114;
					Match(COMMA);
					State = 115;
					sortItem();
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(GParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(GParser.DESC, 0); }
		public SortItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterSortItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitSortItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortItemContext sortItem() {
		SortItemContext _localctx = new SortItemContext(Context, State);
		EnterRule(_localctx, 14, RULE_sortItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			expression();
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 122;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(GParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedExpressionSeqContext namedExpressionSeq() {
			return GetRuleContext<NamedExpressionSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetQuantifierContext setQuantifier() {
			return GetRuleContext<SetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 16, RULE_querySpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(SELECT);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISTINCT) {
				{
				State = 126;
				setQuantifier();
				}
			}

			State = 129;
			namedExpressionSeq();
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 130;
				fromClause();
				}
				break;
			}
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 133;
				whereClause();
				}
				break;
			}
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 136;
				groupByClause();
				}
				break;
			}
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 139;
				havingClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(GParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GParser.COMMA, i);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_fromClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(FROM);
			State = 143;
			relation();
			State = 148;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 144;
					Match(COMMA);
					State = 145;
					relation();
					}
					} 
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(GParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(WHERE);
			State = 152;
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(GParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(GParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortSetContext sortSet() {
			return GetRuleContext<SortSetContext>(0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 22, RULE_groupByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(GROUP);
			State = 155;
			Match(BY);
			State = 156;
			sortSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(GParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(HAVING);
			State = 159;
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AggregationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterAggregation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitAggregation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregationContext aggregation() {
		AggregationContext _localctx = new AggregationContext(Context, State);
		EnterRule(_localctx, 26, RULE_aggregation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetQuantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(GParser.DISTINCT, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setQuantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterSetQuantifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitSetQuantifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetQuantifierContext setQuantifier() {
		SetQuantifierContext _localctx = new SetQuantifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_setQuantifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationPrimaryContext relationPrimary() {
			return GetRuleContext<RelationPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinTypeContext joinType() {
			return GetRuleContext<JoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinCriteriaContext joinCriteria() {
			return GetRuleContext<JoinCriteriaContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 30, RULE_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			relationPrimary();
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 166;
				joinType();
				}
				break;
			}
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 169;
				joinCriteria();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(GParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(GParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(GParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(GParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(GParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(GParser.CROSS, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinTypeContext joinType() {
		JoinTypeContext _localctx = new JoinTypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_joinType);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				Match(INNER);
				State = 173;
				Match(JOIN);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				Match(LEFT);
				State = 175;
				Match(JOIN);
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176;
				Match(RIGHT);
				State = 177;
				Match(JOIN);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 178;
				Match(FULL);
				State = 179;
				Match(JOIN);
				}
				break;
			case CROSS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				Match(CROSS);
				State = 181;
				Match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinCriteriaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(GParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public JoinCriteriaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinCriteria; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterJoinCriteria(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitJoinCriteria(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinCriteria(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinCriteriaContext joinCriteria() {
		JoinCriteriaContext _localctx = new JoinCriteriaContext(Context, State);
		EnterRule(_localctx, 34, RULE_joinCriteria);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(ON);
			State = 185;
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableIdentifierContext tableIdentifier() {
			return GetRuleContext<TableIdentifierContext>(0);
		}
		public RelationPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterRelationPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitRelationPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationPrimaryContext relationPrimary() {
		RelationPrimaryContext _localctx = new RelationPrimaryContext(Context, State);
		EnterRule(_localctx, 36, RULE_relationPrimary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			tableIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GParser.IDENTIFIER, 0); }
		public TableIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterTableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitTableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableIdentifierContext tableIdentifier() {
		TableIdentifierContext _localctx = new TableIdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_tableIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(GParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GParser.IDENTIFIER, 0); }
		public NamedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterNamedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitNamedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedExpressionContext namedExpression() {
		NamedExpressionContext _localctx = new NamedExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_namedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			expression();
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 192;
				Match(AS);
				State = 193;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedExpressionSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedExpressionContext[] namedExpression() {
			return GetRuleContexts<NamedExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedExpressionContext namedExpression(int i) {
			return GetRuleContext<NamedExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GParser.COMMA, i);
		}
		public NamedExpressionSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedExpressionSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterNamedExpressionSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitNamedExpressionSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedExpressionSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedExpressionSeqContext namedExpressionSeq() {
		NamedExpressionSeqContext _localctx = new NamedExpressionSeqContext(Context, State);
		EnterRule(_localctx, 42, RULE_namedExpressionSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			namedExpression();
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 197;
					Match(COMMA);
					State = 198;
					namedExpression();
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(GParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicatedContext predicated() {
			return GetRuleContext<PredicatedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GParser.AND, 0); }
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_booleanExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				{
				State = 207;
				Match(NOT);
				State = 208;
				booleanExpression(2);
				}
				break;
			case TRUE:
			case FALSE:
			case STRING:
			case BIGINT_LITERAL:
			case SMALLINT_LITERAL:
			case TINYINT_LITERAL:
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_LITERAL:
			case IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				{
				State = 209;
				predicated();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 218;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new BooleanExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 212;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 213;
						Match(OR);
						State = 214;
						booleanExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new BooleanExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 215;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 216;
						Match(AND);
						State = 217;
						booleanExpression(4);
						}
						break;
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicatedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicated; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterPredicated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitPredicated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatedContext predicated() {
		PredicatedContext _localctx = new PredicatedContext(Context, State);
		EnterRule(_localctx, 48, RULE_predicated);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext[] valueExpression() {
			return GetRuleContexts<ValueExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression(int i) {
			return GetRuleContext<ValueExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(GParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(GParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(GParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(GParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(GParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(GParser.LIKE, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 50, RULE_predicate);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				valueExpression();
				State = 226;
				comparisonOperator();
				State = 227;
				valueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				valueExpression();
				State = 230;
				Match(IS);
				State = 231;
				Match(NULL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				valueExpression();
				State = 234;
				Match(IS);
				State = 235;
				Match(NOT);
				State = 236;
				Match(NULL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				valueExpression();
				State = 239;
				Match(BETWEEN);
				State = 240;
				valueExpression();
				State = 241;
				Match(AND);
				State = 242;
				valueExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 244;
				valueExpression();
				State = 245;
				Match(IN);
				State = 246;
				Match(LPAREN);
				State = 247;
				valueExpression();
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 248;
					Match(COMMA);
					State = 249;
					valueExpression();
					}
					}
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 255;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 257;
				valueExpression();
				State = 258;
				Match(LIKE);
				State = 259;
				valueExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueExpressionContext valueExpression() {
		ValueExpressionContext _localctx = new ValueExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_valueExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			primaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_primaryExpression);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case STRING:
			case BIGINT_LITERAL:
			case SMALLINT_LITERAL:
			case TINYINT_LITERAL:
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				constant();
				}
				break;
			case IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 56, RULE_constant);
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				Match(STRING);
				}
				break;
			case BIGINT_LITERAL:
			case SMALLINT_LITERAL:
			case TINYINT_LITERAL:
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				number();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				booleanValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(GParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(GParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQJ() { return GetToken(GParser.NEQJ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(GParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(GParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(GParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(GParser.GTE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 69544110456832L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(GParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(GParser.FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_booleanValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GParser.IDENTIFIER, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_dataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(GParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(GParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterWhenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitWhenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenClauseContext whenClause() {
		WhenClauseContext _localctx = new WhenClauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_whenClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(WHEN);
			State = 281;
			booleanExpression(0);
			State = 282;
			Match(THEN);
			State = 283;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(GParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(GParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			identifier();
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 286;
				Match(DOT);
				State = 287;
				identifier();
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrictIdentifierContext strictIdentifier() {
			return GetRuleContext<StrictIdentifierContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			strictIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrictIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKQUOTED_IDENTIFIER() { return GetToken(GParser.BACKQUOTED_IDENTIFIER, 0); }
		public StrictIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strictIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterStrictIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitStrictIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrictIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrictIdentifierContext strictIdentifier() {
		StrictIdentifierContext _localctx = new StrictIdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_strictIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKQUOTED_IDENTIFIER() { return GetToken(GParser.BACKQUOTED_IDENTIFIER, 0); }
		public QuotedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterQuotedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitQuotedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuotedIdentifierContext quotedIdentifier() {
		QuotedIdentifierContext _localctx = new QuotedIdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_quotedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(BACKQUOTED_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT_LITERAL() { return GetToken(GParser.BIGINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT_LITERAL() { return GetToken(GParser.SMALLINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT_LITERAL() { return GetToken(GParser.TINYINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(GParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_VALUE() { return GetToken(GParser.DECIMAL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_LITERAL() { return GetToken(GParser.DOUBLE_LITERAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 74, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 183L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(GParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(GParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(GParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(GParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(GParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(GParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(GParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(GParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(GParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(GParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(GParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(GParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(GParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(GParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(GParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(GParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(GParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(GParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(GParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(GParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(GParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(GParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(GParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(GParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(GParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(GParser.NOT, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonReserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.EnterNonReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGListener typedListener = listener as IGListener;
			if (typedListener != null) typedListener.ExitNonReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGVisitor<TResult> typedVisitor = visitor as IGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonReservedContext nonReserved() {
		NonReservedContext _localctx = new NonReservedContext(Context, State);
		EnterRule(_localctx, 76, RULE_nonReserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 70061654014L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
		case 23: return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,74,304,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,1,1,1,3,1,84,8,1,1,2,1,2,1,
		2,5,2,89,8,2,10,2,12,2,92,9,2,1,3,1,3,1,3,1,3,1,3,3,3,99,8,3,1,4,1,4,1,
		4,1,4,1,4,1,4,5,4,107,8,4,10,4,12,4,110,9,4,1,5,1,5,1,6,1,6,1,6,5,6,117,
		8,6,10,6,12,6,120,9,6,1,7,1,7,3,7,124,8,7,1,8,1,8,3,8,128,8,8,1,8,1,8,
		3,8,132,8,8,1,8,3,8,135,8,8,1,8,3,8,138,8,8,1,8,3,8,141,8,8,1,9,1,9,1,
		9,1,9,5,9,147,8,9,10,9,12,9,150,9,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,3,15,168,8,15,1,15,3,15,171,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,183,8,16,1,
		17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,3,20,195,8,20,1,21,1,21,
		1,21,5,21,200,8,21,10,21,12,21,203,9,21,1,22,1,22,1,23,1,23,1,23,1,23,
		3,23,211,8,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,219,8,23,10,23,12,23,
		222,9,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,5,25,251,8,25,10,25,12,25,254,9,25,1,25,1,25,1,25,1,25,1,25,1,25,3,
		25,262,8,25,1,26,1,26,1,27,1,27,3,27,268,8,27,1,28,1,28,1,28,3,28,273,
		8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
		1,33,5,33,289,8,33,10,33,12,33,292,9,33,1,34,1,34,1,35,1,35,1,36,1,36,
		1,37,1,37,1,38,1,38,1,38,0,2,8,46,39,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,0,6,1,0,21,22,2,0,38,38,40,45,1,0,19,20,1,0,66,67,3,0,58,60,62,63,
		65,65,3,0,1,27,30,30,36,36,297,0,78,1,0,0,0,2,81,1,0,0,0,4,85,1,0,0,0,
		6,98,1,0,0,0,8,100,1,0,0,0,10,111,1,0,0,0,12,113,1,0,0,0,14,121,1,0,0,
		0,16,125,1,0,0,0,18,142,1,0,0,0,20,151,1,0,0,0,22,154,1,0,0,0,24,158,1,
		0,0,0,26,161,1,0,0,0,28,163,1,0,0,0,30,165,1,0,0,0,32,182,1,0,0,0,34,184,
		1,0,0,0,36,187,1,0,0,0,38,189,1,0,0,0,40,191,1,0,0,0,42,196,1,0,0,0,44,
		204,1,0,0,0,46,210,1,0,0,0,48,223,1,0,0,0,50,261,1,0,0,0,52,263,1,0,0,
		0,54,267,1,0,0,0,56,272,1,0,0,0,58,274,1,0,0,0,60,276,1,0,0,0,62,278,1,
		0,0,0,64,280,1,0,0,0,66,285,1,0,0,0,68,293,1,0,0,0,70,295,1,0,0,0,72,297,
		1,0,0,0,74,299,1,0,0,0,76,301,1,0,0,0,78,79,3,2,1,0,79,80,5,0,0,1,80,1,
		1,0,0,0,81,83,3,4,2,0,82,84,3,6,3,0,83,82,1,0,0,0,83,84,1,0,0,0,84,3,1,
		0,0,0,85,90,3,8,4,0,86,87,5,37,0,0,87,89,3,8,4,0,88,86,1,0,0,0,89,92,1,
		0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,5,1,0,0,0,92,90,1,0,0,0,93,94,5,8,
		0,0,94,95,5,7,0,0,95,99,3,12,6,0,96,97,5,10,0,0,97,99,5,62,0,0,98,93,1,
		0,0,0,98,96,1,0,0,0,99,7,1,0,0,0,100,101,6,4,-1,0,101,102,3,10,5,0,102,
		108,1,0,0,0,103,104,10,1,0,0,104,105,5,37,0,0,105,107,3,10,5,0,106,103,
		1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,9,1,0,0,0,
		110,108,1,0,0,0,111,112,3,16,8,0,112,11,1,0,0,0,113,118,3,14,7,0,114,115,
		5,53,0,0,115,117,3,14,7,0,116,114,1,0,0,0,117,120,1,0,0,0,118,116,1,0,
		0,0,118,119,1,0,0,0,119,13,1,0,0,0,120,118,1,0,0,0,121,123,3,44,22,0,122,
		124,7,0,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,15,1,0,0,0,125,127,5,1,
		0,0,126,128,3,28,14,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,
		129,131,3,42,21,0,130,132,3,18,9,0,131,130,1,0,0,0,131,132,1,0,0,0,132,
		134,1,0,0,0,133,135,3,20,10,0,134,133,1,0,0,0,134,135,1,0,0,0,135,137,
		1,0,0,0,136,138,3,22,11,0,137,136,1,0,0,0,137,138,1,0,0,0,138,140,1,0,
		0,0,139,141,3,24,12,0,140,139,1,0,0,0,140,141,1,0,0,0,141,17,1,0,0,0,142,
		143,5,2,0,0,143,148,3,30,15,0,144,145,5,53,0,0,145,147,3,30,15,0,146,144,
		1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,19,1,0,0,0,
		150,148,1,0,0,0,151,152,5,5,0,0,152,153,3,46,23,0,153,21,1,0,0,0,154,155,
		5,6,0,0,155,156,5,7,0,0,156,157,3,12,6,0,157,23,1,0,0,0,158,159,5,9,0,
		0,159,160,3,46,23,0,160,25,1,0,0,0,161,162,3,44,22,0,162,27,1,0,0,0,163,
		164,5,4,0,0,164,29,1,0,0,0,165,167,3,36,18,0,166,168,3,32,16,0,167,166,
		1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,171,3,34,17,0,170,169,1,0,
		0,0,170,171,1,0,0,0,171,31,1,0,0,0,172,173,5,31,0,0,173,183,5,28,0,0,174,
		175,5,32,0,0,175,183,5,28,0,0,176,177,5,33,0,0,177,183,5,28,0,0,178,179,
		5,34,0,0,179,183,5,28,0,0,180,181,5,29,0,0,181,183,5,28,0,0,182,172,1,
		0,0,0,182,174,1,0,0,0,182,176,1,0,0,0,182,178,1,0,0,0,182,180,1,0,0,0,
		183,33,1,0,0,0,184,185,5,35,0,0,185,186,3,46,23,0,186,35,1,0,0,0,187,188,
		3,38,19,0,188,37,1,0,0,0,189,190,5,66,0,0,190,39,1,0,0,0,191,194,3,44,
		22,0,192,193,5,3,0,0,193,195,5,66,0,0,194,192,1,0,0,0,194,195,1,0,0,0,
		195,41,1,0,0,0,196,201,3,40,20,0,197,198,5,53,0,0,198,200,3,40,20,0,199,
		197,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,43,1,0,
		0,0,203,201,1,0,0,0,204,205,3,46,23,0,205,45,1,0,0,0,206,207,6,23,-1,0,
		207,208,5,14,0,0,208,211,3,46,23,2,209,211,3,48,24,0,210,206,1,0,0,0,210,
		209,1,0,0,0,211,220,1,0,0,0,212,213,10,4,0,0,213,214,5,11,0,0,214,219,
		3,46,23,5,215,216,10,3,0,0,216,217,5,12,0,0,217,219,3,46,23,4,218,212,
		1,0,0,0,218,215,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,
		0,221,47,1,0,0,0,222,220,1,0,0,0,223,224,3,50,25,0,224,49,1,0,0,0,225,
		226,3,52,26,0,226,227,3,58,29,0,227,228,3,52,26,0,228,262,1,0,0,0,229,
		230,3,52,26,0,230,231,5,17,0,0,231,232,5,18,0,0,232,262,1,0,0,0,233,234,
		3,52,26,0,234,235,5,17,0,0,235,236,5,14,0,0,236,237,5,18,0,0,237,262,1,
		0,0,0,238,239,3,52,26,0,239,240,5,15,0,0,240,241,3,52,26,0,241,242,5,12,
		0,0,242,243,3,52,26,0,243,262,1,0,0,0,244,245,3,52,26,0,245,246,5,13,0,
		0,246,247,5,54,0,0,247,252,3,52,26,0,248,249,5,53,0,0,249,251,3,52,26,
		0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,
		255,1,0,0,0,254,252,1,0,0,0,255,256,5,55,0,0,256,262,1,0,0,0,257,258,3,
		52,26,0,258,259,5,16,0,0,259,260,3,52,26,0,260,262,1,0,0,0,261,225,1,0,
		0,0,261,229,1,0,0,0,261,233,1,0,0,0,261,238,1,0,0,0,261,244,1,0,0,0,261,
		257,1,0,0,0,262,51,1,0,0,0,263,264,3,54,27,0,264,53,1,0,0,0,265,268,3,
		56,28,0,266,268,3,68,34,0,267,265,1,0,0,0,267,266,1,0,0,0,268,55,1,0,0,
		0,269,273,5,57,0,0,270,273,3,74,37,0,271,273,3,60,30,0,272,269,1,0,0,0,
		272,270,1,0,0,0,272,271,1,0,0,0,273,57,1,0,0,0,274,275,7,1,0,0,275,59,
		1,0,0,0,276,277,7,2,0,0,277,61,1,0,0,0,278,279,5,66,0,0,279,63,1,0,0,0,
		280,281,5,24,0,0,281,282,3,46,23,0,282,283,5,25,0,0,283,284,3,44,22,0,
		284,65,1,0,0,0,285,290,3,68,34,0,286,287,5,56,0,0,287,289,3,68,34,0,288,
		286,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,67,1,0,
		0,0,292,290,1,0,0,0,293,294,3,70,35,0,294,69,1,0,0,0,295,296,7,3,0,0,296,
		71,1,0,0,0,297,298,5,67,0,0,298,73,1,0,0,0,299,300,7,4,0,0,300,75,1,0,
		0,0,301,302,7,5,0,0,302,77,1,0,0,0,25,83,90,98,108,118,123,127,131,134,
		137,140,148,167,170,182,194,201,210,218,220,252,261,267,272,290
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SQLParser.Parsers.TSql
