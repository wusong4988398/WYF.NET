//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TSqlParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SQLParser.Parsers.TSql {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TSqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CCC=1, ADD=2, ALL=3, ALTER=4, AND=5, ANY=6, AS=7, ASC=8, AUTHORIZATION=9, 
		ACCELERATED_DATABASE_RECOVERY=10, BACKSLASH=11, BACKUP=12, BEGIN=13, BETWEEN=14, 
		BREAK=15, BROWSE=16, BULK=17, BY=18, CASCADE=19, CASE=20, CHECK=21, CHECKPOINT=22, 
		CLOSE=23, CLUSTERED=24, COALESCE=25, COLLATE=26, COLUMN=27, COMMIT=28, 
		COMPUTE=29, CONSTRAINT=30, CONTAINS=31, CONTAINSTABLE=32, CONTINUE=33, 
		CONVERT=34, CREATE=35, CROSS=36, CURRENT=37, CURRENT_DATE=38, CURRENT_TIME=39, 
		CURRENT_TIMESTAMP=40, CURRENT_USER=41, CURSOR=42, DATABASE=43, DBCC=44, 
		DEALLOCATE=45, DECLARE=46, DEFAULT=47, DELETE=48, DENY=49, DESC=50, DISK=51, 
		DISTINCT=52, DISTRIBUTED=53, DOUBLE=54, DOUBLE_BACK_SLASH=55, DOUBLE_FORWARD_SLASH=56, 
		DROP=57, DUMP=58, ELSE=59, END=60, ERRLVL=61, ESCAPE=62, EXCEPT=63, EXECUTE=64, 
		EXISTS=65, EXIT=66, EXTERNAL=67, FETCH=68, FILE=69, FILLFACTOR=70, FOR=71, 
		FOREIGN=72, FREETEXT=73, FREETEXTTABLE=74, FROM=75, FULL=76, FUNCTION=77, 
		GOTO=78, GRANT=79, GROUP=80, HAVING=81, HOLDLOCK=82, IDENTITY=83, IDENTITY_INSERT=84, 
		IDENTITYCOL=85, IF=86, IN=87, INDEX=88, INNER=89, INSERT=90, INTERSECT=91, 
		INTO=92, IS=93, JOIN=94, KEY=95, KILL=96, LEFT=97, LIKE=98, LINENO=99, 
		LOAD=100, MERGE=101, NATIONAL=102, NEGOTIATE=103, NOCHECK=104, NONCLUSTERED=105, 
		NOT=106, NULL_=107, NULLIF=108, OF=109, OFF=110, OFFSETS=111, ON=112, 
		OPEN=113, OPENDATASOURCE=114, OPENQUERY=115, OPENROWSET=116, OPENJSON=117, 
		OPENXML=118, OPTION=119, OR=120, ORDER=121, OUTER=122, OVER=123, PERCENT=124, 
		PIVOT=125, PLAN=126, PRECISION=127, PRIMARY=128, PRINT=129, PROC=130, 
		PROCEDURE=131, PUBLIC=132, RAISERROR=133, RAW=134, READ=135, READTEXT=136, 
		RECONFIGURE=137, REFERENCES=138, REPLICATION=139, RESTORE=140, RESTRICT=141, 
		RETURN=142, REVERT=143, REVOKE=144, RIGHT=145, ROLLBACK=146, ROWCOUNT=147, 
		ROWGUIDCOL=148, RULE=149, SAVE=150, SCHEMA=151, SECURITYAUDIT=152, SELECT=153, 
		SEMANTICKEYPHRASETABLE=154, SEMANTICSIMILARITYDETAILSTABLE=155, SEMANTICSIMILARITYTABLE=156, 
		SESSION_USER=157, SET=158, SETUSER=159, SHUTDOWN=160, SOME=161, STATISTICS=162, 
		SYSTEM_USER=163, TABLE=164, TABLESAMPLE=165, TEXTSIZE=166, THEN=167, TO=168, 
		TOP=169, TRAN=170, TRANSACTION=171, TRIGGER=172, TRUNCATE=173, TSEQUAL=174, 
		UNION=175, UNIQUE=176, UNPIVOT=177, UPDATE=178, UPDATETEXT=179, USE=180, 
		USER=181, VALUES=182, VARYING=183, VIEW=184, WAITFOR=185, WHEN=186, WHERE=187, 
		WHILE=188, WITH=189, WITHIN=190, WRITETEXT=191, DOLLAR_PARTITION=192, 
		ABSOLUTE=193, AT_KEYWORD=194, ACCENT_SENSITIVITY=195, ACCESS=196, ACTION=197, 
		ACTIVATION=198, ACTIVE=199, ADDRESS=200, AES_128=201, AES_192=202, AES_256=203, 
		AFFINITY=204, AFTER=205, AGGREGATE=206, ALGORITHM=207, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=208, 
		ALLOW_SNAPSHOT_ISOLATION=209, ALLOWED=210, ANSI_NULL_DEFAULT=211, ANSI_NULLS=212, 
		ANSI_PADDING=213, ANSI_WARNINGS=214, APPLICATION_LOG=215, APPLY=216, ARITHABORT=217, 
		ASSEMBLY=218, AUDIT=219, AUDIT_GUID=220, AUTO=221, AUTO_CLEANUP=222, AUTO_CLOSE=223, 
		AUTO_CREATE_STATISTICS=224, AUTO_SHRINK=225, AUTO_UPDATE_STATISTICS=226, 
		AUTO_UPDATE_STATISTICS_ASYNC=227, AUTOGROW_ALL_FILES=228, AUTOGROW_SINGLE_FILE=229, 
		AVAILABILITY=230, AVG=231, BACKUP_PRIORITY=232, BEGIN_DIALOG=233, BIGINT=234, 
		BINARY_KEYWORD=235, BINARY_BASE64=236, BINARY_CHECKSUM=237, BINDING=238, 
		BLOB_STORAGE=239, BROKER=240, BROKER_INSTANCE=241, BULK_LOGGED=242, CALLER=243, 
		CAP_CPU_PERCENT=244, CAST=245, TRY_CAST=246, CATALOG=247, CATCH=248, CHANGE=249, 
		CHANGE_RETENTION=250, CHANGE_TRACKING=251, CHECKSUM=252, CHECKSUM_AGG=253, 
		CLEANUP=254, COLLECTION=255, COLUMN_MASTER_KEY=256, COLUMNSTORE=257, COMMITTED=258, 
		COMPATIBILITY_LEVEL=259, CONCAT=260, CONCAT_NULL_YIELDS_NULL=261, CONTENT=262, 
		CONTROL=263, COOKIE=264, COUNT=265, COUNT_BIG=266, COUNTER=267, CPU=268, 
		CREATE_NEW=269, CREATION_DISPOSITION=270, CREDENTIAL=271, CRYPTOGRAPHIC=272, 
		CUME_DIST=273, CURSOR_CLOSE_ON_COMMIT=274, CURSOR_DEFAULT=275, DATA=276, 
		DATE_CORRELATION_OPTIMIZATION=277, DATEADD=278, DATEDIFF=279, DATENAME=280, 
		DATEPART=281, DAYS=282, DB_CHAINING=283, DB_FAILOVER=284, DECRYPTION=285, 
		DEFAULT_DOUBLE_QUOTE=286, DEFAULT_FULLTEXT_LANGUAGE=287, DEFAULT_LANGUAGE=288, 
		DEFINITION=289, DELAY=290, DELAYED_DURABILITY=291, DELETED=292, DENSE_RANK=293, 
		DEPENDENTS=294, DES=295, DESCRIPTION=296, DESX=297, DHCP=298, DIALOG=299, 
		DIRECTORY_NAME=300, DISABLE=301, DISABLE_BROKER=302, DISABLED=303, DISK_DRIVE=304, 
		DOCUMENT=305, DYNAMIC=306, ELEMENTS=307, EMERGENCY=308, EMPTY=309, ENABLE=310, 
		ENABLE_BROKER=311, ENCRYPTED_VALUE=312, ENCRYPTION=313, ENDPOINT_URL=314, 
		ERROR_BROKER_CONVERSATIONS=315, EXCLUSIVE=316, EXECUTABLE=317, EXIST=318, 
		EXPAND=319, EXPIRY_DATE=320, EXPLICIT=321, FAIL_OPERATION=322, FAILOVER_MODE=323, 
		FAILURE=324, FAILURE_CONDITION_LEVEL=325, FAST=326, FAST_FORWARD=327, 
		FILEGROUP=328, FILEGROWTH=329, FILENAME=330, FILEPATH=331, FILESTREAM=332, 
		FILTER=333, FIRST=334, FIRST_VALUE=335, FOLLOWING=336, FORCE=337, FORCE_FAILOVER_ALLOW_DATA_LOSS=338, 
		FORCED=339, FORMAT=340, FORWARD_ONLY=341, FULLSCAN=342, FULLTEXT=343, 
		GB=344, GETDATE=345, GETUTCDATE=346, GLOBAL=347, GO_BATCH=348, GO=349, 
		GROUP_MAX_REQUESTS=350, GROUPING=351, GROUPING_ID=352, HADR=353, HASH=354, 
		HEALTH_CHECK_TIMEOUT=355, HIGH=356, HONOR_BROKER_PRIORITY=357, HOURS=358, 
		IDENTITY_VALUE=359, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=360, IMMEDIATE=361, 
		IMPERSONATE=362, IMPORTANCE=363, INCLUDE_NULL_VALUES=364, INCREMENTAL=365, 
		INITIATOR=366, INPUT=367, INSENSITIVE=368, INSERTED=369, INT=370, IP=371, 
		ISOLATION=372, JOB=373, JSON=374, KB=375, KEEP=376, KEEPFIXED=377, KEY_SOURCE=378, 
		KEYS=379, KEYSET=380, LAG=381, LAST=382, LAST_VALUE=383, LEAD=384, LEVEL=385, 
		LIST=386, LISTENER=387, LISTENER_URL=388, LOB_COMPACTION=389, LOCAL=390, 
		LOCATION=391, LOCK=392, LOCK_ESCALATION=393, LOGIN=394, LOOP=395, LOW=396, 
		MANUAL=397, MARK=398, MATERIALIZED=399, MAX=400, MAX_CPU_PERCENT=401, 
		MAX_DOP=402, MAX_FILES=403, MAX_IOPS_PER_VOLUME=404, MAX_MEMORY_PERCENT=405, 
		MAX_PROCESSES=406, MAX_QUEUE_READERS=407, MAX_ROLLOVER_FILES=408, MAXDOP=409, 
		MAXRECURSION=410, MAXSIZE=411, MB=412, MEDIUM=413, MEMORY_OPTIMIZED_DATA=414, 
		MESSAGE=415, MIN=416, MIN_ACTIVE_ROWVERSION=417, MIN_CPU_PERCENT=418, 
		MIN_IOPS_PER_VOLUME=419, MIN_MEMORY_PERCENT=420, MINUTES=421, MIRROR_ADDRESS=422, 
		MIXED_PAGE_ALLOCATION=423, MODE=424, MODIFY=425, MOVE=426, MULTI_USER=427, 
		NAME=428, NESTED_TRIGGERS=429, NEW_ACCOUNT=430, NEW_BROKER=431, NEW_PASSWORD=432, 
		NEWNAME=433, NEXT=434, NO=435, NO_TRUNCATE=436, NO_WAIT=437, NOCOUNT=438, 
		NODES=439, NOEXPAND=440, NON_TRANSACTED_ACCESS=441, NORECOMPUTE=442, NORECOVERY=443, 
		NOTIFICATIONS=444, NOWAIT=445, NTILE=446, NUMANODE=447, NUMBER=448, NUMERIC_ROUNDABORT=449, 
		OBJECT=450, OFFLINE=451, OFFSET=452, OLD_ACCOUNT=453, ONLINE=454, ONLY=455, 
		OPEN_EXISTING=456, OPTIMISTIC=457, OPTIMIZE=458, OUT=459, OUTPUT=460, 
		OVERRIDE=461, OWNER=462, OWNERSHIP=463, PAGE_VERIFY=464, PARAMETERIZATION=465, 
		PARTITION=466, PARTITIONS=467, PARTNER=468, PATH=469, PERCENT_RANK=470, 
		PERCENTILE_CONT=471, PERCENTILE_DISC=472, POISON_MESSAGE_HANDLING=473, 
		POOL=474, PORT=475, PRECEDING=476, PRIMARY_ROLE=477, PRIOR=478, PRIORITY=479, 
		PRIORITY_LEVEL=480, PRIVATE=481, PRIVATE_KEY=482, PRIVILEGES=483, PROCEDURE_NAME=484, 
		PROPERTY=485, PROVIDER=486, PROVIDER_KEY_NAME=487, QUERY=488, QUEUE=489, 
		QUEUE_DELAY=490, QUOTED_IDENTIFIER=491, RANGE=492, RANK=493, RC2=494, 
		RC4=495, RC4_128=496, READ_COMMITTED_SNAPSHOT=497, READ_ONLY=498, READ_ONLY_ROUTING_LIST=499, 
		READ_WRITE=500, READONLY=501, READWRITE=502, REBUILD=503, RECEIVE=504, 
		RECOMPILE=505, RECOVERY=506, RECURSIVE_TRIGGERS=507, RELATIVE=508, REMOTE=509, 
		REMOTE_SERVICE_NAME=510, REMOVE=511, REORGANIZE=512, REPEATABLE=513, REPLICA=514, 
		REQUEST_MAX_CPU_TIME_SEC=515, REQUEST_MAX_MEMORY_GRANT_PERCENT=516, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=517, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=518, RESERVE_DISK_SPACE=519, 
		RESOURCE=520, RESOURCE_MANAGER_LOCATION=521, RESTRICTED_USER=522, RETENTION=523, 
		ROBUST=524, ROOT=525, ROUTE=526, ROW=527, ROW_NUMBER=528, ROWGUID=529, 
		ROWS=530, SAMPLE=531, SCHEMABINDING=532, SCOPED=533, SCROLL=534, SCROLL_LOCKS=535, 
		SEARCH=536, SECONDARY=537, SECONDARY_ONLY=538, SECONDARY_ROLE=539, SECONDS=540, 
		SECRET=541, SECURABLES=542, SECURITY=543, SECURITY_LOG=544, SEEDING_MODE=545, 
		SELF=546, SEMI_SENSITIVE=547, SEND=548, SENT=549, SEQUENCE=550, SERIALIZABLE=551, 
		SESSION_TIMEOUT=552, SETERROR=553, SHARE=554, SHOWPLAN=555, SIGNATURE=556, 
		SIMPLE=557, SINGLE_USER=558, SIZE=559, SMALLINT=560, SNAPSHOT=561, SPATIAL_WINDOW_MAX_CELLS=562, 
		STANDBY=563, START_DATE=564, STATIC=565, STATS_STREAM=566, STATUS=567, 
		STATUSONLY=568, STDEV=569, STDEVP=570, STOPLIST=571, STRING_AGG=572, STUFF=573, 
		SUBJECT=574, SUBSCRIBE=575, SUBSCRIPTION=576, SUM=577, SUSPEND=578, SYMMETRIC=579, 
		SYNCHRONOUS_COMMIT=580, SYNONYM=581, SYSTEM=582, TAKE=583, TARGET_RECOVERY_TIME=584, 
		TB=585, TEXTIMAGE_ON=586, THROW=587, TIES=588, TIME=589, TIMEOUT=590, 
		TIMER=591, TINYINT=592, TORN_PAGE_DETECTION=593, TRACKING=594, TRANSFORM_NOISE_WORDS=595, 
		TRIPLE_DES=596, TRIPLE_DES_3KEY=597, TRUSTWORTHY=598, TRY=599, TSQL=600, 
		TWO_DIGIT_YEAR_CUTOFF=601, TYPE=602, TYPE_WARNING=603, UNBOUNDED=604, 
		UNCOMMITTED=605, UNKNOWN=606, UNLIMITED=607, UNMASK=608, UOW=609, USING=610, 
		VALID_XML=611, VALIDATION=612, VALUE=613, VAR=614, VARBINARY_KEYWORD=615, 
		VARP=616, VIEW_METADATA=617, VIEWS=618, WAIT=619, WELL_FORMED_XML=620, 
		WITHOUT_ARRAY_WRAPPER=621, WORK=622, WORKLOAD=623, XML=624, XMLDATA=625, 
		XMLNAMESPACES=626, XMLSCHEMA=627, XSINIL=628, ZONE=629, DOLLAR_ACTION=630, 
		ABORT_AFTER_WAIT=631, ABSENT=632, ADMINISTER=633, AES=634, ALLOW_CONNECTIONS=635, 
		ALLOW_MULTIPLE_EVENT_LOSS=636, ALLOW_SINGLE_EVENT_LOSS=637, ANONYMOUS=638, 
		APPEND=639, APPLICATION=640, ASYMMETRIC=641, ASYNCHRONOUS_COMMIT=642, 
		AUTHENTICATE=643, AUTHENTICATION=644, AUTOMATED_BACKUP_PREFERENCE=645, 
		AUTOMATIC=646, AVAILABILITY_MODE=647, BEFORE=648, BLOCK=649, BLOCKERS=650, 
		BLOCKSIZE=651, BLOCKING_HIERARCHY=652, BUFFER=653, BUFFERCOUNT=654, CACHE=655, 
		CALLED=656, CERTIFICATE=657, CHANGETABLE=658, CHANGES=659, CHECK_POLICY=660, 
		CHECK_EXPIRATION=661, CLASSIFIER_FUNCTION=662, CLUSTER=663, COMPRESSION=664, 
		CONNECT=665, CONNECTION=666, CONFIGURATION=667, CONTAINMENT=668, CONTEXT=669, 
		CONTINUE_AFTER_ERROR=670, CONTRACT=671, CONTRACT_NAME=672, CONVERSATION=673, 
		COPY_ONLY=674, CYCLE=675, DATA_COMPRESSION=676, DATA_SOURCE=677, DATABASE_MIRRORING=678, 
		DATASPACE=679, DDL=680, DEFAULT_DATABASE=681, DEFAULT_SCHEMA=682, DIAGNOSTICS=683, 
		DIFFERENTIAL=684, DISTRIBUTION=685, DTC_SUPPORT=686, ENABLED=687, ENDPOINT=688, 
		ERROR=689, EVENT=690, EVENTDATA=691, EVENT_RETENTION_MODE=692, EXECUTABLE_FILE=693, 
		EXPIREDATE=694, EXTENSION=695, EXTERNAL_ACCESS=696, FAILOVER=697, FAILURECONDITIONLEVEL=698, 
		FAN_IN=699, FILE_SNAPSHOT=700, FORCESEEK=701, FORCE_SERVICE_ALLOW_DATA_LOSS=702, 
		GET=703, GOVERNOR=704, HASHED=705, HEALTHCHECKTIMEOUT=706, HEAP=707, IIF=708, 
		IO=709, INCLUDE=710, INCREMENT=711, INFINITE=712, INIT=713, INSTEAD=714, 
		ISNULL=715, KERBEROS=716, KEY_PATH=717, KEY_STORE_PROVIDER_NAME=718, LANGUAGE=719, 
		LIBRARY=720, LIFETIME=721, LINKED=722, LINUX=723, LISTENER_IP=724, LISTENER_PORT=725, 
		LOCAL_SERVICE_NAME=726, LOG=727, MASK=728, MATCHED=729, MASTER=730, MAX_MEMORY=731, 
		MAXTRANSFER=732, MAXVALUE=733, MAX_DISPATCH_LATENCY=734, MAX_DURATION=735, 
		MAX_EVENT_SIZE=736, MAX_SIZE=737, MAX_OUTSTANDING_IO_PER_VOLUME=738, MEDIADESCRIPTION=739, 
		MEDIANAME=740, MEMBER=741, MEMORY_PARTITION_MODE=742, MESSAGE_FORWARDING=743, 
		MESSAGE_FORWARD_SIZE=744, MINVALUE=745, MIRROR=746, MUST_CHANGE=747, NOFORMAT=748, 
		NOINIT=749, NONE=750, NOREWIND=751, NOSKIP=752, NOUNLOAD=753, NO_CHECKSUM=754, 
		NO_COMPRESSION=755, NO_EVENT_LOSS=756, NOTIFICATION=757, NTLM=758, OLD_PASSWORD=759, 
		ON_FAILURE=760, OPERATIONS=761, PAGE=762, PARAM_NODE=763, PARTIAL=764, 
		PASSWORD=765, PERMISSION_SET=766, PER_CPU=767, PER_DB=768, PER_NODE=769, 
		PERSISTED=770, PLATFORM=771, POLICY=772, PREDICATE=773, PROCESS=774, PROFILE=775, 
		PYTHON=776, R=777, READ_WRITE_FILEGROUPS=778, REGENERATE=779, RELATED_CONVERSATION=780, 
		RELATED_CONVERSATION_GROUP=781, REPLICATE=782, REQUIRED=783, RESET=784, 
		RESOURCES=785, RESTART=786, RESUME=787, RETAINDAYS=788, RETURNS=789, REWIND=790, 
		ROLE=791, ROUND_ROBIN=792, RSA_512=793, RSA_1024=794, RSA_2048=795, RSA_3072=796, 
		RSA_4096=797, SAFETY=798, SAFE=799, SCHEDULER=800, SCHEME=801, SCRIPT=802, 
		SERVER=803, SERVICE=804, SERVICE_BROKER=805, SERVICE_NAME=806, SESSION=807, 
		SETTINGS=808, SHRINKLOG=809, SID=810, SKIP_KEYWORD=811, SOFTNUMA=812, 
		SOURCE=813, SPECIFICATION=814, SPLIT=815, SQL=816, SQLDUMPERFLAGS=817, 
		SQLDUMPERPATH=818, SQLDUMPERTIMEOUT=819, STATE=820, STATS=821, START=822, 
		STARTED=823, STARTUP_STATE=824, STOP=825, STOPPED=826, STOP_ON_ERROR=827, 
		SUPPORTED=828, SWITCH=829, TAPE=830, TARGET=831, TCP=832, TRACE=833, TRACK_CAUSALITY=834, 
		TRANSFER=835, UNCHECKED=836, UNLOCK=837, UNSAFE=838, URL=839, USED=840, 
		VERBOSELOGGING=841, VISIBILITY=842, WAIT_AT_LOW_PRIORITY=843, WINDOWS=844, 
		WITHOUT=845, WITNESS=846, XACT_ABORT=847, VARCHAR=848, NVARCHAR=849, SPACE=850, 
		COMMENT=851, LINE_COMMENT=852, DOUBLE_QUOTE_ID=853, SINGLE_QUOTE=854, 
		SQUARE_BRACKET_ID=855, LOCAL_ID=856, DECIMAL=857, ID=858, STRING=859, 
		BINARY=860, FLOAT=861, REAL=862, EQUAL=863, GREATER=864, LESS=865, EXCLAMATION=866, 
		PLUS_ASSIGN=867, MINUS_ASSIGN=868, MULT_ASSIGN=869, DIV_ASSIGN=870, MOD_ASSIGN=871, 
		AND_ASSIGN=872, XOR_ASSIGN=873, OR_ASSIGN=874, DOUBLE_BAR=875, DOT=876, 
		UNDERLINE=877, AT=878, SHARP=879, DOLLAR=880, LR_BRACKET=881, RR_BRACKET=882, 
		COMMA=883, SEMI=884, COLON=885, DOUBLE_COLON=886, STAR=887, DIVIDE=888, 
		MODULE=889, PLUS=890, MINUS=891, BIT_NOT=892, BIT_OR=893, BIT_AND=894, 
		BIT_XOR=895, PAUSE=896, ABORT=897, IPV4_ADDR=898, IPV6_ADDR=899, ANSI_DEFAULTS=900, 
		ANSI_NULL_DFLT_OFF=901, ANSI_NULL_DFLT_ON=902, ARITHIGNORE=903, FMTONLY=904, 
		FORCEPLAN=905, IMPLICIT_TRANSACTIONS=906, NOEXEol=907, PARSEONLY=908, 
		REMOTE_PROC_TRANSACTIONS=909, SHOWPLAN_ALL=910, SHOWPLAN_TEXT=911, SHOWPLAN_XML=912, 
		VERSION=913;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_batch_level_statement = 2, RULE_sql_clauses = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_create_application_role = 26, RULE_drop_aggregate = 27, RULE_drop_application_role = 28, 
		RULE_alter_assembly = 29, RULE_alter_assembly_start = 30, RULE_alter_assembly_clause = 31, 
		RULE_alter_assembly_from_clause = 32, RULE_alter_assembly_from_clause_start = 33, 
		RULE_alter_assembly_drop_clause = 34, RULE_alter_assembly_drop_multiple_files = 35, 
		RULE_alter_assembly_drop = 36, RULE_alter_assembly_add_clause = 37, RULE_alter_asssembly_add_clause_start = 38, 
		RULE_alter_assembly_client_file_clause = 39, RULE_alter_assembly_file_name = 40, 
		RULE_alter_assembly_file_bits = 41, RULE_alter_assembly_as = 42, RULE_alter_assembly_with_clause = 43, 
		RULE_alter_assembly_with = 44, RULE_client_assembly_specifier = 45, RULE_assembly_option = 46, 
		RULE_network_file_share = 47, RULE_network_computer = 48, RULE_network_file_start = 49, 
		RULE_file_path = 50, RULE_file_directory_path_separator = 51, RULE_local_file = 52, 
		RULE_local_drive = 53, RULE_multiple_local_files = 54, RULE_multiple_local_file_start = 55, 
		RULE_create_assembly = 56, RULE_drop_assembly = 57, RULE_alter_asymmetric_key = 58, 
		RULE_alter_asymmetric_key_start = 59, RULE_asymmetric_key_option = 60, 
		RULE_asymmetric_key_option_start = 61, RULE_asymmetric_key_password_change_option = 62, 
		RULE_create_asymmetric_key = 63, RULE_drop_asymmetric_key = 64, RULE_alter_authorization = 65, 
		RULE_authorization_grantee = 66, RULE_entity_to = 67, RULE_colon_colon = 68, 
		RULE_alter_authorization_start = 69, RULE_alter_authorization_for_sql_database = 70, 
		RULE_alter_authorization_for_azure_dw = 71, RULE_alter_authorization_for_parallel_dw = 72, 
		RULE_class_type = 73, RULE_class_type_for_sql_database = 74, RULE_class_type_for_azure_dw = 75, 
		RULE_class_type_for_parallel_dw = 76, RULE_class_type_for_grant = 77, 
		RULE_drop_availability_group = 78, RULE_alter_availability_group = 79, 
		RULE_alter_availability_group_start = 80, RULE_alter_availability_group_options = 81, 
		RULE_ip_v4_failover = 82, RULE_ip_v6_failover = 83, RULE_create_or_alter_broker_priority = 84, 
		RULE_drop_broker_priority = 85, RULE_alter_certificate = 86, RULE_alter_column_encryption_key = 87, 
		RULE_create_column_encryption_key = 88, RULE_drop_certificate = 89, RULE_drop_column_encryption_key = 90, 
		RULE_drop_column_master_key = 91, RULE_drop_contract = 92, RULE_drop_credential = 93, 
		RULE_drop_cryptograhic_provider = 94, RULE_drop_database = 95, RULE_drop_database_audit_specification = 96, 
		RULE_drop_database_encryption_key = 97, RULE_drop_database_scoped_credential = 98, 
		RULE_drop_default = 99, RULE_drop_endpoint = 100, RULE_drop_external_data_source = 101, 
		RULE_drop_external_file_format = 102, RULE_drop_external_library = 103, 
		RULE_drop_external_resource_pool = 104, RULE_drop_external_table = 105, 
		RULE_drop_event_notifications = 106, RULE_drop_event_session = 107, RULE_drop_fulltext_catalog = 108, 
		RULE_drop_fulltext_index = 109, RULE_drop_fulltext_stoplist = 110, RULE_drop_login = 111, 
		RULE_drop_master_key = 112, RULE_drop_message_type = 113, RULE_drop_partition_function = 114, 
		RULE_drop_partition_scheme = 115, RULE_drop_queue = 116, RULE_drop_remote_service_binding = 117, 
		RULE_drop_resource_pool = 118, RULE_drop_db_role = 119, RULE_drop_route = 120, 
		RULE_drop_rule = 121, RULE_drop_schema = 122, RULE_drop_search_property_list = 123, 
		RULE_drop_security_policy = 124, RULE_drop_sequence = 125, RULE_drop_server_audit = 126, 
		RULE_drop_server_audit_specification = 127, RULE_drop_server_role = 128, 
		RULE_drop_service = 129, RULE_drop_signature = 130, RULE_drop_statistics_name_azure_dw_and_pdw = 131, 
		RULE_drop_symmetric_key = 132, RULE_drop_synonym = 133, RULE_drop_user = 134, 
		RULE_drop_workload_group = 135, RULE_drop_xml_schema_collection = 136, 
		RULE_disable_trigger = 137, RULE_enable_trigger = 138, RULE_lock_table = 139, 
		RULE_truncate_table = 140, RULE_create_column_master_key = 141, RULE_alter_credential = 142, 
		RULE_create_credential = 143, RULE_alter_cryptographic_provider = 144, 
		RULE_create_cryptographic_provider = 145, RULE_create_event_notification = 146, 
		RULE_create_or_alter_event_session = 147, RULE_event_session_predicate_expression = 148, 
		RULE_event_session_predicate_factor = 149, RULE_event_session_predicate_leaf = 150, 
		RULE_alter_external_data_source = 151, RULE_alter_external_library = 152, 
		RULE_create_external_library = 153, RULE_alter_external_resource_pool = 154, 
		RULE_create_external_resource_pool = 155, RULE_alter_fulltext_catalog = 156, 
		RULE_create_fulltext_catalog = 157, RULE_alter_fulltext_stoplist = 158, 
		RULE_create_fulltext_stoplist = 159, RULE_alter_login_sql_server = 160, 
		RULE_create_login_sql_server = 161, RULE_alter_login_azure_sql = 162, 
		RULE_create_login_azure_sql = 163, RULE_alter_login_azure_sql_dw_and_pdw = 164, 
		RULE_create_login_pdw = 165, RULE_alter_master_key_sql_server = 166, RULE_create_master_key_sql_server = 167, 
		RULE_alter_master_key_azure_sql = 168, RULE_create_master_key_azure_sql = 169, 
		RULE_alter_message_type = 170, RULE_alter_partition_function = 171, RULE_alter_partition_scheme = 172, 
		RULE_alter_remote_service_binding = 173, RULE_create_remote_service_binding = 174, 
		RULE_create_resource_pool = 175, RULE_alter_resource_governor = 176, RULE_alter_db_role = 177, 
		RULE_create_db_role = 178, RULE_create_route = 179, RULE_create_rule = 180, 
		RULE_alter_schema_sql = 181, RULE_create_schema = 182, RULE_create_schema_azure_sql_dw_and_pdw = 183, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 184, RULE_create_search_property_list = 185, 
		RULE_create_security_policy = 186, RULE_alter_sequence = 187, RULE_create_sequence = 188, 
		RULE_alter_server_audit = 189, RULE_create_server_audit = 190, RULE_alter_server_audit_specification = 191, 
		RULE_create_server_audit_specification = 192, RULE_alter_server_configuration = 193, 
		RULE_alter_server_role = 194, RULE_create_server_role = 195, RULE_alter_server_role_pdw = 196, 
		RULE_alter_service = 197, RULE_create_service = 198, RULE_alter_service_master_key = 199, 
		RULE_alter_symmetric_key = 200, RULE_create_synonym = 201, RULE_alter_user = 202, 
		RULE_create_user = 203, RULE_create_user_azure_sql_dw = 204, RULE_alter_user_azure_sql = 205, 
		RULE_alter_workload_group = 206, RULE_create_workload_group = 207, RULE_create_xml_schema_collection = 208, 
		RULE_create_partition_function = 209, RULE_create_partition_scheme = 210, 
		RULE_create_queue = 211, RULE_queue_settings = 212, RULE_alter_queue = 213, 
		RULE_queue_action = 214, RULE_queue_rebuild_options = 215, RULE_create_contract = 216, 
		RULE_conversation_statement = 217, RULE_message_statement = 218, RULE_merge_statement = 219, 
		RULE_when_matches = 220, RULE_merge_matched = 221, RULE_merge_not_matched = 222, 
		RULE_delete_statement = 223, RULE_delete_statement_from = 224, RULE_insert_statement = 225, 
		RULE_insert_statement_value = 226, RULE_receive_statement = 227, RULE_select_statement_standalone = 228, 
		RULE_select_statement = 229, RULE_time = 230, RULE_update_statement = 231, 
		RULE_output_clause = 232, RULE_output_dml_list_elem = 233, RULE_create_database = 234, 
		RULE_create_index = 235, RULE_alter_index = 236, RULE_rebuild_partition = 237, 
		RULE_create_columnstore_index = 238, RULE_create_nonclustered_columnstore_index = 239, 
		RULE_create_xml_index = 240, RULE_create_or_alter_procedure = 241, RULE_as_external_name = 242, 
		RULE_create_or_alter_trigger = 243, RULE_create_or_alter_dml_trigger = 244, 
		RULE_dml_trigger_option = 245, RULE_dml_trigger_operation = 246, RULE_create_or_alter_ddl_trigger = 247, 
		RULE_ddl_trigger_operation = 248, RULE_create_or_alter_function = 249, 
		RULE_func_body_returns_select = 250, RULE_func_body_returns_table = 251, 
		RULE_func_body_returns_scalar = 252, RULE_procedure_param = 253, RULE_procedure_option = 254, 
		RULE_function_option = 255, RULE_create_statistics = 256, RULE_update_statistics = 257, 
		RULE_create_table = 258, RULE_table_indices = 259, RULE_table_options = 260, 
		RULE_create_view = 261, RULE_view_attribute = 262, RULE_alter_table = 263, 
		RULE_switch_partition = 264, RULE_low_priority_lock_wait = 265, RULE_alter_database = 266, 
		RULE_add_or_modify_files = 267, RULE_filespec = 268, RULE_add_or_modify_filegroups = 269, 
		RULE_filegroup_updatability_option = 270, RULE_database_optionspec = 271, 
		RULE_auto_option = 272, RULE_change_tracking_option = 273, RULE_change_tracking_option_list = 274, 
		RULE_containment_option = 275, RULE_cursor_option = 276, RULE_alter_endpoint = 277, 
		RULE_database_mirroring_option = 278, RULE_mirroring_set_option = 279, 
		RULE_mirroring_partner = 280, RULE_mirroring_witness = 281, RULE_witness_partner_equal = 282, 
		RULE_partner_option = 283, RULE_witness_option = 284, RULE_witness_server = 285, 
		RULE_partner_server = 286, RULE_mirroring_host_port_seperator = 287, RULE_partner_server_tcp_prefix = 288, 
		RULE_port_number = 289, RULE_host = 290, RULE_date_correlation_optimization_option = 291, 
		RULE_db_encryption_option = 292, RULE_db_state_option = 293, RULE_db_update_option = 294, 
		RULE_db_user_access_option = 295, RULE_delayed_durability_option = 296, 
		RULE_external_access_option = 297, RULE_hadr_options = 298, RULE_mixed_page_allocation_option = 299, 
		RULE_parameterization_option = 300, RULE_recovery_option = 301, RULE_service_broker_option = 302, 
		RULE_snapshot_option = 303, RULE_sql_option = 304, RULE_target_recovery_time_option = 305, 
		RULE_termination = 306, RULE_drop_index = 307, RULE_drop_relational_or_xml_or_spatial_index = 308, 
		RULE_drop_backward_compatible_index = 309, RULE_drop_procedure = 310, 
		RULE_drop_trigger = 311, RULE_drop_dml_trigger = 312, RULE_drop_ddl_trigger = 313, 
		RULE_drop_function = 314, RULE_drop_statistics = 315, RULE_drop_table = 316, 
		RULE_drop_view = 317, RULE_create_type = 318, RULE_drop_type = 319, RULE_rowset_function_limited = 320, 
		RULE_openquery = 321, RULE_opendatasource = 322, RULE_declare_statement = 323, 
		RULE_xml_declaration = 324, RULE_cursor_statement = 325, RULE_backup_database = 326, 
		RULE_backup_log = 327, RULE_backup_certificate = 328, RULE_backup_master_key = 329, 
		RULE_backup_service_master_key = 330, RULE_kill_statement = 331, RULE_kill_process = 332, 
		RULE_kill_query_notification = 333, RULE_kill_stats_job = 334, RULE_execute_statement = 335, 
		RULE_execute_body_batch = 336, RULE_execute_body = 337, RULE_execute_statement_arg = 338, 
		RULE_execute_statement_arg_named = 339, RULE_execute_statement_arg_unnamed = 340, 
		RULE_execute_parameter = 341, RULE_execute_var_string = 342, RULE_security_statement = 343, 
		RULE_principal_id = 344, RULE_create_certificate = 345, RULE_existing_keys = 346, 
		RULE_private_key_options = 347, RULE_generate_new_keys = 348, RULE_date_options = 349, 
		RULE_open_key = 350, RULE_close_key = 351, RULE_create_key = 352, RULE_key_options = 353, 
		RULE_algorithm = 354, RULE_encryption_mechanism = 355, RULE_decryption_mechanism = 356, 
		RULE_grant_permission = 357, RULE_set_statement = 358, RULE_transaction_statement = 359, 
		RULE_go_batch_statement = 360, RULE_go_statement = 361, RULE_use_statement = 362, 
		RULE_setuser_statement = 363, RULE_reconfigure_statement = 364, RULE_shutdown_statement = 365, 
		RULE_checkpoint_statement = 366, RULE_dbcc_special = 367, RULE_dbcc_clause = 368, 
		RULE_dbcc_command = 369, RULE_dbcc_options = 370, RULE_execute_clause = 371, 
		RULE_declare_local = 372, RULE_table_type_definition = 373, RULE_table_type_indices = 374, 
		RULE_xml_type_definition = 375, RULE_xml_schema_collection = 376, RULE_column_def_table_constraints = 377, 
		RULE_column_def_table_constraint = 378, RULE_column_definition = 379, 
		RULE_materialized_column_definition = 380, RULE_column_constraint = 381, 
		RULE_table_constraint = 382, RULE_on_delete = 383, RULE_on_update = 384, 
		RULE_index_options = 385, RULE_index_option = 386, RULE_declare_cursor = 387, 
		RULE_declare_set_cursor_common = 388, RULE_declare_set_cursor_common_partial = 389, 
		RULE_fetch_cursor = 390, RULE_set_special = 391, RULE_special_list = 392, 
		RULE_constant_LOCAL_ID = 393, RULE_expression = 394, RULE_time_zone = 395, 
		RULE_primitive_expression = 396, RULE_case_expression = 397, RULE_unary_operator_expression = 398, 
		RULE_bracket_expression = 399, RULE_constant_expression = 400, RULE_subquery = 401, 
		RULE_with_expression = 402, RULE_common_table_expression = 403, RULE_update_elem = 404, 
		RULE_update_elem_merge = 405, RULE_search_condition = 406, RULE_predicate = 407, 
		RULE_query_expression = 408, RULE_sql_union = 409, RULE_query_specification = 410, 
		RULE_top_clause = 411, RULE_top_percent = 412, RULE_top_count = 413, RULE_order_by_clause = 414, 
		RULE_for_clause = 415, RULE_xml_common_directives = 416, RULE_order_by_expression = 417, 
		RULE_group_by_item = 418, RULE_option_clause = 419, RULE_option = 420, 
		RULE_optimize_for_arg = 421, RULE_select_list = 422, RULE_udt_method_arguments = 423, 
		RULE_asterisk = 424, RULE_column_elem = 425, RULE_udt_elem = 426, RULE_expression_elem = 427, 
		RULE_select_list_elem = 428, RULE_table_sources = 429, RULE_table_source = 430, 
		RULE_table_source_item_joined = 431, RULE_table_source_item = 432, RULE_open_xml = 433, 
		RULE_open_json = 434, RULE_json_declaration = 435, RULE_json_column_declaration = 436, 
		RULE_schema_declaration = 437, RULE_column_declaration = 438, RULE_change_table = 439, 
		RULE_change_table_changes = 440, RULE_change_table_version = 441, RULE_join_part = 442, 
		RULE_join_on = 443, RULE_cross_join = 444, RULE_apply_ = 445, RULE_pivot = 446, 
		RULE_unpivot = 447, RULE_pivot_clause = 448, RULE_unpivot_clause = 449, 
		RULE_full_column_name_list = 450, RULE_table_name_with_hint = 451, RULE_rowset_function = 452, 
		RULE_bulk_option = 453, RULE_derived_table = 454, RULE_function_call = 455, 
		RULE_partition_function = 456, RULE_freetext_function = 457, RULE_freetext_predicate = 458, 
		RULE_built_in_functions = 459, RULE_xml_data_type_methods = 460, RULE_value_method = 461, 
		RULE_value_call = 462, RULE_query_method = 463, RULE_query_call = 464, 
		RULE_exist_method = 465, RULE_exist_call = 466, RULE_modify_method = 467, 
		RULE_modify_call = 468, RULE_nodes_method = 469, RULE_switch_section = 470, 
		RULE_switch_search_condition_section = 471, RULE_as_column_alias = 472, 
		RULE_as_table_alias = 473, RULE_table_alias = 474, RULE_with_table_hints = 475, 
		RULE_insert_with_table_hints = 476, RULE_table_hint = 477, RULE_index_value = 478, 
		RULE_column_alias_list = 479, RULE_column_alias = 480, RULE_table_value_constructor = 481, 
		RULE_expression_list = 482, RULE_ranking_windowed_function = 483, RULE_aggregate_windowed_function = 484, 
		RULE_analytic_windowed_function = 485, RULE_all_distinct_expression = 486, 
		RULE_over_clause = 487, RULE_row_or_range_clause = 488, RULE_window_frame_extent = 489, 
		RULE_window_frame_bound = 490, RULE_window_frame_preceding = 491, RULE_window_frame_following = 492, 
		RULE_create_database_option = 493, RULE_database_filestream_option = 494, 
		RULE_database_file_spec = 495, RULE_file_group = 496, RULE_file_spec = 497, 
		RULE_entity_name = 498, RULE_entity_name_for_azure_dw = 499, RULE_entity_name_for_parallel_dw = 500, 
		RULE_full_table_name = 501, RULE_table_name = 502, RULE_simple_name = 503, 
		RULE_func_proc_name_schema = 504, RULE_func_proc_name_database_schema = 505, 
		RULE_func_proc_name_server_database_schema = 506, RULE_ddl_object = 507, 
		RULE_full_column_name = 508, RULE_column_name_list_with_order = 509, RULE_insert_column_name_list = 510, 
		RULE_insert_column_id = 511, RULE_column_name_list = 512, RULE_cursor_name = 513, 
		RULE_on_off = 514, RULE_clustered = 515, RULE_null_notnull = 516, RULE_null_or_default = 517, 
		RULE_scalar_function_name = 518, RULE_begin_conversation_timer = 519, 
		RULE_begin_conversation_dialog = 520, RULE_contract_name = 521, RULE_service_name = 522, 
		RULE_end_conversation = 523, RULE_waitfor_conversation = 524, RULE_get_conversation = 525, 
		RULE_queue_id = 526, RULE_send_conversation = 527, RULE_data_type = 528, 
		RULE_default_value = 529, RULE_constant = 530, RULE_sign = 531, RULE_keyword = 532, 
		RULE_id_ = 533, RULE_simple_id = 534, RULE_id_or_string = 535, RULE_comparison_operator = 536, 
		RULE_assignment_operator = 537, RULE_file_size = 538;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "batch_level_statement", "sql_clauses", "dml_clause", 
		"ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
		"break_statement", "continue_statement", "goto_statement", "return_statement", 
		"if_statement", "throw_statement", "throw_error_number", "throw_message", 
		"throw_state", "try_catch_statement", "waitfor_statement", "while_statement", 
		"print_statement", "raiseerror_statement", "empty_statement", "another_statement", 
		"alter_application_role", "create_application_role", "drop_aggregate", 
		"drop_application_role", "alter_assembly", "alter_assembly_start", "alter_assembly_clause", 
		"alter_assembly_from_clause", "alter_assembly_from_clause_start", "alter_assembly_drop_clause", 
		"alter_assembly_drop_multiple_files", "alter_assembly_drop", "alter_assembly_add_clause", 
		"alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
		"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
		"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
		"assembly_option", "network_file_share", "network_computer", "network_file_start", 
		"file_path", "file_directory_path_separator", "local_file", "local_drive", 
		"multiple_local_files", "multiple_local_file_start", "create_assembly", 
		"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "class_type_for_grant", 
		"drop_availability_group", "alter_availability_group", "alter_availability_group_start", 
		"alter_availability_group_options", "ip_v4_failover", "ip_v6_failover", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_encryption_key", "drop_database_scoped_credential", "drop_default", 
		"drop_endpoint", "drop_external_data_source", "drop_external_file_format", 
		"drop_external_library", "drop_external_resource_pool", "drop_external_table", 
		"drop_event_notifications", "drop_event_session", "drop_fulltext_catalog", 
		"drop_fulltext_index", "drop_fulltext_stoplist", "drop_login", "drop_master_key", 
		"drop_message_type", "drop_partition_function", "drop_partition_scheme", 
		"drop_queue", "drop_remote_service_binding", "drop_resource_pool", "drop_db_role", 
		"drop_route", "drop_rule", "drop_schema", "drop_search_property_list", 
		"drop_security_policy", "drop_sequence", "drop_server_audit", "drop_server_audit_specification", 
		"drop_server_role", "drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
		"create_or_alter_event_session", "event_session_predicate_expression", 
		"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
		"alter_external_library", "create_external_library", "alter_external_resource_pool", 
		"create_external_resource_pool", "alter_fulltext_catalog", "create_fulltext_catalog", 
		"alter_fulltext_stoplist", "create_fulltext_stoplist", "alter_login_sql_server", 
		"create_login_sql_server", "alter_login_azure_sql", "create_login_azure_sql", 
		"alter_login_azure_sql_dw_and_pdw", "create_login_pdw", "alter_master_key_sql_server", 
		"create_master_key_sql_server", "alter_master_key_azure_sql", "create_master_key_azure_sql", 
		"alter_message_type", "alter_partition_function", "alter_partition_scheme", 
		"alter_remote_service_binding", "create_remote_service_binding", "create_resource_pool", 
		"alter_resource_governor", "alter_db_role", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
		"alter_symmetric_key", "create_synonym", "alter_user", "create_user", 
		"create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_partition_function", 
		"create_partition_scheme", "create_queue", "queue_settings", "alter_queue", 
		"queue_action", "queue_rebuild_options", "create_contract", "conversation_statement", 
		"message_statement", "merge_statement", "when_matches", "merge_matched", 
		"merge_not_matched", "delete_statement", "delete_statement_from", "insert_statement", 
		"insert_statement_value", "receive_statement", "select_statement_standalone", 
		"select_statement", "time", "update_statement", "output_clause", "output_dml_list_elem", 
		"create_database", "create_index", "alter_index", "rebuild_partition", 
		"create_columnstore_index", "create_nonclustered_columnstore_index", "create_xml_index", 
		"create_or_alter_procedure", "as_external_name", "create_or_alter_trigger", 
		"create_or_alter_dml_trigger", "dml_trigger_option", "dml_trigger_operation", 
		"create_or_alter_ddl_trigger", "ddl_trigger_operation", "create_or_alter_function", 
		"func_body_returns_select", "func_body_returns_table", "func_body_returns_scalar", 
		"procedure_param", "procedure_option", "function_option", "create_statistics", 
		"update_statistics", "create_table", "table_indices", "table_options", 
		"create_view", "view_attribute", "alter_table", "switch_partition", "low_priority_lock_wait", 
		"alter_database", "add_or_modify_files", "filespec", "add_or_modify_filegroups", 
		"filegroup_updatability_option", "database_optionspec", "auto_option", 
		"change_tracking_option", "change_tracking_option_list", "containment_option", 
		"cursor_option", "alter_endpoint", "database_mirroring_option", "mirroring_set_option", 
		"mirroring_partner", "mirroring_witness", "witness_partner_equal", "partner_option", 
		"witness_option", "witness_server", "partner_server", "mirroring_host_port_seperator", 
		"partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
		"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
		"delayed_durability_option", "external_access_option", "hadr_options", 
		"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
		"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
		"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
		"drop_backward_compatible_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", 
		"drop_ddl_trigger", "drop_function", "drop_statistics", "drop_table", 
		"drop_view", "create_type", "drop_type", "rowset_function_limited", "openquery", 
		"opendatasource", "declare_statement", "xml_declaration", "cursor_statement", 
		"backup_database", "backup_log", "backup_certificate", "backup_master_key", 
		"backup_service_master_key", "kill_statement", "kill_process", "kill_query_notification", 
		"kill_stats_job", "execute_statement", "execute_body_batch", "execute_body", 
		"execute_statement_arg", "execute_statement_arg_named", "execute_statement_arg_unnamed", 
		"execute_parameter", "execute_var_string", "security_statement", "principal_id", 
		"create_certificate", "existing_keys", "private_key_options", "generate_new_keys", 
		"date_options", "open_key", "close_key", "create_key", "key_options", 
		"algorithm", "encryption_mechanism", "decryption_mechanism", "grant_permission", 
		"set_statement", "transaction_statement", "go_batch_statement", "go_statement", 
		"use_statement", "setuser_statement", "reconfigure_statement", "shutdown_statement", 
		"checkpoint_statement", "dbcc_special", "dbcc_clause", "dbcc_command", 
		"dbcc_options", "execute_clause", "declare_local", "table_type_definition", 
		"table_type_indices", "xml_type_definition", "xml_schema_collection", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"materialized_column_definition", "column_constraint", "table_constraint", 
		"on_delete", "on_update", "index_options", "index_option", "declare_cursor", 
		"declare_set_cursor_common", "declare_set_cursor_common_partial", "fetch_cursor", 
		"set_special", "special_list", "constant_LOCAL_ID", "expression", "time_zone", 
		"primitive_expression", "case_expression", "unary_operator_expression", 
		"bracket_expression", "constant_expression", "subquery", "with_expression", 
		"common_table_expression", "update_elem", "update_elem_merge", "search_condition", 
		"predicate", "query_expression", "sql_union", "query_specification", "top_clause", 
		"top_percent", "top_count", "order_by_clause", "for_clause", "xml_common_directives", 
		"order_by_expression", "group_by_item", "option_clause", "option", "optimize_for_arg", 
		"select_list", "udt_method_arguments", "asterisk", "column_elem", "udt_elem", 
		"expression_elem", "select_list_elem", "table_sources", "table_source", 
		"table_source_item_joined", "table_source_item", "open_xml", "open_json", 
		"json_declaration", "json_column_declaration", "schema_declaration", "column_declaration", 
		"change_table", "change_table_changes", "change_table_version", "join_part", 
		"join_on", "cross_join", "apply_", "pivot", "unpivot", "pivot_clause", 
		"unpivot_clause", "full_column_name_list", "table_name_with_hint", "rowset_function", 
		"bulk_option", "derived_table", "function_call", "partition_function", 
		"freetext_function", "freetext_predicate", "built_in_functions", "xml_data_type_methods", 
		"value_method", "value_call", "query_method", "query_call", "exist_method", 
		"exist_call", "modify_method", "modify_call", "nodes_method", "switch_section", 
		"switch_search_condition_section", "as_column_alias", "as_table_alias", 
		"table_alias", "with_table_hints", "insert_with_table_hints", "table_hint", 
		"index_value", "column_alias_list", "column_alias", "table_value_constructor", 
		"expression_list", "ranking_windowed_function", "aggregate_windowed_function", 
		"analytic_windowed_function", "all_distinct_expression", "over_clause", 
		"row_or_range_clause", "window_frame_extent", "window_frame_bound", "window_frame_preceding", 
		"window_frame_following", "create_database_option", "database_filestream_option", 
		"database_file_spec", "file_group", "file_spec", "entity_name", "entity_name_for_azure_dw", 
		"entity_name_for_parallel_dw", "full_table_name", "table_name", "simple_name", 
		"func_proc_name_schema", "func_proc_name_database_schema", "func_proc_name_server_database_schema", 
		"ddl_object", "full_column_name", "column_name_list_with_order", "insert_column_name_list", 
		"insert_column_id", "column_name_list", "cursor_name", "on_off", "clustered", 
		"null_notnull", "null_or_default", "scalar_function_name", "begin_conversation_timer", 
		"begin_conversation_dialog", "contract_name", "service_name", "end_conversation", 
		"waitfor_conversation", "get_conversation", "queue_id", "send_conversation", 
		"data_type", "default_value", "constant", "sign", "keyword", "id_", "simple_id", 
		"id_or_string", "comparison_operator", "assignment_operator", "file_size"
	};

	private static readonly string[] _LiteralNames = {
		null, "'CCC'", "'ADD'", "'ALL'", "'ALTER'", "'AND'", "'ANY'", "'AS'", 
		"'ASC'", "'AUTHORIZATION'", "'ACCELERATED_DATABASE_RECOVERY'", "'\\'", 
		"'BACKUP'", "'BEGIN'", "'BETWEEN'", "'BREAK'", "'BROWSE'", "'BULK'", "'BY'", 
		"'CASCADE'", "'CASE'", "'CHECK'", "'CHECKPOINT'", "'CLOSE'", "'CLUSTERED'", 
		"'COALESCE'", "'COLLATE'", "'COLUMN'", "'COMMIT'", "'COMPUTE'", "'CONSTRAINT'", 
		"'CONTAINS'", "'CONTAINSTABLE'", "'CONTINUE'", null, "'CREATE'", "'CROSS'", 
		"'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
		"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DBCC'", "'DEALLOCATE'", 
		"'DECLARE'", "'DEFAULT'", "'DELETE'", "'DENY'", "'DESC'", "'DISK'", "'DISTINCT'", 
		"'DISTRIBUTED'", "'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DUMP'", "'ELSE'", 
		"'END'", "'ERRLVL'", "'ESCAPE'", "'EXCEPT'", null, "'EXISTS'", "'EXIT'", 
		"'EXTERNAL'", "'FETCH'", "'FILE'", "'FILLFACTOR'", "'FOR'", "'FOREIGN'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", "'GOTO'", 
		"'GRANT'", "'GROUP'", "'HAVING'", "'HOLDLOCK'", "'IDENTITY'", "'IDENTITY_INSERT'", 
		"'IDENTITYCOL'", "'IF'", "'IN'", "'INDEX'", "'INNER'", "'INSERT'", "'INTERSECT'", 
		"'INTO'", "'IS'", "'JOIN'", "'KEY'", "'KILL'", "'LEFT'", "'LIKE'", "'LINENO'", 
		"'LOAD'", "'MERGE'", "'NATIONAL'", "'NEGOTIATE'", "'NOCHECK'", "'NONCLUSTERED'", 
		"'NOT'", "'NULL'", "'NULLIF'", "'OF'", "'OFF'", "'OFFSETS'", "'ON'", "'OPEN'", 
		"'OPENDATASOURCE'", "'OPENQUERY'", "'OPENROWSET'", "'OPENJSON'", "'OPENXML'", 
		"'OPTION'", "'OR'", "'ORDER'", "'OUTER'", "'OVER'", "'PERCENT'", "'PIVOT'", 
		"'PLAN'", "'PRECISION'", "'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", 
		"'PUBLIC'", "'RAISERROR'", "'RAW'", "'READ'", "'READTEXT'", "'RECONFIGURE'", 
		"'REFERENCES'", "'REPLICATION'", "'RESTORE'", "'RESTRICT'", "'RETURN'", 
		"'REVERT'", "'REVOKE'", "'RIGHT'", "'ROLLBACK'", "'ROWCOUNT'", "'ROWGUIDCOL'", 
		"'RULE'", "'SAVE'", "'SCHEMA'", "'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", 
		"'SEMANTICSIMILARITYDETAILSTABLE'", "'SEMANTICSIMILARITYTABLE'", "'SESSION_USER'", 
		"'SET'", "'SETUSER'", "'SHUTDOWN'", "'SOME'", "'STATISTICS'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLESAMPLE'", "'TEXTSIZE'", "'THEN'", "'TO'", "'TOP'", "'TRAN'", 
		"'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TSEQUAL'", "'UNION'", "'UNIQUE'", 
		"'UNPIVOT'", "'UPDATE'", "'UPDATETEXT'", "'USE'", "'USER'", "'VALUES'", 
		"'VARYING'", "'VIEW'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", 
		"'WITHIN'", "'WRITETEXT'", "'$PARTITION'", "'ABSOLUTE'", "'AT'", "'ACCENT_SENSITIVITY'", 
		"'ACCESS'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", "'ADDRESS'", "'AES_128'", 
		"'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", 
		"'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", "'ALLOW_SNAPSHOT_ISOLATION'", 
		"'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", "'ANSI_PADDING'", 
		"'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", "'ASSEMBLY'", 
		"'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AUTOGROW_ALL_FILES'", "'AUTOGROW_SINGLE_FILE'", 
		"'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", "'BEGIN_DIALOG'", "'BIGINT'", 
		"'BINARY'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", "'BINDING'", "'BLOB_STORAGE'", 
		"'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", "'CALLER'", "'CAP_CPU_PERCENT'", 
		"'CAST'", "'TRY_CAST'", "'CATALOG'", "'CATCH'", "'CHANGE'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COLUMNSTORE'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", 
		"'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", 
		"'COUNT'", "'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CUME_DIST'", "'CURSOR_CLOSE_ON_COMMIT'", 
		"'CURSOR_DEFAULT'", "'DATA'", "'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", 
		"'DATEDIFF'", "'DATENAME'", "'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", 
		"'DECRYPTION'", null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
		"'DEFINITION'", "'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", 
		"'DEPENDENTS'", "'DES'", "'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", 
		"'DIRECTORY_NAME'", "'DISABLE'", "'DISABLE_BROKER'", "'DISABLED'", null, 
		"'DOCUMENT'", "'DYNAMIC'", "'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", 
		"'ENABLE_BROKER'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", 
		"'ERROR_BROKER_CONVERSATIONS'", "'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", 
		"'EXPAND'", "'EXPIRY_DATE'", "'EXPLICIT'", "'FAIL_OPERATION'", "'FAILOVER_MODE'", 
		"'FAILURE'", "'FAILURE_CONDITION_LEVEL'", "'FAST'", "'FAST_FORWARD'", 
		"'FILEGROUP'", "'FILEGROWTH'", "'FILENAME'", "'FILEPATH'", "'FILESTREAM'", 
		"'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", "'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", 
		"'FORCED'", "'FORMAT'", "'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", 
		"'GB'", "'GETDATE'", "'GETUTCDATE'", "'GLOBAL'", null, "'GO'", "'GROUP_MAX_REQUESTS'", 
		"'GROUPING'", "'GROUPING_ID'", "'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", 
		"'HIGH'", "'HONOR_BROKER_PRIORITY'", "'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
		"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
		"'INT'", "'IP'", "'ISOLATION'", "'JOB'", "'JSON'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
		"'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", 
		"'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", "'LOB_COMPACTION'", 
		"'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", 
		"'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
		"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
		"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
		"'NEWNAME'", "'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", 
		"'NODES'", "'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
		"'NOTIFICATIONS'", "'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OVERRIDE'", "'OWNER'", "'OWNERSHIP'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", 
		"'PARTITION'", "'PARTITIONS'", "'PARTNER'", "'PATH'", "'PERCENT_RANK'", 
		"'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'POISON_MESSAGE_HANDLING'", 
		"'POOL'", "'PORT'", "'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", 
		"'PRIORITY_LEVEL'", "'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", 
		"'PROPERTY'", "'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", 
		"'QUEUE_DELAY'", "'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", 
		"'RC4'", "'RC4_128'", "'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READONLY'", "'READWRITE'", "'REBUILD'", "'RECEIVE'", 
		"'RECOMPILE'", "'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", 
		"'REMOTE_SERVICE_NAME'", "'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", 
		"'REQUEST_MAX_CPU_TIME_SEC'", "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
		"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
		"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
		"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURABLES'", "'SECURITY'", "'SECURITY_LOG'", "'SEEDING_MODE'", 
		"'SELF'", "'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SERIALIZABLE'", 
		"'SESSION_TIMEOUT'", "'SETERROR'", "'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", 
		"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", 
		"'STANDBY'", "'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", 
		"'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOPLIST'", "'STRING_AGG'", "'STUFF'", 
		"'SUBJECT'", "'SUBSCRIBE'", "'SUBSCRIPTION'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", 
		"'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'SYSTEM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", 
		"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", 
		"'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", "'TRACKING'", "'TRANSFORM_NOISE_WORDS'", 
		"'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", 
		"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", 
		"'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'UNMASK'", "'UOW'", "'USING'", 
		"'VALID_XML'", "'VALIDATION'", "'VALUE'", "'VAR'", "'VARBINARY'", "'VARP'", 
		"'VIEW_METADATA'", "'VIEWS'", "'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", 
		"'WORK'", "'WORKLOAD'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", 
		"'XSINIL'", "'ZONE'", "'$ACTION'", "'ABORT_AFTER_WAIT'", "'ABSENT'", "'ADMINISTER'", 
		"'AES'", "'ALLOW_CONNECTIONS'", "'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", 
		"'ANONYMOUS'", "'APPEND'", "'APPLICATION'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", 
		"'AUTHENTICATE'", "'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", 
		"'AUTOMATIC'", "'AVAILABILITY_MODE'", "'BEFORE'", "'BLOCK'", "'BLOCKERS'", 
		"'BLOCKSIZE'", "'BLOCKING_HIERARCHY'", "'BUFFER'", "'BUFFERCOUNT'", "'CACHE'", 
		"'CALLED'", "'CERTIFICATE'", "'CHANGETABLE'", "'CHANGES'", "'CHECK_POLICY'", 
		"'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", "'CLUSTER'", "'COMPRESSION'", 
		"'CONNECT'", "'CONNECTION'", "'CONFIGURATION'", "'CONTAINMENT'", "'CONTEXT'", 
		"'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'", 
		"'COPY_ONLY'", "'CYCLE'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", "'DATABASE_MIRRORING'", 
		"'DATASPACE'", "'DDL'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DIAGNOSTICS'", 
		"'DIFFERENTIAL'", "'DISTRIBUTION'", "'DTC_SUPPORT'", "'ENABLED'", "'ENDPOINT'", 
		"'ERROR'", "'EVENT'", null, "'EVENT_RETENTION_MODE'", "'EXECUTABLE_FILE'", 
		"'EXPIREDATE'", "'EXTENSION'", "'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", 
		"'FAN_IN'", "'FILE_SNAPSHOT'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
		"'GET'", "'GOVERNOR'", "'HASHED'", "'HEALTHCHECKTIMEOUT'", "'HEAP'", "'IIF'", 
		"'IO'", "'INCLUDE'", "'INCREMENT'", "'INFINITE'", "'INIT'", "'INSTEAD'", 
		"'ISNULL'", "'KERBEROS'", "'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", "'LANGUAGE'", 
		"'LIBRARY'", "'LIFETIME'", "'LINKED'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
		"'LOCAL_SERVICE_NAME'", "'LOG'", "'MASK'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", 
		"'MAXTRANSFER'", "'MAXVALUE'", "'MAX_DISPATCH_LATENCY'", "'MAX_DURATION'", 
		"'MAX_EVENT_SIZE'", "'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
		"'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MESSAGE_FORWARDING'", 
		"'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NOFORMAT'", 
		"'NOINIT'", "'NONE'", "'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", "'NO_CHECKSUM'", 
		"'NO_COMPRESSION'", "'NO_EVENT_LOSS'", "'NOTIFICATION'", "'NTLM'", "'OLD_PASSWORD'", 
		"'ON_FAILURE'", "'OPERATIONS'", "'PAGE'", "'PARAM_NODE'", "'PARTIAL'", 
		"'PASSWORD'", "'PERMISSION_SET'", "'PER_CPU'", "'PER_DB'", "'PER_NODE'", 
		"'PERSISTED'", "'PLATFORM'", "'POLICY'", "'PREDICATE'", "'PROCESS'", "'PROFILE'", 
		"'PYTHON'", "'R'", "'READ_WRITE_FILEGROUPS'", "'REGENERATE'", "'RELATED_CONVERSATION'", 
		"'RELATED_CONVERSATION_GROUP'", "'REPLICATE'", "'REQUIRED'", "'RESET'", 
		"'RESOURCES'", "'RESTART'", "'RESUME'", "'RETAINDAYS'", "'RETURNS'", "'REWIND'", 
		"'ROLE'", "'ROUND_ROBIN'", "'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", 
		"'RSA_4096'", "'SAFETY'", "'SAFE'", "'SCHEDULER'", "'SCHEME'", "'SCRIPT'", 
		"'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", "'SERVICE_NAME'", "'SESSION'", 
		"'SETTINGS'", "'SHRINKLOG'", "'SID'", "'SKIP'", "'SOFTNUMA'", "'SOURCE'", 
		"'SPECIFICATION'", "'SPLIT'", "'SQL'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", 
		"'SQLDUMPERTIMEOUTS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
		"'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", "'SUPPORTED'", "'SWITCH'", "'TAPE'", 
		"'TARGET'", "'TCP'", "'TRACE'", "'TRACK_CAUSALITY'", "'TRANSFER'", "'UNCHECKED'", 
		"'UNLOCK'", "'UNSAFE'", "'URL'", "'USED'", "'VERBOSELOGGING'", "'VISIBILITY'", 
		"'WAIT_AT_LOW_PRIORITY'", "'WINDOWS'", "'WITHOUT'", "'WITNESS'", "'XACT_ABORT'", 
		"'VARCHAR'", "'NVARCHAR'", null, null, null, null, "'''", null, null, 
		null, null, null, null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", 
		"'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'::'", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CCC", "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION", 
		"ACCELERATED_DATABASE_RECOVERY", "BACKSLASH", "BACKUP", "BEGIN", "BETWEEN", 
		"BREAK", "BROWSE", "BULK", "BY", "CASCADE", "CASE", "CHECK", "CHECKPOINT", 
		"CLOSE", "CLUSTERED", "COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", 
		"CONSTRAINT", "CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONVERT", "CREATE", 
		"CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "DATABASE", "DBCC", "DEALLOCATE", "DECLARE", 
		"DEFAULT", "DELETE", "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
		"DOUBLE", "DOUBLE_BACK_SLASH", "DOUBLE_FORWARD_SLASH", "DROP", "DUMP", 
		"ELSE", "END", "ERRLVL", "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", 
		"EXTERNAL", "FETCH", "FILE", "FILLFACTOR", "FOR", "FOREIGN", "FREETEXT", 
		"FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
		"HAVING", "HOLDLOCK", "IDENTITY", "IDENTITY_INSERT", "IDENTITYCOL", "IF", 
		"IN", "INDEX", "INNER", "INSERT", "INTERSECT", "INTO", "IS", "JOIN", "KEY", 
		"KILL", "LEFT", "LIKE", "LINENO", "LOAD", "MERGE", "NATIONAL", "NEGOTIATE", 
		"NOCHECK", "NONCLUSTERED", "NOT", "NULL_", "NULLIF", "OF", "OFF", "OFFSETS", 
		"ON", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENJSON", 
		"OPENXML", "OPTION", "OR", "ORDER", "OUTER", "OVER", "PERCENT", "PIVOT", 
		"PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC", 
		"RAISERROR", "RAW", "READ", "READTEXT", "RECONFIGURE", "REFERENCES", "REPLICATION", 
		"RESTORE", "RESTRICT", "RETURN", "REVERT", "REVOKE", "RIGHT", "ROLLBACK", 
		"ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", 
		"SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
		"SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM_USER", 
		"TABLE", "TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
		"TRIGGER", "TRUNCATE", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT", "UPDATE", 
		"UPDATETEXT", "USE", "USER", "VALUES", "VARYING", "VIEW", "WAITFOR", "WHEN", 
		"WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "DOLLAR_PARTITION", "ABSOLUTE", 
		"AT_KEYWORD", "ACCENT_SENSITIVITY", "ACCESS", "ACTION", "ACTIVATION", 
		"ACTIVE", "ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", "AFTER", 
		"AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_SNAPSHOT_ISOLATION", 
		"ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", "ANSI_PADDING", "ANSI_WARNINGS", 
		"APPLICATION_LOG", "APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", 
		"AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
		"AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", "AUTOGROW_ALL_FILES", 
		"AUTOGROW_SINGLE_FILE", "AVAILABILITY", "AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", 
		"BIGINT", "BINARY_KEYWORD", "BINARY_BASE64", "BINARY_CHECKSUM", "BINDING", 
		"BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", "CALLER", 
		"CAP_CPU_PERCENT", "CAST", "TRY_CAST", "CATALOG", "CATCH", "CHANGE", "CHANGE_RETENTION", 
		"CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", "COLLECTION", 
		"COLUMN_MASTER_KEY", "COLUMNSTORE", "COMMITTED", "COMPATIBILITY_LEVEL", 
		"CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTENT", "CONTROL", "COOKIE", "COUNT", 
		"COUNT_BIG", "COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", 
		"CRYPTOGRAPHIC", "CUME_DIST", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
		"DATA", "DATE_CORRELATION_OPTIMIZATION", "DATEADD", "DATEDIFF", "DATENAME", 
		"DATEPART", "DAYS", "DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", 
		"DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DEFINITION", "DELAY", 
		"DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DEPENDENTS", "DES", "DESCRIPTION", 
		"DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", "DISABLE", "DISABLE_BROKER", 
		"DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", "ELEMENTS", "EMERGENCY", 
		"EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", "ENDPOINT_URL", 
		"ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", "EXECUTABLE", "EXIST", "EXPAND", 
		"EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", "FAILOVER_MODE", "FAILURE", 
		"FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
		"FILENAME", "FILEPATH", "FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", 
		"FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", "FORCED", "FORMAT", 
		"FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", "GETUTCDATE", 
		"GLOBAL", "GO_BATCH", "GO", "GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", 
		"HADR", "HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
		"HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JOB", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEWNAME", "NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", 
		"NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOTIFICATIONS", 
		"NOWAIT", "NTILE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", 
		"OFFLINE", "OFFSET", "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", 
		"OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OVERRIDE", "OWNER", "OWNERSHIP", 
		"PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", "PARTITIONS", "PARTNER", 
		"PATH", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "POISON_MESSAGE_HANDLING", 
		"POOL", "PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", 
		"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
		"PROVIDER", "PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "READWRITE", "REBUILD", 
		"RECEIVE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", 
		"REMOTE", "REMOTE_SERVICE_NAME", "REMOVE", "REORGANIZE", "REPEATABLE", 
		"REPLICA", "REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MAX_MEMORY_GRANT_PERCENT", 
		"REQUEST_MEMORY_GRANT_TIMEOUT_SEC", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", 
		"RESERVE_DISK_SPACE", "RESOURCE", "RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", 
		"RETENTION", "ROBUST", "ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", 
		"ROWS", "SAMPLE", "SCHEMABINDING", "SCOPED", "SCROLL", "SCROLL_LOCKS", 
		"SEARCH", "SECONDARY", "SECONDARY_ONLY", "SECONDARY_ROLE", "SECONDS", 
		"SECRET", "SECURABLES", "SECURITY", "SECURITY_LOG", "SEEDING_MODE", "SELF", 
		"SEMI_SENSITIVE", "SEND", "SENT", "SEQUENCE", "SERIALIZABLE", "SESSION_TIMEOUT", 
		"SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", 
		"SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STANDBY", 
		"START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STATUSONLY", "STDEV", 
		"STDEVP", "STOPLIST", "STRING_AGG", "STUFF", "SUBJECT", "SUBSCRIBE", "SUBSCRIPTION", 
		"SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", 
		"TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", "TIES", 
		"TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", "TRACKING", 
		"TRANSFORM_NOISE_WORDS", "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", 
		"TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", "UNBOUNDED", 
		"UNCOMMITTED", "UNKNOWN", "UNLIMITED", "UNMASK", "UOW", "USING", "VALID_XML", 
		"VALIDATION", "VALUE", "VAR", "VARBINARY_KEYWORD", "VARP", "VIEW_METADATA", 
		"VIEWS", "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", 
		"XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XSINIL", "ZONE", "DOLLAR_ACTION", 
		"ABORT_AFTER_WAIT", "ABSENT", "ADMINISTER", "AES", "ALLOW_CONNECTIONS", 
		"ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_SINGLE_EVENT_LOSS", "ANONYMOUS", "APPEND", 
		"APPLICATION", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHENTICATE", "AUTHENTICATION", 
		"AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", "BEFORE", 
		"BLOCK", "BLOCKERS", "BLOCKSIZE", "BLOCKING_HIERARCHY", "BUFFER", "BUFFERCOUNT", 
		"CACHE", "CALLED", "CERTIFICATE", "CHANGETABLE", "CHANGES", "CHECK_POLICY", 
		"CHECK_EXPIRATION", "CLASSIFIER_FUNCTION", "CLUSTER", "COMPRESSION", "CONNECT", 
		"CONNECTION", "CONFIGURATION", "CONTAINMENT", "CONTEXT", "CONTINUE_AFTER_ERROR", 
		"CONTRACT", "CONTRACT_NAME", "CONVERSATION", "COPY_ONLY", "CYCLE", "DATA_COMPRESSION", 
		"DATA_SOURCE", "DATABASE_MIRRORING", "DATASPACE", "DDL", "DEFAULT_DATABASE", 
		"DEFAULT_SCHEMA", "DIAGNOSTICS", "DIFFERENTIAL", "DISTRIBUTION", "DTC_SUPPORT", 
		"ENABLED", "ENDPOINT", "ERROR", "EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", 
		"EXECUTABLE_FILE", "EXPIREDATE", "EXTENSION", "EXTERNAL_ACCESS", "FAILOVER", 
		"FAILURECONDITIONLEVEL", "FAN_IN", "FILE_SNAPSHOT", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"GET", "GOVERNOR", "HASHED", "HEALTHCHECKTIMEOUT", "HEAP", "IIF", "IO", 
		"INCLUDE", "INCREMENT", "INFINITE", "INIT", "INSTEAD", "ISNULL", "KERBEROS", 
		"KEY_PATH", "KEY_STORE_PROVIDER_NAME", "LANGUAGE", "LIBRARY", "LIFETIME", 
		"LINKED", "LINUX", "LISTENER_IP", "LISTENER_PORT", "LOCAL_SERVICE_NAME", 
		"LOG", "MASK", "MATCHED", "MASTER", "MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", 
		"MAX_DISPATCH_LATENCY", "MAX_DURATION", "MAX_EVENT_SIZE", "MAX_SIZE", 
		"MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", "MEMBER", 
		"MEMORY_PARTITION_MODE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NOFORMAT", "NOINIT", "NONE", "NOREWIND", 
		"NOSKIP", "NOUNLOAD", "NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", 
		"NOTIFICATION", "NTLM", "OLD_PASSWORD", "ON_FAILURE", "OPERATIONS", "PAGE", 
		"PARAM_NODE", "PARTIAL", "PASSWORD", "PERMISSION_SET", "PER_CPU", "PER_DB", 
		"PER_NODE", "PERSISTED", "PLATFORM", "POLICY", "PREDICATE", "PROCESS", 
		"PROFILE", "PYTHON", "R", "READ_WRITE_FILEGROUPS", "REGENERATE", "RELATED_CONVERSATION", 
		"RELATED_CONVERSATION_GROUP", "REPLICATE", "REQUIRED", "RESET", "RESOURCES", 
		"RESTART", "RESUME", "RETAINDAYS", "RETURNS", "REWIND", "ROLE", "ROUND_ROBIN", 
		"RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", "RSA_4096", "SAFETY", "SAFE", 
		"SCHEDULER", "SCHEME", "SCRIPT", "SERVER", "SERVICE", "SERVICE_BROKER", 
		"SERVICE_NAME", "SESSION", "SETTINGS", "SHRINKLOG", "SID", "SKIP_KEYWORD", 
		"SOFTNUMA", "SOURCE", "SPECIFICATION", "SPLIT", "SQL", "SQLDUMPERFLAGS", 
		"SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATE", "STATS", "START", "STARTED", 
		"STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", "SUPPORTED", "SWITCH", 
		"TAPE", "TARGET", "TCP", "TRACE", "TRACK_CAUSALITY", "TRANSFER", "UNCHECKED", 
		"UNLOCK", "UNSAFE", "URL", "USED", "VERBOSELOGGING", "VISIBILITY", "WAIT_AT_LOW_PRIORITY", 
		"WINDOWS", "WITHOUT", "WITNESS", "XACT_ABORT", "VARCHAR", "NVARCHAR", 
		"SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", 
		"SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", 
		"FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
		"MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
		"XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", 
		"DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", 
		"STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", 
		"BIT_XOR", "PAUSE", "ABORT", "IPV4_ADDR", "IPV6_ADDR", "ANSI_DEFAULTS", 
		"ANSI_NULL_DFLT_OFF", "ANSI_NULL_DFLT_ON", "ARITHIGNORE", "FMTONLY", "FORCEPLAN", 
		"IMPLICIT_TRANSACTIONS", "NOEXEol", "PARSEONLY", "REMOTE_PROC_TRANSACTIONS", 
		"SHOWPLAN_ALL", "SHOWPLAN_TEXT", "SHOWPLAN_XML", "VERSION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TSqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TSqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TSqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Tsql_fileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TSqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Go_batch_statementContext[] go_batch_statement() {
			return GetRuleContexts<Go_batch_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Go_batch_statementContext go_batch_statement(int i) {
			return GetRuleContext<Go_batch_statementContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsql_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			State = 1094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1297441356192460820L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9213801745841340335L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 1804272196678476049L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 1271035461164543L) != 0)) {
					{
					{
					State = 1078;
					batch();
					}
					}
					State = 1083;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1084;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1085;
				execute_body_batch();
				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==GO_BATCH) {
					{
					{
					State = 1086;
					go_batch_statement();
					}
					}
					State = 1091;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1092;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Go_batch_statementContext go_batch_statement() {
			return GetRuleContext<Go_batch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Go_statementContext[] go_statement() {
			return GetRuleContexts<Go_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Go_statementContext go_statement(int i) {
			return GetRuleContext<Go_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Batch_level_statementContext batch_level_statement() {
			return GetRuleContext<Batch_level_statementContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(Context, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			State = 1122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1096;
				go_batch_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1098;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 1097;
					execute_body_batch();
					}
					break;
				}
				State = 1106;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 1100;
					go_batch_statement();
					}
					break;
				case 2:
					{
					State = 1102;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 1101;
							sql_clauses();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1104;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				State = 1111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1108;
						go_statement();
						}
						} 
					}
					State = 1113;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1114;
				batch_level_statement();
				State = 1118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1115;
						go_statement();
						}
						} 
					}
					State = 1120;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1121;
				go_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Batch_level_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_functionContext create_or_alter_function() {
			return GetRuleContext<Create_or_alter_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_procedureContext create_or_alter_procedure() {
			return GetRuleContext<Create_or_alter_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_triggerContext create_or_alter_trigger() {
			return GetRuleContext<Create_or_alter_triggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Batch_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch_level_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatch_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Batch_level_statementContext batch_level_statement() {
		Batch_level_statementContext _localctx = new Batch_level_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_batch_level_statement);
		try {
			State = 1128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1124;
				create_or_alter_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1125;
				create_or_alter_procedure();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1126;
				create_or_alter_trigger();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1127;
				create_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dbcc_specialContext dbcc_special() {
			return GetRuleContext<Dbcc_specialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dbcc_clauseContext dbcc_clause() {
			return GetRuleContext<Dbcc_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_statementContext backup_statement() {
			return GetRuleContext<Backup_statementContext>(0);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(Context, State);
		EnterRule(_localctx, 6, RULE_sql_clauses);
		try {
			State = 1159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1130;
				dml_clause();
				State = 1132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 1131;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1134;
				cfl_statement();
				State = 1136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 1135;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1138;
				another_statement();
				State = 1140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 1139;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1142;
				ddl_clause();
				State = 1144;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 1143;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1146;
				dbcc_special();
				State = 1148;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 1147;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1150;
				dbcc_clause();
				State = 1152;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 1151;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1154;
				backup_statement();
				State = 1156;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 1155;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1158;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(Context, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 1166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1161;
				merge_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1162;
				delete_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1163;
				insert_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1164;
				select_statement_standalone();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1165;
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_application_roleContext alter_application_role() {
			return GetRuleContext<Alter_application_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assemblyContext alter_assembly() {
			return GetRuleContext<Alter_assemblyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return GetRuleContext<Alter_asymmetric_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_authorizationContext alter_authorization() {
			return GetRuleContext<Alter_authorizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return GetRuleContext<Alter_authorization_for_azure_dwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return GetRuleContext<Alter_authorization_for_parallel_dwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return GetRuleContext<Alter_authorization_for_sql_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_availability_groupContext alter_availability_group() {
			return GetRuleContext<Alter_availability_groupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_certificateContext alter_certificate() {
			return GetRuleContext<Alter_certificateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return GetRuleContext<Alter_column_encryption_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_credentialContext alter_credential() {
			return GetRuleContext<Alter_credentialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return GetRuleContext<Alter_cryptographic_providerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_db_roleContext alter_db_role() {
			return GetRuleContext<Alter_db_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_endpointContext alter_endpoint() {
			return GetRuleContext<Alter_endpointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return GetRuleContext<Create_or_alter_event_sessionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_data_sourceContext alter_external_data_source() {
			return GetRuleContext<Alter_external_data_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_libraryContext alter_external_library() {
			return GetRuleContext<Alter_external_libraryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_resource_poolContext alter_external_resource_pool() {
			return GetRuleContext<Alter_external_resource_poolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return GetRuleContext<Alter_fulltext_catalogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return GetRuleContext<Alter_fulltext_stoplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_indexContext alter_index() {
			return GetRuleContext<Alter_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return GetRuleContext<Alter_login_azure_sqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_login_azure_sql_dw_and_pdwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_login_sql_serverContext alter_login_sql_server() {
			return GetRuleContext<Alter_login_sql_serverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return GetRuleContext<Alter_master_key_azure_sqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return GetRuleContext<Alter_master_key_sql_serverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_message_typeContext alter_message_type() {
			return GetRuleContext<Alter_message_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_partition_functionContext alter_partition_function() {
			return GetRuleContext<Alter_partition_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_partition_schemeContext alter_partition_scheme() {
			return GetRuleContext<Alter_partition_schemeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return GetRuleContext<Alter_remote_service_bindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_governorContext alter_resource_governor() {
			return GetRuleContext<Alter_resource_governorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_schema_azure_sql_dw_and_pdwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_sqlContext alter_schema_sql() {
			return GetRuleContext<Alter_schema_sqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_server_auditContext alter_server_audit() {
			return GetRuleContext<Alter_server_auditContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return GetRuleContext<Alter_server_audit_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_server_configurationContext alter_server_configuration() {
			return GetRuleContext<Alter_server_configurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_server_roleContext alter_server_role() {
			return GetRuleContext<Alter_server_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_server_role_pdwContext alter_server_role_pdw() {
			return GetRuleContext<Alter_server_role_pdwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_serviceContext alter_service() {
			return GetRuleContext<Alter_serviceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_service_master_keyContext alter_service_master_key() {
			return GetRuleContext<Alter_service_master_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_symmetric_keyContext alter_symmetric_key() {
			return GetRuleContext<Alter_symmetric_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return GetRuleContext<Alter_user_azure_sqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_workload_groupContext alter_workload_group() {
			return GetRuleContext<Alter_workload_groupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_application_roleContext create_application_role() {
			return GetRuleContext<Create_application_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_assemblyContext create_assembly() {
			return GetRuleContext<Create_assemblyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_asymmetric_keyContext create_asymmetric_key() {
			return GetRuleContext<Create_asymmetric_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_column_encryption_keyContext create_column_encryption_key() {
			return GetRuleContext<Create_column_encryption_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_column_master_keyContext create_column_master_key() {
			return GetRuleContext<Create_column_master_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_credentialContext create_credential() {
			return GetRuleContext<Create_credentialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_cryptographic_providerContext create_cryptographic_provider() {
			return GetRuleContext<Create_cryptographic_providerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_db_roleContext create_db_role() {
			return GetRuleContext<Create_db_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_event_notificationContext create_event_notification() {
			return GetRuleContext<Create_event_notificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_libraryContext create_external_library() {
			return GetRuleContext<Create_external_libraryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_resource_poolContext create_external_resource_pool() {
			return GetRuleContext<Create_external_resource_poolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_fulltext_catalogContext create_fulltext_catalog() {
			return GetRuleContext<Create_fulltext_catalogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return GetRuleContext<Create_fulltext_stoplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_columnstore_indexContext create_columnstore_index() {
			return GetRuleContext<Create_columnstore_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
			return GetRuleContext<Create_nonclustered_columnstore_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_login_azure_sqlContext create_login_azure_sql() {
			return GetRuleContext<Create_login_azure_sqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_login_pdwContext create_login_pdw() {
			return GetRuleContext<Create_login_pdwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_login_sql_serverContext create_login_sql_server() {
			return GetRuleContext<Create_login_sql_serverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return GetRuleContext<Create_master_key_azure_sqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return GetRuleContext<Create_master_key_sql_serverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return GetRuleContext<Create_or_alter_broker_priorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_remote_service_bindingContext create_remote_service_binding() {
			return GetRuleContext<Create_remote_service_bindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_resource_poolContext create_resource_pool() {
			return GetRuleContext<Create_resource_poolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_routeContext create_route() {
			return GetRuleContext<Create_routeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_ruleContext create_rule() {
			return GetRuleContext<Create_ruleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Create_schema_azure_sql_dw_and_pdwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_search_property_listContext create_search_property_list() {
			return GetRuleContext<Create_search_property_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_security_policyContext create_security_policy() {
			return GetRuleContext<Create_security_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_server_auditContext create_server_audit() {
			return GetRuleContext<Create_server_auditContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_server_audit_specificationContext create_server_audit_specification() {
			return GetRuleContext<Create_server_audit_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_server_roleContext create_server_role() {
			return GetRuleContext<Create_server_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_serviceContext create_service() {
			return GetRuleContext<Create_serviceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return GetRuleContext<Create_user_azure_sql_dwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_workload_groupContext create_workload_group() {
			return GetRuleContext<Create_workload_groupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_xml_indexContext create_xml_index() {
			return GetRuleContext<Create_xml_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return GetRuleContext<Create_xml_schema_collectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_partition_functionContext create_partition_function() {
			return GetRuleContext<Create_partition_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_partition_schemeContext create_partition_scheme() {
			return GetRuleContext<Create_partition_schemeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_aggregateContext drop_aggregate() {
			return GetRuleContext<Drop_aggregateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_application_roleContext drop_application_role() {
			return GetRuleContext<Drop_application_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_assemblyContext drop_assembly() {
			return GetRuleContext<Drop_assemblyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return GetRuleContext<Drop_asymmetric_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_availability_groupContext drop_availability_group() {
			return GetRuleContext<Drop_availability_groupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_broker_priorityContext drop_broker_priority() {
			return GetRuleContext<Drop_broker_priorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_certificateContext drop_certificate() {
			return GetRuleContext<Drop_certificateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return GetRuleContext<Drop_column_encryption_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_column_master_keyContext drop_column_master_key() {
			return GetRuleContext<Drop_column_master_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_contractContext drop_contract() {
			return GetRuleContext<Drop_contractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_credentialContext drop_credential() {
			return GetRuleContext<Drop_credentialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return GetRuleContext<Drop_cryptograhic_providerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_databaseContext drop_database() {
			return GetRuleContext<Drop_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return GetRuleContext<Drop_database_audit_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_database_encryption_keyContext drop_database_encryption_key() {
			return GetRuleContext<Drop_database_encryption_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return GetRuleContext<Drop_database_scoped_credentialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_db_roleContext drop_db_role() {
			return GetRuleContext<Drop_db_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_defaultContext drop_default() {
			return GetRuleContext<Drop_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_endpointContext drop_endpoint() {
			return GetRuleContext<Drop_endpointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_event_notificationsContext drop_event_notifications() {
			return GetRuleContext<Drop_event_notificationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_event_sessionContext drop_event_session() {
			return GetRuleContext<Drop_event_sessionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_data_sourceContext drop_external_data_source() {
			return GetRuleContext<Drop_external_data_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_file_formatContext drop_external_file_format() {
			return GetRuleContext<Drop_external_file_formatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_libraryContext drop_external_library() {
			return GetRuleContext<Drop_external_libraryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_resource_poolContext drop_external_resource_pool() {
			return GetRuleContext<Drop_external_resource_poolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return GetRuleContext<Drop_fulltext_catalogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_fulltext_indexContext drop_fulltext_index() {
			return GetRuleContext<Drop_fulltext_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return GetRuleContext<Drop_fulltext_stoplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_loginContext drop_login() {
			return GetRuleContext<Drop_loginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_master_keyContext drop_master_key() {
			return GetRuleContext<Drop_master_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_message_typeContext drop_message_type() {
			return GetRuleContext<Drop_message_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_partition_functionContext drop_partition_function() {
			return GetRuleContext<Drop_partition_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_partition_schemeContext drop_partition_scheme() {
			return GetRuleContext<Drop_partition_schemeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_queueContext drop_queue() {
			return GetRuleContext<Drop_queueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return GetRuleContext<Drop_remote_service_bindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_resource_poolContext drop_resource_pool() {
			return GetRuleContext<Drop_resource_poolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_routeContext drop_route() {
			return GetRuleContext<Drop_routeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_ruleContext drop_rule() {
			return GetRuleContext<Drop_ruleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_search_property_listContext drop_search_property_list() {
			return GetRuleContext<Drop_search_property_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_security_policyContext drop_security_policy() {
			return GetRuleContext<Drop_security_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_server_auditContext drop_server_audit() {
			return GetRuleContext<Drop_server_auditContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return GetRuleContext<Drop_server_audit_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_server_roleContext drop_server_role() {
			return GetRuleContext<Drop_server_roleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_serviceContext drop_service() {
			return GetRuleContext<Drop_serviceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_signatureContext drop_signature() {
			return GetRuleContext<Drop_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return GetRuleContext<Drop_statistics_name_azure_dw_and_pdwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_symmetric_keyContext drop_symmetric_key() {
			return GetRuleContext<Drop_symmetric_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_synonymContext drop_synonym() {
			return GetRuleContext<Drop_synonymContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_userContext drop_user() {
			return GetRuleContext<Drop_userContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_workload_groupContext drop_workload_group() {
			return GetRuleContext<Drop_workload_groupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return GetRuleContext<Drop_xml_schema_collectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Disable_triggerContext disable_trigger() {
			return GetRuleContext<Disable_triggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lock_tableContext lock_table() {
			return GetRuleContext<Lock_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Truncate_tableContext truncate_table() {
			return GetRuleContext<Truncate_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_statisticsContext update_statistics() {
			return GetRuleContext<Update_statisticsContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 1329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1168;
				alter_application_role();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1169;
				alter_assembly();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1170;
				alter_asymmetric_key();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1171;
				alter_authorization();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1172;
				alter_authorization_for_azure_dw();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1173;
				alter_authorization_for_parallel_dw();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1174;
				alter_authorization_for_sql_database();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1175;
				alter_availability_group();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1176;
				alter_certificate();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1177;
				alter_column_encryption_key();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1178;
				alter_credential();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1179;
				alter_cryptographic_provider();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1180;
				alter_database();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1181;
				alter_db_role();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1182;
				alter_endpoint();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1183;
				create_or_alter_event_session();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1184;
				alter_external_data_source();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1185;
				alter_external_library();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1186;
				alter_external_resource_pool();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1187;
				alter_fulltext_catalog();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1188;
				alter_fulltext_stoplist();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1189;
				alter_index();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1190;
				alter_login_azure_sql();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1191;
				alter_login_azure_sql_dw_and_pdw();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1192;
				alter_login_sql_server();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1193;
				alter_master_key_azure_sql();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1194;
				alter_master_key_sql_server();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1195;
				alter_message_type();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1196;
				alter_partition_function();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1197;
				alter_partition_scheme();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1198;
				alter_remote_service_binding();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1199;
				alter_resource_governor();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1200;
				alter_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1201;
				alter_schema_sql();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1202;
				alter_sequence();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1203;
				alter_server_audit();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1204;
				alter_server_audit_specification();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1205;
				alter_server_configuration();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1206;
				alter_server_role();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1207;
				alter_server_role_pdw();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1208;
				alter_service();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1209;
				alter_service_master_key();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1210;
				alter_symmetric_key();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1211;
				alter_table();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1212;
				alter_user();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1213;
				alter_user_azure_sql();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1214;
				alter_workload_group();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1215;
				create_application_role();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1216;
				create_assembly();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1217;
				create_asymmetric_key();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1218;
				create_column_encryption_key();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1219;
				create_column_master_key();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1220;
				create_credential();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1221;
				create_cryptographic_provider();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1222;
				create_database();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1223;
				create_db_role();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1224;
				create_event_notification();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1225;
				create_external_library();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1226;
				create_external_resource_pool();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1227;
				create_fulltext_catalog();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1228;
				create_fulltext_stoplist();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1229;
				create_index();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1230;
				create_columnstore_index();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1231;
				create_nonclustered_columnstore_index();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1232;
				create_login_azure_sql();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1233;
				create_login_pdw();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1234;
				create_login_sql_server();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1235;
				create_master_key_azure_sql();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1236;
				create_master_key_sql_server();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1237;
				create_or_alter_broker_priority();
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1238;
				create_remote_service_binding();
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1239;
				create_resource_pool();
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1240;
				create_route();
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1241;
				create_rule();
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1242;
				create_schema();
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1243;
				create_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1244;
				create_search_property_list();
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1245;
				create_security_policy();
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1246;
				create_sequence();
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1247;
				create_server_audit();
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1248;
				create_server_audit_specification();
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1249;
				create_server_role();
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1250;
				create_service();
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1251;
				create_statistics();
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1252;
				create_synonym();
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1253;
				create_table();
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1254;
				create_type();
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1255;
				create_user();
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1256;
				create_user_azure_sql_dw();
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1257;
				create_workload_group();
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1258;
				create_xml_index();
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1259;
				create_xml_schema_collection();
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1260;
				create_partition_function();
				}
				break;
			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1261;
				create_partition_scheme();
				}
				break;
			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1262;
				drop_aggregate();
				}
				break;
			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1263;
				drop_application_role();
				}
				break;
			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1264;
				drop_assembly();
				}
				break;
			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1265;
				drop_asymmetric_key();
				}
				break;
			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1266;
				drop_availability_group();
				}
				break;
			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1267;
				drop_broker_priority();
				}
				break;
			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1268;
				drop_certificate();
				}
				break;
			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1269;
				drop_column_encryption_key();
				}
				break;
			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1270;
				drop_column_master_key();
				}
				break;
			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1271;
				drop_contract();
				}
				break;
			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1272;
				drop_credential();
				}
				break;
			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1273;
				drop_cryptograhic_provider();
				}
				break;
			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1274;
				drop_database();
				}
				break;
			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1275;
				drop_database_audit_specification();
				}
				break;
			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1276;
				drop_database_encryption_key();
				}
				break;
			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1277;
				drop_database_scoped_credential();
				}
				break;
			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1278;
				drop_db_role();
				}
				break;
			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1279;
				drop_default();
				}
				break;
			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1280;
				drop_endpoint();
				}
				break;
			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1281;
				drop_event_notifications();
				}
				break;
			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1282;
				drop_event_session();
				}
				break;
			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1283;
				drop_external_data_source();
				}
				break;
			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1284;
				drop_external_file_format();
				}
				break;
			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1285;
				drop_external_library();
				}
				break;
			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1286;
				drop_external_resource_pool();
				}
				break;
			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1287;
				drop_external_table();
				}
				break;
			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1288;
				drop_fulltext_catalog();
				}
				break;
			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1289;
				drop_fulltext_index();
				}
				break;
			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1290;
				drop_fulltext_stoplist();
				}
				break;
			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1291;
				drop_function();
				}
				break;
			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1292;
				drop_index();
				}
				break;
			case 126:
				EnterOuterAlt(_localctx, 126);
				{
				State = 1293;
				drop_login();
				}
				break;
			case 127:
				EnterOuterAlt(_localctx, 127);
				{
				State = 1294;
				drop_master_key();
				}
				break;
			case 128:
				EnterOuterAlt(_localctx, 128);
				{
				State = 1295;
				drop_message_type();
				}
				break;
			case 129:
				EnterOuterAlt(_localctx, 129);
				{
				State = 1296;
				drop_partition_function();
				}
				break;
			case 130:
				EnterOuterAlt(_localctx, 130);
				{
				State = 1297;
				drop_partition_scheme();
				}
				break;
			case 131:
				EnterOuterAlt(_localctx, 131);
				{
				State = 1298;
				drop_procedure();
				}
				break;
			case 132:
				EnterOuterAlt(_localctx, 132);
				{
				State = 1299;
				drop_queue();
				}
				break;
			case 133:
				EnterOuterAlt(_localctx, 133);
				{
				State = 1300;
				drop_remote_service_binding();
				}
				break;
			case 134:
				EnterOuterAlt(_localctx, 134);
				{
				State = 1301;
				drop_resource_pool();
				}
				break;
			case 135:
				EnterOuterAlt(_localctx, 135);
				{
				State = 1302;
				drop_route();
				}
				break;
			case 136:
				EnterOuterAlt(_localctx, 136);
				{
				State = 1303;
				drop_rule();
				}
				break;
			case 137:
				EnterOuterAlt(_localctx, 137);
				{
				State = 1304;
				drop_schema();
				}
				break;
			case 138:
				EnterOuterAlt(_localctx, 138);
				{
				State = 1305;
				drop_search_property_list();
				}
				break;
			case 139:
				EnterOuterAlt(_localctx, 139);
				{
				State = 1306;
				drop_security_policy();
				}
				break;
			case 140:
				EnterOuterAlt(_localctx, 140);
				{
				State = 1307;
				drop_sequence();
				}
				break;
			case 141:
				EnterOuterAlt(_localctx, 141);
				{
				State = 1308;
				drop_server_audit();
				}
				break;
			case 142:
				EnterOuterAlt(_localctx, 142);
				{
				State = 1309;
				drop_server_audit_specification();
				}
				break;
			case 143:
				EnterOuterAlt(_localctx, 143);
				{
				State = 1310;
				drop_server_role();
				}
				break;
			case 144:
				EnterOuterAlt(_localctx, 144);
				{
				State = 1311;
				drop_service();
				}
				break;
			case 145:
				EnterOuterAlt(_localctx, 145);
				{
				State = 1312;
				drop_signature();
				}
				break;
			case 146:
				EnterOuterAlt(_localctx, 146);
				{
				State = 1313;
				drop_statistics();
				}
				break;
			case 147:
				EnterOuterAlt(_localctx, 147);
				{
				State = 1314;
				drop_statistics_name_azure_dw_and_pdw();
				}
				break;
			case 148:
				EnterOuterAlt(_localctx, 148);
				{
				State = 1315;
				drop_symmetric_key();
				}
				break;
			case 149:
				EnterOuterAlt(_localctx, 149);
				{
				State = 1316;
				drop_synonym();
				}
				break;
			case 150:
				EnterOuterAlt(_localctx, 150);
				{
				State = 1317;
				drop_table();
				}
				break;
			case 151:
				EnterOuterAlt(_localctx, 151);
				{
				State = 1318;
				drop_trigger();
				}
				break;
			case 152:
				EnterOuterAlt(_localctx, 152);
				{
				State = 1319;
				drop_type();
				}
				break;
			case 153:
				EnterOuterAlt(_localctx, 153);
				{
				State = 1320;
				drop_user();
				}
				break;
			case 154:
				EnterOuterAlt(_localctx, 154);
				{
				State = 1321;
				drop_view();
				}
				break;
			case 155:
				EnterOuterAlt(_localctx, 155);
				{
				State = 1322;
				drop_workload_group();
				}
				break;
			case 156:
				EnterOuterAlt(_localctx, 156);
				{
				State = 1323;
				drop_xml_schema_collection();
				}
				break;
			case 157:
				EnterOuterAlt(_localctx, 157);
				{
				State = 1324;
				disable_trigger();
				}
				break;
			case 158:
				EnterOuterAlt(_localctx, 158);
				{
				State = 1325;
				enable_trigger();
				}
				break;
			case 159:
				EnterOuterAlt(_localctx, 159);
				{
				State = 1326;
				lock_table();
				}
				break;
			case 160:
				EnterOuterAlt(_localctx, 160);
				{
				State = 1327;
				truncate_table();
				}
				break;
			case 161:
				EnterOuterAlt(_localctx, 161);
				{
				State = 1328;
				update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Backup_databaseContext backup_database() {
			return GetRuleContext<Backup_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_logContext backup_log() {
			return GetRuleContext<Backup_logContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_certificateContext backup_certificate() {
			return GetRuleContext<Backup_certificateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_master_keyContext backup_master_key() {
			return GetRuleContext<Backup_master_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_service_master_keyContext backup_service_master_key() {
			return GetRuleContext<Backup_service_master_keyContext>(0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_statementContext backup_statement() {
		Backup_statementContext _localctx = new Backup_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_backup_statement);
		try {
			State = 1336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331;
				backup_database();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1332;
				backup_log();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1333;
				backup_certificate();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1334;
				backup_master_key();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1335;
				backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Try_catch_statementContext try_catch_statement() {
			return GetRuleContext<Try_catch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Waitfor_statementContext waitfor_statement() {
			return GetRuleContext<Waitfor_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raiseerror_statementContext raiseerror_statement() {
			return GetRuleContext<Raiseerror_statementContext>(0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCfl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCfl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCfl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_cfl_statement);
		try {
			State = 1350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1338;
				block_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1339;
				break_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1340;
				continue_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1341;
				goto_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1342;
				if_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1343;
				return_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1344;
				throw_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1345;
				try_catch_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1346;
				waitfor_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1347;
				while_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1348;
				print_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1349;
				raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(TSqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(TSqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_block_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352;
			Match(BEGIN);
			State = 1354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 1353;
				Match(SEMI);
				}
				break;
			}
			State = 1359;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1356;
					sql_clauses();
					}
					} 
				}
				State = 1361;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 1362;
			Match(END);
			State = 1364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 1363;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366;
			Match(BREAK);
			State = 1368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 1367;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370;
			Match(CONTINUE);
			State = 1372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 1371;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(TSqlParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_goto_statement);
		try {
			State = 1384;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOTO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1374;
				Match(GOTO);
				State = 1375;
				id_();
				State = 1377;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 1376;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1379;
				id_();
				State = 1380;
				Match(COLON);
				State = 1382;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 1381;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386;
			Match(RETURN);
			State = 1388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 1387;
				expression(0);
				}
				break;
			}
			State = 1391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 1390;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1393;
			Match(IF);
			State = 1394;
			search_condition(0);
			State = 1395;
			sql_clauses();
			State = 1398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 1396;
				Match(ELSE);
				State = 1397;
				sql_clauses();
				}
				break;
			}
			State = 1401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 1400;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Throw_error_numberContext throw_error_number() {
			return GetRuleContext<Throw_error_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_messageContext throw_message() {
			return GetRuleContext<Throw_messageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_stateContext throw_state() {
			return GetRuleContext<Throw_stateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_throw_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1403;
			Match(THROW);
			State = 1410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_ID || _la==DECIMAL) {
				{
				State = 1404;
				throw_error_number();
				State = 1405;
				Match(COMMA);
				State = 1406;
				throw_message();
				State = 1407;
				Match(COMMA);
				State = 1408;
				throw_state();
				}
			}

			State = 1413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 1412;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_error_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_error_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_error_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_error_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_error_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_error_numberContext throw_error_number() {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(Context, State);
		EnterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_messageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_message(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_message(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_messageContext throw_message() {
		Throw_messageContext _localctx = new Throw_messageContext(Context, State);
		EnterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1417;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_stateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_state; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_state(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_state(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_stateContext throw_state() {
		Throw_stateContext _localctx = new Throw_stateContext(Context, State);
		EnterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_catch_statementContext : ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BEGIN() { return GetTokens(TSqlParser.BEGIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN(int i) {
			return GetToken(TSqlParser.BEGIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(TSqlParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(TSqlParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] END() { return GetTokens(TSqlParser.END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END(int i) {
			return GetToken(TSqlParser.END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(TSqlParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(TSqlParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(TSqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(TSqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_catch_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_catch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_catch_statementContext try_catch_statement() {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_try_catch_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1421;
			Match(BEGIN);
			State = 1422;
			Match(TRY);
			State = 1424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 1423;
				Match(SEMI);
				}
				break;
			}
			State = 1427;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1426;
					_localctx.try_clauses = sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1429;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1431;
			Match(END);
			State = 1432;
			Match(TRY);
			State = 1434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1433;
				Match(SEMI);
				}
			}

			State = 1436;
			Match(BEGIN);
			State = 1437;
			Match(CATCH);
			State = 1439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 1438;
				Match(SEMI);
				}
				break;
			}
			State = 1444;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1441;
					_localctx.catch_clauses = sql_clauses();
					}
					} 
				}
				State = 1446;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 1447;
			Match(END);
			State = 1448;
			Match(CATCH);
			State = 1450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 1449;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_statementContext waitfor_statement() {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452;
			Match(WAITFOR);
			State = 1454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 1453;
				receive_statement();
				}
				break;
			}
			State = 1457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1456;
				Match(COMMA);
				}
			}

			State = 1461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 1459;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1460;
				time();
				}
				break;
			}
			State = 1464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 1463;
				expression(0);
				}
				break;
			}
			State = 1467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 1466;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TSqlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1469;
			Match(WHILE);
			State = 1470;
			search_condition(0);
			State = 1480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 1471;
				sql_clauses();
				}
				break;
			case 2:
				{
				State = 1472;
				Match(BREAK);
				State = 1474;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 1473;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1476;
				Match(CONTINUE);
				State = 1478;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 1477;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(TSqlParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_print_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1482;
			Match(PRINT);
			State = 1485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 1483;
				expression(0);
				}
				break;
			case 2:
				{
				State = 1484;
				Match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			State = 1491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1487;
				Match(COMMA);
				State = 1488;
				Match(LOCAL_ID);
				}
				}
				State = 1493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 1494;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raiseerror_statementContext : ParserRuleContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public IToken formatstring;
		public IToken argument;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISERROR() { return GetToken(TSqlParser.RAISERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseerror_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseerror_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raiseerror_statementContext raiseerror_statement() {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			State = 1529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1497;
				Match(RAISERROR);
				State = 1498;
				Match(LR_BRACKET);
				State = 1499;
				_localctx.msg = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 856)) & ~0x3f) == 0 && ((1L << (_la - 856)) & 11L) != 0)) ) {
					_localctx.msg = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1500;
				Match(COMMA);
				State = 1501;
				_localctx.severity = constant_LOCAL_ID();
				State = 1502;
				Match(COMMA);
				State = 1503;
				_localctx.state = constant_LOCAL_ID();
				State = 1508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1504;
					Match(COMMA);
					State = 1505;
					constant_LOCAL_ID();
					}
					}
					State = 1510;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1511;
				Match(RR_BRACKET);
				State = 1514;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 1512;
					Match(WITH);
					State = 1513;
					_la = TokenStream.LA(1);
					if ( !(_la==NOWAIT || _la==SETERROR || _la==LOG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1517;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 1516;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1519;
				Match(RAISERROR);
				State = 1520;
				Match(DECIMAL);
				State = 1521;
				_localctx.formatstring = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 853)) & ~0x3f) == 0 && ((1L << (_la - 853)) & 73L) != 0)) ) {
					_localctx.formatstring = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1522;
					Match(COMMA);
					State = 1523;
					_localctx.argument = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 856)) & ~0x3f) == 0 && ((1L << (_la - 856)) & 11L) != 0)) ) {
						_localctx.argument = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1528;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conversation_statementContext conversation_statement() {
			return GetRuleContext<Conversation_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_contractContext create_contract() {
			return GetRuleContext<Create_contractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_queueContext create_queue() {
			return GetRuleContext<Create_queueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_queueContext alter_queue() {
			return GetRuleContext<Alter_queueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kill_statementContext kill_statement() {
			return GetRuleContext<Kill_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Message_statementContext message_statement() {
			return GetRuleContext<Message_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Setuser_statementContext setuser_statement() {
			return GetRuleContext<Setuser_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reconfigure_statementContext reconfigure_statement() {
			return GetRuleContext<Reconfigure_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shutdown_statementContext shutdown_statement() {
			return GetRuleContext<Shutdown_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Checkpoint_statementContext checkpoint_statement() {
			return GetRuleContext<Checkpoint_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnother_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_another_statement);
		try {
			State = 1550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1533;
				declare_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1534;
				execute_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1535;
				cursor_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1536;
				conversation_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1537;
				create_contract();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1538;
				create_queue();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1539;
				alter_queue();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1540;
				kill_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1541;
				message_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1542;
				security_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1543;
				set_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1544;
				transaction_statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1545;
				use_statement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1546;
				setuser_statement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1547;
				reconfigure_statement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1548;
				shutdown_statement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1549;
				checkpoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public Id_Context new_application_role_name;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_application_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_application_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_application_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_application_roleContext alter_application_role() {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(Context, State);
		EnterRule(_localctx, 50, RULE_alter_application_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1552;
			Match(ALTER);
			State = 1553;
			Match(APPLICATION);
			State = 1554;
			Match(ROLE);
			State = 1555;
			_localctx.appliction_role = id_();
			State = 1556;
			Match(WITH);
			State = 1563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 1558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1557;
					Match(COMMA);
					}
				}

				State = 1560;
				Match(NAME);
				State = 1561;
				Match(EQUAL);
				State = 1562;
				_localctx.new_application_role_name = id_();
				}
				break;
			}
			State = 1571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 1566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1565;
					Match(COMMA);
					}
				}

				State = 1568;
				Match(PASSWORD);
				State = 1569;
				Match(EQUAL);
				State = 1570;
				_localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 1574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1573;
					Match(COMMA);
					}
				}

				State = 1576;
				Match(DEFAULT_SCHEMA);
				State = 1577;
				Match(EQUAL);
				State = 1578;
				_localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_application_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_application_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_application_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_application_roleContext create_application_role() {
		Create_application_roleContext _localctx = new Create_application_roleContext(Context, State);
		EnterRule(_localctx, 52, RULE_create_application_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			Match(CREATE);
			State = 1582;
			Match(APPLICATION);
			State = 1583;
			Match(ROLE);
			State = 1584;
			_localctx.appliction_role = id_();
			State = 1585;
			Match(WITH);
			State = 1592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 1587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1586;
					Match(COMMA);
					}
				}

				State = 1589;
				Match(PASSWORD);
				State = 1590;
				Match(EQUAL);
				State = 1591;
				_localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 1595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1594;
					Match(COMMA);
					}
				}

				State = 1597;
				Match(DEFAULT_SCHEMA);
				State = 1598;
				Match(EQUAL);
				State = 1599;
				_localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_aggregateContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context aggregate_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_aggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_aggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_aggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_aggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_aggregateContext drop_aggregate() {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(Context, State);
		EnterRule(_localctx, 54, RULE_drop_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602;
			Match(DROP);
			State = 1603;
			Match(AGGREGATE);
			State = 1606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1604;
				Match(IF);
				State = 1605;
				Match(EXISTS);
				}
			}

			State = 1611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 1608;
				_localctx.schema_name = id_();
				State = 1609;
				Match(DOT);
				}
				break;
			}
			State = 1613;
			_localctx.aggregate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_application_roleContext : ParserRuleContext {
		public Id_Context rolename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_application_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_application_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_application_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_application_roleContext drop_application_role() {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(Context, State);
		EnterRule(_localctx, 56, RULE_drop_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615;
			Match(DROP);
			State = 1616;
			Match(APPLICATION);
			State = 1617;
			Match(ROLE);
			State = 1618;
			_localctx.rolename = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_startContext alter_assembly_start() {
			return GetRuleContext<Alter_assembly_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_clauseContext alter_assembly_clause() {
			return GetRuleContext<Alter_assembly_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assemblyContext alter_assembly() {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(Context, State);
		EnterRule(_localctx, 58, RULE_alter_assembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620;
			alter_assembly_start();
			State = 1621;
			_localctx.assembly_name = id_();
			State = 1622;
			alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_startContext alter_assembly_start() {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(Context, State);
		EnterRule(_localctx, 60, RULE_alter_assembly_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			Match(ALTER);
			State = 1625;
			Match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return GetRuleContext<Alter_assembly_from_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return GetRuleContext<Alter_assembly_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return GetRuleContext<Alter_assembly_drop_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return GetRuleContext<Alter_assembly_add_clauseContext>(0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_clauseContext alter_assembly_clause() {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_alter_assembly_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 1627;
				alter_assembly_from_clause();
				}
			}

			State = 1631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 1630;
				alter_assembly_with_clause();
				}
				break;
			}
			State = 1634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 1633;
				alter_assembly_drop_clause();
				}
				break;
			}
			State = 1637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 1636;
				alter_assembly_add_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return GetRuleContext<Alter_assembly_from_clause_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Client_assembly_specifierContext client_assembly_specifier() {
			return GetRuleContext<Client_assembly_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return GetRuleContext<Alter_assembly_file_bitsContext>(0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_from_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_alter_assembly_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639;
			alter_assembly_from_clause_start();
			State = 1642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_BACK_SLASH:
			case DISK_DRIVE:
			case STRING:
				{
				State = 1640;
				client_assembly_specifier();
				}
				break;
			case AS:
				{
				State = 1641;
				alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clause_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_from_clause_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(Context, State);
		EnterRule(_localctx, 66, RULE_alter_assembly_from_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644;
			Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_dropContext alter_assembly_drop() {
			return GetRuleContext<Alter_assembly_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return GetRuleContext<Alter_assembly_drop_multiple_filesContext>(0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(Context, State);
		EnterRule(_localctx, 68, RULE_alter_assembly_drop_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			alter_assembly_drop();
			State = 1647;
			alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_multiple_filesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_local_filesContext multiple_local_files() {
			return GetRuleContext<Multiple_local_filesContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_multiple_files; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_multiple_files(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_multiple_files(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop_multiple_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(Context, State);
		EnterRule(_localctx, 70, RULE_alter_assembly_drop_multiple_files);
		try {
			State = 1651;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1649;
				Match(ALL);
				}
				break;
			case DISK_DRIVE:
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1650;
				multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_dropContext alter_assembly_drop() {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(Context, State);
		EnterRule(_localctx, 72, RULE_alter_assembly_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653;
			Match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_add_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return GetRuleContext<Alter_asssembly_add_clause_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return GetRuleContext<Alter_assembly_client_file_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_add_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_add_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_add_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_add_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_alter_assembly_add_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655;
			alter_asssembly_add_clause_start();
			State = 1656;
			alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asssembly_add_clause_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asssembly_add_clause_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asssembly_add_clause_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asssembly_add_clause_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asssembly_add_clause_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(Context, State);
		EnterRule(_localctx, 76, RULE_alter_asssembly_add_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658;
			Match(ADD);
			State = 1659;
			Match(FILE);
			State = 1660;
			Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_client_file_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return GetRuleContext<Alter_assembly_file_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_client_file_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_client_file_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_client_file_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_client_file_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_alter_assembly_client_file_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662;
			alter_assembly_file_name();
			State = 1666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1663;
				alter_assembly_as();
				State = 1664;
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_file_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_nameContext alter_assembly_file_name() {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(Context, State);
		EnterRule(_localctx, 80, RULE_alter_assembly_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_bitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_bits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_bits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_bits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_file_bits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(Context, State);
		EnterRule(_localctx, 82, RULE_alter_assembly_file_bits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670;
			alter_assembly_as();
			State = 1671;
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_asContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_as(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_asContext alter_assembly_as() {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(Context, State);
		EnterRule(_localctx, 84, RULE_alter_assembly_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673;
			Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_with_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_assembly_withContext alter_assembly_with() {
			return GetRuleContext<Alter_assembly_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_with_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_alter_assembly_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1675;
			alter_assembly_with();
			State = 1676;
			assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_withContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_with(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_withContext alter_assembly_with() {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(Context, State);
		EnterRule(_localctx, 88, RULE_alter_assembly_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678;
			Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Client_assembly_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Network_file_shareContext network_file_share() {
			return GetRuleContext<Network_file_shareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_client_assembly_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClient_assembly_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClient_assembly_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClient_assembly_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Client_assembly_specifierContext client_assembly_specifier() {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_client_assembly_specifier);
		try {
			State = 1683;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_BACK_SLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1680;
				network_file_share();
				}
				break;
			case DISK_DRIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1681;
				local_file();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1682;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assembly_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssembly_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssembly_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssembly_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assembly_optionContext assembly_option() {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assembly_optionContext _localctx = new Assembly_optionContext(Context, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PERMISSION_SET:
				{
				State = 1686;
				Match(PERMISSION_SET);
				State = 1687;
				Match(EQUAL);
				State = 1688;
				_la = TokenStream.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case VISIBILITY:
				{
				State = 1689;
				Match(VISIBILITY);
				State = 1690;
				Match(EQUAL);
				State = 1691;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case UNCHECKED:
				{
				State = 1692;
				Match(UNCHECKED);
				State = 1693;
				Match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1700;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					State = 1696;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1697;
					Match(COMMA);
					}
					} 
				}
				State = 1702;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Network_file_shareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Network_file_startContext network_file_start() {
			return GetRuleContext<Network_file_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Network_computerContext network_computer() {
			return GetRuleContext<Network_computerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_share; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_share(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_share(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_file_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_shareContext network_file_share() {
		Network_file_shareContext _localctx = new Network_file_shareContext(Context, State);
		EnterRule(_localctx, 94, RULE_network_file_share);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1703;
			network_file_start();
			State = 1704;
			network_computer();
			State = 1705;
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_computerContext : ParserRuleContext {
		public Id_Context computer_name;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_computer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_computer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_computer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_computer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_computerContext network_computer() {
		Network_computerContext _localctx = new Network_computerContext(Context, State);
		EnterRule(_localctx, 96, RULE_network_computer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1707;
			_localctx.computer_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_file_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BACK_SLASH() { return GetToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_file_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_startContext network_file_start() {
		Network_file_startContext _localctx = new Network_file_startContext(Context, State);
		EnterRule(_localctx, 98, RULE_network_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709;
			Match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_pathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_directory_path_separatorContext file_directory_path_separator() {
			return GetRuleContext<File_directory_path_separatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_path(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_pathContext file_path() {
		File_pathContext _localctx = new File_pathContext(Context, State);
		EnterRule(_localctx, 100, RULE_file_path);
		try {
			State = 1715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BACKSLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1711;
				file_directory_path_separator();
				State = 1712;
				file_path();
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1714;
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_directory_path_separatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKSLASH() { return GetToken(TSqlParser.BACKSLASH, 0); }
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_directory_path_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_directory_path_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_directory_path_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_directory_path_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_directory_path_separatorContext file_directory_path_separator() {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(Context, State);
		EnterRule(_localctx, 102, RULE_file_directory_path_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			Match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_fileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_driveContext local_drive() {
			return GetRuleContext<Local_driveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_fileContext local_file() {
		Local_fileContext _localctx = new Local_fileContext(Context, State);
		EnterRule(_localctx, 104, RULE_local_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719;
			local_drive();
			State = 1720;
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_driveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_drive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_drive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_drive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_drive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_driveContext local_drive() {
		Local_driveContext _localctx = new Local_driveContext(Context, State);
		EnterRule(_localctx, 106, RULE_local_drive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1722;
			Match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_filesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_local_file_startContext multiple_local_file_start() {
			return GetRuleContext<Multiple_local_file_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_files; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_files(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_files(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiple_local_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_filesContext multiple_local_files() {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(Context, State);
		EnterRule(_localctx, 108, RULE_multiple_local_files);
		try {
			State = 1730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1724;
				multiple_local_file_start();
				State = 1725;
				local_file();
				State = 1726;
				Match(SINGLE_QUOTE);
				State = 1727;
				Match(COMMA);
				}
				break;
			case DISK_DRIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1729;
				local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_file_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_file_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_file_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_file_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiple_local_file_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_file_startContext multiple_local_file_start() {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(Context, State);
		EnterRule(_localctx, 110, RULE_multiple_local_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1732;
			Match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context owner_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assembly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_assembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_assembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_assemblyContext create_assembly() {
		Create_assemblyContext _localctx = new Create_assemblyContext(Context, State);
		EnterRule(_localctx, 112, RULE_create_assembly);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734;
			Match(CREATE);
			State = 1735;
			Match(ASSEMBLY);
			State = 1736;
			_localctx.assembly_name = id_();
			State = 1739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 1737;
				Match(AUTHORIZATION);
				State = 1738;
				_localctx.owner_name = id_();
				}
			}

			State = 1741;
			Match(FROM);
			State = 1746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1742;
					Match(COMMA);
					}
				}

				State = 1745;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==BINARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 859)) & ~0x3f) == 0 && ((1L << (_la - 859)) & 16777219L) != 0) );
			State = 1754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 1750;
				Match(WITH);
				State = 1751;
				Match(PERMISSION_SET);
				State = 1752;
				Match(EQUAL);
				State = 1753;
				_la = TokenStream.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assembly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_assembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_assembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assemblyContext drop_assembly() {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(Context, State);
		EnterRule(_localctx, 114, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756;
			Match(DROP);
			State = 1757;
			Match(ASSEMBLY);
			State = 1760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1758;
				Match(IF);
				State = 1759;
				Match(EXISTS);
				}
			}

			State = 1766;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1763;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1762;
						Match(COMMA);
						}
					}

					State = 1765;
					_localctx.assembly_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1768;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1770;
				Match(WITH);
				State = 1771;
				Match(NO);
				State = 1772;
				Match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Name;
		[System.Diagnostics.DebuggerNonUserCode] public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return GetRuleContext<Alter_asymmetric_key_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asymmetric_key_optionContext asymmetric_key_option() {
			return GetRuleContext<Asymmetric_key_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_keyContext alter_asymmetric_key() {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(Context, State);
		EnterRule(_localctx, 116, RULE_alter_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775;
			alter_asymmetric_key_start();
			State = 1776;
			_localctx.Asym_Key_Name = id_();
			State = 1781;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 1777;
				asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				State = 1778;
				Match(REMOVE);
				State = 1779;
				Match(PRIVATE);
				State = 1780;
				Match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_key_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asymmetric_key_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(Context, State);
		EnterRule(_localctx, 118, RULE_alter_asymmetric_key_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1783;
			Match(ALTER);
			State = 1784;
			Match(ASYMMETRIC);
			State = 1785;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return GetRuleContext<Asymmetric_key_option_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asymmetric_key_password_change_optionContext[] asymmetric_key_password_change_option() {
			return GetRuleContexts<Asymmetric_key_password_change_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return GetRuleContext<Asymmetric_key_password_change_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_optionContext asymmetric_key_option() {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(Context, State);
		EnterRule(_localctx, 120, RULE_asymmetric_key_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787;
			asymmetric_key_option_start();
			State = 1788;
			asymmetric_key_password_change_option();
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1789;
				Match(COMMA);
				State = 1790;
				asymmetric_key_password_change_option();
				}
			}

			State = 1793;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_option_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_option_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_option_startContext asymmetric_key_option_start() {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(Context, State);
		EnterRule(_localctx, 122, RULE_asymmetric_key_option_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1795;
			Match(WITH);
			State = 1796;
			Match(PRIVATE);
			State = 1797;
			Match(KEY);
			State = 1798;
			Match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_password_change_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_password_change_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_password_change_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_password_change_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_password_change_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(Context, State);
		EnterRule(_localctx, 124, RULE_asymmetric_key_password_change_option);
		try {
			State = 1810;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1800;
				Match(DECRYPTION);
				State = 1801;
				Match(BY);
				State = 1802;
				Match(PASSWORD);
				State = 1803;
				Match(EQUAL);
				State = 1804;
				Match(STRING);
				}
				break;
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1805;
				Match(ENCRYPTION);
				State = 1806;
				Match(BY);
				State = 1807;
				Match(PASSWORD);
				State = 1808;
				Match(EQUAL);
				State = 1809;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Nam;
		public Id_Context database_principal_name;
		public Id_Context Assembly_Name;
		public Id_Context Provider_Name;
		public IToken provider_key_name;
		public IToken asymmetric_key_password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_asymmetric_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_asymmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_asymmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_asymmetric_keyContext create_asymmetric_key() {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(Context, State);
		EnterRule(_localctx, 126, RULE_create_asymmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			Match(CREATE);
			State = 1813;
			Match(ASYMMETRIC);
			State = 1814;
			Match(KEY);
			State = 1815;
			_localctx.Asym_Key_Nam = id_();
			State = 1818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 1816;
				Match(AUTHORIZATION);
				State = 1817;
				_localctx.database_principal_name = id_();
				}
			}

			State = 1833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 1820;
				Match(FROM);
				State = 1831;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FILE:
					{
					State = 1821;
					Match(FILE);
					State = 1822;
					Match(EQUAL);
					State = 1823;
					Match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					State = 1824;
					Match(EXECUTABLE_FILE);
					State = 1825;
					Match(EQUAL);
					State = 1826;
					Match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					State = 1827;
					Match(ASSEMBLY);
					State = 1828;
					_localctx.Assembly_Name = id_();
					}
					break;
				case PROVIDER:
					{
					State = 1829;
					Match(PROVIDER);
					State = 1830;
					_localctx.Provider_Name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 1847;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 1835;
				Match(WITH);
				State = 1845;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALGORITHM:
					{
					State = 1836;
					Match(ALGORITHM);
					State = 1837;
					Match(EQUAL);
					State = 1838;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & 31L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					State = 1839;
					Match(PROVIDER_KEY_NAME);
					State = 1840;
					Match(EQUAL);
					State = 1841;
					_localctx.provider_key_name = Match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					State = 1842;
					Match(CREATION_DISPOSITION);
					State = 1843;
					Match(EQUAL);
					State = 1844;
					_la = TokenStream.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 1854;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 1849;
				Match(ENCRYPTION);
				State = 1850;
				Match(BY);
				State = 1851;
				Match(PASSWORD);
				State = 1852;
				Match(EQUAL);
				State = 1853;
				_localctx.asymmetric_key_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_asymmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_asymmetric_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_asymmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_asymmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_asymmetric_keyContext drop_asymmetric_key() {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(Context, State);
		EnterRule(_localctx, 128, RULE_drop_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856;
			Match(DROP);
			State = 1857;
			Match(ASYMMETRIC);
			State = 1858;
			Match(KEY);
			State = 1859;
			_localctx.key_name = id_();
			State = 1863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 1860;
				Match(REMOVE);
				State = 1861;
				Match(PROVIDER);
				State = 1862;
				Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorizationContext : ParserRuleContext {
		public Entity_nameContext entity;
		[System.Diagnostics.DebuggerNonUserCode] public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorizationContext alter_authorization() {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(Context, State);
		EnterRule(_localctx, 130, RULE_alter_authorization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865;
			alter_authorization_start();
			State = 1869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 1866;
				class_type();
				State = 1867;
				colon_colon();
				}
				break;
			}
			State = 1871;
			_localctx.entity = entity_name();
			State = 1872;
			entity_to();
			State = 1873;
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authorization_granteeContext : ParserRuleContext {
		public Id_Context principal_name;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorization_grantee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuthorization_grantee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuthorization_grantee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthorization_grantee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Authorization_granteeContext authorization_grantee() {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(Context, State);
		EnterRule(_localctx, 132, RULE_authorization_grantee);
		try {
			State = 1878;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1875;
				_localctx.principal_name = id_();
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1876;
				Match(SCHEMA);
				State = 1877;
				Match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_toContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_to(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_toContext entity_to() {
		Entity_toContext _localctx = new Entity_toContext(Context, State);
		EnterRule(_localctx, 134, RULE_entity_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880;
			Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_colonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Colon_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_colon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColon_colon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColon_colon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColon_colon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Colon_colonContext colon_colon() {
		Colon_colonContext _localctx = new Colon_colonContext(Context, State);
		EnterRule(_localctx, 136, RULE_colon_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882;
			Match(DOUBLE_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_startContext alter_authorization_start() {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(Context, State);
		EnterRule(_localctx, 138, RULE_alter_authorization_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884;
			Match(ALTER);
			State = 1885;
			Match(AUTHORIZATION);
			State = 1886;
			Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_sql_databaseContext : ParserRuleContext {
		public Entity_nameContext entity;
		[System.Diagnostics.DebuggerNonUserCode] public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return GetRuleContext<Class_type_for_sql_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_sql_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_sql_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_sql_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_sql_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(Context, State);
		EnterRule(_localctx, 140, RULE_alter_authorization_for_sql_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888;
			alter_authorization_start();
			State = 1892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1889;
				class_type_for_sql_database();
				State = 1890;
				colon_colon();
				}
				break;
			}
			State = 1894;
			_localctx.entity = entity_name();
			State = 1895;
			entity_to();
			State = 1896;
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_azure_dwContext : ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		[System.Diagnostics.DebuggerNonUserCode] public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return GetRuleContext<Entity_name_for_azure_dwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return GetRuleContext<Class_type_for_azure_dwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_azure_dw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_azure_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_azure_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(Context, State);
		EnterRule(_localctx, 142, RULE_alter_authorization_for_azure_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898;
			alter_authorization_start();
			State = 1902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1899;
				class_type_for_azure_dw();
				State = 1900;
				colon_colon();
				}
				break;
			}
			State = 1904;
			_localctx.entity = entity_name_for_azure_dw();
			State = 1905;
			entity_to();
			State = 1906;
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_parallel_dwContext : ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		[System.Diagnostics.DebuggerNonUserCode] public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return GetRuleContext<Entity_name_for_parallel_dwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return GetRuleContext<Class_type_for_parallel_dwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_parallel_dw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_parallel_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_parallel_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(Context, State);
		EnterRule(_localctx, 144, RULE_alter_authorization_for_parallel_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			alter_authorization_start();
			State = 1912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1909;
				class_type_for_parallel_dw();
				State = 1910;
				colon_colon();
				}
				break;
			}
			State = 1914;
			_localctx.entity = entity_name_for_parallel_dw();
			State = 1915;
			entity_to();
			State = 1916;
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 146, RULE_class_type);
		try {
			State = 1952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1918;
				Match(OBJECT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1919;
				Match(ASSEMBLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1920;
				Match(ASYMMETRIC);
				State = 1921;
				Match(KEY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1922;
				Match(AVAILABILITY);
				State = 1923;
				Match(GROUP);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1924;
				Match(CERTIFICATE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1925;
				Match(CONTRACT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1926;
				Match(TYPE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1927;
				Match(DATABASE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1928;
				Match(ENDPOINT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1929;
				Match(FULLTEXT);
				State = 1930;
				Match(CATALOG);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1931;
				Match(FULLTEXT);
				State = 1932;
				Match(STOPLIST);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1933;
				Match(MESSAGE);
				State = 1934;
				Match(TYPE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1935;
				Match(REMOTE);
				State = 1936;
				Match(SERVICE);
				State = 1937;
				Match(BINDING);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1938;
				Match(ROLE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1939;
				Match(ROUTE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1940;
				Match(SCHEMA);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1941;
				Match(SEARCH);
				State = 1942;
				Match(PROPERTY);
				State = 1943;
				Match(LIST);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1944;
				Match(SERVER);
				State = 1945;
				Match(ROLE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1946;
				Match(SERVICE);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1947;
				Match(SYMMETRIC);
				State = 1948;
				Match(KEY);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1949;
				Match(XML);
				State = 1950;
				Match(SCHEMA);
				State = 1951;
				Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_sql_databaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_sql_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_sql_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_sql_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_sql_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_sql_databaseContext class_type_for_sql_database() {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(Context, State);
		EnterRule(_localctx, 148, RULE_class_type_for_sql_database);
		try {
			State = 1975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1954;
				Match(OBJECT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1955;
				Match(ASSEMBLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1956;
				Match(ASYMMETRIC);
				State = 1957;
				Match(KEY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1958;
				Match(CERTIFICATE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1959;
				Match(TYPE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1960;
				Match(DATABASE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1961;
				Match(FULLTEXT);
				State = 1962;
				Match(CATALOG);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1963;
				Match(FULLTEXT);
				State = 1964;
				Match(STOPLIST);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1965;
				Match(ROLE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1966;
				Match(SCHEMA);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1967;
				Match(SEARCH);
				State = 1968;
				Match(PROPERTY);
				State = 1969;
				Match(LIST);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1970;
				Match(SYMMETRIC);
				State = 1971;
				Match(KEY);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1972;
				Match(XML);
				State = 1973;
				Match(SCHEMA);
				State = 1974;
				Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_azure_dwContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_azure_dw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_azure_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_azure_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_azure_dwContext class_type_for_azure_dw() {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(Context, State);
		EnterRule(_localctx, 150, RULE_class_type_for_azure_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1977;
			_la = TokenStream.LA(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_parallel_dwContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_parallel_dw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_parallel_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_parallel_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(Context, State);
		EnterRule(_localctx, 152, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_grantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_grantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_grant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_grant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_grant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_grant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_grantContext class_type_for_grant() {
		Class_type_for_grantContext _localctx = new Class_type_for_grantContext(Context, State);
		EnterRule(_localctx, 154, RULE_class_type_for_grant);
		int _la;
		try {
			State = 2072;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case APPLICATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1981;
				Match(APPLICATION);
				State = 1982;
				Match(ROLE);
				}
				break;
			case ASSEMBLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1983;
				Match(ASSEMBLY);
				}
				break;
			case ASYMMETRIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1984;
				Match(ASYMMETRIC);
				State = 1985;
				Match(KEY);
				}
				break;
			case AUDIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1986;
				Match(AUDIT);
				}
				break;
			case AVAILABILITY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1987;
				Match(AVAILABILITY);
				State = 1988;
				Match(GROUP);
				}
				break;
			case BROKER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1989;
				Match(BROKER);
				State = 1990;
				Match(PRIORITY);
				}
				break;
			case CERTIFICATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1991;
				Match(CERTIFICATE);
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1992;
				Match(COLUMN);
				State = 1993;
				_la = TokenStream.LA(1);
				if ( !(_la==ENCRYPTION || _la==MASTER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1994;
				Match(KEY);
				}
				break;
			case CONTRACT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1995;
				Match(CONTRACT);
				}
				break;
			case CREDENTIAL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1996;
				Match(CREDENTIAL);
				}
				break;
			case CRYPTOGRAPHIC:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1997;
				Match(CRYPTOGRAPHIC);
				State = 1998;
				Match(PROVIDER);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1999;
				Match(DATABASE);
				State = 2013;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUDIT:
					{
					State = 2000;
					Match(AUDIT);
					State = 2001;
					Match(SPECIFICATION);
					}
					break;
				case ENCRYPTION:
					{
					State = 2002;
					Match(ENCRYPTION);
					State = 2003;
					Match(KEY);
					}
					break;
				case EVENT:
					{
					State = 2004;
					Match(EVENT);
					State = 2005;
					Match(SESSION);
					}
					break;
				case SCOPED:
					{
					State = 2006;
					Match(SCOPED);
					State = 2011;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CONFIGURATION:
						{
						State = 2007;
						Match(CONFIGURATION);
						}
						break;
					case CREDENTIAL:
						{
						State = 2008;
						Match(CREDENTIAL);
						}
						break;
					case RESOURCE:
						{
						State = 2009;
						Match(RESOURCE);
						State = 2010;
						Match(GOVERNOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case DOUBLE_COLON:
					break;
				default:
					break;
				}
				}
				break;
			case ENDPOINT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2015;
				Match(ENDPOINT);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2016;
				Match(EVENT);
				State = 2017;
				Match(SESSION);
				}
				break;
			case NOTIFICATION:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2018;
				Match(NOTIFICATION);
				State = 2019;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==OBJECT || _la==SERVER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case EXTERNAL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2020;
				Match(EXTERNAL);
				State = 2031;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATA:
					{
					State = 2021;
					Match(DATA);
					State = 2022;
					Match(SOURCE);
					}
					break;
				case FILE:
					{
					State = 2023;
					Match(FILE);
					State = 2024;
					Match(FORMAT);
					}
					break;
				case LIBRARY:
					{
					State = 2025;
					Match(LIBRARY);
					}
					break;
				case RESOURCE:
					{
					State = 2026;
					Match(RESOURCE);
					State = 2027;
					Match(POOL);
					}
					break;
				case TABLE:
					{
					State = 2028;
					Match(TABLE);
					}
					break;
				case CATALOG:
					{
					State = 2029;
					Match(CATALOG);
					}
					break;
				case STOPLIST:
					{
					State = 2030;
					Match(STOPLIST);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LOGIN:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2033;
				Match(LOGIN);
				}
				break;
			case MASTER:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2034;
				Match(MASTER);
				State = 2035;
				Match(KEY);
				}
				break;
			case MESSAGE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2036;
				Match(MESSAGE);
				State = 2037;
				Match(TYPE);
				}
				break;
			case OBJECT:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2038;
				Match(OBJECT);
				}
				break;
			case PARTITION:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2039;
				Match(PARTITION);
				State = 2040;
				_la = TokenStream.LA(1);
				if ( !(_la==FUNCTION || _la==SCHEME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REMOTE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2041;
				Match(REMOTE);
				State = 2042;
				Match(SERVICE);
				State = 2043;
				Match(BINDING);
				}
				break;
			case RESOURCE:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2044;
				Match(RESOURCE);
				State = 2045;
				Match(GOVERNOR);
				}
				break;
			case ROLE:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2046;
				Match(ROLE);
				}
				break;
			case ROUTE:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2047;
				Match(ROUTE);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2048;
				Match(SCHEMA);
				}
				break;
			case SEARCH:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2049;
				Match(SEARCH);
				State = 2050;
				Match(PROPERTY);
				State = 2051;
				Match(LIST);
				}
				break;
			case SERVER:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2052;
				Match(SERVER);
				State = 2058;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUDIT:
					{
					{
					State = 2053;
					Match(AUDIT);
					State = 2055;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SPECIFICATION) {
						{
						State = 2054;
						Match(SPECIFICATION);
						}
					}

					}
					}
					break;
				case ROLE:
					{
					State = 2057;
					Match(ROLE);
					}
					break;
				case DOUBLE_COLON:
					break;
				default:
					break;
				}
				}
				break;
			case SERVICE:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2060;
				Match(SERVICE);
				}
				break;
			case SQL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2061;
				Match(SQL);
				State = 2062;
				Match(LOGIN);
				}
				break;
			case SYMMETRIC:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2063;
				Match(SYMMETRIC);
				State = 2064;
				Match(KEY);
				}
				break;
			case TRIGGER:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2065;
				Match(TRIGGER);
				State = 2066;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SERVER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2067;
				Match(TYPE);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2068;
				Match(USER);
				}
				break;
			case XML:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2069;
				Match(XML);
				State = 2070;
				Match(SCHEMA);
				State = 2071;
				Match(COLLECTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_availability_groupContext : ParserRuleContext {
		public Id_Context group_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_availability_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_availability_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_availability_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_availability_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_availability_groupContext drop_availability_group() {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(Context, State);
		EnterRule(_localctx, 156, RULE_drop_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074;
			Match(DROP);
			State = 2075;
			Match(AVAILABILITY);
			State = 2076;
			Match(GROUP);
			State = 2077;
			_localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_availability_group_startContext alter_availability_group_start() {
			return GetRuleContext<Alter_availability_group_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_availability_group_optionsContext alter_availability_group_options() {
			return GetRuleContext<Alter_availability_group_optionsContext>(0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_groupContext alter_availability_group() {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(Context, State);
		EnterRule(_localctx, 158, RULE_alter_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			alter_availability_group_start();
			State = 2080;
			alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_startContext : ParserRuleContext {
		public Id_Context group_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_startContext alter_availability_group_start() {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(Context, State);
		EnterRule(_localctx, 160, RULE_alter_availability_group_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082;
			Match(ALTER);
			State = 2083;
			Match(AVAILABILITY);
			State = 2084;
			Match(GROUP);
			State = 2085;
			_localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_optionsContext : ParserRuleContext {
		public IToken milliseconds;
		public Id_Context database_name;
		public IToken server_instance;
		public IToken session_timeout;
		public IToken ag_name;
		public IToken ag_name_modified;
		public IToken listener_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AVAILABILITY_MODE() { return GetTokens(TSqlParser.AVAILABILITY_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY_MODE(int i) {
			return GetToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FAILOVER_MODE() { return GetTokens(TSqlParser.FAILOVER_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILOVER_MODE(int i) {
			return GetToken(TSqlParser.FAILOVER_MODE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEEDING_MODE() { return GetTokens(TSqlParser.SEEDING_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEDING_MODE(int i) {
			return GetToken(TSqlParser.SEEDING_MODE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALLOW_CONNECTIONS() { return GetTokens(TSqlParser.ALLOW_CONNECTIONS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_CONNECTIONS(int i) {
			return GetToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AUTOMATIC() { return GetTokens(TSqlParser.AUTOMATIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOMATIC(int i) {
			return GetToken(TSqlParser.AUTOMATIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MANUAL() { return GetTokens(TSqlParser.MANUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANUAL(int i) {
			return GetToken(TSqlParser.MANUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LISTENER_URL() { return GetTokens(TSqlParser.LISTENER_URL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTENER_URL(int i) {
			return GetToken(TSqlParser.LISTENER_URL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(TSqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENY() { return GetToken(TSqlParser.DENY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ip_v4_failoverContext[] ip_v4_failover() {
			return GetRuleContexts<Ip_v4_failoverContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ip_v4_failoverContext ip_v4_failover(int i) {
			return GetRuleContext<Ip_v4_failoverContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ip_v6_failoverContext[] ip_v6_failover() {
			return GetRuleContexts<Ip_v6_failoverContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ip_v6_failoverContext ip_v6_failover(int i) {
			return GetRuleContext<Ip_v6_failoverContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_optionsContext alter_availability_group_options() {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(Context, State);
		EnterRule(_localctx, 162, RULE_alter_availability_group_options);
		int _la;
		try {
			State = 2442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2087;
				Match(SET);
				State = 2088;
				Match(LR_BRACKET);
				{
				State = 2104;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					State = 2089;
					Match(AUTOMATED_BACKUP_PREFERENCE);
					State = 2090;
					Match(EQUAL);
					State = 2091;
					_la = TokenStream.LA(1);
					if ( !(_la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY || _la==NONE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					State = 2092;
					Match(FAILURE_CONDITION_LEVEL);
					State = 2093;
					Match(EQUAL);
					State = 2094;
					Match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					State = 2095;
					Match(HEALTH_CHECK_TIMEOUT);
					State = 2096;
					Match(EQUAL);
					State = 2097;
					_localctx.milliseconds = Match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					State = 2098;
					Match(DB_FAILOVER);
					State = 2099;
					Match(EQUAL);
					State = 2100;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					State = 2101;
					Match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					State = 2102;
					Match(EQUAL);
					State = 2103;
					Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2106;
				Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2107;
				Match(ADD);
				State = 2108;
				Match(DATABASE);
				State = 2109;
				_localctx.database_name = id_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2110;
				Match(REMOVE);
				State = 2111;
				Match(DATABASE);
				State = 2112;
				_localctx.database_name = id_();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2113;
				Match(ADD);
				State = 2114;
				Match(REPLICA);
				State = 2115;
				Match(ON);
				State = 2116;
				_localctx.server_instance = Match(STRING);
				{
				State = 2117;
				Match(WITH);
				State = 2118;
				Match(LR_BRACKET);
				{
				State = 2122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDPOINT_URL) {
					{
					State = 2119;
					Match(ENDPOINT_URL);
					State = 2120;
					Match(EQUAL);
					State = 2121;
					Match(STRING);
					}
				}

				State = 2130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 2125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2124;
						Match(COMMA);
						}
					}

					State = 2127;
					Match(AVAILABILITY_MODE);
					State = 2128;
					Match(EQUAL);
					State = 2129;
					_la = TokenStream.LA(1);
					if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 2138;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
				case 1:
					{
					State = 2133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2132;
						Match(COMMA);
						}
					}

					State = 2135;
					Match(FAILOVER_MODE);
					State = 2136;
					Match(EQUAL);
					State = 2137;
					_la = TokenStream.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 2146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
				case 1:
					{
					State = 2141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2140;
						Match(COMMA);
						}
					}

					State = 2143;
					Match(SEEDING_MODE);
					State = 2144;
					Match(EQUAL);
					State = 2145;
					_la = TokenStream.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 2154;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
				case 1:
					{
					State = 2149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2148;
						Match(COMMA);
						}
					}

					State = 2151;
					Match(BACKUP_PRIORITY);
					State = 2152;
					Match(EQUAL);
					State = 2153;
					Match(DECIMAL);
					}
					break;
				}
				State = 2165;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 2157;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2156;
						Match(COMMA);
						}
					}

					State = 2159;
					Match(PRIMARY_ROLE);
					State = 2160;
					Match(LR_BRACKET);
					State = 2161;
					Match(ALLOW_CONNECTIONS);
					State = 2162;
					Match(EQUAL);
					State = 2163;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2164;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 2176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					State = 2168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2167;
						Match(COMMA);
						}
					}

					State = 2170;
					Match(SECONDARY_ROLE);
					State = 2171;
					Match(LR_BRACKET);
					State = 2172;
					Match(ALLOW_CONNECTIONS);
					State = 2173;
					Match(EQUAL);
					{
					State = 2174;
					Match(READ_ONLY);
					}
					State = 2175;
					Match(RR_BRACKET);
					}
				}

				}
				}
				State = 2178;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2179;
				Match(SECONDARY_ROLE);
				State = 2180;
				Match(LR_BRACKET);
				State = 2189;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					State = 2181;
					Match(ALLOW_CONNECTIONS);
					State = 2182;
					Match(EQUAL);
					State = 2183;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					State = 2184;
					Match(READ_ONLY_ROUTING_LIST);
					State = 2185;
					Match(EQUAL);
					{
					State = 2186;
					Match(LR_BRACKET);
					{
					{
					State = 2187;
					Match(STRING);
					}
					}
					State = 2188;
					Match(RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2191;
				Match(PRIMARY_ROLE);
				State = 2192;
				Match(LR_BRACKET);
				State = 2215;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					State = 2193;
					Match(ALLOW_CONNECTIONS);
					State = 2194;
					Match(EQUAL);
					State = 2195;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					State = 2196;
					Match(READ_ONLY_ROUTING_LIST);
					State = 2197;
					Match(EQUAL);
					{
					State = 2198;
					Match(LR_BRACKET);
					State = 2209;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						State = 2205;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							State = 2200;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 2199;
								Match(COMMA);
								}
							}

							State = 2202;
							Match(STRING);
							}
							}
							State = 2207;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case NONE:
						{
						State = 2208;
						Match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2211;
					Match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					State = 2212;
					Match(SESSION_TIMEOUT);
					State = 2213;
					Match(EQUAL);
					State = 2214;
					_localctx.session_timeout = Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2217;
				Match(MODIFY);
				State = 2218;
				Match(REPLICA);
				State = 2219;
				Match(ON);
				State = 2220;
				_localctx.server_instance = Match(STRING);
				State = 2278;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WITH:
					{
					State = 2221;
					Match(WITH);
					State = 2222;
					Match(LR_BRACKET);
					State = 2238;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ENDPOINT_URL:
						{
						State = 2223;
						Match(ENDPOINT_URL);
						State = 2224;
						Match(EQUAL);
						State = 2225;
						Match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						State = 2226;
						Match(AVAILABILITY_MODE);
						State = 2227;
						Match(EQUAL);
						State = 2228;
						_la = TokenStream.LA(1);
						if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						State = 2229;
						Match(FAILOVER_MODE);
						State = 2230;
						Match(EQUAL);
						State = 2231;
						_la = TokenStream.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						State = 2232;
						Match(SEEDING_MODE);
						State = 2233;
						Match(EQUAL);
						State = 2234;
						_la = TokenStream.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						State = 2235;
						Match(BACKUP_PRIORITY);
						State = 2236;
						Match(EQUAL);
						State = 2237;
						Match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					State = 2240;
					Match(SECONDARY_ROLE);
					State = 2241;
					Match(LR_BRACKET);
					State = 2250;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						State = 2242;
						Match(ALLOW_CONNECTIONS);
						State = 2243;
						Match(EQUAL);
						State = 2244;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						State = 2245;
						Match(READ_ONLY_ROUTING_LIST);
						State = 2246;
						Match(EQUAL);
						{
						State = 2247;
						Match(LR_BRACKET);
						{
						{
						State = 2248;
						Match(STRING);
						}
						}
						State = 2249;
						Match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					State = 2252;
					Match(PRIMARY_ROLE);
					State = 2253;
					Match(LR_BRACKET);
					State = 2276;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						State = 2254;
						Match(ALLOW_CONNECTIONS);
						State = 2255;
						Match(EQUAL);
						State = 2256;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						State = 2257;
						Match(READ_ONLY_ROUTING_LIST);
						State = 2258;
						Match(EQUAL);
						{
						State = 2259;
						Match(LR_BRACKET);
						State = 2270;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							State = 2266;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								State = 2261;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 2260;
									Match(COMMA);
									}
								}

								State = 2263;
								Match(STRING);
								}
								}
								State = 2268;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							break;
						case NONE:
							{
							State = 2269;
							Match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2272;
						Match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						State = 2273;
						Match(SESSION_TIMEOUT);
						State = 2274;
						Match(EQUAL);
						State = 2275;
						_localctx.session_timeout = Match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2280;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2281;
				Match(REMOVE);
				State = 2282;
				Match(REPLICA);
				State = 2283;
				Match(ON);
				State = 2284;
				Match(STRING);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2285;
				Match(JOIN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2286;
				Match(JOIN);
				State = 2287;
				Match(AVAILABILITY);
				State = 2288;
				Match(GROUP);
				State = 2289;
				Match(ON);
				State = 2312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2290;
						Match(COMMA);
						}
					}

					State = 2293;
					_localctx.ag_name = Match(STRING);
					State = 2294;
					Match(WITH);
					State = 2295;
					Match(LR_BRACKET);
					{
					State = 2296;
					Match(LISTENER_URL);
					State = 2297;
					Match(EQUAL);
					State = 2298;
					Match(STRING);
					State = 2299;
					Match(COMMA);
					State = 2300;
					Match(AVAILABILITY_MODE);
					State = 2301;
					Match(EQUAL);
					State = 2302;
					_la = TokenStream.LA(1);
					if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2303;
					Match(COMMA);
					State = 2304;
					Match(FAILOVER_MODE);
					State = 2305;
					Match(EQUAL);
					State = 2306;
					Match(MANUAL);
					State = 2307;
					Match(COMMA);
					State = 2308;
					Match(SEEDING_MODE);
					State = 2309;
					Match(EQUAL);
					State = 2310;
					_la = TokenStream.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2311;
					Match(RR_BRACKET);
					}
					}
					}
					State = 2314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2316;
				Match(MODIFY);
				State = 2317;
				Match(AVAILABILITY);
				State = 2318;
				Match(GROUP);
				State = 2319;
				Match(ON);
				State = 2354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2320;
						Match(COMMA);
						}
					}

					State = 2323;
					_localctx.ag_name_modified = Match(STRING);
					State = 2324;
					Match(WITH);
					State = 2325;
					Match(LR_BRACKET);
					{
					State = 2326;
					Match(LISTENER_URL);
					State = 2327;
					Match(EQUAL);
					State = 2328;
					Match(STRING);
					State = 2335;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
					case 1:
						{
						State = 2330;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2329;
							Match(COMMA);
							}
						}

						State = 2332;
						Match(AVAILABILITY_MODE);
						State = 2333;
						Match(EQUAL);
						State = 2334;
						_la = TokenStream.LA(1);
						if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					State = 2343;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
					case 1:
						{
						State = 2338;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2337;
							Match(COMMA);
							}
						}

						State = 2340;
						Match(FAILOVER_MODE);
						State = 2341;
						Match(EQUAL);
						State = 2342;
						Match(MANUAL);
						}
						break;
					}
					State = 2351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SEEDING_MODE || _la==COMMA) {
						{
						State = 2346;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2345;
							Match(COMMA);
							}
						}

						State = 2348;
						Match(SEEDING_MODE);
						State = 2349;
						Match(EQUAL);
						State = 2350;
						_la = TokenStream.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 2353;
					Match(RR_BRACKET);
					}
					}
					}
					State = 2356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2358;
				Match(GRANT);
				State = 2359;
				Match(CREATE);
				State = 2360;
				Match(ANY);
				State = 2361;
				Match(DATABASE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2362;
				Match(DENY);
				State = 2363;
				Match(CREATE);
				State = 2364;
				Match(ANY);
				State = 2365;
				Match(DATABASE);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2366;
				Match(FAILOVER);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2367;
				Match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2368;
				Match(ADD);
				State = 2369;
				Match(LISTENER);
				State = 2370;
				_localctx.listener_name = Match(STRING);
				State = 2371;
				Match(LR_BRACKET);
				State = 2407;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
				case 1:
					{
					State = 2372;
					Match(WITH);
					State = 2373;
					Match(DHCP);
					{
					State = 2374;
					Match(ON);
					State = 2375;
					Match(LR_BRACKET);
					State = 2376;
					ip_v4_failover();
					State = 2377;
					ip_v4_failover();
					State = 2378;
					Match(RR_BRACKET);
					}
					}
					break;
				case 2:
					{
					State = 2380;
					Match(WITH);
					State = 2381;
					Match(IP);
					State = 2382;
					Match(LR_BRACKET);
					{
					State = 2396;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 2384;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2383;
							Match(COMMA);
							}
						}

						State = 2386;
						Match(LR_BRACKET);
						State = 2392;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
						case 1:
							{
							State = 2387;
							ip_v4_failover();
							State = 2388;
							Match(COMMA);
							State = 2389;
							ip_v4_failover();
							}
							break;
						case 2:
							{
							State = 2391;
							ip_v6_failover();
							}
							break;
						}
						State = 2394;
						Match(RR_BRACKET);
						}
						}
						State = 2398;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					State = 2400;
					Match(RR_BRACKET);
					State = 2405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2401;
						Match(COMMA);
						State = 2402;
						Match(PORT);
						State = 2403;
						Match(EQUAL);
						State = 2404;
						Match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				State = 2409;
				Match(RR_BRACKET);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2411;
				Match(MODIFY);
				State = 2412;
				Match(LISTENER);
				State = 2427;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
					{
					State = 2413;
					Match(ADD);
					State = 2414;
					Match(IP);
					State = 2415;
					Match(LR_BRACKET);
					State = 2420;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
					case 1:
						{
						State = 2416;
						ip_v4_failover();
						State = 2417;
						ip_v4_failover();
						}
						break;
					case 2:
						{
						State = 2419;
						ip_v6_failover();
						}
						break;
					}
					State = 2422;
					Match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					State = 2424;
					Match(PORT);
					State = 2425;
					Match(EQUAL);
					State = 2426;
					Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2429;
				Match(RESTART);
				State = 2430;
				Match(LISTENER);
				State = 2431;
				Match(STRING);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2432;
				Match(REMOVE);
				State = 2433;
				Match(LISTENER);
				State = 2434;
				Match(STRING);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2435;
				Match(OFFLINE);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2436;
				Match(WITH);
				State = 2437;
				Match(LR_BRACKET);
				State = 2438;
				Match(DTC_SUPPORT);
				State = 2439;
				Match(EQUAL);
				State = 2440;
				Match(PER_DB);
				State = 2441;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v4_failoverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v4_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v4_failover; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v4_failover(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v4_failover(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIp_v4_failover(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v4_failoverContext ip_v4_failover() {
		Ip_v4_failoverContext _localctx = new Ip_v4_failoverContext(Context, State);
		EnterRule(_localctx, 164, RULE_ip_v4_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2444;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v6_failoverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v6_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v6_failover; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v6_failover(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v6_failover(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIp_v6_failover(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v6_failoverContext ip_v6_failover() {
		Ip_v6_failoverContext _localctx = new Ip_v6_failoverContext(Context, State);
		EnterRule(_localctx, 166, RULE_ip_v6_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2446;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public IToken RemoteServiceName;
		public IToken PriorityValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_broker_priority; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_broker_priority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_broker_priority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_broker_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(Context, State);
		EnterRule(_localctx, 168, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2448;
			_la = TokenStream.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2449;
			Match(BROKER);
			State = 2450;
			Match(PRIORITY);
			State = 2451;
			_localctx.ConversationPriorityName = id_();
			State = 2452;
			Match(FOR);
			State = 2453;
			Match(CONVERSATION);
			State = 2454;
			Match(SET);
			State = 2455;
			Match(LR_BRACKET);
			State = 2465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTRACT_NAME) {
				{
				State = 2456;
				Match(CONTRACT_NAME);
				State = 2457;
				Match(EQUAL);
				State = 2460;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					{
					State = 2458;
					id_();
					}
					}
					break;
				case ANY:
					{
					State = 2459;
					Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2462;
					Match(COMMA);
					}
				}

				}
			}

			State = 2479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				State = 2467;
				Match(LOCAL_SERVICE_NAME);
				State = 2468;
				Match(EQUAL);
				State = 2474;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case DOUBLE_FORWARD_SLASH:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 2470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOUBLE_FORWARD_SLASH) {
						{
						State = 2469;
						Match(DOUBLE_FORWARD_SLASH);
						}
					}

					State = 2472;
					id_();
					}
					break;
				case ANY:
					{
					State = 2473;
					Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2476;
					Match(COMMA);
					}
				}

				}
			}

			State = 2490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				State = 2481;
				Match(REMOTE_SERVICE_NAME);
				State = 2482;
				Match(EQUAL);
				State = 2485;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
					{
					State = 2483;
					_localctx.RemoteServiceName = Match(STRING);
					}
					break;
				case ANY:
					{
					State = 2484;
					Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2487;
					Match(COMMA);
					}
				}

				}
			}

			State = 2498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIORITY_LEVEL) {
				{
				State = 2492;
				Match(PRIORITY_LEVEL);
				State = 2493;
				Match(EQUAL);
				State = 2496;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
					{
					State = 2494;
					_localctx.PriorityValue = Match(DECIMAL);
					}
					break;
				case DEFAULT:
					{
					State = 2495;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 2500;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_broker_priority; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_broker_priority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_broker_priority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_broker_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_broker_priorityContext drop_broker_priority() {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(Context, State);
		EnterRule(_localctx, 170, RULE_drop_broker_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2502;
			Match(DROP);
			State = 2503;
			Match(BROKER);
			State = 2504;
			Match(PRIORITY);
			State = 2505;
			_localctx.ConversationPriorityName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_certificate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_certificate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_certificate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_certificateContext alter_certificate() {
		Alter_certificateContext _localctx = new Alter_certificateContext(Context, State);
		EnterRule(_localctx, 172, RULE_alter_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507;
			Match(ALTER);
			State = 2508;
			Match(CERTIFICATE);
			State = 2509;
			_localctx.certificate_name = id_();
			State = 2549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				{
				State = 2510;
				Match(REMOVE);
				State = 2511;
				Match(PRIVATE_KEY);
				}
				break;
			case 2:
				{
				State = 2512;
				Match(WITH);
				State = 2513;
				Match(PRIVATE);
				State = 2514;
				Match(KEY);
				State = 2515;
				Match(LR_BRACKET);
				State = 2538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 2538;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILE:
						{
						State = 2516;
						Match(FILE);
						State = 2517;
						Match(EQUAL);
						State = 2518;
						Match(STRING);
						State = 2520;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2519;
							Match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						State = 2522;
						Match(DECRYPTION);
						State = 2523;
						Match(BY);
						State = 2524;
						Match(PASSWORD);
						State = 2525;
						Match(EQUAL);
						State = 2526;
						Match(STRING);
						State = 2528;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2527;
							Match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						State = 2530;
						Match(ENCRYPTION);
						State = 2531;
						Match(BY);
						State = 2532;
						Match(PASSWORD);
						State = 2533;
						Match(EQUAL);
						State = 2534;
						Match(STRING);
						State = 2536;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2535;
							Match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2540;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				State = 2542;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				{
				State = 2543;
				Match(WITH);
				State = 2544;
				Match(ACTIVE);
				State = 2545;
				Match(FOR);
				State = 2546;
				Match(BEGIN_DIALOG);
				State = 2547;
				Match(EQUAL);
				State = 2548;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_encryption_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_encryption_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_encryption_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_encryption_keyContext alter_column_encryption_key() {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(Context, State);
		EnterRule(_localctx, 174, RULE_alter_column_encryption_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551;
			Match(ALTER);
			State = 2552;
			Match(COLUMN);
			State = 2553;
			Match(ENCRYPTION);
			State = 2554;
			Match(KEY);
			State = 2555;
			_localctx.column_encryption_key = id_();
			State = 2556;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2557;
			Match(VALUE);
			State = 2558;
			Match(LR_BRACKET);
			State = 2559;
			Match(COLUMN_MASTER_KEY);
			State = 2560;
			Match(EQUAL);
			State = 2561;
			_localctx.column_master_key_name = id_();
			State = 2570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2562;
				Match(COMMA);
				State = 2563;
				Match(ALGORITHM);
				State = 2564;
				Match(EQUAL);
				State = 2565;
				_localctx.algorithm_name = Match(STRING);
				State = 2566;
				Match(COMMA);
				State = 2567;
				Match(ENCRYPTED_VALUE);
				State = 2568;
				Match(EQUAL);
				State = 2569;
				Match(BINARY);
				}
			}

			State = 2572;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public IToken encrypted_value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLUMN_MASTER_KEY() { return GetTokens(TSqlParser.COLUMN_MASTER_KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_MASTER_KEY(int i) {
			return GetToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENCRYPTED_VALUE() { return GetTokens(TSqlParser.ENCRYPTED_VALUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED_VALUE(int i) {
			return GetToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_encryption_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_encryption_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_encryption_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_encryption_keyContext create_column_encryption_key() {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(Context, State);
		EnterRule(_localctx, 176, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2574;
			Match(CREATE);
			State = 2575;
			Match(COLUMN);
			State = 2576;
			Match(ENCRYPTION);
			State = 2577;
			Match(KEY);
			State = 2578;
			_localctx.column_encryption_key = id_();
			State = 2579;
			Match(WITH);
			State = 2580;
			Match(VALUES);
			State = 2600;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2581;
					Match(LR_BRACKET);
					State = 2583;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2582;
						Match(COMMA);
						}
					}

					State = 2585;
					Match(COLUMN_MASTER_KEY);
					State = 2586;
					Match(EQUAL);
					State = 2587;
					_localctx.column_master_key_name = id_();
					State = 2588;
					Match(COMMA);
					State = 2589;
					Match(ALGORITHM);
					State = 2590;
					Match(EQUAL);
					State = 2591;
					_localctx.algorithm_name = Match(STRING);
					State = 2592;
					Match(COMMA);
					State = 2593;
					Match(ENCRYPTED_VALUE);
					State = 2594;
					Match(EQUAL);
					State = 2595;
					_localctx.encrypted_value = Match(BINARY);
					State = 2596;
					Match(RR_BRACKET);
					State = 2598;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2597;
						Match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_certificate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_certificate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_certificate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_certificateContext drop_certificate() {
		Drop_certificateContext _localctx = new Drop_certificateContext(Context, State);
		EnterRule(_localctx, 178, RULE_drop_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2604;
			Match(DROP);
			State = 2605;
			Match(CERTIFICATE);
			State = 2606;
			_localctx.certificate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_encryption_keyContext : ParserRuleContext {
		public Id_Context key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_encryption_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_encryption_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_encryption_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_encryption_keyContext drop_column_encryption_key() {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(Context, State);
		EnterRule(_localctx, 180, RULE_drop_column_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2608;
			Match(DROP);
			State = 2609;
			Match(COLUMN);
			State = 2610;
			Match(ENCRYPTION);
			State = 2611;
			Match(KEY);
			State = 2612;
			_localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_master_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_master_keyContext drop_column_master_key() {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(Context, State);
		EnterRule(_localctx, 182, RULE_drop_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2614;
			Match(DROP);
			State = 2615;
			Match(COLUMN);
			State = 2616;
			Match(MASTER);
			State = 2617;
			Match(KEY);
			State = 2618;
			_localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_contractContext : ParserRuleContext {
		public Id_Context dropped_contract_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_contract; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_contract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_contract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_contract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_contractContext drop_contract() {
		Drop_contractContext _localctx = new Drop_contractContext(Context, State);
		EnterRule(_localctx, 184, RULE_drop_contract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620;
			Match(DROP);
			State = 2621;
			Match(CONTRACT);
			State = 2622;
			_localctx.dropped_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_credential; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_credential(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_credential(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_credentialContext drop_credential() {
		Drop_credentialContext _localctx = new Drop_credentialContext(Context, State);
		EnterRule(_localctx, 186, RULE_drop_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2624;
			Match(DROP);
			State = 2625;
			Match(CREDENTIAL);
			State = 2626;
			_localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_cryptograhic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_cryptograhic_provider; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_cryptograhic_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_cryptograhic_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_cryptograhic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(Context, State);
		EnterRule(_localctx, 188, RULE_drop_cryptograhic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628;
			Match(DROP);
			State = 2629;
			Match(CRYPTOGRAPHIC);
			State = 2630;
			Match(PROVIDER);
			State = 2631;
			_localctx.provider_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_databaseContext : ParserRuleContext {
		public Id_Context database_name_or_database_snapshot_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_databaseContext drop_database() {
		Drop_databaseContext _localctx = new Drop_databaseContext(Context, State);
		EnterRule(_localctx, 190, RULE_drop_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2633;
			Match(DROP);
			State = 2634;
			Match(DATABASE);
			State = 2637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2635;
				Match(IF);
				State = 2636;
				Match(EXISTS);
				}
			}

			State = 2643;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2640;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2639;
						Match(COMMA);
						}
					}

					State = 2642;
					_localctx.database_name_or_database_snapshot_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2645;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_audit_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_audit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_audit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_audit_specificationContext drop_database_audit_specification() {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(Context, State);
		EnterRule(_localctx, 192, RULE_drop_database_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2647;
			Match(DROP);
			State = 2648;
			Match(DATABASE);
			State = 2649;
			Match(AUDIT);
			State = 2650;
			Match(SPECIFICATION);
			State = 2651;
			_localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_encryption_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_database_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_encryption_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_encryption_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_encryption_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_encryption_keyContext drop_database_encryption_key() {
		Drop_database_encryption_keyContext _localctx = new Drop_database_encryption_keyContext(Context, State);
		EnterRule(_localctx, 194, RULE_drop_database_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2653;
			Match(DROP);
			State = 2654;
			Match(DATABASE);
			State = 2655;
			Match(ENCRYPTION);
			State = 2656;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_scoped_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_scoped_credential; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_scoped_credential(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_scoped_credential(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_scoped_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(Context, State);
		EnterRule(_localctx, 196, RULE_drop_database_scoped_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2658;
			Match(DROP);
			State = 2659;
			Match(DATABASE);
			State = 2660;
			Match(SCOPED);
			State = 2661;
			Match(CREDENTIAL);
			State = 2662;
			_localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_defaultContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context default_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_defaultContext drop_default() {
		Drop_defaultContext _localctx = new Drop_defaultContext(Context, State);
		EnterRule(_localctx, 198, RULE_drop_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2664;
			Match(DROP);
			State = 2665;
			Match(DEFAULT);
			State = 2668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2666;
				Match(IF);
				State = 2667;
				Match(EXISTS);
				}
			}

			{
			State = 2671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2670;
				Match(COMMA);
				}
			}

			State = 2676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				State = 2673;
				_localctx.schema_name = id_();
				State = 2674;
				Match(DOT);
				}
				break;
			}
			State = 2678;
			_localctx.default_name = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_endpointContext : ParserRuleContext {
		public Id_Context endPointName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_endpoint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_endpoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_endpoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_endpoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_endpointContext drop_endpoint() {
		Drop_endpointContext _localctx = new Drop_endpointContext(Context, State);
		EnterRule(_localctx, 200, RULE_drop_endpoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2680;
			Match(DROP);
			State = 2681;
			Match(ENDPOINT);
			State = 2682;
			_localctx.endPointName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_sourceContext : ParserRuleContext {
		public Id_Context external_data_source_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_sourceContext drop_external_data_source() {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(Context, State);
		EnterRule(_localctx, 202, RULE_drop_external_data_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2684;
			Match(DROP);
			State = 2685;
			Match(EXTERNAL);
			State = 2686;
			Match(DATA);
			State = 2687;
			Match(SOURCE);
			State = 2688;
			_localctx.external_data_source_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_file_formatContext : ParserRuleContext {
		public Id_Context external_file_format_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_file_format; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_file_format(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_file_format(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_file_format(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_file_formatContext drop_external_file_format() {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(Context, State);
		EnterRule(_localctx, 204, RULE_drop_external_file_format);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2690;
			Match(DROP);
			State = 2691;
			Match(EXTERNAL);
			State = 2692;
			Match(FILE);
			State = 2693;
			Match(FORMAT);
			State = 2694;
			_localctx.external_file_format_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_library; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_library(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_library(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_libraryContext drop_external_library() {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(Context, State);
		EnterRule(_localctx, 206, RULE_drop_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2696;
			Match(DROP);
			State = 2697;
			Match(EXTERNAL);
			State = 2698;
			Match(LIBRARY);
			State = 2699;
			_localctx.library_name = id_();
			State = 2702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 2700;
				Match(AUTHORIZATION);
				State = 2701;
				_localctx.owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_resource_pool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_resource_poolContext drop_external_resource_pool() {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(Context, State);
		EnterRule(_localctx, 208, RULE_drop_external_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2704;
			Match(DROP);
			State = 2705;
			Match(EXTERNAL);
			State = 2706;
			Match(RESOURCE);
			State = 2707;
			Match(POOL);
			State = 2708;
			_localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context table;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(Context, State);
		EnterRule(_localctx, 210, RULE_drop_external_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2710;
			Match(DROP);
			State = 2711;
			Match(EXTERNAL);
			State = 2712;
			Match(TABLE);
			State = 2716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 2713;
				_localctx.database_name = id_();
				State = 2714;
				Match(DOT);
				}
				break;
			}
			State = 2721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 2718;
				_localctx.schema_name = id_();
				State = 2719;
				Match(DOT);
				}
				break;
			}
			State = 2723;
			_localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_notificationsContext : ParserRuleContext {
		public Id_Context notification_name;
		public Id_Context queue_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_notifications; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_notifications(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_notifications(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_event_notifications(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_notificationsContext drop_event_notifications() {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(Context, State);
		EnterRule(_localctx, 212, RULE_drop_event_notifications);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2725;
			Match(DROP);
			State = 2726;
			Match(EVENT);
			State = 2727;
			Match(NOTIFICATION);
			State = 2732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2728;
					Match(COMMA);
					}
				}

				State = 2731;
				_localctx.notification_name = id_();
				}
				}
				State = 2734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
			State = 2736;
			Match(ON);
			State = 2741;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SERVER:
				{
				State = 2737;
				Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 2738;
				Match(DATABASE);
				}
				break;
			case QUEUE:
				{
				State = 2739;
				Match(QUEUE);
				State = 2740;
				_localctx.queue_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_session; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_session(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_session(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_event_session(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_sessionContext drop_event_session() {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(Context, State);
		EnterRule(_localctx, 214, RULE_drop_event_session);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2743;
			Match(DROP);
			State = 2744;
			Match(EVENT);
			State = 2745;
			Match(SESSION);
			State = 2746;
			_localctx.event_session_name = id_();
			State = 2747;
			Match(ON);
			State = 2748;
			Match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_catalog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_catalog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_catalog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_catalogContext drop_fulltext_catalog() {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(Context, State);
		EnterRule(_localctx, 216, RULE_drop_fulltext_catalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2750;
			Match(DROP);
			State = 2751;
			Match(FULLTEXT);
			State = 2752;
			Match(CATALOG);
			State = 2753;
			_localctx.catalog_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_indexContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context table;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_indexContext drop_fulltext_index() {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(Context, State);
		EnterRule(_localctx, 218, RULE_drop_fulltext_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2755;
			Match(DROP);
			State = 2756;
			Match(FULLTEXT);
			State = 2757;
			Match(INDEX);
			State = 2758;
			Match(ON);
			State = 2762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 2759;
				_localctx.schema = id_();
				State = 2760;
				Match(DOT);
				}
				break;
			}
			State = 2764;
			_localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_stoplist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_stoplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_stoplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(Context, State);
		EnterRule(_localctx, 220, RULE_drop_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2766;
			Match(DROP);
			State = 2767;
			Match(FULLTEXT);
			State = 2768;
			Match(STOPLIST);
			State = 2769;
			_localctx.stoplist_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_loginContext : ParserRuleContext {
		public Id_Context login_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_login; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_login(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_login(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_login(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_loginContext drop_login() {
		Drop_loginContext _localctx = new Drop_loginContext(Context, State);
		EnterRule(_localctx, 222, RULE_drop_login);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2771;
			Match(DROP);
			State = 2772;
			Match(LOGIN);
			State = 2773;
			_localctx.login_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_master_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_master_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_master_keyContext drop_master_key() {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(Context, State);
		EnterRule(_localctx, 224, RULE_drop_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2775;
			Match(DROP);
			State = 2776;
			Match(MASTER);
			State = 2777;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_message_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_message_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_message_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_message_typeContext drop_message_type() {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(Context, State);
		EnterRule(_localctx, 226, RULE_drop_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2779;
			Match(DROP);
			State = 2780;
			Match(MESSAGE);
			State = 2781;
			Match(TYPE);
			State = 2782;
			_localctx.message_type_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_functionContext drop_partition_function() {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(Context, State);
		EnterRule(_localctx, 228, RULE_drop_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2784;
			Match(DROP);
			State = 2785;
			Match(PARTITION);
			State = 2786;
			Match(FUNCTION);
			State = 2787;
			_localctx.partition_function_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_scheme; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_schemeContext drop_partition_scheme() {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(Context, State);
		EnterRule(_localctx, 230, RULE_drop_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2789;
			Match(DROP);
			State = 2790;
			Match(PARTITION);
			State = 2791;
			Match(SCHEME);
			State = 2792;
			_localctx.partition_scheme_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_queueContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_queue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_queue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_queue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_queueContext drop_queue() {
		Drop_queueContext _localctx = new Drop_queueContext(Context, State);
		EnterRule(_localctx, 232, RULE_drop_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2794;
			Match(DROP);
			State = 2795;
			Match(QUEUE);
			State = 2799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 2796;
				_localctx.database_name = id_();
				State = 2797;
				Match(DOT);
				}
				break;
			}
			State = 2804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 2801;
				_localctx.schema_name = id_();
				State = 2802;
				Match(DOT);
				}
				break;
			}
			State = 2806;
			_localctx.queue_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_remote_service_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_remote_service_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_remote_service_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_remote_service_bindingContext drop_remote_service_binding() {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(Context, State);
		EnterRule(_localctx, 234, RULE_drop_remote_service_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2808;
			Match(DROP);
			State = 2809;
			Match(REMOTE);
			State = 2810;
			Match(SERVICE);
			State = 2811;
			Match(BINDING);
			State = 2812;
			_localctx.binding_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_poolContext drop_resource_pool() {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(Context, State);
		EnterRule(_localctx, 236, RULE_drop_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2814;
			Match(DROP);
			State = 2815;
			Match(RESOURCE);
			State = 2816;
			Match(POOL);
			State = 2817;
			_localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_db_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_db_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_db_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_db_roleContext drop_db_role() {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(Context, State);
		EnterRule(_localctx, 238, RULE_drop_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2819;
			Match(DROP);
			State = 2820;
			Match(ROLE);
			State = 2823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2821;
				Match(IF);
				State = 2822;
				Match(EXISTS);
				}
			}

			State = 2825;
			_localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_routeContext : ParserRuleContext {
		public Id_Context route_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_route; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_route(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_route(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_route(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_routeContext drop_route() {
		Drop_routeContext _localctx = new Drop_routeContext(Context, State);
		EnterRule(_localctx, 240, RULE_drop_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2827;
			Match(DROP);
			State = 2828;
			Match(ROUTE);
			State = 2829;
			_localctx.route_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ruleContext drop_rule() {
		Drop_ruleContext _localctx = new Drop_ruleContext(Context, State);
		EnterRule(_localctx, 242, RULE_drop_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2831;
			Match(DROP);
			State = 2832;
			Match(RULE);
			State = 2835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 2833;
				Match(IF);
				State = 2834;
				Match(EXISTS);
				}
				break;
			}
			State = 2846;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 2838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2837;
					Match(COMMA);
					}
				}

				State = 2843;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 2840;
					_localctx.schema_name = id_();
					State = 2841;
					Match(DOT);
					}
					break;
				}
				State = 2845;
				_localctx.rule_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(Context, State);
		EnterRule(_localctx, 244, RULE_drop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2848;
			Match(DROP);
			State = 2849;
			Match(SCHEMA);
			State = 2852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2850;
				Match(IF);
				State = 2851;
				Match(EXISTS);
				}
			}

			State = 2854;
			_localctx.schema_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_property_listContext : ParserRuleContext {
		public Id_Context property_list_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_property_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_property_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_property_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_search_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_property_listContext drop_search_property_list() {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(Context, State);
		EnterRule(_localctx, 246, RULE_drop_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2856;
			Match(DROP);
			State = 2857;
			Match(SEARCH);
			State = 2858;
			Match(PROPERTY);
			State = 2859;
			Match(LIST);
			State = 2860;
			_localctx.property_list_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_security_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_security_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_security_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_security_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_security_policyContext drop_security_policy() {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(Context, State);
		EnterRule(_localctx, 248, RULE_drop_security_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2862;
			Match(DROP);
			State = 2863;
			Match(SECURITY);
			State = 2864;
			Match(POLICY);
			State = 2867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2865;
				Match(IF);
				State = 2866;
				Match(EXISTS);
				}
			}

			State = 2872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				{
				State = 2869;
				_localctx.schema_name = id_();
				State = 2870;
				Match(DOT);
				}
				break;
			}
			State = 2874;
			_localctx.security_policy_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context sequence_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(Context, State);
		EnterRule(_localctx, 250, RULE_drop_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2876;
			Match(DROP);
			State = 2877;
			Match(SEQUENCE);
			State = 2880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 2878;
				Match(IF);
				State = 2879;
				Match(EXISTS);
				}
				break;
			}
			State = 2896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 2883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2882;
					Match(COMMA);
					}
				}

				State = 2888;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
				case 1:
					{
					State = 2885;
					_localctx.database_name = id_();
					State = 2886;
					Match(DOT);
					}
					break;
				}
				State = 2893;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
				case 1:
					{
					State = 2890;
					_localctx.schema_name = id_();
					State = 2891;
					Match(DOT);
					}
					break;
				}
				State = 2895;
				_localctx.sequence_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_auditContext drop_server_audit() {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(Context, State);
		EnterRule(_localctx, 252, RULE_drop_server_audit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2898;
			Match(DROP);
			State = 2899;
			Match(SERVER);
			State = 2900;
			Match(AUDIT);
			State = 2901;
			_localctx.audit_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_audit_specificationContext drop_server_audit_specification() {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(Context, State);
		EnterRule(_localctx, 254, RULE_drop_server_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2903;
			Match(DROP);
			State = 2904;
			Match(SERVER);
			State = 2905;
			Match(AUDIT);
			State = 2906;
			Match(SPECIFICATION);
			State = 2907;
			_localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_roleContext : ParserRuleContext {
		public Id_Context role_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_roleContext drop_server_role() {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(Context, State);
		EnterRule(_localctx, 256, RULE_drop_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909;
			Match(DROP);
			State = 2910;
			Match(SERVER);
			State = 2911;
			Match(ROLE);
			State = 2912;
			_localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_serviceContext : ParserRuleContext {
		public Id_Context dropped_service_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_service; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_service(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_service(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_serviceContext drop_service() {
		Drop_serviceContext _localctx = new Drop_serviceContext(Context, State);
		EnterRule(_localctx, 258, RULE_drop_service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2914;
			Match(DROP);
			State = 2915;
			Match(SERVICE);
			State = 2916;
			_localctx.dropped_service_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_signatureContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context module_name;
		public Id_Context cert_name;
		public Id_Context Asym_key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_signatureContext drop_signature() {
		Drop_signatureContext _localctx = new Drop_signatureContext(Context, State);
		EnterRule(_localctx, 260, RULE_drop_signature);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2918;
			Match(DROP);
			State = 2920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COUNTER) {
				{
				State = 2919;
				Match(COUNTER);
				}
			}

			State = 2922;
			Match(SIGNATURE);
			State = 2923;
			Match(FROM);
			State = 2927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				{
				State = 2924;
				_localctx.schema_name = id_();
				State = 2925;
				Match(DOT);
				}
				break;
			}
			State = 2929;
			_localctx.module_name = id_();
			State = 2930;
			Match(BY);
			State = 2942;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2942;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
					case 1:
						{
						State = 2932;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2931;
							Match(COMMA);
							}
						}

						State = 2934;
						Match(CERTIFICATE);
						State = 2935;
						_localctx.cert_name = id_();
						}
						break;
					case 2:
						{
						State = 2937;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2936;
							Match(COMMA);
							}
						}

						State = 2939;
						Match(ASYMMETRIC);
						State = 2940;
						Match(KEY);
						State = 2941;
						_localctx.Asym_key_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2944;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statistics_name_azure_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context object_name;
		public Id_Context statistics_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics_name_azure_dw_and_pdw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics_name_azure_dw_and_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics_name_azure_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(Context, State);
		EnterRule(_localctx, 262, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2946;
			Match(DROP);
			State = 2947;
			Match(STATISTICS);
			State = 2951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				{
				State = 2948;
				_localctx.schema_name = id_();
				State = 2949;
				Match(DOT);
				}
				break;
			}
			State = 2953;
			_localctx.object_name = id_();
			State = 2954;
			Match(DOT);
			State = 2955;
			_localctx.statistics_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_symmetric_keyContext : ParserRuleContext {
		public Id_Context symmetric_key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_symmetric_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_symmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_symmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_symmetric_keyContext drop_symmetric_key() {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(Context, State);
		EnterRule(_localctx, 264, RULE_drop_symmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2957;
			Match(DROP);
			State = 2958;
			Match(SYMMETRIC);
			State = 2959;
			Match(KEY);
			State = 2960;
			_localctx.symmetric_key_name = id_();
			State = 2964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				{
				State = 2961;
				Match(REMOVE);
				State = 2962;
				Match(PROVIDER);
				State = 2963;
				Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_synonymContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context synonym_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_synonym; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_synonym(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_synonym(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_synonymContext drop_synonym() {
		Drop_synonymContext _localctx = new Drop_synonymContext(Context, State);
		EnterRule(_localctx, 266, RULE_drop_synonym);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2966;
			Match(DROP);
			State = 2967;
			Match(SYNONYM);
			State = 2970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2968;
				Match(IF);
				State = 2969;
				Match(EXISTS);
				}
			}

			State = 2975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				{
				State = 2972;
				_localctx.schema = id_();
				State = 2973;
				Match(DOT);
				}
				break;
			}
			State = 2977;
			_localctx.synonym_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_userContext : ParserRuleContext {
		public Id_Context user_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_user; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_user(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_user(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_userContext drop_user() {
		Drop_userContext _localctx = new Drop_userContext(Context, State);
		EnterRule(_localctx, 268, RULE_drop_user);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2979;
			Match(DROP);
			State = 2980;
			Match(USER);
			State = 2983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2981;
				Match(IF);
				State = 2982;
				Match(EXISTS);
				}
			}

			State = 2985;
			_localctx.user_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_workload_groupContext : ParserRuleContext {
		public Id_Context group_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_workload_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_workload_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_workload_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_workload_groupContext drop_workload_group() {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(Context, State);
		EnterRule(_localctx, 270, RULE_drop_workload_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2987;
			Match(DROP);
			State = 2988;
			Match(WORKLOAD);
			State = 2989;
			Match(GROUP);
			State = 2990;
			_localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_xml_schema_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_xml_schema_collection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_xml_schema_collection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_xml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(Context, State);
		EnterRule(_localctx, 272, RULE_drop_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2992;
			Match(DROP);
			State = 2993;
			Match(XML);
			State = 2994;
			Match(SCHEMA);
			State = 2995;
			Match(COLLECTION);
			State = 2999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 2996;
				_localctx.relational_schema = id_();
				State = 2997;
				Match(DOT);
				}
				break;
			}
			State = 3001;
			_localctx.sql_identifier = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDisable_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDisable_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisable_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disable_triggerContext disable_trigger() {
		Disable_triggerContext _localctx = new Disable_triggerContext(Context, State);
		EnterRule(_localctx, 274, RULE_disable_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3003;
			Match(DISABLE);
			State = 3004;
			Match(TRIGGER);
			State = 3019;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				State = 3014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3006;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3005;
						Match(COMMA);
						}
					}

					State = 3011;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
					case 1:
						{
						State = 3008;
						_localctx.schema_name = id_();
						State = 3009;
						Match(DOT);
						}
						break;
					}
					State = 3013;
					_localctx.trigger_name = id_();
					}
					}
					State = 3016;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
				}
				break;
			case ALL:
				{
				State = 3018;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3021;
			Match(ON);
			State = 3031;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 3025;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
				case 1:
					{
					State = 3022;
					_localctx.schema_id = id_();
					State = 3023;
					Match(DOT);
					}
					break;
				}
				State = 3027;
				_localctx.object_name = id_();
				}
				break;
			case DATABASE:
				{
				State = 3028;
				Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 3029;
				Match(ALL);
				State = 3030;
				Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnable_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(Context, State);
		EnterRule(_localctx, 276, RULE_enable_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3033;
			Match(ENABLE);
			State = 3034;
			Match(TRIGGER);
			State = 3049;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				State = 3044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3036;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3035;
						Match(COMMA);
						}
					}

					State = 3041;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
					case 1:
						{
						State = 3038;
						_localctx.schema_name = id_();
						State = 3039;
						Match(DOT);
						}
						break;
					}
					State = 3043;
					_localctx.trigger_name = id_();
					}
					}
					State = 3046;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
				}
				break;
			case ALL:
				{
				State = 3048;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3051;
			Match(ON);
			State = 3061;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 3055;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
				case 1:
					{
					State = 3052;
					_localctx.schema_id = id_();
					State = 3053;
					Match(DOT);
					}
					break;
				}
				State = 3057;
				_localctx.object_name = id_();
				}
				break;
			case DATABASE:
				{
				State = 3058;
				Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 3059;
				Match(ALL);
				State = 3060;
				Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_tableContext : ParserRuleContext {
		public IToken seconds;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLock_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLock_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_tableContext lock_table() {
		Lock_tableContext _localctx = new Lock_tableContext(Context, State);
		EnterRule(_localctx, 278, RULE_lock_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3063;
			Match(LOCK);
			State = 3064;
			Match(TABLE);
			State = 3065;
			table_name();
			State = 3066;
			Match(IN);
			State = 3067;
			_la = TokenStream.LA(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3068;
			Match(MODE);
			State = 3072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 3069;
				Match(WAIT);
				State = 3070;
				_localctx.seconds = Match(DECIMAL);
				}
				break;
			case 2:
				{
				State = 3071;
				Match(NOWAIT);
				}
				break;
			}
			State = 3075;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				{
				State = 3074;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(TSqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_tableContext truncate_table() {
		Truncate_tableContext _localctx = new Truncate_tableContext(Context, State);
		EnterRule(_localctx, 280, RULE_truncate_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3077;
			Match(TRUNCATE);
			State = 3078;
			Match(TABLE);
			State = 3079;
			table_name();
			State = 3099;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				{
				State = 3080;
				Match(WITH);
				State = 3081;
				Match(LR_BRACKET);
				State = 3082;
				Match(PARTITIONS);
				State = 3083;
				Match(LR_BRACKET);
				State = 3093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3085;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3084;
						Match(COMMA);
						}
					}

					State = 3091;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
					case 1:
						{
						State = 3087;
						Match(DECIMAL);
						}
						break;
					case 2:
						{
						State = 3088;
						Match(DECIMAL);
						State = 3089;
						Match(TO);
						State = 3090;
						Match(DECIMAL);
						}
						break;
					}
					}
					}
					State = 3095;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				State = 3097;
				Match(RR_BRACKET);
				State = 3098;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken key_store_provider_name;
		public IToken key_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_master_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_column_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_master_keyContext create_column_master_key() {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(Context, State);
		EnterRule(_localctx, 282, RULE_create_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3101;
			Match(CREATE);
			State = 3102;
			Match(COLUMN);
			State = 3103;
			Match(MASTER);
			State = 3104;
			Match(KEY);
			State = 3105;
			_localctx.key_name = id_();
			State = 3106;
			Match(WITH);
			State = 3107;
			Match(LR_BRACKET);
			State = 3108;
			Match(KEY_STORE_PROVIDER_NAME);
			State = 3109;
			Match(EQUAL);
			State = 3110;
			_localctx.key_store_provider_name = Match(STRING);
			State = 3111;
			Match(COMMA);
			State = 3112;
			Match(KEY_PATH);
			State = 3113;
			Match(EQUAL);
			State = 3114;
			_localctx.key_path = Match(STRING);
			State = 3115;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_credential; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_credential(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_credential(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_credentialContext alter_credential() {
		Alter_credentialContext _localctx = new Alter_credentialContext(Context, State);
		EnterRule(_localctx, 284, RULE_alter_credential);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3117;
			Match(ALTER);
			State = 3118;
			Match(CREDENTIAL);
			State = 3119;
			_localctx.credential_name = id_();
			State = 3120;
			Match(WITH);
			State = 3121;
			Match(IDENTITY);
			State = 3122;
			Match(EQUAL);
			State = 3123;
			_localctx.identity_name = Match(STRING);
			State = 3128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3124;
				Match(COMMA);
				State = 3125;
				Match(SECRET);
				State = 3126;
				Match(EQUAL);
				State = 3127;
				_localctx.secret = Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public Id_Context cryptographic_provider_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_credential; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_credential(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_credential(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_credentialContext create_credential() {
		Create_credentialContext _localctx = new Create_credentialContext(Context, State);
		EnterRule(_localctx, 286, RULE_create_credential);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3130;
			Match(CREATE);
			State = 3131;
			Match(CREDENTIAL);
			State = 3132;
			_localctx.credential_name = id_();
			State = 3133;
			Match(WITH);
			State = 3134;
			Match(IDENTITY);
			State = 3135;
			Match(EQUAL);
			State = 3136;
			_localctx.identity_name = Match(STRING);
			State = 3141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3137;
				Match(COMMA);
				State = 3138;
				Match(SECRET);
				State = 3139;
				Match(EQUAL);
				State = 3140;
				_localctx.secret = Match(STRING);
				}
			}

			State = 3147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3143;
				Match(FOR);
				State = 3144;
				Match(CRYPTOGRAPHIC);
				State = 3145;
				Match(PROVIDER);
				State = 3146;
				_localctx.cryptographic_provider_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken crypto_provider_ddl_file;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_cryptographic_provider; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_cryptographic_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_cryptographic_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_cryptographic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_cryptographic_providerContext alter_cryptographic_provider() {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(Context, State);
		EnterRule(_localctx, 288, RULE_alter_cryptographic_provider);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3149;
			Match(ALTER);
			State = 3150;
			Match(CRYPTOGRAPHIC);
			State = 3151;
			Match(PROVIDER);
			State = 3152;
			_localctx.provider_name = id_();
			State = 3157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 3153;
				Match(FROM);
				State = 3154;
				Match(FILE);
				State = 3155;
				Match(EQUAL);
				State = 3156;
				_localctx.crypto_provider_ddl_file = Match(STRING);
				}
			}

			State = 3160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 3159;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken path_of_DLL;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_cryptographic_provider; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_cryptographic_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_cryptographic_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_cryptographic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_cryptographic_providerContext create_cryptographic_provider() {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(Context, State);
		EnterRule(_localctx, 290, RULE_create_cryptographic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3162;
			Match(CREATE);
			State = 3163;
			Match(CRYPTOGRAPHIC);
			State = 3164;
			Match(PROVIDER);
			State = 3165;
			_localctx.provider_name = id_();
			State = 3166;
			Match(FROM);
			State = 3167;
			Match(FILE);
			State = 3168;
			Match(EQUAL);
			State = 3169;
			_localctx.path_of_DLL = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_event_notificationContext : ParserRuleContext {
		public Id_Context event_notification_name;
		public Id_Context queue_name;
		public Id_Context event_type_or_group;
		public IToken broker_service;
		public IToken broker_service_specifier_or_current_database;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_event_notification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_event_notification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_event_notification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_event_notification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_event_notificationContext create_event_notification() {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(Context, State);
		EnterRule(_localctx, 292, RULE_create_event_notification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3171;
			Match(CREATE);
			State = 3172;
			Match(EVENT);
			State = 3173;
			Match(NOTIFICATION);
			State = 3174;
			_localctx.event_notification_name = id_();
			State = 3175;
			Match(ON);
			State = 3180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SERVER:
				{
				State = 3176;
				Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 3177;
				Match(DATABASE);
				}
				break;
			case QUEUE:
				{
				State = 3178;
				Match(QUEUE);
				State = 3179;
				_localctx.queue_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3182;
				Match(WITH);
				State = 3183;
				Match(FAN_IN);
				}
			}

			State = 3186;
			Match(FOR);
			State = 3191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3187;
					Match(COMMA);
					}
				}

				State = 3190;
				_localctx.event_type_or_group = id_();
				}
				}
				State = 3193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
			State = 3195;
			Match(TO);
			State = 3196;
			Match(SERVICE);
			State = 3197;
			_localctx.broker_service = Match(STRING);
			State = 3198;
			Match(COMMA);
			State = 3199;
			_localctx.broker_service_specifier_or_current_database = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context event_name;
		public Id_Context event_customizable_attributue;
		public Id_Context action_name;
		public Id_Context target_name;
		public Id_Context target_parameter_name;
		public IToken max_memory;
		public IToken max_dispatch_latency_seconds;
		public IToken max_event_size;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EVENT() { return GetTokens(TSqlParser.EVENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT(int i) {
			return GetToken(TSqlParser.EVENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KB() { return GetTokens(TSqlParser.KB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KB(int i) {
			return GetToken(TSqlParser.KB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ACTION() { return GetTokens(TSqlParser.ACTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION(int i) {
			return GetToken(TSqlParser.ACTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHERE() { return GetTokens(TSqlParser.WHERE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE(int i) {
			return GetToken(TSqlParser.WHERE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_event_session; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_event_session(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_event_session(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_event_session(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_event_sessionContext create_or_alter_event_session() {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(Context, State);
		EnterRule(_localctx, 294, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3201;
			_la = TokenStream.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3202;
			Match(EVENT);
			State = 3203;
			Match(SESSION);
			State = 3204;
			_localctx.event_session_name = id_();
			State = 3205;
			Match(ON);
			State = 3206;
			Match(SERVER);
			State = 3274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,258,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3208;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3207;
						Match(COMMA);
						}
					}

					State = 3210;
					Match(ADD);
					State = 3211;
					Match(EVENT);
					{
					State = 3215;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
					case 1:
						{
						State = 3212;
						_localctx.event_module_guid = id_();
						State = 3213;
						Match(DOT);
						}
						break;
					}
					State = 3217;
					_localctx.event_package_name = id_();
					State = 3218;
					Match(DOT);
					State = 3219;
					_localctx.event_name = id_();
					}
					State = 3269;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,257,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3221;
							Match(LR_BRACKET);
							State = 3235;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==SET) {
								{
								State = 3222;
								Match(SET);
								State = 3232;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
								while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
									if ( _alt==1 ) {
										{
										{
										State = 3224;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la==COMMA) {
											{
											State = 3223;
											Match(COMMA);
											}
										}

										State = 3226;
										_localctx.event_customizable_attributue = id_();
										State = 3227;
										Match(EQUAL);
										State = 3228;
										_la = TokenStream.LA(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
										    Consume();
										}
										}
										} 
									}
									State = 3234;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
								}
								}
							}

							State = 3257;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 3237;
								Match(ACTION);
								State = 3238;
								Match(LR_BRACKET);
								State = 3251;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								do {
									{
									{
									State = 3240;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 3239;
										Match(COMMA);
										}
									}

									State = 3245;
									ErrorHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
									case 1:
										{
										State = 3242;
										_localctx.event_module_guid = id_();
										State = 3243;
										Match(DOT);
										}
										break;
									}
									State = 3247;
									_localctx.event_package_name = id_();
									State = 3248;
									Match(DOT);
									State = 3249;
									_localctx.action_name = id_();
									}
									}
									State = 3253;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								} while ( _la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
								State = 3255;
								Match(RR_BRACKET);
								}
								}
								State = 3259;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==ACTION );
							State = 3263;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==WHERE) {
								{
								State = 3261;
								Match(WHERE);
								State = 3262;
								event_session_predicate_expression();
								}
							}

							State = 3265;
							Match(RR_BRACKET);
							}
							} 
						}
						State = 3271;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,257,Context);
					}
					}
					} 
				}
				State = 3276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,258,Context);
			}
			State = 3293;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,261,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3277;
						Match(COMMA);
						}
					}

					State = 3280;
					Match(DROP);
					State = 3281;
					Match(EVENT);
					State = 3285;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
					case 1:
						{
						State = 3282;
						_localctx.event_module_guid = id_();
						State = 3283;
						Match(DOT);
						}
						break;
					}
					State = 3287;
					_localctx.event_package_name = id_();
					State = 3288;
					Match(DOT);
					State = 3289;
					_localctx.event_name = id_();
					}
					} 
				}
				State = 3295;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,261,Context);
			}
			State = 3337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 3296;
					Match(ADD);
					State = 3297;
					Match(TARGET);
					State = 3301;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
					case 1:
						{
						State = 3298;
						_localctx.event_module_guid = id_();
						State = 3299;
						Match(DOT);
						}
						break;
					}
					State = 3303;
					_localctx.event_package_name = id_();
					State = 3304;
					Match(DOT);
					State = 3305;
					_localctx.target_name = id_();
					}
					State = 3332;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,268,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3307;
							Match(LR_BRACKET);
							State = 3308;
							Match(SET);
							State = 3324;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 3310;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 3309;
									Match(COMMA);
									}
								}

								State = 3312;
								_localctx.target_parameter_name = id_();
								State = 3313;
								Match(EQUAL);
								State = 3322;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
								case LR_BRACKET:
									{
									State = 3315;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==LR_BRACKET) {
										{
										State = 3314;
										Match(LR_BRACKET);
										}
									}

									State = 3317;
									Match(DECIMAL);
									State = 3319;
									ErrorHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
									case 1:
										{
										State = 3318;
										Match(RR_BRACKET);
										}
										break;
									}
									}
									break;
								case STRING:
									{
									State = 3321;
									Match(STRING);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								State = 3326;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
							State = 3328;
							Match(RR_BRACKET);
							}
							} 
						}
						State = 3334;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,268,Context);
					}
					}
					} 
				}
				State = 3339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
			}
			State = 3353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,271,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3340;
					Match(DROP);
					State = 3341;
					Match(TARGET);
					State = 3345;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
					case 1:
						{
						State = 3342;
						_localctx.event_module_guid = id_();
						State = 3343;
						Match(DOT);
						}
						break;
					}
					State = 3347;
					_localctx.event_package_name = id_();
					State = 3348;
					Match(DOT);
					State = 3349;
					_localctx.target_name = id_();
					}
					} 
				}
				State = 3355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,271,Context);
			}
			State = 3421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				{
				State = 3356;
				Match(WITH);
				State = 3357;
				Match(LR_BRACKET);
				State = 3365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
				case 1:
					{
					State = 3359;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3358;
						Match(COMMA);
						}
					}

					State = 3361;
					Match(MAX_MEMORY);
					State = 3362;
					Match(EQUAL);
					State = 3363;
					_localctx.max_memory = Match(DECIMAL);
					State = 3364;
					_la = TokenStream.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3373;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
				case 1:
					{
					State = 3368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3367;
						Match(COMMA);
						}
					}

					State = 3370;
					Match(EVENT_RETENTION_MODE);
					State = 3371;
					Match(EQUAL);
					State = 3372;
					_la = TokenStream.LA(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3385;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
				case 1:
					{
					State = 3376;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3375;
						Match(COMMA);
						}
					}

					State = 3378;
					Match(MAX_DISPATCH_LATENCY);
					State = 3379;
					Match(EQUAL);
					State = 3383;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DECIMAL:
						{
						State = 3380;
						_localctx.max_dispatch_latency_seconds = Match(DECIMAL);
						State = 3381;
						Match(SECONDS);
						}
						break;
					case INFINITE:
						{
						State = 3382;
						Match(INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 3394;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 3388;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3387;
						Match(COMMA);
						}
					}

					State = 3390;
					Match(MAX_EVENT_SIZE);
					State = 3391;
					Match(EQUAL);
					State = 3392;
					_localctx.max_event_size = Match(DECIMAL);
					State = 3393;
					_la = TokenStream.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
				case 1:
					{
					State = 3397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3396;
						Match(COMMA);
						}
					}

					State = 3399;
					Match(MEMORY_PARTITION_MODE);
					State = 3400;
					Match(EQUAL);
					State = 3401;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & 655361L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3410;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
				case 1:
					{
					State = 3405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3404;
						Match(COMMA);
						}
					}

					State = 3407;
					Match(TRACK_CAUSALITY);
					State = 3408;
					Match(EQUAL);
					State = 3409;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTUP_STATE || _la==COMMA) {
					{
					State = 3413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3412;
						Match(COMMA);
						}
					}

					State = 3415;
					Match(STARTUP_STATE);
					State = 3416;
					Match(EQUAL);
					State = 3417;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3420;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				{
				State = 3423;
				Match(STATE);
				State = 3424;
				Match(EQUAL);
				State = 3425;
				_la = TokenStream.LA(1);
				if ( !(_la==START || _la==STOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_session_predicate_factorContext[] event_session_predicate_factor() {
			return GetRuleContexts<Event_session_predicate_factorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return GetRuleContext<Event_session_predicate_factorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_expressionContext event_session_predicate_expression() {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(Context, State);
		EnterRule(_localctx, 296, RULE_event_session_predicate_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3428;
					Match(COMMA);
					}
				}

				State = 3432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND || _la==OR) {
					{
					State = 3431;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 3434;
					Match(NOT);
					}
				}

				State = 3442;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
				case 1:
					{
					State = 3437;
					event_session_predicate_factor();
					}
					break;
				case 2:
					{
					State = 3438;
					Match(LR_BRACKET);
					State = 3439;
					event_session_predicate_expression();
					State = 3440;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				}
				State = 3446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADD || _la==AND || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 145381894190530561L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 703687461232127L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return GetRuleContext<Event_session_predicate_leafContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return GetRuleContext<Event_session_predicate_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_factorContext event_session_predicate_factor() {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(Context, State);
		EnterRule(_localctx, 298, RULE_event_session_predicate_factor);
		try {
			State = 3453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3448;
				event_session_predicate_leaf();
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3449;
				Match(LR_BRACKET);
				State = 3450;
				event_session_predicate_expression();
				State = 3451;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_leafContext : ParserRuleContext {
		public Id_Context event_field_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context predicate_source_name;
		public Id_Context predicate_compare_name;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_leaf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_leaf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_leaf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_leaf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_leafContext event_session_predicate_leaf() {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(Context, State);
		EnterRule(_localctx, 300, RULE_event_session_predicate_leaf);
		int _la;
		try {
			State = 3511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
				case 1:
					{
					State = 3455;
					_localctx.event_field_name = id_();
					}
					break;
				case 2:
					{
					State = 3466;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
					case 1:
						{
						State = 3456;
						_localctx.event_field_name = id_();
						}
						break;
					case 2:
						{
						{
						State = 3460;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
						case 1:
							{
							State = 3457;
							_localctx.event_module_guid = id_();
							State = 3458;
							Match(DOT);
							}
							break;
						}
						State = 3462;
						_localctx.event_package_name = id_();
						State = 3463;
						Match(DOT);
						State = 3464;
						_localctx.predicate_source_name = id_();
						}
						}
						break;
					}
					State = 3479;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
					case 1:
						{
						State = 3468;
						Match(EQUAL);
						}
						break;
					case 2:
						{
						{
						State = 3469;
						Match(LESS);
						State = 3470;
						Match(GREATER);
						}
						}
						break;
					case 3:
						{
						{
						State = 3471;
						Match(EXCLAMATION);
						State = 3472;
						Match(EQUAL);
						}
						}
						break;
					case 4:
						{
						State = 3473;
						Match(GREATER);
						}
						break;
					case 5:
						{
						{
						State = 3474;
						Match(GREATER);
						State = 3475;
						Match(EQUAL);
						}
						}
						break;
					case 6:
						{
						State = 3476;
						Match(LESS);
						}
						break;
					case 7:
						{
						State = 3477;
						Match(LESS);
						State = 3478;
						Match(EQUAL);
						}
						break;
					}
					State = 3481;
					_la = TokenStream.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3488;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
				case 1:
					{
					State = 3485;
					_localctx.event_module_guid = id_();
					State = 3486;
					Match(DOT);
					}
					break;
				}
				State = 3490;
				_localctx.event_package_name = id_();
				State = 3491;
				Match(DOT);
				State = 3492;
				_localctx.predicate_compare_name = id_();
				State = 3493;
				Match(LR_BRACKET);
				State = 3507;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
				case 1:
					{
					State = 3494;
					_localctx.event_field_name = id_();
					}
					break;
				case 2:
					{
					{
					State = 3498;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
					case 1:
						{
						State = 3495;
						_localctx.event_module_guid = id_();
						State = 3496;
						Match(DOT);
						}
						break;
					}
					State = 3500;
					_localctx.event_package_name = id_();
					State = 3501;
					Match(DOT);
					State = 3502;
					_localctx.predicate_source_name = id_();
					}
					State = 3504;
					Match(COMMA);
					State = 3505;
					_la = TokenStream.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3509;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_sourceContext : ParserRuleContext {
		public Id_Context data_source_name;
		public IToken location;
		public IToken resource_manager_location;
		public Id_Context credential_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCATION() { return GetTokens(TSqlParser.LOCATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION(int i) {
			return GetToken(TSqlParser.LOCATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESOURCE_MANAGER_LOCATION() { return GetTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_sourceContext alter_external_data_source() {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(Context, State);
		EnterRule(_localctx, 302, RULE_alter_external_data_source);
		int _la;
		try {
			int _alt;
			State = 3560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3513;
				Match(ALTER);
				State = 3514;
				Match(EXTERNAL);
				State = 3515;
				Match(DATA);
				State = 3516;
				Match(SOURCE);
				State = 3517;
				_localctx.data_source_name = id_();
				State = 3518;
				Match(SET);
				State = 3534;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3534;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case LOCATION:
							{
							State = 3519;
							Match(LOCATION);
							State = 3520;
							Match(EQUAL);
							State = 3521;
							_localctx.location = Match(STRING);
							State = 3523;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3522;
								Match(COMMA);
								}
							}

							}
							break;
						case RESOURCE_MANAGER_LOCATION:
							{
							State = 3525;
							Match(RESOURCE_MANAGER_LOCATION);
							State = 3526;
							Match(EQUAL);
							State = 3527;
							_localctx.resource_manager_location = Match(STRING);
							State = 3529;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3528;
								Match(COMMA);
								}
							}

							}
							break;
						case CREDENTIAL:
							{
							State = 3531;
							Match(CREDENTIAL);
							State = 3532;
							Match(EQUAL);
							State = 3533;
							_localctx.credential_name = id_();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3536;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,306,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3538;
				Match(ALTER);
				State = 3539;
				Match(EXTERNAL);
				State = 3540;
				Match(DATA);
				State = 3541;
				Match(SOURCE);
				State = 3542;
				_localctx.data_source_name = id_();
				State = 3543;
				Match(WITH);
				State = 3544;
				Match(LR_BRACKET);
				State = 3545;
				Match(TYPE);
				State = 3546;
				Match(EQUAL);
				State = 3547;
				Match(BLOB_STORAGE);
				State = 3548;
				Match(COMMA);
				State = 3549;
				Match(LOCATION);
				State = 3550;
				Match(EQUAL);
				State = 3551;
				_localctx.location = Match(STRING);
				State = 3556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3552;
					Match(COMMA);
					State = 3553;
					Match(CREDENTIAL);
					State = 3554;
					Match(EQUAL);
					State = 3555;
					_localctx.credential_name = id_();
					}
				}

				State = 3558;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_library; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_library(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_library(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_libraryContext alter_external_library() {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(Context, State);
		EnterRule(_localctx, 304, RULE_alter_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3562;
			Match(ALTER);
			State = 3563;
			Match(EXTERNAL);
			State = 3564;
			Match(LIBRARY);
			State = 3565;
			_localctx.library_name = id_();
			State = 3568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3566;
				Match(AUTHORIZATION);
				State = 3567;
				_localctx.owner_name = id_();
				}
			}

			State = 3570;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			{
			State = 3571;
			Match(LR_BRACKET);
			State = 3572;
			Match(CONTENT);
			State = 3573;
			Match(EQUAL);
			State = 3577;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 3574;
				_localctx.client_library = Match(STRING);
				}
				break;
			case BINARY:
				{
				State = 3575;
				Match(BINARY);
				}
				break;
			case NONE:
				{
				State = 3576;
				Match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			State = 3579;
			Match(COMMA);
			State = 3580;
			Match(PLATFORM);
			State = 3581;
			Match(EQUAL);
			State = 3583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				State = 3582;
				_la = TokenStream.LA(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3585;
			Match(RR_BRACKET);
			}
			State = 3587;
			Match(WITH);
			State = 3597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 3597;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LANGUAGE:
				case COMMA:
					{
					State = 3589;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3588;
						Match(COMMA);
						}
					}

					State = 3591;
					Match(LANGUAGE);
					State = 3592;
					Match(EQUAL);
					State = 3593;
					_la = TokenStream.LA(1);
					if ( !(_la==PYTHON || _la==R) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					State = 3594;
					Match(DATA_SOURCE);
					State = 3595;
					Match(EQUAL);
					State = 3596;
					_localctx.external_data_source_name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 3599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			State = 3601;
			Match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_library; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_library(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_library(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_libraryContext create_external_library() {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(Context, State);
		EnterRule(_localctx, 306, RULE_create_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3603;
			Match(CREATE);
			State = 3604;
			Match(EXTERNAL);
			State = 3605;
			Match(LIBRARY);
			State = 3606;
			_localctx.library_name = id_();
			State = 3609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3607;
				Match(AUTHORIZATION);
				State = 3608;
				_localctx.owner_name = id_();
				}
			}

			State = 3611;
			Match(FROM);
			{
			State = 3613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3612;
				Match(COMMA);
				}
			}

			State = 3616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 3615;
				Match(LR_BRACKET);
				}
			}

			State = 3620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTENT) {
				{
				State = 3618;
				Match(CONTENT);
				State = 3619;
				Match(EQUAL);
				}
			}

			State = 3625;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 3622;
				_localctx.client_library = Match(STRING);
				}
				break;
			case BINARY:
				{
				State = 3623;
				Match(BINARY);
				}
				break;
			case NONE:
				{
				State = 3624;
				Match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3627;
				Match(COMMA);
				State = 3628;
				Match(PLATFORM);
				State = 3629;
				Match(EQUAL);
				State = 3631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					State = 3630;
					_la = TokenStream.LA(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3633;
				Match(RR_BRACKET);
				}
			}

			}
			State = 3651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				{
				State = 3636;
				Match(WITH);
				State = 3646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 3646;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LANGUAGE:
					case COMMA:
						{
						State = 3638;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3637;
							Match(COMMA);
							}
						}

						State = 3640;
						Match(LANGUAGE);
						State = 3641;
						Match(EQUAL);
						State = 3642;
						_la = TokenStream.LA(1);
						if ( !(_la==PYTHON || _la==R) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						State = 3643;
						Match(DATA_SOURCE);
						State = 3644;
						Match(EQUAL);
						State = 3645;
						_localctx.external_data_source_name = id_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3648;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				State = 3650;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_resource_pool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_resource_poolContext alter_external_resource_pool() {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(Context, State);
		EnterRule(_localctx, 308, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3653;
			Match(ALTER);
			State = 3654;
			Match(EXTERNAL);
			State = 3655;
			Match(RESOURCE);
			State = 3656;
			Match(POOL);
			State = 3659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				{
				State = 3657;
				_localctx.pool_name = id_();
				}
				break;
			case 2:
				{
				State = 3658;
				Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 3661;
			Match(WITH);
			State = 3662;
			Match(LR_BRACKET);
			State = 3663;
			Match(MAX_CPU_PERCENT);
			State = 3664;
			Match(EQUAL);
			State = 3665;
			_localctx.max_cpu_percent = Match(DECIMAL);
			State = 3703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				State = 3667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3666;
					Match(COMMA);
					}
				}

				State = 3669;
				Match(AFFINITY);
				State = 3670;
				Match(CPU);
				State = 3671;
				Match(EQUAL);
				State = 3685;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO:
					{
					State = 3672;
					Match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					State = 3681;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3681;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
							case 1:
								{
								State = 3674;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 3673;
									Match(COMMA);
									}
								}

								State = 3676;
								Match(DECIMAL);
								State = 3677;
								Match(TO);
								State = 3678;
								Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 3679;
								Match(COMMA);
								State = 3680;
								Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3683;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,330,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				State = 3687;
				Match(NUMANODE);
				State = 3688;
				Match(EQUAL);
				State = 3699;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3699;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
						case 1:
							{
							State = 3690;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3689;
								Match(COMMA);
								}
							}

							State = 3692;
							Match(DECIMAL);
							State = 3693;
							Match(TO);
							State = 3694;
							Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 3696;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3695;
								Match(COMMA);
								}
							}

							State = 3698;
							Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3701;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,338,Context) ) {
			case 1:
				{
				State = 3706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3705;
					Match(COMMA);
					}
				}

				State = 3708;
				Match(MAX_MEMORY_PERCENT);
				State = 3709;
				Match(EQUAL);
				State = 3710;
				_localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				State = 3714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3713;
					Match(COMMA);
					}
				}

				State = 3716;
				Match(MAX_PROCESSES);
				State = 3717;
				Match(EQUAL);
				State = 3718;
				_localctx.max_processes = Match(DECIMAL);
				}
			}

			State = 3721;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_resource_pool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_resource_poolContext create_external_resource_pool() {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(Context, State);
		EnterRule(_localctx, 310, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3723;
			Match(CREATE);
			State = 3724;
			Match(EXTERNAL);
			State = 3725;
			Match(RESOURCE);
			State = 3726;
			Match(POOL);
			State = 3727;
			_localctx.pool_name = id_();
			State = 3728;
			Match(WITH);
			State = 3729;
			Match(LR_BRACKET);
			State = 3730;
			Match(MAX_CPU_PERCENT);
			State = 3731;
			Match(EQUAL);
			State = 3732;
			_localctx.max_cpu_percent = Match(DECIMAL);
			State = 3770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				State = 3734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3733;
					Match(COMMA);
					}
				}

				State = 3736;
				Match(AFFINITY);
				State = 3737;
				Match(CPU);
				State = 3738;
				Match(EQUAL);
				State = 3752;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO:
					{
					State = 3739;
					Match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					State = 3748;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3748;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
							case 1:
								{
								State = 3741;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 3740;
									Match(COMMA);
									}
								}

								State = 3743;
								Match(DECIMAL);
								State = 3744;
								Match(TO);
								State = 3745;
								Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 3746;
								Match(COMMA);
								State = 3747;
								Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3750;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,344,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				State = 3754;
				Match(NUMANODE);
				State = 3755;
				Match(EQUAL);
				State = 3766;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3766;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
						case 1:
							{
							State = 3757;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3756;
								Match(COMMA);
								}
							}

							State = 3759;
							Match(DECIMAL);
							State = 3760;
							Match(TO);
							State = 3761;
							Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 3763;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3762;
								Match(COMMA);
								}
							}

							State = 3765;
							Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3768;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,349,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				{
				State = 3773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3772;
					Match(COMMA);
					}
				}

				State = 3775;
				Match(MAX_MEMORY_PERCENT);
				State = 3776;
				Match(EQUAL);
				State = 3777;
				_localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				State = 3781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3780;
					Match(COMMA);
					}
				}

				State = 3783;
				Match(MAX_PROCESSES);
				State = 3784;
				Match(EQUAL);
				State = 3785;
				_localctx.max_processes = Match(DECIMAL);
				}
			}

			State = 3788;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_catalog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_catalog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_catalog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_catalogContext alter_fulltext_catalog() {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(Context, State);
		EnterRule(_localctx, 312, RULE_alter_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3790;
			Match(ALTER);
			State = 3791;
			Match(FULLTEXT);
			State = 3792;
			Match(CATALOG);
			State = 3793;
			_localctx.catalog_name = id_();
			State = 3804;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REBUILD:
				{
				State = 3794;
				Match(REBUILD);
				State = 3799;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
				case 1:
					{
					State = 3795;
					Match(WITH);
					State = 3796;
					Match(ACCENT_SENSITIVITY);
					State = 3797;
					Match(EQUAL);
					State = 3798;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				State = 3801;
				Match(REORGANIZE);
				}
				break;
			case AS:
				{
				State = 3802;
				Match(AS);
				State = 3803;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public Id_Context filegroup;
		public IToken rootpath;
		public Id_Context owner_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_catalog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_catalog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_catalog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_catalogContext create_fulltext_catalog() {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(Context, State);
		EnterRule(_localctx, 314, RULE_create_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3806;
			Match(CREATE);
			State = 3807;
			Match(FULLTEXT);
			State = 3808;
			Match(CATALOG);
			State = 3809;
			_localctx.catalog_name = id_();
			State = 3813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3810;
				Match(ON);
				State = 3811;
				Match(FILEGROUP);
				State = 3812;
				_localctx.filegroup = id_();
				}
			}

			State = 3818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 3815;
				Match(IN);
				State = 3816;
				Match(PATH);
				State = 3817;
				_localctx.rootpath = Match(STRING);
				}
			}

			State = 3824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
			case 1:
				{
				State = 3820;
				Match(WITH);
				State = 3821;
				Match(ACCENT_SENSITIVITY);
				State = 3822;
				Match(EQUAL);
				State = 3823;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3826;
				Match(AS);
				State = 3827;
				Match(DEFAULT);
				}
			}

			State = 3832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3830;
				Match(AUTHORIZATION);
				State = 3831;
				_localctx.owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public IToken stopword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_stoplist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_stoplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_stoplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(Context, State);
		EnterRule(_localctx, 316, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3834;
			Match(ALTER);
			State = 3835;
			Match(FULLTEXT);
			State = 3836;
			Match(STOPLIST);
			State = 3837;
			_localctx.stoplist_name = id_();
			State = 3851;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 3838;
				Match(ADD);
				State = 3839;
				_localctx.stopword = Match(STRING);
				State = 3840;
				Match(LANGUAGE);
				State = 3841;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & 13L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DROP:
				{
				State = 3842;
				Match(DROP);
				State = 3849;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
				case 1:
					{
					State = 3843;
					_localctx.stopword = Match(STRING);
					State = 3844;
					Match(LANGUAGE);
					State = 3845;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & 13L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case 2:
					{
					State = 3846;
					Match(ALL);
					State = 3847;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & 13L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case 3:
					{
					State = 3848;
					Match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public Id_Context database_name;
		public Id_Context source_stoplist_name;
		public Id_Context owner_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STOPLIST() { return GetTokens(TSqlParser.STOPLIST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPLIST(int i) {
			return GetToken(TSqlParser.STOPLIST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_stoplist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_stoplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_stoplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_stoplistContext create_fulltext_stoplist() {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(Context, State);
		EnterRule(_localctx, 318, RULE_create_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3853;
			Match(CREATE);
			State = 3854;
			Match(FULLTEXT);
			State = 3855;
			Match(STOPLIST);
			State = 3856;
			_localctx.stoplist_name = id_();
			State = 3868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 3857;
				Match(FROM);
				State = 3866;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
				case 1:
					{
					State = 3861;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
					case 1:
						{
						State = 3858;
						_localctx.database_name = id_();
						State = 3859;
						Match(DOT);
						}
						break;
					}
					State = 3863;
					_localctx.source_stoplist_name = id_();
					}
					break;
				case 2:
					{
					State = 3864;
					Match(SYSTEM);
					State = 3865;
					Match(STOPLIST);
					}
					break;
				}
				}
			}

			State = 3872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3870;
				Match(AUTHORIZATION);
				State = 3871;
				_localctx.owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken old_password;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_sql_server; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_sql_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_sql_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_sql_serverContext alter_login_sql_server() {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(Context, State);
		EnterRule(_localctx, 320, RULE_alter_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3874;
			Match(ALTER);
			State = 3875;
			Match(LOGIN);
			State = 3876;
			_localctx.login_name = id_();
			State = 3944;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				{
				State = 3878;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
				case 1:
					{
					State = 3877;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3880;
				Match(WITH);
				State = 3894;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
				case 1:
					{
					{
					State = 3881;
					Match(PASSWORD);
					State = 3882;
					Match(EQUAL);
					State = 3886;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 3883;
						_localctx.password = Match(STRING);
						}
						break;
					case BINARY:
						{
						State = 3884;
						_localctx.password_hash = Match(BINARY);
						State = 3885;
						Match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3891;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,370,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3888;
							_la = TokenStream.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							} 
						}
						State = 3893;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,370,Context);
					}
					}
					break;
				}
				State = 3905;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
				case 1:
					{
					State = 3896;
					Match(OLD_PASSWORD);
					State = 3897;
					Match(EQUAL);
					State = 3898;
					_localctx.old_password = Match(STRING);
					State = 3902;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,372,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3899;
							_la = TokenStream.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							} 
						}
						State = 3904;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,372,Context);
					}
					}
					break;
				}
				State = 3910;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
				case 1:
					{
					State = 3907;
					Match(DEFAULT_DATABASE);
					State = 3908;
					Match(EQUAL);
					State = 3909;
					_localctx.default_database = id_();
					}
					break;
				}
				State = 3915;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
				case 1:
					{
					State = 3912;
					Match(DEFAULT_LANGUAGE);
					State = 3913;
					Match(EQUAL);
					State = 3914;
					_localctx.default_laguage = id_();
					}
					break;
				}
				State = 3920;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
				case 1:
					{
					State = 3917;
					Match(NAME);
					State = 3918;
					Match(EQUAL);
					State = 3919;
					_localctx.login_name = id_();
					}
					break;
				}
				State = 3925;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
				case 1:
					{
					State = 3922;
					Match(CHECK_POLICY);
					State = 3923;
					Match(EQUAL);
					State = 3924;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3930;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
				case 1:
					{
					State = 3927;
					Match(CHECK_EXPIRATION);
					State = 3928;
					Match(EQUAL);
					State = 3929;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3935;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
				case 1:
					{
					State = 3932;
					Match(CREDENTIAL);
					State = 3933;
					Match(EQUAL);
					State = 3934;
					_localctx.credential_name = id_();
					}
					break;
				}
				State = 3939;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
				case 1:
					{
					State = 3937;
					Match(NO);
					State = 3938;
					Match(CREDENTIAL);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 3941;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3942;
				Match(CREDENTIAL);
				State = 3943;
				_localctx.credential_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken sid;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public IToken default_language;
		public Id_Context certname;
		public Id_Context asym_key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_sql_server; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_sql_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_sql_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_sql_serverContext create_login_sql_server() {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(Context, State);
		EnterRule(_localctx, 322, RULE_create_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3946;
			Match(CREATE);
			State = 3947;
			Match(LOGIN);
			State = 3948;
			_localctx.login_name = id_();
			State = 4039;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 3949;
				Match(WITH);
				State = 3963;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
				case 1:
					{
					{
					State = 3950;
					Match(PASSWORD);
					State = 3951;
					Match(EQUAL);
					State = 3955;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 3952;
						_localctx.password = Match(STRING);
						}
						break;
					case BINARY:
						{
						State = 3953;
						_localctx.password_hash = Match(BINARY);
						State = 3954;
						Match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3960;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,383,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3957;
							_la = TokenStream.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							} 
						}
						State = 3962;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,383,Context);
					}
					}
					break;
				}
				State = 3971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
				case 1:
					{
					State = 3966;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3965;
						Match(COMMA);
						}
					}

					State = 3968;
					Match(SID);
					State = 3969;
					Match(EQUAL);
					State = 3970;
					_localctx.sid = Match(BINARY);
					}
					break;
				}
				State = 3979;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
				case 1:
					{
					State = 3974;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3973;
						Match(COMMA);
						}
					}

					State = 3976;
					Match(DEFAULT_DATABASE);
					State = 3977;
					Match(EQUAL);
					State = 3978;
					_localctx.default_database = id_();
					}
					break;
				}
				State = 3987;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
				case 1:
					{
					State = 3982;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3981;
						Match(COMMA);
						}
					}

					State = 3984;
					Match(DEFAULT_LANGUAGE);
					State = 3985;
					Match(EQUAL);
					State = 3986;
					_localctx.default_laguage = id_();
					}
					break;
				}
				State = 3995;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
				case 1:
					{
					State = 3990;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3989;
						Match(COMMA);
						}
					}

					State = 3992;
					Match(CHECK_EXPIRATION);
					State = 3993;
					Match(EQUAL);
					State = 3994;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4003;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
				case 1:
					{
					State = 3998;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3997;
						Match(COMMA);
						}
					}

					State = 4000;
					Match(CHECK_POLICY);
					State = 4001;
					Match(EQUAL);
					State = 4002;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4011;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,396,Context) ) {
				case 1:
					{
					State = 4006;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4005;
						Match(COMMA);
						}
					}

					State = 4008;
					Match(CREDENTIAL);
					State = 4009;
					Match(EQUAL);
					State = 4010;
					_localctx.credential_name = id_();
					}
					break;
				}
				}
				break;
			case FROM:
				{
				{
				State = 4013;
				Match(FROM);
				State = 4037;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WINDOWS:
					{
					State = 4014;
					Match(WINDOWS);
					{
					State = 4015;
					Match(WITH);
					State = 4022;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
					case 1:
						{
						State = 4017;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4016;
							Match(COMMA);
							}
						}

						State = 4019;
						Match(DEFAULT_DATABASE);
						State = 4020;
						Match(EQUAL);
						State = 4021;
						_localctx.default_database = id_();
						}
						break;
					}
					State = 4030;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
					case 1:
						{
						State = 4025;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4024;
							Match(COMMA);
							}
						}

						State = 4027;
						Match(DEFAULT_LANGUAGE);
						State = 4028;
						Match(EQUAL);
						State = 4029;
						_localctx.default_language = Match(STRING);
						}
						break;
					}
					}
					}
					break;
				case CERTIFICATE:
					{
					State = 4032;
					Match(CERTIFICATE);
					State = 4033;
					_localctx.certname = id_();
					}
					break;
				case ASYMMETRIC:
					{
					State = 4034;
					Match(ASYMMETRIC);
					State = 4035;
					Match(KEY);
					State = 4036;
					_localctx.asym_key_name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sqlContext alter_login_azure_sql() {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(Context, State);
		EnterRule(_localctx, 324, RULE_alter_login_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4041;
			Match(ALTER);
			State = 4042;
			Match(LOGIN);
			State = 4043;
			_localctx.login_name = id_();
			State = 4061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,406,Context) ) {
			case 1:
				{
				State = 4045;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,403,Context) ) {
				case 1:
					{
					State = 4044;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 4047;
				Match(WITH);
				State = 4059;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PASSWORD:
					{
					State = 4048;
					Match(PASSWORD);
					State = 4049;
					Match(EQUAL);
					State = 4050;
					_localctx.password = Match(STRING);
					State = 4054;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,404,Context) ) {
					case 1:
						{
						State = 4051;
						Match(OLD_PASSWORD);
						State = 4052;
						Match(EQUAL);
						State = 4053;
						_localctx.old_password = Match(STRING);
						}
						break;
					}
					}
					break;
				case NAME:
					{
					State = 4056;
					Match(NAME);
					State = 4057;
					Match(EQUAL);
					State = 4058;
					_localctx.login_name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken sid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_azure_sql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_azure_sqlContext create_login_azure_sql() {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(Context, State);
		EnterRule(_localctx, 326, RULE_create_login_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4063;
			Match(CREATE);
			State = 4064;
			Match(LOGIN);
			State = 4065;
			_localctx.login_name = id_();
			State = 4066;
			Match(WITH);
			State = 4067;
			Match(PASSWORD);
			State = 4068;
			Match(EQUAL);
			State = 4069;
			Match(STRING);
			State = 4073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
			case 1:
				{
				State = 4070;
				Match(SID);
				State = 4071;
				Match(EQUAL);
				State = 4072;
				_localctx.sid = Match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql_dw_and_pdw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql_dw_and_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql_dw_and_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(Context, State);
		EnterRule(_localctx, 328, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4075;
			Match(ALTER);
			State = 4076;
			Match(LOGIN);
			State = 4077;
			_localctx.login_name = id_();
			State = 4101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,412,Context) ) {
			case 1:
				{
				State = 4079;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,408,Context) ) {
				case 1:
					{
					State = 4078;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 4081;
				Match(WITH);
				State = 4099;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PASSWORD:
					{
					State = 4082;
					Match(PASSWORD);
					State = 4083;
					Match(EQUAL);
					State = 4084;
					_localctx.password = Match(STRING);
					State = 4094;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,410,Context) ) {
					case 1:
						{
						State = 4085;
						Match(OLD_PASSWORD);
						State = 4086;
						Match(EQUAL);
						State = 4087;
						_localctx.old_password = Match(STRING);
						State = 4091;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,409,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 4088;
								_la = TokenStream.LA(1);
								if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 4093;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,409,Context);
						}
						}
						break;
					}
					}
					break;
				case NAME:
					{
					State = 4096;
					Match(NAME);
					State = 4097;
					Match(EQUAL);
					State = 4098;
					_localctx.login_name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_pdwContext : ParserRuleContext {
		public Id_Context loginName;
		public IToken password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_pdw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_pdwContext create_login_pdw() {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(Context, State);
		EnterRule(_localctx, 330, RULE_create_login_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4103;
			Match(CREATE);
			State = 4104;
			Match(LOGIN);
			State = 4105;
			_localctx.loginName = id_();
			State = 4122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 4106;
				Match(WITH);
				{
				State = 4107;
				Match(PASSWORD);
				State = 4108;
				Match(EQUAL);
				State = 4109;
				_localctx.password = Match(STRING);
				State = 4111;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,413,Context) ) {
				case 1:
					{
					State = 4110;
					Match(MUST_CHANGE);
					}
					break;
				}
				State = 4118;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
				case 1:
					{
					State = 4113;
					Match(CHECK_POLICY);
					State = 4114;
					Match(EQUAL);
					State = 4116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OFF || _la==ON) {
						{
						State = 4115;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				}
				}
				}
				break;
			case FROM:
				{
				State = 4120;
				Match(FROM);
				State = 4121;
				Match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_sql_server; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_sql_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_sql_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_master_key_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(Context, State);
		EnterRule(_localctx, 332, RULE_alter_master_key_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4124;
			Match(ALTER);
			State = 4125;
			Match(MASTER);
			State = 4126;
			Match(KEY);
			State = 4148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				State = 4128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCE) {
					{
					State = 4127;
					Match(FORCE);
					}
				}

				State = 4130;
				Match(REGENERATE);
				State = 4131;
				Match(WITH);
				State = 4132;
				Match(ENCRYPTION);
				State = 4133;
				Match(BY);
				State = 4134;
				Match(PASSWORD);
				State = 4135;
				Match(EQUAL);
				State = 4136;
				_localctx.password = Match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				State = 4137;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4138;
				Match(ENCRYPTION);
				State = 4139;
				Match(BY);
				State = 4146;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SERVICE:
					{
					State = 4140;
					Match(SERVICE);
					State = 4141;
					Match(MASTER);
					State = 4142;
					Match(KEY);
					}
					break;
				case PASSWORD:
					{
					State = 4143;
					Match(PASSWORD);
					State = 4144;
					Match(EQUAL);
					State = 4145;
					_localctx.encryption_password = Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_sql_server; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_sql_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_sql_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_master_key_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_sql_serverContext create_master_key_sql_server() {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(Context, State);
		EnterRule(_localctx, 334, RULE_create_master_key_sql_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4150;
			Match(CREATE);
			State = 4151;
			Match(MASTER);
			State = 4152;
			Match(KEY);
			State = 4153;
			Match(ENCRYPTION);
			State = 4154;
			Match(BY);
			State = 4155;
			Match(PASSWORD);
			State = 4156;
			Match(EQUAL);
			State = 4157;
			_localctx.password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_azure_sql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_master_key_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(Context, State);
		EnterRule(_localctx, 336, RULE_alter_master_key_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4159;
			Match(ALTER);
			State = 4160;
			Match(MASTER);
			State = 4161;
			Match(KEY);
			State = 4189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				State = 4163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCE) {
					{
					State = 4162;
					Match(FORCE);
					}
				}

				State = 4165;
				Match(REGENERATE);
				State = 4166;
				Match(WITH);
				State = 4167;
				Match(ENCRYPTION);
				State = 4168;
				Match(BY);
				State = 4169;
				Match(PASSWORD);
				State = 4170;
				Match(EQUAL);
				State = 4171;
				_localctx.password = Match(STRING);
				}
				break;
			case ADD:
				{
				State = 4172;
				Match(ADD);
				State = 4173;
				Match(ENCRYPTION);
				State = 4174;
				Match(BY);
				State = 4181;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SERVICE:
					{
					State = 4175;
					Match(SERVICE);
					State = 4176;
					Match(MASTER);
					State = 4177;
					Match(KEY);
					}
					break;
				case PASSWORD:
					{
					State = 4178;
					Match(PASSWORD);
					State = 4179;
					Match(EQUAL);
					State = 4180;
					_localctx.encryption_password = Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP:
				{
				State = 4183;
				Match(DROP);
				State = 4184;
				Match(ENCRYPTION);
				State = 4185;
				Match(BY);
				State = 4186;
				Match(PASSWORD);
				State = 4187;
				Match(EQUAL);
				State = 4188;
				_localctx.encryption_password = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_azure_sql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_master_key_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(Context, State);
		EnterRule(_localctx, 338, RULE_create_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4191;
			Match(CREATE);
			State = 4192;
			Match(MASTER);
			State = 4193;
			Match(KEY);
			State = 4199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				{
				State = 4194;
				Match(ENCRYPTION);
				State = 4195;
				Match(BY);
				State = 4196;
				Match(PASSWORD);
				State = 4197;
				Match(EQUAL);
				State = 4198;
				_localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context schema_collection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_message_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_message_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_message_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_message_typeContext alter_message_type() {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(Context, State);
		EnterRule(_localctx, 340, RULE_alter_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4201;
			Match(ALTER);
			State = 4202;
			Match(MESSAGE);
			State = 4203;
			Match(TYPE);
			State = 4204;
			_localctx.message_type_name = id_();
			State = 4205;
			Match(VALIDATION);
			State = 4206;
			Match(EQUAL);
			State = 4215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NONE:
				{
				State = 4207;
				Match(NONE);
				}
				break;
			case EMPTY:
				{
				State = 4208;
				Match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				State = 4209;
				Match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				State = 4210;
				Match(VALID_XML);
				State = 4211;
				Match(WITH);
				State = 4212;
				Match(SCHEMA);
				State = 4213;
				Match(COLLECTION);
				State = 4214;
				_localctx.schema_collection_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_functionContext alter_partition_function() {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(Context, State);
		EnterRule(_localctx, 342, RULE_alter_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4217;
			Match(ALTER);
			State = 4218;
			Match(PARTITION);
			State = 4219;
			Match(FUNCTION);
			State = 4220;
			_localctx.partition_function_name = id_();
			State = 4221;
			Match(LR_BRACKET);
			State = 4222;
			Match(RR_BRACKET);
			State = 4223;
			_la = TokenStream.LA(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4224;
			Match(RANGE);
			State = 4225;
			Match(LR_BRACKET);
			State = 4226;
			Match(DECIMAL);
			State = 4227;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context file_group_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_scheme; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_schemeContext alter_partition_scheme() {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(Context, State);
		EnterRule(_localctx, 344, RULE_alter_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4229;
			Match(ALTER);
			State = 4230;
			Match(PARTITION);
			State = 4231;
			Match(SCHEME);
			State = 4232;
			_localctx.partition_scheme_name = id_();
			State = 4233;
			Match(NEXT);
			State = 4234;
			Match(USED);
			State = 4236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,425,Context) ) {
			case 1:
				{
				State = 4235;
				_localctx.file_group_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context user_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_remote_service_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_remote_service_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_remote_service_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_remote_service_bindingContext alter_remote_service_binding() {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(Context, State);
		EnterRule(_localctx, 346, RULE_alter_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4238;
			Match(ALTER);
			State = 4239;
			Match(REMOTE);
			State = 4240;
			Match(SERVICE);
			State = 4241;
			Match(BINDING);
			State = 4242;
			_localctx.binding_name = id_();
			State = 4243;
			Match(WITH);
			State = 4247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USER) {
				{
				State = 4244;
				Match(USER);
				State = 4245;
				Match(EQUAL);
				State = 4246;
				_localctx.user_name = id_();
				}
			}

			State = 4253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4249;
				Match(COMMA);
				State = 4250;
				Match(ANONYMOUS);
				State = 4251;
				Match(EQUAL);
				State = 4252;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context owner_name;
		public IToken remote_service_name;
		public Id_Context user_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_service_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_service_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_service_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_service_bindingContext create_remote_service_binding() {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(Context, State);
		EnterRule(_localctx, 348, RULE_create_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4255;
			Match(CREATE);
			State = 4256;
			Match(REMOTE);
			State = 4257;
			Match(SERVICE);
			State = 4258;
			Match(BINDING);
			State = 4259;
			_localctx.binding_name = id_();
			State = 4262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4260;
				Match(AUTHORIZATION);
				State = 4261;
				_localctx.owner_name = id_();
				}
			}

			State = 4264;
			Match(TO);
			State = 4265;
			Match(SERVICE);
			State = 4266;
			_localctx.remote_service_name = Match(STRING);
			State = 4267;
			Match(WITH);
			State = 4271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USER) {
				{
				State = 4268;
				Match(USER);
				State = 4269;
				Match(EQUAL);
				State = 4270;
				_localctx.user_name = id_();
				}
			}

			State = 4277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4273;
				Match(COMMA);
				State = 4274;
				Match(ANONYMOUS);
				State = 4275;
				Match(EQUAL);
				State = 4276;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_poolContext create_resource_pool() {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(Context, State);
		EnterRule(_localctx, 350, RULE_create_resource_pool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4279;
			Match(CREATE);
			State = 4280;
			Match(RESOURCE);
			State = 4281;
			Match(POOL);
			State = 4282;
			_localctx.pool_name = id_();
			State = 4385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
			case 1:
				{
				State = 4283;
				Match(WITH);
				State = 4284;
				Match(LR_BRACKET);
				State = 4291;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
				case 1:
					{
					State = 4286;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4285;
						Match(COMMA);
						}
					}

					State = 4288;
					Match(MIN_CPU_PERCENT);
					State = 4289;
					Match(EQUAL);
					State = 4290;
					Match(DECIMAL);
					}
					break;
				}
				State = 4299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,434,Context) ) {
				case 1:
					{
					State = 4294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4293;
						Match(COMMA);
						}
					}

					State = 4296;
					Match(MAX_CPU_PERCENT);
					State = 4297;
					Match(EQUAL);
					State = 4298;
					Match(DECIMAL);
					}
					break;
				}
				State = 4307;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
				case 1:
					{
					State = 4302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4301;
						Match(COMMA);
						}
					}

					State = 4304;
					Match(CAP_CPU_PERCENT);
					State = 4305;
					Match(EQUAL);
					State = 4306;
					Match(DECIMAL);
					}
					break;
				}
				State = 4350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,445,Context) ) {
				case 1:
					{
					State = 4310;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4309;
						Match(COMMA);
						}
					}

					State = 4312;
					Match(AFFINITY);
					State = 4313;
					Match(SCHEDULER);
					State = 4314;
					Match(EQUAL);
					State = 4348;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AUTO:
						{
						State = 4315;
						Match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						State = 4316;
						Match(LR_BRACKET);
						State = 4326;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 4318;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4317;
								Match(COMMA);
								}
							}

							State = 4324;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
							case 1:
								{
								State = 4320;
								Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 4321;
								Match(DECIMAL);
								State = 4322;
								Match(TO);
								State = 4323;
								Match(DECIMAL);
								}
								break;
							}
							}
							}
							State = 4328;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						State = 4330;
						Match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						State = 4331;
						Match(NUMANODE);
						State = 4332;
						Match(EQUAL);
						State = 4333;
						Match(LR_BRACKET);
						State = 4343;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 4335;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4334;
								Match(COMMA);
								}
							}

							State = 4341;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,442,Context) ) {
							case 1:
								{
								State = 4337;
								Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 4338;
								Match(DECIMAL);
								State = 4339;
								Match(TO);
								State = 4340;
								Match(DECIMAL);
								}
								break;
							}
							}
							}
							State = 4345;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						State = 4347;
						Match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 4358;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
				case 1:
					{
					State = 4353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4352;
						Match(COMMA);
						}
					}

					State = 4355;
					Match(MIN_MEMORY_PERCENT);
					State = 4356;
					Match(EQUAL);
					State = 4357;
					Match(DECIMAL);
					}
					break;
				}
				State = 4366;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
				case 1:
					{
					State = 4361;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4360;
						Match(COMMA);
						}
					}

					State = 4363;
					Match(MAX_MEMORY_PERCENT);
					State = 4364;
					Match(EQUAL);
					State = 4365;
					Match(DECIMAL);
					}
					break;
				}
				State = 4374;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
				case 1:
					{
					State = 4369;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4368;
						Match(COMMA);
						}
					}

					State = 4371;
					Match(MIN_IOPS_PER_VOLUME);
					State = 4372;
					Match(EQUAL);
					State = 4373;
					Match(DECIMAL);
					}
					break;
				}
				State = 4382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					State = 4377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4376;
						Match(COMMA);
						}
					}

					State = 4379;
					Match(MAX_IOPS_PER_VOLUME);
					State = 4380;
					Match(EQUAL);
					State = 4381;
					Match(DECIMAL);
					}
				}

				State = 4384;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_governorContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context function_name;
		public IToken max_outstanding_io_per_volume;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_governor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_resource_governor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_resource_governor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_resource_governor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_governorContext alter_resource_governor() {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(Context, State);
		EnterRule(_localctx, 352, RULE_alter_resource_governor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4387;
			Match(ALTER);
			State = 4388;
			Match(RESOURCE);
			State = 4389;
			Match(GOVERNOR);
			State = 4411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
			case 1:
				{
				State = 4390;
				_la = TokenStream.LA(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				State = 4391;
				Match(WITH);
				State = 4392;
				Match(LR_BRACKET);
				State = 4393;
				Match(CLASSIFIER_FUNCTION);
				State = 4394;
				Match(EQUAL);
				State = 4400;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 4395;
					_localctx.schema_name = id_();
					State = 4396;
					Match(DOT);
					State = 4397;
					_localctx.function_name = id_();
					}
					break;
				case NULL_:
					{
					State = 4399;
					Match(NULL_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4402;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				{
				State = 4403;
				Match(RESET);
				State = 4404;
				Match(STATISTICS);
				}
				break;
			case 4:
				{
				State = 4405;
				Match(WITH);
				State = 4406;
				Match(LR_BRACKET);
				State = 4407;
				Match(MAX_OUTSTANDING_IO_PER_VOLUME);
				State = 4408;
				Match(EQUAL);
				State = 4409;
				_localctx.max_outstanding_io_per_volume = Match(DECIMAL);
				State = 4410;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context database_principal;
		public Id_Context new_role_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_db_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_db_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_db_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_db_roleContext alter_db_role() {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(Context, State);
		EnterRule(_localctx, 354, RULE_alter_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4413;
			Match(ALTER);
			State = 4414;
			Match(ROLE);
			State = 4415;
			_localctx.role_name = id_();
			State = 4423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case DROP:
				{
				State = 4416;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4417;
				Match(MEMBER);
				State = 4418;
				_localctx.database_principal = id_();
				}
				break;
			case WITH:
				{
				State = 4419;
				Match(WITH);
				State = 4420;
				Match(NAME);
				State = 4421;
				Match(EQUAL);
				State = 4422;
				_localctx.new_role_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context owner_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_db_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_db_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_db_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_db_roleContext create_db_role() {
		Create_db_roleContext _localctx = new Create_db_roleContext(Context, State);
		EnterRule(_localctx, 356, RULE_create_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4425;
			Match(CREATE);
			State = 4426;
			Match(ROLE);
			State = 4427;
			_localctx.role_name = id_();
			State = 4430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4428;
				Match(AUTHORIZATION);
				State = 4429;
				_localctx.owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public Id_Context owner_name;
		public IToken route_service_name;
		public IToken broker_instance_identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_route; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_route(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_route(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_route(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_routeContext create_route() {
		Create_routeContext _localctx = new Create_routeContext(Context, State);
		EnterRule(_localctx, 358, RULE_create_route);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4432;
			Match(CREATE);
			State = 4433;
			Match(ROUTE);
			State = 4434;
			_localctx.route_name = id_();
			State = 4437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4435;
				Match(AUTHORIZATION);
				State = 4436;
				_localctx.owner_name = id_();
				}
			}

			State = 4439;
			Match(WITH);
			State = 4446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,461,Context) ) {
			case 1:
				{
				State = 4441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4440;
					Match(COMMA);
					}
				}

				State = 4443;
				Match(SERVICE_NAME);
				State = 4444;
				Match(EQUAL);
				State = 4445;
				_localctx.route_service_name = Match(STRING);
				}
				break;
			}
			State = 4454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
			case 1:
				{
				State = 4449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4448;
					Match(COMMA);
					}
				}

				State = 4451;
				Match(BROKER_INSTANCE);
				State = 4452;
				Match(EQUAL);
				State = 4453;
				_localctx.broker_instance_identifier = Match(STRING);
				}
				break;
			}
			State = 4462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,465,Context) ) {
			case 1:
				{
				State = 4457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4456;
					Match(COMMA);
					}
				}

				State = 4459;
				Match(LIFETIME);
				State = 4460;
				Match(EQUAL);
				State = 4461;
				Match(DECIMAL);
				}
				break;
			}
			State = 4465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4464;
				Match(COMMA);
				}
			}

			State = 4467;
			Match(ADDRESS);
			State = 4468;
			Match(EQUAL);
			State = 4469;
			Match(STRING);
			State = 4474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4470;
				Match(COMMA);
				State = 4471;
				Match(MIRROR_ADDRESS);
				State = 4472;
				Match(EQUAL);
				State = 4473;
				Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_ruleContext create_rule() {
		Create_ruleContext _localctx = new Create_ruleContext(Context, State);
		EnterRule(_localctx, 360, RULE_create_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4476;
			Match(CREATE);
			State = 4477;
			Match(RULE);
			State = 4481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
			case 1:
				{
				State = 4478;
				_localctx.schema_name = id_();
				State = 4479;
				Match(DOT);
				}
				break;
			}
			State = 4483;
			_localctx.rule_name = id_();
			State = 4484;
			Match(AS);
			State = 4485;
			search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_sqlContext : ParserRuleContext {
		public Id_Context schema_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_sql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_sqlContext alter_schema_sql() {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(Context, State);
		EnterRule(_localctx, 362, RULE_alter_schema_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4487;
			Match(ALTER);
			State = 4488;
			Match(SCHEMA);
			State = 4489;
			_localctx.schema_name = id_();
			State = 4490;
			Match(TRANSFER);
			State = 4499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
			case 1:
				{
				State = 4496;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OBJECT:
					{
					State = 4491;
					Match(OBJECT);
					}
					break;
				case TYPE:
					{
					State = 4492;
					Match(TYPE);
					}
					break;
				case XML:
					{
					State = 4493;
					Match(XML);
					State = 4494;
					Match(SCHEMA);
					State = 4495;
					Match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4498;
				Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4501;
			id_();
			State = 4504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
			case 1:
				{
				State = 4502;
				Match(DOT);
				State = 4503;
				id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public Id_Context object_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_tableContext[] create_table() {
			return GetRuleContexts<Create_tableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_tableContext create_table(int i) {
			return GetRuleContext<Create_tableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_viewContext[] create_view() {
			return GetRuleContexts<Create_viewContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_viewContext create_view(int i) {
			return GetRuleContext<Create_viewContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REVOKE() { return GetTokens(TSqlParser.REVOKE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE(int i) {
			return GetToken(TSqlParser.REVOKE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DENY() { return GetTokens(TSqlParser.DENY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENY(int i) {
			return GetToken(TSqlParser.DENY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SELECT() { return GetTokens(TSqlParser.SELECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT(int i) {
			return GetToken(TSqlParser.SELECT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE_COLON() { return GetTokens(TSqlParser.DOUBLE_COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON(int i) {
			return GetToken(TSqlParser.DOUBLE_COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(Context, State);
		EnterRule(_localctx, 364, RULE_create_schema);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4506;
			Match(CREATE);
			State = 4507;
			Match(SCHEMA);
			State = 4515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,472,Context) ) {
			case 1:
				{
				State = 4508;
				_localctx.schema_name = id_();
				}
				break;
			case 2:
				{
				State = 4509;
				Match(AUTHORIZATION);
				State = 4510;
				_localctx.owner_name = id_();
				}
				break;
			case 3:
				{
				State = 4511;
				_localctx.schema_name = id_();
				State = 4512;
				Match(AUTHORIZATION);
				State = 4513;
				_localctx.owner_name = id_();
				}
				break;
			}
			State = 4543;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,476,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 4541;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
					case 1:
						{
						State = 4517;
						create_table();
						}
						break;
					case 2:
						{
						State = 4518;
						create_view();
						}
						break;
					case 3:
						{
						State = 4519;
						_la = TokenStream.LA(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4520;
						_la = TokenStream.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4521;
						Match(ON);
						State = 4524;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SCHEMA) {
							{
							State = 4522;
							Match(SCHEMA);
							State = 4523;
							Match(DOUBLE_COLON);
							}
						}

						State = 4526;
						_localctx.object_name = id_();
						State = 4527;
						Match(TO);
						State = 4528;
						_localctx.owner_name = id_();
						}
						break;
					case 4:
						{
						State = 4530;
						Match(REVOKE);
						State = 4531;
						_la = TokenStream.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4532;
						Match(ON);
						State = 4535;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SCHEMA) {
							{
							State = 4533;
							Match(SCHEMA);
							State = 4534;
							Match(DOUBLE_COLON);
							}
						}

						State = 4537;
						_localctx.object_name = id_();
						State = 4538;
						Match(FROM);
						State = 4539;
						_localctx.owner_name = id_();
						}
						break;
					}
					} 
				}
				State = 4545;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,476,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema_azure_sql_dw_and_pdw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema_azure_sql_dw_and_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(Context, State);
		EnterRule(_localctx, 366, RULE_create_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4546;
			Match(CREATE);
			State = 4547;
			Match(SCHEMA);
			State = 4548;
			_localctx.schema_name = id_();
			State = 4551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4549;
				Match(AUTHORIZATION);
				State = 4550;
				_localctx.owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_azure_sql_dw_and_pdw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_azure_sql_dw_and_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(Context, State);
		EnterRule(_localctx, 368, RULE_alter_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4553;
			Match(ALTER);
			State = 4554;
			Match(SCHEMA);
			State = 4555;
			_localctx.schema_name = id_();
			State = 4556;
			Match(TRANSFER);
			State = 4559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,478,Context) ) {
			case 1:
				{
				State = 4557;
				Match(OBJECT);
				State = 4558;
				Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4561;
			id_();
			State = 4564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
			case 1:
				{
				State = 4562;
				Match(DOT);
				State = 4563;
				Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_property_listContext : ParserRuleContext {
		public Id_Context new_list_name;
		public Id_Context database_name;
		public Id_Context source_list_name;
		public Id_Context owner_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_property_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_property_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_property_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_search_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_property_listContext create_search_property_list() {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(Context, State);
		EnterRule(_localctx, 370, RULE_create_search_property_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4566;
			Match(CREATE);
			State = 4567;
			Match(SEARCH);
			State = 4568;
			Match(PROPERTY);
			State = 4569;
			Match(LIST);
			State = 4570;
			_localctx.new_list_name = id_();
			State = 4578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 4571;
				Match(FROM);
				State = 4575;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,480,Context) ) {
				case 1:
					{
					State = 4572;
					_localctx.database_name = id_();
					State = 4573;
					Match(DOT);
					}
					break;
				}
				State = 4577;
				_localctx.source_list_name = id_();
				}
			}

			State = 4582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4580;
				Match(AUTHORIZATION);
				State = 4581;
				_localctx.owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public Id_Context tvf_schema_name;
		public Id_Context security_predicate_function_name;
		public Id_Context column_name_or_arguments;
		public Id_Context table_schema_name;
		public Id_Context name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PREDICATE() { return GetTokens(TSqlParser.PREDICATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICATE(int i) {
			return GetToken(TSqlParser.PREDICATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AFTER() { return GetTokens(TSqlParser.AFTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER(int i) {
			return GetToken(TSqlParser.AFTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BEFORE() { return GetTokens(TSqlParser.BEFORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE(int i) {
			return GetToken(TSqlParser.BEFORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILTER() { return GetTokens(TSqlParser.FILTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER(int i) {
			return GetToken(TSqlParser.FILTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BLOCK() { return GetTokens(TSqlParser.BLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK(int i) {
			return GetToken(TSqlParser.BLOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_security_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_security_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_security_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_security_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_security_policyContext create_security_policy() {
		Create_security_policyContext _localctx = new Create_security_policyContext(Context, State);
		EnterRule(_localctx, 372, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4584;
			Match(CREATE);
			State = 4585;
			Match(SECURITY);
			State = 4586;
			Match(POLICY);
			State = 4590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
			case 1:
				{
				State = 4587;
				_localctx.schema_name = id_();
				State = 4588;
				Match(DOT);
				}
				break;
			}
			State = 4592;
			_localctx.security_policy_name = id_();
			State = 4633;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4594;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4593;
						Match(COMMA);
						}
					}

					State = 4596;
					Match(ADD);
					State = 4598;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FILTER || _la==BLOCK) {
						{
						State = 4597;
						_la = TokenStream.LA(1);
						if ( !(_la==FILTER || _la==BLOCK) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 4600;
					Match(PREDICATE);
					State = 4601;
					_localctx.tvf_schema_name = id_();
					State = 4602;
					Match(DOT);
					State = 4603;
					_localctx.security_predicate_function_name = id_();
					State = 4604;
					Match(LR_BRACKET);
					State = 4609;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4606;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4605;
							Match(COMMA);
							}
						}

						State = 4608;
						_localctx.column_name_or_arguments = id_();
						}
						}
						State = 4611;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
					State = 4613;
					Match(RR_BRACKET);
					State = 4614;
					Match(ON);
					State = 4615;
					_localctx.table_schema_name = id_();
					State = 4616;
					Match(DOT);
					State = 4617;
					_localctx.name = id_();
					State = 4630;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,491,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 4628;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
							case 1:
								{
								State = 4619;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4618;
									Match(COMMA);
									}
								}

								State = 4621;
								Match(AFTER);
								State = 4622;
								_la = TokenStream.LA(1);
								if ( !(_la==INSERT || _la==UPDATE) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							case 2:
								{
								State = 4624;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4623;
									Match(COMMA);
									}
								}

								State = 4626;
								Match(BEFORE);
								State = 4627;
								_la = TokenStream.LA(1);
								if ( !(_la==DELETE || _la==UPDATE) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							} 
						}
						State = 4632;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,491,Context);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,492,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
			case 1:
				{
				State = 4637;
				Match(WITH);
				State = 4638;
				Match(LR_BRACKET);
				State = 4639;
				Match(STATE);
				State = 4640;
				Match(EQUAL);
				State = 4641;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SCHEMABINDING) {
					{
					State = 4642;
					Match(SCHEMABINDING);
					State = 4643;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 4646;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 4652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 4649;
				Match(NOT);
				State = 4650;
				Match(FOR);
				State = 4651;
				Match(REPLICATION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public IToken sequnce_increment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(Context, State);
		EnterRule(_localctx, 374, RULE_alter_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4654;
			Match(ALTER);
			State = 4655;
			Match(SEQUENCE);
			State = 4659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
			case 1:
				{
				State = 4656;
				_localctx.schema_name = id_();
				State = 4657;
				Match(DOT);
				}
				break;
			}
			State = 4661;
			_localctx.sequence_name = id_();
			State = 4667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
			case 1:
				{
				State = 4662;
				Match(RESTART);
				State = 4665;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
				case 1:
					{
					State = 4663;
					Match(WITH);
					State = 4664;
					Match(DECIMAL);
					}
					break;
				}
				}
				break;
			}
			State = 4672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
			case 1:
				{
				State = 4669;
				Match(INCREMENT);
				State = 4670;
				Match(BY);
				State = 4671;
				_localctx.sequnce_increment = Match(DECIMAL);
				}
				break;
			}
			State = 4678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
			case 1:
				{
				State = 4674;
				Match(MINVALUE);
				State = 4675;
				Match(DECIMAL);
				}
				break;
			case 2:
				{
				State = 4676;
				Match(NO);
				State = 4677;
				Match(MINVALUE);
				}
				break;
			}
			State = 4684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
			case 1:
				{
				State = 4680;
				Match(MAXVALUE);
				State = 4681;
				Match(DECIMAL);
				}
				break;
			case 2:
				{
				State = 4682;
				Match(NO);
				State = 4683;
				Match(MAXVALUE);
				}
				break;
			}
			State = 4689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,502,Context) ) {
			case 1:
				{
				State = 4686;
				Match(CYCLE);
				}
				break;
			case 2:
				{
				State = 4687;
				Match(NO);
				State = 4688;
				Match(CYCLE);
				}
				break;
			}
			State = 4695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,503,Context) ) {
			case 1:
				{
				State = 4691;
				Match(CACHE);
				State = 4692;
				Match(DECIMAL);
				}
				break;
			case 2:
				{
				State = 4693;
				Match(NO);
				State = 4694;
				Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(TSqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(TSqlParser.MINUS, i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(Context, State);
		EnterRule(_localctx, 376, RULE_create_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4697;
			Match(CREATE);
			State = 4698;
			Match(SEQUENCE);
			State = 4702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,504,Context) ) {
			case 1:
				{
				State = 4699;
				_localctx.schema_name = id_();
				State = 4700;
				Match(DOT);
				}
				break;
			}
			State = 4704;
			_localctx.sequence_name = id_();
			State = 4707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 4705;
				Match(AS);
				State = 4706;
				data_type();
				}
			}

			State = 4712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
			case 1:
				{
				State = 4709;
				Match(START);
				State = 4710;
				Match(WITH);
				State = 4711;
				Match(DECIMAL);
				}
				break;
			}
			State = 4720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,508,Context) ) {
			case 1:
				{
				State = 4714;
				Match(INCREMENT);
				State = 4715;
				Match(BY);
				State = 4717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 4716;
					Match(MINUS);
					}
				}

				State = 4719;
				Match(DECIMAL);
				}
				break;
			}
			State = 4731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,511,Context) ) {
			case 1:
				{
				State = 4722;
				Match(MINVALUE);
				State = 4727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECIMAL || _la==MINUS) {
					{
					State = 4724;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 4723;
						Match(MINUS);
						}
					}

					State = 4726;
					Match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				State = 4729;
				Match(NO);
				State = 4730;
				Match(MINVALUE);
				}
				break;
			}
			State = 4742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,514,Context) ) {
			case 1:
				{
				State = 4733;
				Match(MAXVALUE);
				State = 4738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECIMAL || _la==MINUS) {
					{
					State = 4735;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 4734;
						Match(MINUS);
						}
					}

					State = 4737;
					Match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				State = 4740;
				Match(NO);
				State = 4741;
				Match(MAXVALUE);
				}
				break;
			}
			State = 4747;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
			case 1:
				{
				State = 4744;
				Match(CYCLE);
				}
				break;
			case 2:
				{
				State = 4745;
				Match(NO);
				State = 4746;
				Match(CYCLE);
				}
				break;
			}
			State = 4755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
			case 1:
				{
				State = 4749;
				Match(CACHE);
				State = 4751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECIMAL) {
					{
					State = 4750;
					Match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				State = 4753;
				Match(NO);
				State = 4754;
				Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_auditContext alter_server_audit() {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(Context, State);
		EnterRule(_localctx, 378, RULE_alter_server_audit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4757;
			Match(ALTER);
			State = 4758;
			Match(SERVER);
			State = 4759;
			Match(AUDIT);
			State = 4760;
			_localctx.audit_name = id_();
			State = 4892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
			case 1:
				{
				State = 4808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 4761;
					Match(TO);
					State = 4806;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILE:
						{
						State = 4762;
						Match(FILE);
						{
						State = 4763;
						Match(LR_BRACKET);
						State = 4800;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==FILEPATH || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & 289L) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							State = 4798;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
							case 1:
								{
								State = 4765;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4764;
									Match(COMMA);
									}
								}

								State = 4767;
								Match(FILEPATH);
								State = 4768;
								Match(EQUAL);
								State = 4769;
								_localctx.filepath = Match(STRING);
								}
								break;
							case 2:
								{
								State = 4771;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4770;
									Match(COMMA);
									}
								}

								State = 4773;
								Match(MAXSIZE);
								State = 4774;
								Match(EQUAL);
								State = 4778;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
									{
									State = 4775;
									Match(DECIMAL);
									State = 4776;
									_la = TokenStream.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									ErrorHandler.RecoverInline(this);
									}
									else {
										ErrorHandler.ReportMatch(this);
									    Consume();
									}
									}
									break;
								case UNLIMITED:
									{
									State = 4777;
									Match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								State = 4781;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4780;
									Match(COMMA);
									}
								}

								State = 4783;
								Match(MAX_ROLLOVER_FILES);
								State = 4784;
								Match(EQUAL);
								State = 4785;
								_localctx.max_rollover_files = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									_localctx.max_rollover_files = ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							case 4:
								{
								State = 4787;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4786;
									Match(COMMA);
									}
								}

								State = 4789;
								Match(MAX_FILES);
								State = 4790;
								Match(EQUAL);
								State = 4791;
								_localctx.max_files = Match(DECIMAL);
								}
								break;
							case 5:
								{
								State = 4793;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4792;
									Match(COMMA);
									}
								}

								State = 4795;
								Match(RESERVE_DISK_SPACE);
								State = 4796;
								Match(EQUAL);
								State = 4797;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							}
							State = 4802;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 4803;
						Match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						State = 4804;
						Match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						State = 4805;
						Match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4836;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
				case 1:
					{
					State = 4810;
					Match(WITH);
					State = 4811;
					Match(LR_BRACKET);
					State = 4832;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==QUEUE_DELAY || _la==ON_FAILURE || _la==STATE || _la==COMMA) {
						{
						State = 4830;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
						case 1:
							{
							State = 4813;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4812;
								Match(COMMA);
								}
							}

							State = 4815;
							Match(QUEUE_DELAY);
							State = 4816;
							Match(EQUAL);
							State = 4817;
							_localctx.queue_delay = Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 4819;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4818;
								Match(COMMA);
								}
							}

							State = 4821;
							Match(ON_FAILURE);
							State = 4822;
							Match(EQUAL);
							State = 4823;
							_la = TokenStream.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 3:
							{
							State = 4825;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4824;
								Match(COMMA);
								}
							}

							State = 4827;
							Match(STATE);
							State = 4828;
							Match(EQUAL);
							State = 4829;
							_la = TokenStream.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						}
						State = 4834;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 4835;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 4884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 4838;
					Match(WHERE);
					State = 4882;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,540,Context) ) {
					case 1:
						{
						State = 4840;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4839;
							Match(COMMA);
							}
						}

						{
						State = 4843;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 4842;
							Match(NOT);
							}
						}

						}
						State = 4845;
						_localctx.event_field_name = id_();
						State = 4857;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
						case 1:
							{
							State = 4846;
							Match(EQUAL);
							}
							break;
						case 2:
							{
							{
							State = 4847;
							Match(LESS);
							State = 4848;
							Match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							State = 4849;
							Match(EXCLAMATION);
							State = 4850;
							Match(EQUAL);
							}
							}
							break;
						case 4:
							{
							State = 4851;
							Match(GREATER);
							}
							break;
						case 5:
							{
							{
							State = 4852;
							Match(GREATER);
							State = 4853;
							Match(EQUAL);
							}
							}
							break;
						case 6:
							{
							State = 4854;
							Match(LESS);
							}
							break;
						case 7:
							{
							State = 4855;
							Match(LESS);
							State = 4856;
							Match(EQUAL);
							}
							break;
						}
						State = 4859;
						_la = TokenStream.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 4862;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4861;
							Match(COMMA);
							}
						}

						State = 4864;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4866;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 4865;
							Match(NOT);
							}
						}

						State = 4879;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
						case 1:
							{
							State = 4868;
							Match(EQUAL);
							}
							break;
						case 2:
							{
							{
							State = 4869;
							Match(LESS);
							State = 4870;
							Match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							State = 4871;
							Match(EXCLAMATION);
							State = 4872;
							Match(EQUAL);
							}
							}
							break;
						case 4:
							{
							State = 4873;
							Match(GREATER);
							}
							break;
						case 5:
							{
							{
							State = 4874;
							Match(GREATER);
							State = 4875;
							Match(EQUAL);
							}
							}
							break;
						case 6:
							{
							State = 4876;
							Match(LESS);
							}
							break;
						case 7:
							{
							State = 4877;
							Match(LESS);
							State = 4878;
							Match(EQUAL);
							}
							break;
						}
						State = 4881;
						_la = TokenStream.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				State = 4886;
				Match(REMOVE);
				State = 4887;
				Match(WHERE);
				}
				break;
			case 3:
				{
				State = 4888;
				Match(MODIFY);
				State = 4889;
				Match(NAME);
				State = 4890;
				Match(EQUAL);
				State = 4891;
				_localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context audit_guid;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AUDIT_GUID() { return GetTokens(TSqlParser.AUDIT_GUID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_GUID(int i) {
			return GetToken(TSqlParser.AUDIT_GUID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_auditContext create_server_audit() {
		Create_server_auditContext _localctx = new Create_server_auditContext(Context, State);
		EnterRule(_localctx, 380, RULE_create_server_audit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4894;
			Match(CREATE);
			State = 4895;
			Match(SERVER);
			State = 4896;
			Match(AUDIT);
			State = 4897;
			_localctx.audit_name = id_();
			State = 5035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				{
				State = 4945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 4898;
					Match(TO);
					State = 4943;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILE:
						{
						State = 4899;
						Match(FILE);
						{
						State = 4900;
						Match(LR_BRACKET);
						State = 4937;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==FILEPATH || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & 289L) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							State = 4935;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,549,Context) ) {
							case 1:
								{
								State = 4902;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4901;
									Match(COMMA);
									}
								}

								State = 4904;
								Match(FILEPATH);
								State = 4905;
								Match(EQUAL);
								State = 4906;
								_localctx.filepath = Match(STRING);
								}
								break;
							case 2:
								{
								State = 4908;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4907;
									Match(COMMA);
									}
								}

								State = 4910;
								Match(MAXSIZE);
								State = 4911;
								Match(EQUAL);
								State = 4915;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
									{
									State = 4912;
									Match(DECIMAL);
									State = 4913;
									_la = TokenStream.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									ErrorHandler.RecoverInline(this);
									}
									else {
										ErrorHandler.ReportMatch(this);
									    Consume();
									}
									}
									break;
								case UNLIMITED:
									{
									State = 4914;
									Match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								State = 4918;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4917;
									Match(COMMA);
									}
								}

								State = 4920;
								Match(MAX_ROLLOVER_FILES);
								State = 4921;
								Match(EQUAL);
								State = 4922;
								_localctx.max_rollover_files = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									_localctx.max_rollover_files = ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							case 4:
								{
								State = 4924;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4923;
									Match(COMMA);
									}
								}

								State = 4926;
								Match(MAX_FILES);
								State = 4927;
								Match(EQUAL);
								State = 4928;
								_localctx.max_files = Match(DECIMAL);
								}
								break;
							case 5:
								{
								State = 4930;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4929;
									Match(COMMA);
									}
								}

								State = 4932;
								Match(RESERVE_DISK_SPACE);
								State = 4933;
								Match(EQUAL);
								State = 4934;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							}
							State = 4939;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 4940;
						Match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						State = 4941;
						Match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						State = 4942;
						Match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4979;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,559,Context) ) {
				case 1:
					{
					State = 4947;
					Match(WITH);
					State = 4948;
					Match(LR_BRACKET);
					State = 4975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AUDIT_GUID || _la==QUEUE_DELAY || _la==ON_FAILURE || _la==STATE || _la==COMMA) {
						{
						State = 4973;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,557,Context) ) {
						case 1:
							{
							State = 4950;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4949;
								Match(COMMA);
								}
							}

							State = 4952;
							Match(QUEUE_DELAY);
							State = 4953;
							Match(EQUAL);
							State = 4954;
							_localctx.queue_delay = Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 4956;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4955;
								Match(COMMA);
								}
							}

							State = 4958;
							Match(ON_FAILURE);
							State = 4959;
							Match(EQUAL);
							State = 4960;
							_la = TokenStream.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 3:
							{
							State = 4962;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4961;
								Match(COMMA);
								}
							}

							State = 4964;
							Match(STATE);
							State = 4965;
							Match(EQUAL);
							State = 4966;
							_la = TokenStream.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 4:
							{
							State = 4968;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4967;
								Match(COMMA);
								}
							}

							State = 4970;
							Match(AUDIT_GUID);
							State = 4971;
							Match(EQUAL);
							State = 4972;
							_localctx.audit_guid = id_();
							}
							break;
						}
						}
						State = 4977;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 4978;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 5027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 4981;
					Match(WHERE);
					State = 5025;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,566,Context) ) {
					case 1:
						{
						State = 4983;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4982;
							Match(COMMA);
							}
						}

						{
						State = 4986;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 4985;
							Match(NOT);
							}
						}

						}
						State = 4988;
						_localctx.event_field_name = id_();
						State = 5000;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
						case 1:
							{
							State = 4989;
							Match(EQUAL);
							}
							break;
						case 2:
							{
							{
							State = 4990;
							Match(LESS);
							State = 4991;
							Match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							State = 4992;
							Match(EXCLAMATION);
							State = 4993;
							Match(EQUAL);
							}
							}
							break;
						case 4:
							{
							State = 4994;
							Match(GREATER);
							}
							break;
						case 5:
							{
							{
							State = 4995;
							Match(GREATER);
							State = 4996;
							Match(EQUAL);
							}
							}
							break;
						case 6:
							{
							State = 4997;
							Match(LESS);
							}
							break;
						case 7:
							{
							State = 4998;
							Match(LESS);
							State = 4999;
							Match(EQUAL);
							}
							break;
						}
						State = 5002;
						_la = TokenStream.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 5005;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5004;
							Match(COMMA);
							}
						}

						State = 5007;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5009;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 5008;
							Match(NOT);
							}
						}

						State = 5022;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,565,Context) ) {
						case 1:
							{
							State = 5011;
							Match(EQUAL);
							}
							break;
						case 2:
							{
							{
							State = 5012;
							Match(LESS);
							State = 5013;
							Match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							State = 5014;
							Match(EXCLAMATION);
							State = 5015;
							Match(EQUAL);
							}
							}
							break;
						case 4:
							{
							State = 5016;
							Match(GREATER);
							}
							break;
						case 5:
							{
							{
							State = 5017;
							Match(GREATER);
							State = 5018;
							Match(EQUAL);
							}
							}
							break;
						case 6:
							{
							State = 5019;
							Match(LESS);
							}
							break;
						case 7:
							{
							State = 5020;
							Match(LESS);
							State = 5021;
							Match(EQUAL);
							}
							break;
						}
						State = 5024;
						_la = TokenStream.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				State = 5029;
				Match(REMOVE);
				State = 5030;
				Match(WHERE);
				}
				break;
			case 3:
				{
				State = 5031;
				Match(MODIFY);
				State = 5032;
				Match(NAME);
				State = 5033;
				Match(EQUAL);
				State = 5034;
				_localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_audit_specificationContext alter_server_audit_specification() {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(Context, State);
		EnterRule(_localctx, 382, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5037;
			Match(ALTER);
			State = 5038;
			Match(SERVER);
			State = 5039;
			Match(AUDIT);
			State = 5040;
			Match(SPECIFICATION);
			State = 5041;
			_localctx.audit_specification_name = id_();
			State = 5046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 5042;
				Match(FOR);
				State = 5043;
				Match(SERVER);
				State = 5044;
				Match(AUDIT);
				State = 5045;
				_localctx.audit_name = id_();
				}
			}

			State = 5055;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,570,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5048;
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5049;
					Match(LR_BRACKET);
					State = 5050;
					_localctx.audit_action_group_name = id_();
					State = 5051;
					Match(RR_BRACKET);
					}
					} 
				}
				State = 5057;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,570,Context);
			}
			State = 5064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,571,Context) ) {
			case 1:
				{
				State = 5058;
				Match(WITH);
				State = 5059;
				Match(LR_BRACKET);
				State = 5060;
				Match(STATE);
				State = 5061;
				Match(EQUAL);
				State = 5062;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5063;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_audit_specificationContext create_server_audit_specification() {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(Context, State);
		EnterRule(_localctx, 384, RULE_create_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5066;
			Match(CREATE);
			State = 5067;
			Match(SERVER);
			State = 5068;
			Match(AUDIT);
			State = 5069;
			Match(SPECIFICATION);
			State = 5070;
			_localctx.audit_specification_name = id_();
			State = 5075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 5071;
				Match(FOR);
				State = 5072;
				Match(SERVER);
				State = 5073;
				Match(AUDIT);
				State = 5074;
				_localctx.audit_name = id_();
				}
			}

			State = 5084;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,573,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5077;
					Match(ADD);
					State = 5078;
					Match(LR_BRACKET);
					State = 5079;
					_localctx.audit_action_group_name = id_();
					State = 5080;
					Match(RR_BRACKET);
					}
					} 
				}
				State = 5086;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,573,Context);
			}
			State = 5093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
			case 1:
				{
				State = 5087;
				Match(WITH);
				State = 5088;
				Match(LR_BRACKET);
				State = 5089;
				Match(STATE);
				State = 5090;
				Match(EQUAL);
				State = 5091;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5092;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_configurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_configuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_configuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_configuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_configuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_configurationContext alter_server_configuration() {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(Context, State);
		EnterRule(_localctx, 386, RULE_alter_server_configuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5095;
			Match(ALTER);
			State = 5096;
			Match(SERVER);
			State = 5097;
			Match(CONFIGURATION);
			State = 5098;
			Match(SET);
			{
			State = 5204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCESS:
				{
				State = 5099;
				Match(PROCESS);
				State = 5100;
				Match(AFFINITY);
				State = 5136;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CPU:
					{
					State = 5101;
					Match(CPU);
					State = 5102;
					Match(EQUAL);
					State = 5118;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AUTO:
						{
						State = 5103;
						Match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						State = 5114;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							State = 5114;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,577,Context) ) {
							case 1:
								{
								State = 5105;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5104;
									Match(COMMA);
									}
								}

								State = 5107;
								Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 5109;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5108;
									Match(COMMA);
									}
								}

								State = 5111;
								Match(DECIMAL);
								State = 5112;
								Match(TO);
								State = 5113;
								Match(DECIMAL);
								}
								break;
							}
							}
							State = 5116;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					State = 5120;
					Match(NUMANODE);
					State = 5121;
					Match(EQUAL);
					State = 5132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						State = 5132;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,582,Context) ) {
						case 1:
							{
							State = 5123;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 5122;
								Match(COMMA);
								}
							}

							State = 5125;
							Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 5127;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 5126;
								Match(COMMA);
								}
							}

							State = 5129;
							Match(DECIMAL);
							State = 5130;
							Match(TO);
							State = 5131;
							Match(DECIMAL);
							}
							break;
						}
						}
						State = 5134;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DECIMAL || _la==COMMA );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				State = 5138;
				Match(DIAGNOSTICS);
				State = 5139;
				Match(LOG);
				State = 5155;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 5140;
					Match(ON);
					}
					break;
				case OFF:
					{
					State = 5141;
					Match(OFF);
					}
					break;
				case PATH:
					{
					State = 5142;
					Match(PATH);
					State = 5143;
					Match(EQUAL);
					State = 5144;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					State = 5145;
					Match(MAX_SIZE);
					State = 5146;
					Match(EQUAL);
					State = 5150;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DECIMAL:
						{
						State = 5147;
						Match(DECIMAL);
						State = 5148;
						Match(MB);
						}
						break;
					case DEFAULT:
						{
						State = 5149;
						Match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					State = 5152;
					Match(MAX_FILES);
					State = 5153;
					Match(EQUAL);
					State = 5154;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				State = 5157;
				Match(FAILOVER);
				State = 5158;
				Match(CLUSTER);
				State = 5159;
				Match(PROPERTY);
				State = 5177;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VERBOSELOGGING:
					{
					State = 5160;
					Match(VERBOSELOGGING);
					State = 5161;
					Match(EQUAL);
					State = 5162;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					State = 5163;
					Match(SQLDUMPERFLAGS);
					State = 5164;
					Match(EQUAL);
					State = 5165;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					State = 5166;
					Match(SQLDUMPERPATH);
					State = 5167;
					Match(EQUAL);
					State = 5168;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					State = 5169;
					Match(SQLDUMPERTIMEOUT);
					State = 5170;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					State = 5171;
					Match(FAILURECONDITIONLEVEL);
					State = 5172;
					Match(EQUAL);
					State = 5173;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					State = 5174;
					Match(HEALTHCHECKTIMEOUT);
					State = 5175;
					Match(EQUAL);
					State = 5176;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				State = 5179;
				Match(HADR);
				State = 5180;
				Match(CLUSTER);
				State = 5181;
				Match(CONTEXT);
				State = 5182;
				Match(EQUAL);
				State = 5183;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case BUFFER:
				{
				State = 5184;
				Match(BUFFER);
				State = 5185;
				Match(POOL);
				State = 5186;
				Match(EXTENSION);
				State = 5199;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 5187;
					Match(ON);
					State = 5188;
					Match(LR_BRACKET);
					State = 5189;
					Match(FILENAME);
					State = 5190;
					Match(EQUAL);
					State = 5191;
					Match(STRING);
					State = 5192;
					Match(COMMA);
					State = 5193;
					Match(SIZE);
					State = 5194;
					Match(EQUAL);
					State = 5195;
					Match(DECIMAL);
					State = 5196;
					_la = TokenStream.LA(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5197;
					Match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					State = 5198;
					Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				State = 5201;
				Match(SET);
				State = 5202;
				Match(SOFTNUMA);
				State = 5203;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_roleContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context server_principal;
		public Id_Context new_server_role_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_roleContext alter_server_role() {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(Context, State);
		EnterRule(_localctx, 388, RULE_alter_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5206;
			Match(ALTER);
			State = 5207;
			Match(SERVER);
			State = 5208;
			Match(ROLE);
			State = 5209;
			_localctx.server_role_name = id_();
			State = 5217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case DROP:
				{
				State = 5210;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5211;
				Match(MEMBER);
				State = 5212;
				_localctx.server_principal = id_();
				}
				break;
			case WITH:
				{
				State = 5213;
				Match(WITH);
				State = 5214;
				Match(NAME);
				State = 5215;
				Match(EQUAL);
				State = 5216;
				_localctx.new_server_role_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_roleContext : ParserRuleContext {
		public Id_Context server_role;
		public Id_Context server_principal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_role(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_roleContext create_server_role() {
		Create_server_roleContext _localctx = new Create_server_roleContext(Context, State);
		EnterRule(_localctx, 390, RULE_create_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5219;
			Match(CREATE);
			State = 5220;
			Match(SERVER);
			State = 5221;
			Match(ROLE);
			State = 5222;
			_localctx.server_role = id_();
			State = 5225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5223;
				Match(AUTHORIZATION);
				State = 5224;
				_localctx.server_principal = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_role_pdwContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context login;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role_pdw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role_pdw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_role_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_role_pdwContext alter_server_role_pdw() {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(Context, State);
		EnterRule(_localctx, 392, RULE_alter_server_role_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5227;
			Match(ALTER);
			State = 5228;
			Match(SERVER);
			State = 5229;
			Match(ROLE);
			State = 5230;
			_localctx.server_role_name = id_();
			State = 5231;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5232;
			Match(MEMBER);
			State = 5233;
			_localctx.login = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_serviceContext : ParserRuleContext {
		public Id_Context modified_service_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public Id_Context modified_contract_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_serviceContext alter_service() {
		Alter_serviceContext _localctx = new Alter_serviceContext(Context, State);
		EnterRule(_localctx, 394, RULE_alter_service);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5235;
			Match(ALTER);
			State = 5236;
			Match(SERVICE);
			State = 5237;
			_localctx.modified_service_name = id_();
			State = 5245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 5238;
				Match(ON);
				State = 5239;
				Match(QUEUE);
				{
				State = 5240;
				_localctx.schema_name = id_();
				State = 5241;
				Match(DOT);
				}
				State = 5243;
				_localctx.queue_name = id_();
				}
			}

			State = 5254;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,594,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5247;
						Match(COMMA);
						}
					}

					State = 5250;
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5251;
					_localctx.modified_contract_name = id_();
					}
					} 
				}
				State = 5256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,594,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_serviceContext : ParserRuleContext {
		public Id_Context create_service_name;
		public Id_Context owner_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_service; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_service(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_service(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_serviceContext create_service() {
		Create_serviceContext _localctx = new Create_serviceContext(Context, State);
		EnterRule(_localctx, 396, RULE_create_service);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5257;
			Match(CREATE);
			State = 5258;
			Match(SERVICE);
			State = 5259;
			_localctx.create_service_name = id_();
			State = 5262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5260;
				Match(AUTHORIZATION);
				State = 5261;
				_localctx.owner_name = id_();
				}
			}

			State = 5264;
			Match(ON);
			State = 5265;
			Match(QUEUE);
			State = 5269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
			case 1:
				{
				State = 5266;
				_localctx.schema_name = id_();
				State = 5267;
				Match(DOT);
				}
				break;
			}
			State = 5271;
			_localctx.queue_name = id_();
			State = 5285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,600,Context) ) {
			case 1:
				{
				State = 5272;
				Match(LR_BRACKET);
				State = 5280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5273;
						Match(COMMA);
						}
					}

					State = 5278;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ADD:
					case FILLFACTOR:
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DISTRIBUTION:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REPLICATE:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case ROUND_ROBIN:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 5276;
						id_();
						}
						break;
					case DEFAULT:
						{
						State = 5277;
						Match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 5282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ADD || _la==DEFAULT || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
				State = 5284;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_service_master_keyContext : ParserRuleContext {
		public IToken acold_account_name;
		public IToken old_password;
		public IToken new_account_name;
		public IToken new_password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service_master_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_service_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_service_master_keyContext alter_service_master_key() {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(Context, State);
		EnterRule(_localctx, 398, RULE_alter_service_master_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5287;
			Match(ALTER);
			State = 5288;
			Match(SERVICE);
			State = 5289;
			Match(MASTER);
			State = 5290;
			Match(KEY);
			State = 5312;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				State = 5292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCE) {
					{
					State = 5291;
					Match(FORCE);
					}
				}

				State = 5294;
				Match(REGENERATE);
				}
				break;
			case WITH:
				{
				{
				State = 5295;
				Match(WITH);
				State = 5310;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,602,Context) ) {
				case 1:
					{
					State = 5296;
					Match(OLD_ACCOUNT);
					State = 5297;
					Match(EQUAL);
					State = 5298;
					_localctx.acold_account_name = Match(STRING);
					State = 5299;
					Match(COMMA);
					State = 5300;
					Match(OLD_PASSWORD);
					State = 5301;
					Match(EQUAL);
					State = 5302;
					_localctx.old_password = Match(STRING);
					}
					break;
				case 2:
					{
					State = 5303;
					Match(NEW_ACCOUNT);
					State = 5304;
					Match(EQUAL);
					State = 5305;
					_localctx.new_account_name = Match(STRING);
					State = 5306;
					Match(COMMA);
					State = 5307;
					Match(NEW_PASSWORD);
					State = 5308;
					Match(EQUAL);
					State = 5309;
					_localctx.new_password = Match(STRING);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_symmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public Id_Context certificate_name;
		public IToken password;
		public Id_Context symmetric_key_name;
		public Id_Context Asym_key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_symmetric_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_symmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_symmetric_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_symmetric_keyContext alter_symmetric_key() {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(Context, State);
		EnterRule(_localctx, 400, RULE_alter_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5314;
			Match(ALTER);
			State = 5315;
			Match(SYMMETRIC);
			State = 5316;
			Match(KEY);
			State = 5317;
			_localctx.key_name = id_();
			{
			State = 5318;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5319;
			Match(ENCRYPTION);
			State = 5320;
			Match(BY);
			State = 5332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CERTIFICATE:
				{
				State = 5321;
				Match(CERTIFICATE);
				State = 5322;
				_localctx.certificate_name = id_();
				}
				break;
			case PASSWORD:
				{
				State = 5323;
				Match(PASSWORD);
				State = 5324;
				Match(EQUAL);
				State = 5325;
				_localctx.password = Match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				State = 5326;
				Match(SYMMETRIC);
				State = 5327;
				Match(KEY);
				State = 5328;
				_localctx.symmetric_key_name = id_();
				}
				break;
			case ASYMMETRIC:
				{
				State = 5329;
				Match(ASYMMETRIC);
				State = 5330;
				Match(KEY);
				State = 5331;
				_localctx.Asym_key_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public Id_Context schema_name_1;
		public Id_Context synonym_name;
		public Id_Context server_name;
		public Id_Context database_name;
		public Id_Context schema_name_2;
		public Id_Context object_name;
		public Id_Context database_or_schema2;
		public Id_Context schema_id_2_or_object_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_synonym(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_synonym(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(Context, State);
		EnterRule(_localctx, 402, RULE_create_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5334;
			Match(CREATE);
			State = 5335;
			Match(SYNONYM);
			State = 5339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,605,Context) ) {
			case 1:
				{
				State = 5336;
				_localctx.schema_name_1 = id_();
				State = 5337;
				Match(DOT);
				}
				break;
			}
			State = 5341;
			_localctx.synonym_name = id_();
			State = 5342;
			Match(FOR);
			State = 5369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,611,Context) ) {
			case 1:
				{
				State = 5346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,606,Context) ) {
				case 1:
					{
					State = 5343;
					_localctx.server_name = id_();
					State = 5344;
					Match(DOT);
					}
					break;
				}
				State = 5351;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,607,Context) ) {
				case 1:
					{
					State = 5348;
					_localctx.database_name = id_();
					State = 5349;
					Match(DOT);
					}
					break;
				}
				State = 5356;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,608,Context) ) {
				case 1:
					{
					State = 5353;
					_localctx.schema_name_2 = id_();
					State = 5354;
					Match(DOT);
					}
					break;
				}
				State = 5358;
				_localctx.object_name = id_();
				}
				break;
			case 2:
				{
				State = 5362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,609,Context) ) {
				case 1:
					{
					State = 5359;
					_localctx.database_or_schema2 = id_();
					State = 5360;
					Match(DOT);
					}
					break;
				}
				State = 5367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,610,Context) ) {
				case 1:
					{
					State = 5364;
					_localctx.schema_id_2_or_object_name = id_();
					State = 5365;
					Match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public IToken lcid;
		public Id_Context language_name_or_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OLD_PASSWORD() { return GetTokens(TSqlParser.OLD_PASSWORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD(int i) {
			return GetToken(TSqlParser.OLD_PASSWORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(Context, State);
		EnterRule(_localctx, 404, RULE_alter_user);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5371;
			Match(ALTER);
			State = 5372;
			Match(USER);
			State = 5373;
			_localctx.username = id_();
			State = 5374;
			Match(WITH);
			State = 5425;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5425;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,621,Context) ) {
					case 1:
						{
						State = 5376;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5375;
							Match(COMMA);
							}
						}

						State = 5378;
						Match(NAME);
						State = 5379;
						Match(EQUAL);
						State = 5380;
						_localctx.newusername = id_();
						}
						break;
					case 2:
						{
						State = 5382;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5381;
							Match(COMMA);
							}
						}

						State = 5384;
						Match(DEFAULT_SCHEMA);
						State = 5385;
						Match(EQUAL);
						State = 5388;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ADD:
						case FILLFACTOR:
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DISTRIBUTION:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REPLICATE:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case ROUND_ROBIN:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							State = 5386;
							_localctx.schema_name = id_();
							}
							break;
						case NULL_:
							{
							State = 5387;
							Match(NULL_);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						State = 5391;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5390;
							Match(COMMA);
							}
						}

						State = 5393;
						Match(LOGIN);
						State = 5394;
						Match(EQUAL);
						State = 5395;
						_localctx.loginame = id_();
						}
						break;
					case 4:
						{
						State = 5397;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5396;
							Match(COMMA);
							}
						}

						State = 5399;
						Match(PASSWORD);
						State = 5400;
						Match(EQUAL);
						State = 5401;
						Match(STRING);
						State = 5405;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 5402;
								Match(OLD_PASSWORD);
								State = 5403;
								Match(EQUAL);
								State = 5404;
								Match(STRING);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5407;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,617,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 5:
						{
						State = 5410;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5409;
							Match(COMMA);
							}
						}

						State = 5412;
						Match(DEFAULT_LANGUAGE);
						State = 5413;
						Match(EQUAL);
						State = 5417;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,619,Context) ) {
						case 1:
							{
							State = 5414;
							Match(NONE);
							}
							break;
						case 2:
							{
							State = 5415;
							_localctx.lcid = Match(DECIMAL);
							}
							break;
						case 3:
							{
							State = 5416;
							_localctx.language_name_or_alias = id_();
							}
							break;
						}
						}
						break;
					case 6:
						{
						State = 5420;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5419;
							Match(COMMA);
							}
						}

						State = 5422;
						Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5423;
						Match(EQUAL);
						State = 5424;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5427;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,622,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context windows_principal;
		public Id_Context language_name_or_alias;
		public IToken password;
		public Id_Context Azure_Active_Directory_principal;
		public Id_Context cert_name;
		public Id_Context asym_key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SID() { return GetTokens(TSqlParser.SID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SID(int i) {
			return GetToken(TSqlParser.SID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(Context, State);
		EnterRule(_localctx, 406, RULE_create_user);
		int _la;
		try {
			int _alt;
			State = 5575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,650,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5429;
				Match(CREATE);
				State = 5430;
				Match(USER);
				State = 5431;
				_localctx.user_name = id_();
				State = 5435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==FROM) {
					{
					State = 5432;
					_la = TokenStream.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5433;
					Match(LOGIN);
					State = 5434;
					_localctx.login_name = id_();
					}
				}

				State = 5455;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,628,Context) ) {
				case 1:
					{
					State = 5437;
					Match(WITH);
					State = 5452;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,627,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 5450;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,626,Context) ) {
							case 1:
								{
								State = 5439;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5438;
									Match(COMMA);
									}
								}

								State = 5441;
								Match(DEFAULT_SCHEMA);
								State = 5442;
								Match(EQUAL);
								State = 5443;
								_localctx.schema_name = id_();
								}
								break;
							case 2:
								{
								State = 5445;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5444;
									Match(COMMA);
									}
								}

								State = 5447;
								Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5448;
								Match(EQUAL);
								State = 5449;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5454;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,627,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5457;
				Match(CREATE);
				State = 5458;
				Match(USER);
				State = 5539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,644,Context) ) {
				case 1:
					{
					State = 5459;
					_localctx.windows_principal = id_();
					State = 5494;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,636,Context) ) {
					case 1:
						{
						State = 5460;
						Match(WITH);
						State = 5491;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,635,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								State = 5489;
								ErrorHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(TokenStream,634,Context) ) {
								case 1:
									{
									State = 5462;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 5461;
										Match(COMMA);
										}
									}

									State = 5464;
									Match(DEFAULT_SCHEMA);
									State = 5465;
									Match(EQUAL);
									State = 5466;
									_localctx.schema_name = id_();
									}
									break;
								case 2:
									{
									State = 5468;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 5467;
										Match(COMMA);
										}
									}

									State = 5470;
									Match(DEFAULT_LANGUAGE);
									State = 5471;
									Match(EQUAL);
									State = 5475;
									ErrorHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(TokenStream,631,Context) ) {
									case 1:
										{
										State = 5472;
										Match(NONE);
										}
										break;
									case 2:
										{
										State = 5473;
										Match(DECIMAL);
										}
										break;
									case 3:
										{
										State = 5474;
										_localctx.language_name_or_alias = id_();
										}
										break;
									}
									}
									break;
								case 3:
									{
									State = 5478;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 5477;
										Match(COMMA);
										}
									}

									State = 5480;
									Match(SID);
									State = 5481;
									Match(EQUAL);
									State = 5482;
									Match(BINARY);
									}
									break;
								case 4:
									{
									State = 5484;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 5483;
										Match(COMMA);
										}
									}

									State = 5486;
									Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									State = 5487;
									Match(EQUAL);
									State = 5488;
									_la = TokenStream.LA(1);
									if ( !(_la==OFF || _la==ON) ) {
									ErrorHandler.RecoverInline(this);
									}
									else {
										ErrorHandler.ReportMatch(this);
									    Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5493;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,635,Context);
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 5496;
					_localctx.user_name = id_();
					State = 5497;
					Match(WITH);
					State = 5498;
					Match(PASSWORD);
					State = 5499;
					Match(EQUAL);
					State = 5500;
					_localctx.password = Match(STRING);
					State = 5531;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,643,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 5529;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,642,Context) ) {
							case 1:
								{
								State = 5502;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5501;
									Match(COMMA);
									}
								}

								State = 5504;
								Match(DEFAULT_SCHEMA);
								State = 5505;
								Match(EQUAL);
								State = 5506;
								_localctx.schema_name = id_();
								}
								break;
							case 2:
								{
								State = 5508;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5507;
									Match(COMMA);
									}
								}

								State = 5510;
								Match(DEFAULT_LANGUAGE);
								State = 5511;
								Match(EQUAL);
								State = 5515;
								ErrorHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(TokenStream,639,Context) ) {
								case 1:
									{
									State = 5512;
									Match(NONE);
									}
									break;
								case 2:
									{
									State = 5513;
									Match(DECIMAL);
									}
									break;
								case 3:
									{
									State = 5514;
									_localctx.language_name_or_alias = id_();
									}
									break;
								}
								}
								break;
							case 3:
								{
								State = 5518;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5517;
									Match(COMMA);
									}
								}

								State = 5520;
								Match(SID);
								State = 5521;
								Match(EQUAL);
								State = 5522;
								Match(BINARY);
								}
								break;
							case 4:
								{
								State = 5524;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5523;
									Match(COMMA);
									}
								}

								State = 5526;
								Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5527;
								Match(EQUAL);
								State = 5528;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5533;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,643,Context);
					}
					}
					break;
				case 3:
					{
					State = 5534;
					_localctx.Azure_Active_Directory_principal = id_();
					State = 5535;
					Match(FROM);
					State = 5536;
					Match(EXTERNAL);
					State = 5537;
					Match(PROVIDER);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5541;
				Match(CREATE);
				State = 5542;
				Match(USER);
				State = 5543;
				_localctx.user_name = id_();
				State = 5570;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,649,Context) ) {
				case 1:
					{
					State = 5544;
					Match(WITHOUT);
					State = 5545;
					Match(LOGIN);
					State = 5560;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,648,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 5558;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,647,Context) ) {
							case 1:
								{
								State = 5547;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5546;
									Match(COMMA);
									}
								}

								State = 5549;
								Match(DEFAULT_SCHEMA);
								State = 5550;
								Match(EQUAL);
								State = 5551;
								_localctx.schema_name = id_();
								}
								break;
							case 2:
								{
								State = 5553;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5552;
									Match(COMMA);
									}
								}

								State = 5555;
								Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5556;
								Match(EQUAL);
								State = 5557;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5562;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,648,Context);
					}
					}
					break;
				case 2:
					{
					State = 5563;
					_la = TokenStream.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5564;
					Match(CERTIFICATE);
					State = 5565;
					_localctx.cert_name = id_();
					}
					break;
				case 3:
					{
					State = 5566;
					_la = TokenStream.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5567;
					Match(ASYMMETRIC);
					State = 5568;
					Match(KEY);
					State = 5569;
					_localctx.asym_key_name = id_();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5572;
				Match(CREATE);
				State = 5573;
				Match(USER);
				State = 5574;
				_localctx.user_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_azure_sql_dwContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context Azure_Active_Directory_principal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_azure_sql_dw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user_azure_sql_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user_azure_sql_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user_azure_sql_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(Context, State);
		EnterRule(_localctx, 408, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			State = 5605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,654,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5577;
				Match(CREATE);
				State = 5578;
				Match(USER);
				State = 5579;
				_localctx.user_name = id_();
				State = 5585;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
				case 1:
					{
					State = 5580;
					_la = TokenStream.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5581;
					Match(LOGIN);
					State = 5582;
					_localctx.login_name = id_();
					}
					break;
				case 2:
					{
					State = 5583;
					Match(WITHOUT);
					State = 5584;
					Match(LOGIN);
					}
					break;
				}
				State = 5591;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,652,Context) ) {
				case 1:
					{
					State = 5587;
					Match(WITH);
					State = 5588;
					Match(DEFAULT_SCHEMA);
					State = 5589;
					Match(EQUAL);
					State = 5590;
					_localctx.schema_name = id_();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5593;
				Match(CREATE);
				State = 5594;
				Match(USER);
				State = 5595;
				_localctx.Azure_Active_Directory_principal = id_();
				State = 5596;
				Match(FROM);
				State = 5597;
				Match(EXTERNAL);
				State = 5598;
				Match(PROVIDER);
				State = 5603;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,653,Context) ) {
				case 1:
					{
					State = 5599;
					Match(WITH);
					State = 5600;
					Match(DEFAULT_SCHEMA);
					State = 5601;
					Match(EQUAL);
					State = 5602;
					_localctx.schema_name = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_azure_sqlContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_azure_sql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user_azure_sql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_azure_sqlContext alter_user_azure_sql() {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(Context, State);
		EnterRule(_localctx, 410, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5607;
			Match(ALTER);
			State = 5608;
			Match(USER);
			State = 5609;
			_localctx.username = id_();
			State = 5610;
			Match(WITH);
			State = 5635;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5635;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,659,Context) ) {
					case 1:
						{
						State = 5612;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5611;
							Match(COMMA);
							}
						}

						State = 5614;
						Match(NAME);
						State = 5615;
						Match(EQUAL);
						State = 5616;
						_localctx.newusername = id_();
						}
						break;
					case 2:
						{
						State = 5618;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5617;
							Match(COMMA);
							}
						}

						State = 5620;
						Match(DEFAULT_SCHEMA);
						State = 5621;
						Match(EQUAL);
						State = 5622;
						_localctx.schema_name = id_();
						}
						break;
					case 3:
						{
						State = 5624;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5623;
							Match(COMMA);
							}
						}

						State = 5626;
						Match(LOGIN);
						State = 5627;
						Match(EQUAL);
						State = 5628;
						_localctx.loginame = id_();
						}
						break;
					case 4:
						{
						State = 5630;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5629;
							Match(COMMA);
							}
						}

						State = 5632;
						Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5633;
						Match(EQUAL);
						State = 5634;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5637;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,660,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_workload_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_workload_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_workload_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_workload_groupContext alter_workload_group() {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(Context, State);
		EnterRule(_localctx, 412, RULE_alter_workload_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5639;
			Match(ALTER);
			State = 5640;
			Match(WORKLOAD);
			State = 5641;
			Match(GROUP);
			State = 5644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
			case 1:
				{
				State = 5642;
				_localctx.workload_group_group_name = id_();
				}
				break;
			case 2:
				{
				State = 5643;
				Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 5677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,666,Context) ) {
			case 1:
				{
				State = 5646;
				Match(WITH);
				State = 5647;
				Match(LR_BRACKET);
				State = 5672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 5672;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,664,Context) ) {
					case 1:
						{
						State = 5648;
						Match(IMPORTANCE);
						State = 5649;
						Match(EQUAL);
						State = 5650;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & 144116287587483649L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 5652;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5651;
							Match(COMMA);
							}
						}

						State = 5654;
						Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						State = 5655;
						Match(EQUAL);
						State = 5656;
						_localctx.request_max_memory_grant = Match(DECIMAL);
						}
						break;
					case 3:
						{
						State = 5658;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5657;
							Match(COMMA);
							}
						}

						State = 5660;
						Match(REQUEST_MAX_CPU_TIME_SEC);
						State = 5661;
						Match(EQUAL);
						State = 5662;
						_localctx.request_max_cpu_time_sec = Match(DECIMAL);
						}
						break;
					case 4:
						{
						State = 5663;
						Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						State = 5664;
						Match(EQUAL);
						State = 5665;
						_localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
						}
						break;
					case 5:
						{
						State = 5666;
						Match(MAX_DOP);
						State = 5667;
						Match(EQUAL);
						State = 5668;
						_localctx.max_dop = Match(DECIMAL);
						}
						break;
					case 6:
						{
						State = 5669;
						Match(GROUP_MAX_REQUESTS);
						State = 5670;
						Match(EQUAL);
						State = 5671;
						_localctx.group_max_requests = Match(DECIMAL);
						}
						break;
					}
					}
					State = 5674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & 4503599627378689L) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & 7L) != 0) || _la==COMMA );
				State = 5676;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 5684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,668,Context) ) {
			case 1:
				{
				State = 5679;
				Match(USING);
				State = 5682;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,667,Context) ) {
				case 1:
					{
					State = 5680;
					_localctx.workload_group_pool_name = id_();
					}
					break;
				case 2:
					{
					State = 5681;
					Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public Id_Context external_pool_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_workload_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_workload_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_workload_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_workload_groupContext create_workload_group() {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(Context, State);
		EnterRule(_localctx, 414, RULE_create_workload_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5686;
			Match(CREATE);
			State = 5687;
			Match(WORKLOAD);
			State = 5688;
			Match(GROUP);
			State = 5689;
			_localctx.workload_group_group_name = id_();
			State = 5721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,673,Context) ) {
			case 1:
				{
				State = 5690;
				Match(WITH);
				State = 5691;
				Match(LR_BRACKET);
				State = 5716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 5716;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,671,Context) ) {
					case 1:
						{
						State = 5692;
						Match(IMPORTANCE);
						State = 5693;
						Match(EQUAL);
						State = 5694;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & 144116287587483649L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 5696;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5695;
							Match(COMMA);
							}
						}

						State = 5698;
						Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						State = 5699;
						Match(EQUAL);
						State = 5700;
						_localctx.request_max_memory_grant = Match(DECIMAL);
						}
						break;
					case 3:
						{
						State = 5702;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5701;
							Match(COMMA);
							}
						}

						State = 5704;
						Match(REQUEST_MAX_CPU_TIME_SEC);
						State = 5705;
						Match(EQUAL);
						State = 5706;
						_localctx.request_max_cpu_time_sec = Match(DECIMAL);
						}
						break;
					case 4:
						{
						State = 5707;
						Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						State = 5708;
						Match(EQUAL);
						State = 5709;
						_localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
						}
						break;
					case 5:
						{
						State = 5710;
						Match(MAX_DOP);
						State = 5711;
						Match(EQUAL);
						State = 5712;
						_localctx.max_dop = Match(DECIMAL);
						}
						break;
					case 6:
						{
						State = 5713;
						Match(GROUP_MAX_REQUESTS);
						State = 5714;
						Match(EQUAL);
						State = 5715;
						_localctx.group_max_requests = Match(DECIMAL);
						}
						break;
					}
					}
					State = 5718;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & 4503599627378689L) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & 7L) != 0) || _la==COMMA );
				State = 5720;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 5736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,677,Context) ) {
			case 1:
				{
				State = 5723;
				Match(USING);
				State = 5726;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,674,Context) ) {
				case 1:
					{
					State = 5724;
					_localctx.workload_group_pool_name = id_();
					}
					break;
				case 2:
					{
					State = 5725;
					Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				State = 5734;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,676,Context) ) {
				case 1:
					{
					State = 5729;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5728;
						Match(COMMA);
						}
					}

					State = 5731;
					Match(EXTERNAL);
					State = 5732;
					_localctx.external_pool_name = id_();
					}
					break;
				case 2:
					{
					State = 5733;
					Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_schema_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_schema_collection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_schema_collection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_xml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_schema_collectionContext create_xml_schema_collection() {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(Context, State);
		EnterRule(_localctx, 416, RULE_create_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5738;
			Match(CREATE);
			State = 5739;
			Match(XML);
			State = 5740;
			Match(SCHEMA);
			State = 5741;
			Match(COLLECTION);
			State = 5745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,678,Context) ) {
			case 1:
				{
				State = 5742;
				_localctx.relational_schema = id_();
				State = 5743;
				Match(DOT);
				}
				break;
			}
			State = 5747;
			_localctx.sql_identifier = id_();
			State = 5748;
			Match(AS);
			State = 5752;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 5749;
				Match(STRING);
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 5750;
				id_();
				}
				break;
			case LOCAL_ID:
				{
				State = 5751;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public Data_typeContext input_parameter_type;
		public Expression_listContext boundary_values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public Create_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_functionContext create_partition_function() {
		Create_partition_functionContext _localctx = new Create_partition_functionContext(Context, State);
		EnterRule(_localctx, 418, RULE_create_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5754;
			Match(CREATE);
			State = 5755;
			Match(PARTITION);
			State = 5756;
			Match(FUNCTION);
			State = 5757;
			_localctx.partition_function_name = id_();
			State = 5758;
			Match(LR_BRACKET);
			State = 5759;
			_localctx.input_parameter_type = data_type();
			State = 5760;
			Match(RR_BRACKET);
			State = 5761;
			Match(AS);
			State = 5762;
			Match(RANGE);
			State = 5764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				State = 5763;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5766;
			Match(FOR);
			State = 5767;
			Match(VALUES);
			State = 5768;
			Match(LR_BRACKET);
			State = 5769;
			_localctx.boundary_values = expression_list();
			State = 5770;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context partition_function_name;
		public Id_Context _id_;
		public IList<Id_Context> _file_group_names = new List<Id_Context>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_scheme; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_schemeContext create_partition_scheme() {
		Create_partition_schemeContext _localctx = new Create_partition_schemeContext(Context, State);
		EnterRule(_localctx, 420, RULE_create_partition_scheme);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5772;
			Match(CREATE);
			State = 5773;
			Match(PARTITION);
			State = 5774;
			Match(SCHEME);
			State = 5775;
			_localctx.partition_scheme_name = id_();
			State = 5776;
			Match(AS);
			State = 5777;
			Match(PARTITION);
			State = 5778;
			_localctx.partition_function_name = id_();
			State = 5780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 5779;
				Match(ALL);
				}
			}

			State = 5782;
			Match(TO);
			State = 5783;
			Match(LR_BRACKET);
			State = 5784;
			_localctx._id_ = id_();
			_localctx._file_group_names.Add(_localctx._id_);
			State = 5789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5785;
				Match(COMMA);
				State = 5786;
				_localctx._id_ = id_();
				_localctx._file_group_names.Add(_localctx._id_);
				}
				}
				State = 5791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5792;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public Id_Context filegroup;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_queue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_queue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_queue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_queueContext create_queue() {
		Create_queueContext _localctx = new Create_queueContext(Context, State);
		EnterRule(_localctx, 422, RULE_create_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5794;
			Match(CREATE);
			State = 5795;
			Match(QUEUE);
			State = 5798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,683,Context) ) {
			case 1:
				{
				State = 5796;
				full_table_name();
				}
				break;
			case 2:
				{
				State = 5797;
				_localctx.queue_name = id_();
				}
				break;
			}
			State = 5801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,684,Context) ) {
			case 1:
				{
				State = 5800;
				queue_settings();
				}
				break;
			}
			State = 5806;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				{
				State = 5803;
				Match(ON);
				State = 5804;
				_localctx.filegroup = id_();
				}
				break;
			case DEFAULT:
				{
				State = 5805;
				Match(DEFAULT);
				}
				break;
			case Eof:
			case ADD:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CHECKPOINT:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case ELSE:
			case END:
			case EXECUTE:
			case FETCH:
			case FILLFACTOR:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KILL:
			case MERGE:
			case OPEN:
			case OPENJSON:
			case PRECISION:
			case PRINT:
			case RAISERROR:
			case RECONFIGURE:
			case RETURN:
			case REVERT:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOT:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_settingsContext : ParserRuleContext {
		public IToken max_readers;
		public IToken user_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATUS() { return GetTokens(TSqlParser.STATUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS(int i) {
			return GetToken(TSqlParser.STATUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_settings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_settingsContext queue_settings() {
		Queue_settingsContext _localctx = new Queue_settingsContext(Context, State);
		EnterRule(_localctx, 424, RULE_queue_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5808;
			Match(WITH);
			State = 5815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,687,Context) ) {
			case 1:
				{
				State = 5809;
				Match(STATUS);
				State = 5810;
				Match(EQUAL);
				State = 5811;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5812;
					Match(COMMA);
					}
				}

				}
				break;
			}
			State = 5823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,689,Context) ) {
			case 1:
				{
				State = 5817;
				Match(RETENTION);
				State = 5818;
				Match(EQUAL);
				State = 5819;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5820;
					Match(COMMA);
					}
				}

				}
				break;
			}
			State = 5870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,701,Context) ) {
			case 1:
				{
				State = 5825;
				Match(ACTIVATION);
				State = 5826;
				Match(LR_BRACKET);
				State = 5864;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXECUTE:
				case MAX_QUEUE_READERS:
				case PROCEDURE_NAME:
				case STATUS:
				case RR_BRACKET:
					{
					{
					State = 5833;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STATUS) {
						{
						State = 5827;
						Match(STATUS);
						State = 5828;
						Match(EQUAL);
						State = 5829;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5831;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5830;
							Match(COMMA);
							}
						}

						}
					}

					State = 5841;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PROCEDURE_NAME) {
						{
						State = 5835;
						Match(PROCEDURE_NAME);
						State = 5836;
						Match(EQUAL);
						State = 5837;
						func_proc_name_database_schema();
						State = 5839;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5838;
							Match(COMMA);
							}
						}

						}
					}

					State = 5849;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MAX_QUEUE_READERS) {
						{
						State = 5843;
						Match(MAX_QUEUE_READERS);
						State = 5844;
						Match(EQUAL);
						State = 5845;
						_localctx.max_readers = Match(DECIMAL);
						State = 5847;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5846;
							Match(COMMA);
							}
						}

						}
					}

					State = 5861;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EXECUTE) {
						{
						State = 5851;
						Match(EXECUTE);
						State = 5852;
						Match(AS);
						State = 5856;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SELF:
							{
							State = 5853;
							Match(SELF);
							}
							break;
						case STRING:
							{
							State = 5854;
							_localctx.user_name = Match(STRING);
							}
							break;
						case OWNER:
							{
							State = 5855;
							Match(OWNER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5859;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5858;
							Match(COMMA);
							}
						}

						}
					}

					}
					}
					break;
				case DROP:
					{
					State = 5863;
					Match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5866;
				Match(RR_BRACKET);
				State = 5868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5867;
					Match(COMMA);
					}
				}

				}
				break;
			}
			State = 5879;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,702,Context) ) {
			case 1:
				{
				State = 5872;
				Match(POISON_MESSAGE_HANDLING);
				State = 5873;
				Match(LR_BRACKET);
				{
				State = 5874;
				Match(STATUS);
				State = 5875;
				Match(EQUAL);
				State = 5876;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				State = 5878;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Queue_actionContext queue_action() {
			return GetRuleContext<Queue_actionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_queue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_queue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_queue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_queueContext alter_queue() {
		Alter_queueContext _localctx = new Alter_queueContext(Context, State);
		EnterRule(_localctx, 426, RULE_alter_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5881;
			Match(ALTER);
			State = 5882;
			Match(QUEUE);
			State = 5885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,703,Context) ) {
			case 1:
				{
				State = 5883;
				full_table_name();
				}
				break;
			case 2:
				{
				State = 5884;
				_localctx.queue_name = id_();
				}
				break;
			}
			State = 5889;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 5887;
				queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				State = 5888;
				queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Queue_rebuild_optionsContext queue_rebuild_options() {
			return GetRuleContext<Queue_rebuild_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_action(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_actionContext queue_action() {
		Queue_actionContext _localctx = new Queue_actionContext(Context, State);
		EnterRule(_localctx, 428, RULE_queue_action);
		int _la;
		try {
			State = 5912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REBUILD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5891;
				Match(REBUILD);
				State = 5897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
				case 1:
					{
					State = 5892;
					Match(WITH);
					State = 5893;
					Match(LR_BRACKET);
					State = 5894;
					queue_rebuild_options();
					State = 5895;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5899;
				Match(REORGANIZE);
				State = 5904;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,706,Context) ) {
				case 1:
					{
					State = 5900;
					Match(WITH);
					State = 5901;
					Match(LOB_COMPACTION);
					State = 5902;
					Match(EQUAL);
					State = 5903;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5906;
				Match(MOVE);
				State = 5907;
				Match(TO);
				State = 5910;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 5908;
					id_();
					}
					break;
				case DEFAULT:
					{
					State = 5909;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_rebuild_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_rebuild_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_rebuild_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_rebuild_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_rebuild_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_rebuild_optionsContext queue_rebuild_options() {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(Context, State);
		EnterRule(_localctx, 430, RULE_queue_rebuild_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5914;
			Match(MAXDOP);
			State = 5915;
			Match(EQUAL);
			State = 5916;
			Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_contractContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context message_type_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SENT() { return GetTokens(TSqlParser.SENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENT(int i) {
			return GetToken(TSqlParser.SENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INITIATOR() { return GetTokens(TSqlParser.INITIATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIATOR(int i) {
			return GetToken(TSqlParser.INITIATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_contract; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_contract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_contract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_contract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_contractContext create_contract() {
		Create_contractContext _localctx = new Create_contractContext(Context, State);
		EnterRule(_localctx, 432, RULE_create_contract);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5918;
			Match(CREATE);
			State = 5919;
			Match(CONTRACT);
			State = 5920;
			contract_name();
			State = 5923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5921;
				Match(AUTHORIZATION);
				State = 5922;
				_localctx.owner_name = id_();
				}
			}

			State = 5925;
			Match(LR_BRACKET);
			State = 5936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5928;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 5926;
					_localctx.message_type_name = id_();
					}
					break;
				case DEFAULT:
					{
					State = 5927;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5930;
				Match(SENT);
				State = 5931;
				Match(BY);
				State = 5932;
				_la = TokenStream.LA(1);
				if ( !(_la==ANY || _la==INITIATOR || _la==TARGET) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5933;
					Match(COMMA);
					}
				}

				}
				}
				State = 5938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADD || _la==DEFAULT || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0) );
			State = 5940;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversation_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Begin_conversation_timerContext begin_conversation_timer() {
			return GetRuleContext<Begin_conversation_timerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Begin_conversation_dialogContext begin_conversation_dialog() {
			return GetRuleContext<Begin_conversation_dialogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_conversationContext end_conversation() {
			return GetRuleContext<End_conversationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Send_conversationContext send_conversation() {
			return GetRuleContext<Send_conversationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Waitfor_conversationContext waitfor_conversation() {
			return GetRuleContext<Waitfor_conversationContext>(0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversation_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConversation_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConversation_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversation_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversation_statementContext conversation_statement() {
		Conversation_statementContext _localctx = new Conversation_statementContext(Context, State);
		EnterRule(_localctx, 434, RULE_conversation_statement);
		try {
			State = 5948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,713,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5942;
				begin_conversation_timer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5943;
				begin_conversation_dialog();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5944;
				end_conversation();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5945;
				get_conversation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5946;
				send_conversation();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5947;
				waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_statementContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context owner_name;
		public Id_Context schema_collection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMessage_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMessage_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Message_statementContext message_statement() {
		Message_statementContext _localctx = new Message_statementContext(Context, State);
		EnterRule(_localctx, 436, RULE_message_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5950;
			Match(CREATE);
			State = 5951;
			Match(MESSAGE);
			State = 5952;
			Match(TYPE);
			State = 5953;
			_localctx.message_type_name = id_();
			State = 5956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5954;
				Match(AUTHORIZATION);
				State = 5955;
				_localctx.owner_name = id_();
				}
			}

			{
			State = 5958;
			Match(VALIDATION);
			State = 5959;
			Match(EQUAL);
			State = 5968;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NONE:
				{
				State = 5960;
				Match(NONE);
				}
				break;
			case EMPTY:
				{
				State = 5961;
				Match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				State = 5962;
				Match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				State = 5963;
				Match(VALID_XML);
				State = 5964;
				Match(WITH);
				State = 5965;
				Match(SCHEMA);
				State = 5966;
				Match(COLLECTION);
				State = 5967;
				_localctx.schema_collection_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_matchesContext[] when_matches() {
			return GetRuleContexts<When_matchesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_matchesContext when_matches(int i) {
			return GetRuleContext<When_matchesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(Context, State);
		EnterRule(_localctx, 438, RULE_merge_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5970;
				with_expression();
				}
			}

			State = 5973;
			Match(MERGE);
			State = 5981;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 5974;
				Match(TOP);
				State = 5975;
				Match(LR_BRACKET);
				State = 5976;
				expression(0);
				State = 5977;
				Match(RR_BRACKET);
				State = 5979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 5978;
					Match(PERCENT);
					}
				}

				}
			}

			State = 5984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 5983;
				Match(INTO);
				}
			}

			State = 5986;
			ddl_object();
			State = 5988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5987;
				insert_with_table_hints();
				}
			}

			State = 5991;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,721,Context) ) {
			case 1:
				{
				State = 5990;
				as_table_alias();
				}
				break;
			}
			State = 5993;
			Match(USING);
			State = 5994;
			table_sources();
			State = 5995;
			Match(ON);
			State = 5996;
			search_condition(0);
			State = 5998;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5997;
				when_matches();
				}
				}
				State = 6000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 6003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUT) {
				{
				State = 6002;
				output_clause();
				}
			}

			State = 6006;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 6005;
				option_clause();
				}
			}

			State = 6008;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_matchesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(TSqlParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(TSqlParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MATCHED() { return GetTokens(TSqlParser.MATCHED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED(int i) {
			return GetToken(TSqlParser.MATCHED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(TSqlParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(TSqlParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_matchedContext[] merge_matched() {
			return GetRuleContexts<Merge_matchedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_matchedContext merge_matched(int i) {
			return GetRuleContext<Merge_matchedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_not_matchedContext merge_not_matched() {
			return GetRuleContext<Merge_not_matchedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOURCE() { return GetTokens(TSqlParser.SOURCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE(int i) {
			return GetToken(TSqlParser.SOURCE, i);
		}
		public When_matchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_matches; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhen_matches(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhen_matches(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_matches(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_matchesContext when_matches() {
		When_matchesContext _localctx = new When_matchesContext(Context, State);
		EnterRule(_localctx, 440, RULE_when_matches);
		int _la;
		try {
			int _alt;
			State = 6050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,731,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6018;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6010;
						Match(WHEN);
						State = 6011;
						Match(MATCHED);
						State = 6014;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AND) {
							{
							State = 6012;
							Match(AND);
							State = 6013;
							search_condition(0);
							}
						}

						State = 6016;
						Match(THEN);
						State = 6017;
						merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6020;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,726,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 6022;
				Match(WHEN);
				State = 6023;
				Match(NOT);
				State = 6024;
				Match(MATCHED);
				State = 6027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 6025;
					Match(BY);
					State = 6026;
					Match(TARGET);
					}
				}

				State = 6031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 6029;
					Match(AND);
					State = 6030;
					search_condition(0);
					}
				}

				State = 6033;
				Match(THEN);
				State = 6034;
				merge_not_matched();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6046;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6035;
						Match(WHEN);
						State = 6036;
						Match(NOT);
						State = 6037;
						Match(MATCHED);
						State = 6038;
						Match(BY);
						State = 6039;
						Match(SOURCE);
						State = 6042;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AND) {
							{
							State = 6040;
							Match(AND);
							State = 6041;
							search_condition(0);
							}
						}

						State = 6044;
						Match(THEN);
						State = 6045;
						merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6048;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,730,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_matchedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Update_elem_mergeContext[] update_elem_merge() {
			return GetRuleContexts<Update_elem_mergeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_elem_mergeContext update_elem_merge(int i) {
			return GetRuleContext<Update_elem_mergeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_matched; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_matched(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_matched(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_matched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_matchedContext merge_matched() {
		Merge_matchedContext _localctx = new Merge_matchedContext(Context, State);
		EnterRule(_localctx, 442, RULE_merge_matched);
		int _la;
		try {
			State = 6063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6052;
				Match(UPDATE);
				State = 6053;
				Match(SET);
				State = 6054;
				update_elem_merge();
				State = 6059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6055;
					Match(COMMA);
					State = 6056;
					update_elem_merge();
					}
					}
					State = 6061;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6062;
				Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_not_matchedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_not_matched; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_not_matched(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_not_matched(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_not_matched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_not_matchedContext merge_not_matched() {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(Context, State);
		EnterRule(_localctx, 444, RULE_merge_not_matched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6065;
			Match(INSERT);
			State = 6070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 6066;
				Match(LR_BRACKET);
				State = 6067;
				column_name_list();
				State = 6068;
				Match(RR_BRACKET);
				}
			}

			State = 6075;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				{
				State = 6072;
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				State = 6073;
				Match(DEFAULT);
				State = 6074;
				Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 446, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6077;
				with_expression();
				}
			}

			State = 6080;
			Match(DELETE);
			State = 6090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,738,Context) ) {
			case 1:
				{
				State = 6081;
				Match(TOP);
				State = 6082;
				Match(LR_BRACKET);
				State = 6083;
				expression(0);
				State = 6084;
				Match(RR_BRACKET);
				State = 6086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 6085;
					Match(PERCENT);
					}
				}

				}
				break;
			case 2:
				{
				State = 6088;
				Match(TOP);
				State = 6089;
				Match(DECIMAL);
				}
				break;
			}
			State = 6093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 6092;
				Match(FROM);
				}
			}

			State = 6095;
			delete_statement_from();
			State = 6097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,740,Context) ) {
			case 1:
				{
				State = 6096;
				insert_with_table_hints();
				}
				break;
			}
			State = 6100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,741,Context) ) {
			case 1:
				{
				State = 6099;
				output_clause();
				}
				break;
			}
			State = 6104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 6102;
				Match(FROM);
				State = 6103;
				table_sources();
				}
			}

			State = 6119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6106;
				Match(WHERE);
				State = 6117;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case CASE:
				case COALESCE:
				case CONTAINS:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FILLFACTOR:
				case FREETEXT:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL_:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case DOLLAR_PARTITION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case DOLLAR_ACTION:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 6107;
					search_condition(0);
					}
					break;
				case CURRENT:
					{
					State = 6108;
					Match(CURRENT);
					State = 6109;
					Match(OF);
					State = 6115;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
					case 1:
						{
						State = 6111;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
						case 1:
							{
							State = 6110;
							Match(GLOBAL);
							}
							break;
						}
						State = 6113;
						cursor_name();
						}
						break;
					case 2:
						{
						State = 6114;
						_localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 6122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 6121;
				for_clause();
				}
			}

			State = 6125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 6124;
				option_clause();
				}
			}

			State = 6128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,749,Context) ) {
			case 1:
				{
				State = 6127;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement_from(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(Context, State);
		EnterRule(_localctx, 448, RULE_delete_statement_from);
		try {
			State = 6134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,750,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6130;
				ddl_object();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6131;
				table_alias();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6132;
				rowset_function_limited();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6133;
				_localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_name_listContext insert_column_name_list() {
			return GetRuleContext<Insert_column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 450, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6136;
				with_expression();
				}
			}

			State = 6139;
			Match(INSERT);
			State = 6147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 6140;
				Match(TOP);
				State = 6141;
				Match(LR_BRACKET);
				State = 6142;
				expression(0);
				State = 6143;
				Match(RR_BRACKET);
				State = 6145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 6144;
					Match(PERCENT);
					}
				}

				}
			}

			State = 6150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 6149;
				Match(INTO);
				}
			}

			State = 6154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 6152;
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 6153;
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6156;
				insert_with_table_hints();
				}
			}

			State = 6163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,757,Context) ) {
			case 1:
				{
				State = 6159;
				Match(LR_BRACKET);
				State = 6160;
				insert_column_name_list();
				State = 6161;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 6166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUT) {
				{
				State = 6165;
				output_clause();
				}
			}

			State = 6168;
			insert_statement_value();
			State = 6170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 6169;
				for_clause();
				}
			}

			State = 6173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 6172;
				option_clause();
				}
			}

			State = 6176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,761,Context) ) {
			case 1:
				{
				State = 6175;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(Context, State);
		EnterRule(_localctx, 452, RULE_insert_statement_value);
		try {
			State = 6183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,762,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6178;
				table_value_constructor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6179;
				derived_table();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6180;
				execute_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6181;
				Match(DEFAULT);
				State = 6182;
				Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Receive_statementContext : ParserRuleContext {
		public Id_Context table_variable;
		public Search_conditionContext where;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receive_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReceive_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReceive_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceive_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Receive_statementContext receive_statement() {
		Receive_statementContext _localctx = new Receive_statementContext(Context, State);
		EnterRule(_localctx, 454, RULE_receive_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 6185;
				Match(LR_BRACKET);
				}
			}

			State = 6188;
			Match(RECEIVE);
			State = 6193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 6189;
				Match(ALL);
				}
				break;
			case DISTINCT:
				{
				State = 6190;
				Match(DISTINCT);
				}
				break;
			case TOP:
				{
				State = 6191;
				top_clause();
				}
				break;
			case STAR:
				{
				State = 6192;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOCAL_ID) {
				{
				{
				State = 6195;
				Match(LOCAL_ID);
				State = 6196;
				Match(EQUAL);
				State = 6197;
				expression(0);
				State = 6199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6198;
					Match(COMMA);
					}
				}

				}
				}
				State = 6205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6206;
			Match(FROM);
			State = 6207;
			full_table_name();
			State = 6213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 6208;
				Match(INTO);
				State = 6209;
				_localctx.table_variable = id_();
				{
				State = 6210;
				Match(WHERE);
				State = 6211;
				_localctx.where = search_condition(0);
				}
				}
			}

			State = 6216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RR_BRACKET) {
				{
				State = 6215;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statement_standaloneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Select_statement_standaloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement_standalone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement_standalone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement_standalone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement_standalone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statement_standaloneContext select_statement_standalone() {
		Select_statement_standaloneContext _localctx = new Select_statement_standaloneContext(Context, State);
		EnterRule(_localctx, 456, RULE_select_statement_standalone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6218;
				with_expression();
				}
			}

			State = 6221;
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 458, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6223;
			query_expression();
			State = 6225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 6224;
				order_by_clause();
				}
			}

			State = 6228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,771,Context) ) {
			case 1:
				{
				State = 6227;
				for_clause();
				}
				break;
			}
			State = 6231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
			case 1:
				{
				State = 6230;
				option_clause();
				}
				break;
			}
			State = 6234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,773,Context) ) {
			case 1:
				{
				State = 6233;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(Context, State);
		EnterRule(_localctx, 460, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				{
				State = 6236;
				Match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				State = 6237;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 462, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6240;
				with_expression();
				}
			}

			State = 6243;
			Match(UPDATE);
			State = 6251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 6244;
				Match(TOP);
				State = 6245;
				Match(LR_BRACKET);
				State = 6246;
				expression(0);
				State = 6247;
				Match(RR_BRACKET);
				State = 6249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 6248;
					Match(PERCENT);
					}
				}

				}
			}

			State = 6255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 6253;
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 6254;
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				State = 6257;
				with_table_hints();
				}
			}

			State = 6260;
			Match(SET);
			State = 6261;
			update_elem();
			State = 6266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6262;
				Match(COMMA);
				State = 6263;
				update_elem();
				}
				}
				State = 6268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,781,Context) ) {
			case 1:
				{
				State = 6269;
				output_clause();
				}
				break;
			}
			State = 6274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 6272;
				Match(FROM);
				State = 6273;
				table_sources();
				}
			}

			State = 6289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6276;
				Match(WHERE);
				State = 6287;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case CASE:
				case COALESCE:
				case CONTAINS:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FILLFACTOR:
				case FREETEXT:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL_:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case DOLLAR_PARTITION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case DOLLAR_ACTION:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 6277;
					search_condition(0);
					}
					break;
				case CURRENT:
					{
					State = 6278;
					Match(CURRENT);
					State = 6279;
					Match(OF);
					State = 6285;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,784,Context) ) {
					case 1:
						{
						State = 6281;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,783,Context) ) {
						case 1:
							{
							State = 6280;
							Match(GLOBAL);
							}
							break;
						}
						State = 6283;
						cursor_name();
						}
						break;
					case 2:
						{
						State = 6284;
						_localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 6292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 6291;
				for_clause();
				}
			}

			State = 6295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 6294;
				option_clause();
				}
			}

			State = 6298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,789,Context) ) {
			case 1:
				{
				State = 6297;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(Context, State);
		EnterRule(_localctx, 464, RULE_output_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6300;
			Match(OUTPUT);
			State = 6301;
			output_dml_list_elem();
			State = 6306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6302;
				Match(COMMA);
				State = 6303;
				output_dml_list_elem();
				}
				}
				State = 6308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 6309;
				Match(INTO);
				State = 6312;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL_ID:
					{
					State = 6310;
					Match(LOCAL_ID);
					}
					break;
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 6311;
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6318;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,792,Context) ) {
				case 1:
					{
					State = 6314;
					Match(LR_BRACKET);
					State = 6315;
					column_name_list();
					State = 6316;
					Match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_dml_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(Context, State);
		EnterRule(_localctx, 466, RULE_output_dml_list_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,794,Context) ) {
			case 1:
				{
				State = 6322;
				expression(0);
				}
				break;
			case 2:
				{
				State = 6323;
				asterisk();
				}
				break;
			}
			State = 6327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,795,Context) ) {
			case 1:
				{
				State = 6326;
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context collation_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(Context, State);
		EnterRule(_localctx, 468, RULE_create_database);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6329;
			Match(CREATE);
			State = 6330;
			Match(DATABASE);
			{
			State = 6331;
			_localctx.database = id_();
			}
			State = 6335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,796,Context) ) {
			case 1:
				{
				State = 6332;
				Match(CONTAINMENT);
				State = 6333;
				Match(EQUAL);
				State = 6334;
				_la = TokenStream.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 6349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 6337;
				Match(ON);
				State = 6339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 6338;
					Match(PRIMARY);
					}
				}

				State = 6341;
				database_file_spec();
				State = 6346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6342;
					Match(COMMA);
					State = 6343;
					database_file_spec();
					}
					}
					State = 6348;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,801,Context) ) {
			case 1:
				{
				State = 6351;
				Match(LOG);
				State = 6352;
				Match(ON);
				State = 6353;
				database_file_spec();
				State = 6358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6354;
					Match(COMMA);
					State = 6355;
					database_file_spec();
					}
					}
					State = 6360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 6365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 6363;
				Match(COLLATE);
				State = 6364;
				_localctx.collation_name = id_();
				}
			}

			State = 6376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,804,Context) ) {
			case 1:
				{
				State = 6367;
				Match(WITH);
				State = 6368;
				create_database_option();
				State = 6373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6369;
					Match(COMMA);
					State = 6370;
					create_database_option();
					}
					}
					State = 6375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public Search_conditionContext where;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(Context, State);
		EnterRule(_localctx, 470, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6378;
			Match(CREATE);
			State = 6380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 6379;
				Match(UNIQUE);
				}
			}

			State = 6383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 6382;
				clustered();
				}
			}

			State = 6385;
			Match(INDEX);
			State = 6386;
			id_();
			State = 6387;
			Match(ON);
			State = 6388;
			table_name();
			State = 6389;
			Match(LR_BRACKET);
			State = 6390;
			column_name_list_with_order();
			State = 6391;
			Match(RR_BRACKET);
			State = 6397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,807,Context) ) {
			case 1:
				{
				State = 6392;
				Match(INCLUDE);
				State = 6393;
				Match(LR_BRACKET);
				State = 6394;
				column_name_list();
				State = 6395;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 6401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6399;
				Match(WHERE);
				State = 6400;
				_localctx.where = search_condition(0);
				}
			}

			State = 6404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,809,Context) ) {
			case 1:
				{
				State = 6403;
				index_options();
				}
				break;
			}
			State = 6408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 6406;
				Match(ON);
				State = 6407;
				id_();
				}
			}

			State = 6411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
			case 1:
				{
				State = 6410;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAUSE() { return GetToken(TSqlParser.PAUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(TSqlParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rebuild_partitionContext rebuild_partition() {
			return GetRuleContext<Rebuild_partitionContext>(0);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_indexContext alter_index() {
		Alter_indexContext _localctx = new Alter_indexContext(Context, State);
		EnterRule(_localctx, 472, RULE_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6413;
			Match(ALTER);
			State = 6414;
			Match(INDEX);
			State = 6415;
			id_();
			State = 6416;
			Match(ON);
			State = 6417;
			table_name();
			State = 6422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISABLE:
				{
				State = 6418;
				Match(DISABLE);
				}
				break;
			case PAUSE:
				{
				State = 6419;
				Match(PAUSE);
				}
				break;
			case ABORT:
				{
				State = 6420;
				Match(ABORT);
				}
				break;
			case REBUILD:
				{
				State = 6421;
				rebuild_partition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rebuild_partitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Rebuild_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rebuild_partition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRebuild_partition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRebuild_partition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRebuild_partition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rebuild_partitionContext rebuild_partition() {
		Rebuild_partitionContext _localctx = new Rebuild_partitionContext(Context, State);
		EnterRule(_localctx, 474, RULE_rebuild_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6424;
			Match(REBUILD);
			State = 6428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,813,Context) ) {
			case 1:
				{
				State = 6425;
				Match(PARTITION);
				State = 6426;
				Match(EQUAL);
				State = 6427;
				Match(ALL);
				}
				break;
			}
			State = 6431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,814,Context) ) {
			case 1:
				{
				State = 6430;
				index_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_columnstore_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Create_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_columnstore_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_columnstore_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_columnstore_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_columnstore_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_columnstore_indexContext create_columnstore_index() {
		Create_columnstore_indexContext _localctx = new Create_columnstore_indexContext(Context, State);
		EnterRule(_localctx, 476, RULE_create_columnstore_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6433;
			Match(CREATE);
			State = 6438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLUSTERED:
				{
				State = 6434;
				Match(CLUSTERED);
				}
				break;
			case NONCLUSTERED:
			case COLUMNSTORE:
				{
				State = 6436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NONCLUSTERED) {
					{
					State = 6435;
					Match(NONCLUSTERED);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6440;
			Match(COLUMNSTORE);
			State = 6441;
			Match(INDEX);
			State = 6442;
			id_();
			State = 6443;
			Match(ON);
			State = 6444;
			table_name();
			State = 6446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,817,Context) ) {
			case 1:
				{
				State = 6445;
				index_options();
				}
				break;
			}
			State = 6450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 6448;
				Match(ON);
				State = 6449;
				id_();
				}
			}

			State = 6453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,819,Context) ) {
			case 1:
				{
				State = 6452;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_nonclustered_columnstore_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Create_nonclustered_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_nonclustered_columnstore_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_nonclustered_columnstore_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_nonclustered_columnstore_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_nonclustered_columnstore_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
		Create_nonclustered_columnstore_indexContext _localctx = new Create_nonclustered_columnstore_indexContext(Context, State);
		EnterRule(_localctx, 478, RULE_create_nonclustered_columnstore_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6455;
			Match(CREATE);
			State = 6457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NONCLUSTERED) {
				{
				State = 6456;
				Match(NONCLUSTERED);
				}
			}

			State = 6459;
			Match(COLUMNSTORE);
			State = 6460;
			Match(INDEX);
			State = 6461;
			id_();
			State = 6462;
			Match(ON);
			State = 6463;
			table_name();
			State = 6464;
			Match(LR_BRACKET);
			State = 6465;
			column_name_list_with_order();
			State = 6466;
			Match(RR_BRACKET);
			State = 6469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6467;
				Match(WHERE);
				State = 6468;
				search_condition(0);
				}
			}

			State = 6472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,822,Context) ) {
			case 1:
				{
				State = 6471;
				index_options();
				}
				break;
			}
			State = 6476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 6474;
				Match(ON);
				State = 6475;
				id_();
				}
			}

			State = 6479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,824,Context) ) {
			case 1:
				{
				State = 6478;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XML() { return GetTokens(TSqlParser.XML); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML(int i) {
			return GetToken(TSqlParser.XML, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDEX() { return GetTokens(TSqlParser.INDEX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX(int i) {
			return GetToken(TSqlParser.INDEX, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public Create_xml_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_xml_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_indexContext create_xml_index() {
		Create_xml_indexContext _localctx = new Create_xml_indexContext(Context, State);
		EnterRule(_localctx, 480, RULE_create_xml_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6481;
			Match(CREATE);
			State = 6483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIMARY) {
				{
				State = 6482;
				Match(PRIMARY);
				}
			}

			State = 6485;
			Match(XML);
			State = 6486;
			Match(INDEX);
			State = 6487;
			id_();
			State = 6488;
			Match(ON);
			State = 6489;
			table_name();
			State = 6490;
			Match(LR_BRACKET);
			State = 6491;
			id_();
			State = 6492;
			Match(RR_BRACKET);
			State = 6503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,828,Context) ) {
			case 1:
				{
				State = 6493;
				Match(USING);
				State = 6494;
				Match(XML);
				State = 6495;
				Match(INDEX);
				State = 6496;
				id_();
				State = 6501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6497;
					Match(FOR);
					State = 6499;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,826,Context) ) {
					case 1:
						{
						State = 6498;
						_la = TokenStream.LA(1);
						if ( !(_la==PATH || _la==PROPERTY || _la==VALUE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			}
			State = 6506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,829,Context) ) {
			case 1:
				{
				State = 6505;
				index_options();
				}
				break;
			}
			State = 6509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,830,Context) ) {
			case 1:
				{
				State = 6508;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_procedureContext : ParserRuleContext {
		public IToken proc;
		public Func_proc_name_schemaContext procName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_procedureContext create_or_alter_procedure() {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(Context, State);
		EnterRule(_localctx, 482, RULE_create_or_alter_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6517;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 6511;
				Match(CREATE);
				State = 6514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 6512;
					Match(OR);
					State = 6513;
					Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6516;
				Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6519;
			_localctx.proc = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6520;
			_localctx.procName = func_proc_name_schema();
			State = 6523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 6521;
				Match(SEMI);
				State = 6522;
				Match(DECIMAL);
				}
			}

			State = 6539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				State = 6526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6525;
					Match(LR_BRACKET);
					}
				}

				State = 6528;
				procedure_param();
				State = 6533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6529;
					Match(COMMA);
					State = 6530;
					procedure_param();
					}
					}
					State = 6535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RR_BRACKET) {
					{
					State = 6536;
					Match(RR_BRACKET);
					}
				}

				}
			}

			State = 6550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6541;
				Match(WITH);
				State = 6542;
				procedure_option();
				State = 6547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6543;
					Match(COMMA);
					State = 6544;
					procedure_option();
					}
					}
					State = 6549;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 6552;
				Match(FOR);
				State = 6553;
				Match(REPLICATION);
				}
			}

			State = 6556;
			Match(AS);
			State = 6564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTERNAL:
				{
				State = 6557;
				as_external_name();
				}
				break;
			case Eof:
			case ADD:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CHECKPOINT:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case END:
			case EXECUTE:
			case FETCH:
			case FILLFACTOR:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KILL:
			case MERGE:
			case OPEN:
			case OPENJSON:
			case PRECISION:
			case PRINT:
			case RAISERROR:
			case RECONFIGURE:
			case RETURN:
			case REVERT:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOT:
			case LR_BRACKET:
			case SEMI:
				{
				State = 6561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,841,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6558;
						sql_clauses();
						}
						} 
					}
					State = 6563;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,841,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_external_nameContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context class_name;
		public Id_Context method_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_external_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_external_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_external_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_external_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_external_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_external_nameContext as_external_name() {
		As_external_nameContext _localctx = new As_external_nameContext(Context, State);
		EnterRule(_localctx, 484, RULE_as_external_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6566;
			Match(EXTERNAL);
			State = 6567;
			Match(NAME);
			State = 6568;
			_localctx.assembly_name = id_();
			State = 6569;
			Match(DOT);
			State = 6570;
			_localctx.class_name = id_();
			State = 6571;
			Match(DOT);
			State = 6572;
			_localctx.method_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return GetRuleContext<Create_or_alter_dml_triggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return GetRuleContext<Create_or_alter_ddl_triggerContext>(0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_triggerContext create_or_alter_trigger() {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(Context, State);
		EnterRule(_localctx, 486, RULE_create_or_alter_trigger);
		try {
			State = 6576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,843,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6574;
				create_or_alter_dml_trigger();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6575;
				create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_dml_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_dml_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_dml_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_dml_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(Context, State);
		EnterRule(_localctx, 488, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6584;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 6578;
				Match(CREATE);
				State = 6581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 6579;
					Match(OR);
					State = 6580;
					Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6583;
				Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6586;
			Match(TRIGGER);
			State = 6587;
			simple_name();
			State = 6588;
			Match(ON);
			State = 6589;
			table_name();
			State = 6599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6590;
				Match(WITH);
				State = 6591;
				dml_trigger_option();
				State = 6596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6592;
					Match(COMMA);
					State = 6593;
					dml_trigger_option();
					}
					}
					State = 6598;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 6601;
				Match(FOR);
				}
				break;
			case AFTER:
				{
				State = 6602;
				Match(AFTER);
				}
				break;
			case INSTEAD:
				{
				State = 6603;
				Match(INSTEAD);
				State = 6604;
				Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6607;
			dml_trigger_operation();
			State = 6612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6608;
				Match(COMMA);
				State = 6609;
				dml_trigger_operation();
				}
				}
				State = 6614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6615;
				Match(WITH);
				State = 6616;
				Match(APPEND);
				}
			}

			State = 6622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 6619;
				Match(NOT);
				State = 6620;
				Match(FOR);
				State = 6621;
				Match(REPLICATION);
				}
			}

			State = 6624;
			Match(AS);
			State = 6626;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6625;
					sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6628;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,852,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_trigger_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_optionContext dml_trigger_option() {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(Context, State);
		EnterRule(_localctx, 490, RULE_dml_trigger_option);
		try {
			State = 6632;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6630;
				Match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6631;
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_trigger_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_operationContext dml_trigger_operation() {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(Context, State);
		EnterRule(_localctx, 492, RULE_dml_trigger_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6634;
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_ddl_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_trigger_operationContext[] ddl_trigger_operation() {
			return GetRuleContexts<Ddl_trigger_operationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_trigger_operationContext ddl_trigger_operation(int i) {
			return GetRuleContext<Ddl_trigger_operationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_ddl_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_ddl_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_ddl_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_ddl_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(Context, State);
		EnterRule(_localctx, 494, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 6636;
				Match(CREATE);
				State = 6639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 6637;
					Match(OR);
					State = 6638;
					Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6641;
				Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6644;
			Match(TRIGGER);
			State = 6645;
			simple_name();
			State = 6646;
			Match(ON);
			State = 6650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 6647;
				Match(ALL);
				State = 6648;
				Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 6649;
				Match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6652;
				Match(WITH);
				State = 6653;
				dml_trigger_option();
				State = 6658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6654;
					Match(COMMA);
					State = 6655;
					dml_trigger_option();
					}
					}
					State = 6660;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6663;
			_la = TokenStream.LA(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6664;
			ddl_trigger_operation();
			State = 6669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6665;
				Match(COMMA);
				State = 6666;
				ddl_trigger_operation();
				}
				}
				State = 6671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6672;
			Match(AS);
			State = 6674;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6673;
					sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6676;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,860,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_trigger_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_trigger_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_trigger_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_trigger_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_trigger_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_trigger_operationContext ddl_trigger_operation() {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(Context, State);
		EnterRule(_localctx, 496, RULE_ddl_trigger_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6678;
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_functionContext : ParserRuleContext {
		public Func_proc_name_schemaContext funcName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_body_returns_selectContext func_body_returns_select() {
			return GetRuleContext<Func_body_returns_selectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_body_returns_tableContext func_body_returns_table() {
			return GetRuleContext<Func_body_returns_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_body_returns_scalarContext func_body_returns_scalar() {
			return GetRuleContext<Func_body_returns_scalarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_functionContext create_or_alter_function() {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(Context, State);
		EnterRule(_localctx, 498, RULE_create_or_alter_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 6680;
				Match(CREATE);
				State = 6683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 6681;
					Match(OR);
					State = 6682;
					Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6685;
				Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6688;
			Match(FUNCTION);
			State = 6689;
			_localctx.funcName = func_proc_name_schema();
			State = 6703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
			case 1:
				{
				{
				State = 6690;
				Match(LR_BRACKET);
				State = 6691;
				procedure_param();
				State = 6696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6692;
					Match(COMMA);
					State = 6693;
					procedure_param();
					}
					}
					State = 6698;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6699;
				Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				State = 6701;
				Match(LR_BRACKET);
				State = 6702;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 6708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
			case 1:
				{
				State = 6705;
				func_body_returns_select();
				}
				break;
			case 2:
				{
				State = 6706;
				func_body_returns_table();
				}
				break;
			case 3:
				{
				State = 6707;
				func_body_returns_scalar();
				}
				break;
			}
			State = 6711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,866,Context) ) {
			case 1:
				{
				State = 6710;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_selectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_selectContext func_body_returns_select() {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(Context, State);
		EnterRule(_localctx, 500, RULE_func_body_returns_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6713;
			Match(RETURNS);
			State = 6714;
			Match(TABLE);
			State = 6724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6715;
				Match(WITH);
				State = 6716;
				function_option();
				State = 6721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6717;
					Match(COMMA);
					State = 6718;
					function_option();
					}
					}
					State = 6723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6726;
				Match(AS);
				}
			}

			State = 6738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTERNAL:
				{
				State = 6729;
				as_external_name();
				}
				break;
			case RETURN:
				{
				State = 6730;
				Match(RETURN);
				State = 6736;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,870,Context) ) {
				case 1:
					{
					State = 6731;
					Match(LR_BRACKET);
					State = 6732;
					select_statement_standalone();
					State = 6733;
					Match(RR_BRACKET);
					}
					break;
				case 2:
					{
					State = 6735;
					select_statement_standalone();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(TSqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(TSqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_tableContext func_body_returns_table() {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(Context, State);
		EnterRule(_localctx, 502, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6740;
			Match(RETURNS);
			State = 6741;
			Match(LOCAL_ID);
			State = 6742;
			table_type_definition();
			State = 6752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6743;
				Match(WITH);
				State = 6744;
				function_option();
				State = 6749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6745;
					Match(COMMA);
					State = 6746;
					function_option();
					}
					}
					State = 6751;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6754;
				Match(AS);
				}
			}

			State = 6773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTERNAL:
				{
				State = 6757;
				as_external_name();
				}
				break;
			case BEGIN:
				{
				State = 6758;
				Match(BEGIN);
				State = 6762;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,875,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6759;
						sql_clauses();
						}
						} 
					}
					State = 6764;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,875,Context);
				}
				State = 6765;
				Match(RETURN);
				State = 6767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 6766;
					Match(SEMI);
					}
				}

				State = 6769;
				Match(END);
				State = 6771;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,877,Context) ) {
				case 1:
					{
					State = 6770;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_scalarContext : ParserRuleContext {
		public ExpressionContext ret;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_scalar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_scalar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_scalar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_scalar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_scalarContext func_body_returns_scalar() {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(Context, State);
		EnterRule(_localctx, 504, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6775;
			Match(RETURNS);
			State = 6776;
			data_type();
			State = 6786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6777;
				Match(WITH);
				State = 6778;
				function_option();
				State = 6783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6779;
					Match(COMMA);
					State = 6780;
					function_option();
					}
					}
					State = 6785;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6788;
				Match(AS);
				}
			}

			State = 6806;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTERNAL:
				{
				State = 6791;
				as_external_name();
				}
				break;
			case BEGIN:
				{
				State = 6792;
				Match(BEGIN);
				State = 6796;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,882,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6793;
						sql_clauses();
						}
						} 
					}
					State = 6798;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,882,Context);
				}
				State = 6799;
				Match(RETURN);
				State = 6800;
				_localctx.ret = expression(0);
				State = 6802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 6801;
					Match(SEMI);
					}
				}

				State = 6804;
				Match(END);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Id_Context type_schema;
		public Default_valueContext default_val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(TSqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(Context, State);
		EnterRule(_localctx, 506, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6808;
			Match(LOCAL_ID);
			State = 6810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6809;
				Match(AS);
				}
			}

			State = 6815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,886,Context) ) {
			case 1:
				{
				State = 6812;
				_localctx.type_schema = id_();
				State = 6813;
				Match(DOT);
				}
				break;
			}
			State = 6817;
			data_type();
			State = 6819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARYING) {
				{
				State = 6818;
				Match(VARYING);
				}
			}

			State = 6823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 6821;
				Match(EQUAL);
				State = 6822;
				_localctx.default_val = default_value();
				}
			}

			State = 6826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & 4398046511107L) != 0)) {
				{
				State = 6825;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & 4398046511107L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(Context, State);
		EnterRule(_localctx, 508, RULE_procedure_option);
		try {
			State = 6831;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6828;
				Match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6829;
				Match(RECOMPILE);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6830;
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_optionContext function_option() {
		Function_optionContext _localctx = new Function_optionContext(Context, State);
		EnterRule(_localctx, 510, RULE_function_option);
		try {
			State = 6845;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6833;
				Match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6834;
				Match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6835;
				Match(RETURNS);
				State = 6836;
				Match(NULL_);
				State = 6837;
				Match(ON);
				State = 6838;
				Match(NULL_);
				State = 6839;
				Match(INPUT);
				}
				break;
			case CALLED:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6840;
				Match(CALLED);
				State = 6841;
				Match(ON);
				State = 6842;
				Match(NULL_);
				State = 6843;
				Match(INPUT);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6844;
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(Context, State);
		EnterRule(_localctx, 512, RULE_create_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6847;
			Match(CREATE);
			State = 6848;
			Match(STATISTICS);
			State = 6849;
			id_();
			State = 6850;
			Match(ON);
			State = 6851;
			table_name();
			State = 6852;
			Match(LR_BRACKET);
			State = 6853;
			column_name_list();
			State = 6854;
			Match(RR_BRACKET);
			State = 6873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
			case 1:
				{
				State = 6855;
				Match(WITH);
				State = 6861;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FULLSCAN:
					{
					State = 6856;
					Match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					State = 6857;
					Match(SAMPLE);
					State = 6858;
					Match(DECIMAL);
					State = 6859;
					_la = TokenStream.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					State = 6860;
					Match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6865;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,893,Context) ) {
				case 1:
					{
					State = 6863;
					Match(COMMA);
					State = 6864;
					Match(NORECOMPUTE);
					}
					break;
				}
				State = 6871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6867;
					Match(COMMA);
					State = 6868;
					Match(INCREMENTAL);
					State = 6869;
					Match(EQUAL);
					State = 6870;
					on_off();
					}
				}

				}
				break;
			}
			State = 6876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
			case 1:
				{
				State = 6875;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statisticsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statisticsContext update_statistics() {
		Update_statisticsContext _localctx = new Update_statisticsContext(Context, State);
		EnterRule(_localctx, 514, RULE_update_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6878;
			Match(UPDATE);
			State = 6880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==INDEX) {
				{
				State = 6879;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6882;
			Match(STATISTICS);
			State = 6883;
			full_table_name();
			State = 6885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,898,Context) ) {
			case 1:
				{
				State = 6884;
				id_();
				}
				break;
			}
			State = 6890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,899,Context) ) {
			case 1:
				{
				State = 6887;
				Match(USING);
				State = 6888;
				Match(DECIMAL);
				State = 6889;
				Match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_indicesContext[] table_indices() {
			return GetRuleContexts<Table_indicesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_indicesContext table_indices(int i) {
			return GetRuleContext<Table_indicesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_optionsContext[] table_options() {
			return GetRuleContexts<Table_optionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_optionsContext table_options(int i) {
			return GetRuleContext<Table_optionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 516, RULE_create_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6892;
			Match(CREATE);
			State = 6893;
			Match(TABLE);
			State = 6894;
			table_name();
			State = 6895;
			Match(LR_BRACKET);
			State = 6896;
			column_def_table_constraints();
			State = 6903;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,901,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6898;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6897;
						Match(COMMA);
						}
					}

					State = 6900;
					table_indices();
					}
					} 
				}
				State = 6905;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,901,Context);
			}
			State = 6907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6906;
				Match(COMMA);
				}
			}

			State = 6909;
			Match(RR_BRACKET);
			State = 6912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,903,Context) ) {
			case 1:
				{
				State = 6910;
				Match(LOCK);
				State = 6911;
				simple_id();
				}
				break;
			}
			State = 6917;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,904,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6914;
					table_options();
					}
					} 
				}
				State = 6919;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,904,Context);
			}
			State = 6923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,905,Context) ) {
			case 1:
				{
				State = 6920;
				Match(ON);
				State = 6921;
				id_();
				}
				break;
			case 2:
				{
				State = 6922;
				Match(DEFAULT);
				}
				break;
			}
			State = 6928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,906,Context) ) {
			case 1:
				{
				State = 6925;
				Match(TEXTIMAGE_ON);
				State = 6926;
				id_();
				}
				break;
			case 2:
				{
				State = 6927;
				Match(DEFAULT);
				}
				break;
			}
			State = 6931;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,907,Context) ) {
			case 1:
				{
				State = 6930;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Table_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_indices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_indices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_indices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_indices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_indicesContext table_indices() {
		Table_indicesContext _localctx = new Table_indicesContext(Context, State);
		EnterRule(_localctx, 518, RULE_table_indices);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6933;
			Match(INDEX);
			State = 6934;
			id_();
			State = 6936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) {
				{
				State = 6935;
				_la = TokenStream.LA(1);
				if ( !(_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6938;
			Match(LR_BRACKET);
			State = 6939;
			column_name_list_with_order();
			State = 6940;
			Match(RR_BRACKET);
			State = 6942;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6941;
				index_options();
				}
			}

			State = 6946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 6944;
				Match(ON);
				State = 6945;
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionsContext table_options() {
		Table_optionsContext _localctx = new Table_optionsContext(Context, State);
		EnterRule(_localctx, 520, RULE_table_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6948;
			Match(WITH);
			State = 6968;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_BRACKET:
				{
				State = 6949;
				Match(LR_BRACKET);
				State = 6950;
				index_option();
				State = 6955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6951;
					Match(COMMA);
					State = 6952;
					index_option();
					}
					}
					State = 6957;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6958;
				Match(RR_BRACKET);
				}
				break;
			case ADD:
			case CLUSTERED:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case HEAP:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case ID:
				{
				State = 6960;
				index_option();
				State = 6965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6961;
					Match(COMMA);
					State = 6962;
					index_option();
					}
					}
					State = 6967;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 522, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6970;
			Match(CREATE);
			State = 6971;
			Match(VIEW);
			State = 6972;
			simple_name();
			State = 6977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 6973;
				Match(LR_BRACKET);
				State = 6974;
				column_name_list();
				State = 6975;
				Match(RR_BRACKET);
				}
			}

			State = 6988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6979;
				Match(WITH);
				State = 6980;
				view_attribute();
				State = 6985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6981;
					Match(COMMA);
					State = 6982;
					view_attribute();
					}
					}
					State = 6987;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6990;
			Match(AS);
			State = 6991;
			select_statement_standalone();
			State = 6995;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,917,Context) ) {
			case 1:
				{
				State = 6992;
				Match(WITH);
				State = 6993;
				Match(CHECK);
				State = 6994;
				Match(OPTION);
				}
				break;
			}
			State = 6998;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
			case 1:
				{
				State = 6997;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(Context, State);
		EnterRule(_localctx, 524, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7000;
			_la = TokenStream.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(TSqlParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(TSqlParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLE() { return GetTokens(TSqlParser.TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE(int i) {
			return GetToken(TSqlParser.TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_optionsContext table_options() {
			return GetRuleContext<Table_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(TSqlParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_partitionContext switch_partition() {
			return GetRuleContext<Switch_partitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHECK() { return GetTokens(TSqlParser.CHECK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK(int i) {
			return GetToken(TSqlParser.CHECK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCHECK() { return GetToken(TSqlParser.NOCHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_deleteContext[] on_delete() {
			return GetRuleContexts<On_deleteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_deleteContext on_delete(int i) {
			return GetRuleContext<On_deleteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_updateContext[] on_update() {
			return GetRuleContexts<On_updateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_updateContext on_update(int i) {
			return GetRuleContext<On_updateContext>(i);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(Context, State);
		EnterRule(_localctx, 526, RULE_alter_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7002;
			Match(ALTER);
			State = 7003;
			Match(TABLE);
			State = 7004;
			table_name();
			State = 7075;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,926,Context) ) {
			case 1:
				{
				State = 7005;
				Match(SET);
				State = 7006;
				Match(LR_BRACKET);
				State = 7007;
				Match(LOCK_ESCALATION);
				State = 7008;
				Match(EQUAL);
				State = 7009;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7010;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 7011;
				Match(ADD);
				State = 7012;
				column_def_table_constraints();
				}
				break;
			case 3:
				{
				State = 7013;
				Match(ALTER);
				State = 7014;
				Match(COLUMN);
				State = 7015;
				column_definition();
				}
				break;
			case 4:
				{
				State = 7016;
				Match(DROP);
				State = 7017;
				Match(COLUMN);
				State = 7018;
				id_();
				State = 7023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7019;
					Match(COMMA);
					State = 7020;
					id_();
					}
					}
					State = 7025;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 5:
				{
				State = 7026;
				Match(DROP);
				State = 7027;
				Match(CONSTRAINT);
				State = 7028;
				_localctx.constraint = id_();
				}
				break;
			case 6:
				{
				State = 7029;
				Match(WITH);
				State = 7030;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7031;
				Match(ADD);
				State = 7034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 7032;
					Match(CONSTRAINT);
					State = 7033;
					_localctx.constraint = id_();
					}
				}

				State = 7061;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOREIGN:
					{
					State = 7036;
					Match(FOREIGN);
					State = 7037;
					Match(KEY);
					State = 7038;
					Match(LR_BRACKET);
					State = 7039;
					_localctx.fk = column_name_list();
					State = 7040;
					Match(RR_BRACKET);
					State = 7041;
					Match(REFERENCES);
					State = 7042;
					table_name();
					State = 7047;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
					case 1:
						{
						State = 7043;
						Match(LR_BRACKET);
						State = 7044;
						_localctx.pk = column_name_list();
						State = 7045;
						Match(RR_BRACKET);
						}
						break;
					}
					State = 7053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ON) {
						{
						State = 7051;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
						case 1:
							{
							State = 7049;
							on_delete();
							}
							break;
						case 2:
							{
							State = 7050;
							on_update();
							}
							break;
						}
						}
						State = 7055;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case CHECK:
					{
					State = 7056;
					Match(CHECK);
					State = 7057;
					Match(LR_BRACKET);
					State = 7058;
					search_condition(0);
					State = 7059;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				{
				State = 7063;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7064;
				Match(CONSTRAINT);
				State = 7065;
				_localctx.constraint = id_();
				}
				break;
			case 8:
				{
				State = 7066;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7067;
				Match(TRIGGER);
				State = 7069;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,925,Context) ) {
				case 1:
					{
					State = 7068;
					id_();
					}
					break;
				}
				}
				break;
			case 9:
				{
				State = 7071;
				Match(REBUILD);
				State = 7072;
				table_options();
				}
				break;
			case 10:
				{
				State = 7073;
				Match(SWITCH);
				State = 7074;
				switch_partition();
				}
				break;
			}
			State = 7078;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,927,Context) ) {
			case 1:
				{
				State = 7077;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_partitionContext : ParserRuleContext {
		public ExpressionContext source_partition_number_expression;
		public Table_nameContext target_table;
		public ExpressionContext target_partition_number_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_partition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_partition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_partition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_partition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_partitionContext switch_partition() {
		Switch_partitionContext _localctx = new Switch_partitionContext(Context, State);
		EnterRule(_localctx, 528, RULE_switch_partition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144057532678148L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 153263537270038545L) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & -2392468582294015L) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & -282574489911297L) != 0) || ((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & -65537L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & -4611694818815377409L) != 0) || ((((_la - 465)) & ~0x3f) == 0 && ((1L << (_la - 465)) & -137438953473L) != 0) || ((((_la - 529)) & ~0x3f) == 0 && ((1L << (_la - 529)) & -70368744185857L) != 0) || ((((_la - 593)) & ~0x3f) == 0 && ((1L << (_la - 593)) & -145242462372265987L) != 0) || ((((_la - 657)) & ~0x3f) == 0 && ((1L << (_la - 657)) & -1125899919426305L) != 0) || ((((_la - 721)) & ~0x3f) == 0 && ((1L << (_la - 721)) & -1099511644291L) != 0) || ((((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & -2450107731957317633L) != 0) || ((((_la - 853)) & ~0x3f) == 0 && ((1L << (_la - 853)) & 962483717117L) != 0)) {
				{
				State = 7081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
				case 1:
					{
					State = 7080;
					Match(PARTITION);
					}
					break;
				}
				State = 7083;
				_localctx.source_partition_number_expression = expression(0);
				}
			}

			State = 7086;
			Match(TO);
			State = 7087;
			_localctx.target_table = table_name();
			State = 7090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
			case 1:
				{
				State = 7088;
				Match(PARTITION);
				State = 7089;
				_localctx.target_partition_number_expression = expression(0);
				}
				break;
			}
			State = 7094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
			case 1:
				{
				State = 7092;
				Match(WITH);
				State = 7093;
				low_priority_lock_wait();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Low_priority_lock_waitContext : ParserRuleContext {
		public TimeContext max_duration;
		public IToken abort_after_wait;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_AT_LOW_PRIORITY() { return GetToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_AFTER_WAIT() { return GetToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKERS() { return GetToken(TSqlParser.BLOCKERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Low_priority_lock_waitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_low_priority_lock_wait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLow_priority_lock_wait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLow_priority_lock_wait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLow_priority_lock_wait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Low_priority_lock_waitContext low_priority_lock_wait() {
		Low_priority_lock_waitContext _localctx = new Low_priority_lock_waitContext(Context, State);
		EnterRule(_localctx, 530, RULE_low_priority_lock_wait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7096;
			Match(WAIT_AT_LOW_PRIORITY);
			State = 7097;
			Match(LR_BRACKET);
			State = 7098;
			Match(MAX_DURATION);
			State = 7099;
			Match(EQUAL);
			State = 7100;
			_localctx.max_duration = time();
			State = 7102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUTES) {
				{
				State = 7101;
				Match(MINUTES);
				}
			}

			State = 7104;
			Match(COMMA);
			State = 7105;
			Match(ABORT_AFTER_WAIT);
			State = 7106;
			Match(EQUAL);
			State = 7107;
			_localctx.abort_after_wait = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==SELF || _la==BLOCKERS || _la==NONE) ) {
				_localctx.abort_after_wait = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7108;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context new_name;
		public Id_Context collation;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_or_modify_filesContext add_or_modify_files() {
			return GetRuleContext<Add_or_modify_filesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
			return GetRuleContext<Add_or_modify_filegroupsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(Context, State);
		EnterRule(_localctx, 532, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7110;
			Match(ALTER);
			State = 7111;
			Match(DATABASE);
			State = 7114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 7112;
				_localctx.database = id_();
				}
				break;
			case CURRENT:
				{
				State = 7113;
				Match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
			case 1:
				{
				State = 7116;
				Match(MODIFY);
				State = 7117;
				Match(NAME);
				State = 7118;
				Match(EQUAL);
				State = 7119;
				_localctx.new_name = id_();
				}
				break;
			case 2:
				{
				State = 7120;
				Match(COLLATE);
				State = 7121;
				_localctx.collation = id_();
				}
				break;
			case 3:
				{
				State = 7122;
				Match(SET);
				State = 7123;
				database_optionspec();
				State = 7126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,934,Context) ) {
				case 1:
					{
					State = 7124;
					Match(WITH);
					State = 7125;
					termination();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 7128;
				add_or_modify_files();
				}
				break;
			case 5:
				{
				State = 7129;
				add_or_modify_filegroups();
				}
				break;
			}
			State = 7133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,936,Context) ) {
			case 1:
				{
				State = 7132;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filesContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context logical_file_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilespecContext[] filespec() {
			return GetRuleContexts<FilespecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilespecContext filespec(int i) {
			return GetRuleContext<FilespecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Add_or_modify_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_files; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_files(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_files(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_or_modify_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filesContext add_or_modify_files() {
		Add_or_modify_filesContext _localctx = new Add_or_modify_filesContext(Context, State);
		EnterRule(_localctx, 534, RULE_add_or_modify_files);
		int _la;
		try {
			State = 7167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7135;
				Match(ADD);
				State = 7136;
				Match(FILE);
				State = 7137;
				filespec();
				State = 7142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7138;
					Match(COMMA);
					State = 7139;
					filespec();
					}
					}
					State = 7144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 7145;
					Match(TO);
					State = 7146;
					Match(FILEGROUP);
					State = 7147;
					_localctx.filegroup_name = id_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7150;
				Match(ADD);
				State = 7151;
				Match(LOG);
				State = 7152;
				Match(FILE);
				State = 7153;
				filespec();
				State = 7158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7154;
					Match(COMMA);
					State = 7155;
					filespec();
					}
					}
					State = 7160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7161;
				Match(REMOVE);
				State = 7162;
				Match(FILE);
				State = 7163;
				_localctx.logical_file_name = id_();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7164;
				Match(MODIFY);
				State = 7165;
				Match(FILE);
				State = 7166;
				filespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilespecContext : ParserRuleContext {
		public Id_or_stringContext name;
		public Id_or_stringContext new_name;
		public IToken file_name;
		public File_sizeContext size;
		public File_sizeContext max_size;
		public File_sizeContext growth_increment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_stringContext[] id_or_string() {
			return GetRuleContexts<Id_or_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_stringContext id_or_string(int i) {
			return GetRuleContext<Id_or_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWNAME() { return GetToken(TSqlParser.NEWNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public FilespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilespec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilespecContext filespec() {
		FilespecContext _localctx = new FilespecContext(Context, State);
		EnterRule(_localctx, 536, RULE_filespec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7169;
			Match(LR_BRACKET);
			State = 7170;
			Match(NAME);
			State = 7171;
			Match(EQUAL);
			State = 7172;
			_localctx.name = id_or_string();
			State = 7177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
			case 1:
				{
				State = 7173;
				Match(COMMA);
				State = 7174;
				Match(NEWNAME);
				State = 7175;
				Match(EQUAL);
				State = 7176;
				_localctx.new_name = id_or_string();
				}
				break;
			}
			State = 7183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
			case 1:
				{
				State = 7179;
				Match(COMMA);
				State = 7180;
				Match(FILENAME);
				State = 7181;
				Match(EQUAL);
				State = 7182;
				_localctx.file_name = Match(STRING);
				}
				break;
			}
			State = 7189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,943,Context) ) {
			case 1:
				{
				State = 7185;
				Match(COMMA);
				State = 7186;
				Match(SIZE);
				State = 7187;
				Match(EQUAL);
				State = 7188;
				_localctx.size = file_size();
				}
				break;
			}
			State = 7196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
			case 1:
				{
				State = 7191;
				Match(COMMA);
				State = 7192;
				Match(MAXSIZE);
				State = 7193;
				Match(EQUAL);
				{
				State = 7194;
				_localctx.max_size = file_size();
				}
				}
				break;
			case 2:
				{
				State = 7195;
				Match(UNLIMITED);
				}
				break;
			}
			State = 7202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,945,Context) ) {
			case 1:
				{
				State = 7198;
				Match(COMMA);
				State = 7199;
				Match(FILEGROWTH);
				State = 7200;
				Match(EQUAL);
				State = 7201;
				_localctx.growth_increment = file_size();
				}
				break;
			}
			State = 7206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 7204;
				Match(COMMA);
				State = 7205;
				Match(OFFLINE);
				}
			}

			State = 7208;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filegroupsContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context filegrou_name;
		public Id_Context new_filegroup_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Filegroup_updatability_optionContext filegroup_updatability_option() {
			return GetRuleContext<Filegroup_updatability_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOGROW_SINGLE_FILE() { return GetToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOGROW_ALL_FILES() { return GetToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public Add_or_modify_filegroupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_filegroups; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_filegroups(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_filegroups(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_or_modify_filegroups(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
		Add_or_modify_filegroupsContext _localctx = new Add_or_modify_filegroupsContext(Context, State);
		EnterRule(_localctx, 538, RULE_add_or_modify_filegroups);
		try {
			State = 7234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7210;
				Match(ADD);
				State = 7211;
				Match(FILEGROUP);
				State = 7212;
				_localctx.filegroup_name = id_();
				State = 7217;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
				case 1:
					{
					State = 7213;
					Match(CONTAINS);
					State = 7214;
					Match(FILESTREAM);
					}
					break;
				case 2:
					{
					State = 7215;
					Match(CONTAINS);
					State = 7216;
					Match(MEMORY_OPTIMIZED_DATA);
					}
					break;
				}
				}
				break;
			case REMOVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7219;
				Match(REMOVE);
				State = 7220;
				Match(FILEGROUP);
				State = 7221;
				_localctx.filegrou_name = id_();
				}
				break;
			case MODIFY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7222;
				Match(MODIFY);
				State = 7223;
				Match(FILEGROUP);
				State = 7224;
				_localctx.filegrou_name = id_();
				State = 7232;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case READ_ONLY:
				case READ_WRITE:
				case READONLY:
				case READWRITE:
					{
					State = 7225;
					filegroup_updatability_option();
					}
					break;
				case DEFAULT:
					{
					State = 7226;
					Match(DEFAULT);
					}
					break;
				case NAME:
					{
					State = 7227;
					Match(NAME);
					State = 7228;
					Match(EQUAL);
					State = 7229;
					_localctx.new_filegroup_name = id_();
					}
					break;
				case AUTOGROW_SINGLE_FILE:
					{
					State = 7230;
					Match(AUTOGROW_SINGLE_FILE);
					}
					break;
				case AUTOGROW_ALL_FILES:
					{
					State = 7231;
					Match(AUTOGROW_ALL_FILES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filegroup_updatability_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READWRITE() { return GetToken(TSqlParser.READWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Filegroup_updatability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filegroup_updatability_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilegroup_updatability_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilegroup_updatability_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilegroup_updatability_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filegroup_updatability_optionContext filegroup_updatability_option() {
		Filegroup_updatability_optionContext _localctx = new Filegroup_updatability_optionContext(Context, State);
		EnterRule(_localctx, 540, RULE_filegroup_updatability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7236;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 29L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Database_mirroring_optionContext database_mirroring_option() {
			return GetRuleContext<Database_mirroring_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Database_filestream_optionContext database_filestream_option() {
			return GetRuleContext<Database_filestream_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hadr_optionsContext hadr_options() {
			return GetRuleContext<Hadr_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_optionspec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(Context, State);
		EnterRule(_localctx, 542, RULE_database_optionspec);
		try {
			State = 7261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,950,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7238;
				auto_option();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7239;
				change_tracking_option();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7240;
				containment_option();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7241;
				cursor_option();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7242;
				database_mirroring_option();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7243;
				date_correlation_optimization_option();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7244;
				db_encryption_option();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7245;
				db_state_option();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7246;
				db_update_option();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7247;
				db_user_access_option();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7248;
				delayed_durability_option();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7249;
				external_access_option();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7250;
				Match(FILESTREAM);
				State = 7251;
				database_filestream_option();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7252;
				hadr_options();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7253;
				mixed_page_allocation_option();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7254;
				parameterization_option();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7255;
				recovery_option();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7256;
				service_broker_option();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7257;
				snapshot_option();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7258;
				sql_option();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7259;
				target_recovery_time_option();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7260;
				termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuto_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(Context, State);
		EnterRule(_localctx, 544, RULE_auto_option);
		int _la;
		try {
			State = 7280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7263;
				Match(AUTO_CLOSE);
				State = 7264;
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7265;
				Match(AUTO_CREATE_STATISTICS);
				State = 7266;
				Match(OFF);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7267;
				Match(ON);
				State = 7272;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INCREMENTAL:
					{
					State = 7268;
					Match(INCREMENTAL);
					State = 7269;
					Match(EQUAL);
					State = 7270;
					Match(ON);
					}
					break;
				case OFF:
					{
					State = 7271;
					Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7274;
				Match(AUTO_SHRINK);
				State = 7275;
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7276;
				Match(AUTO_UPDATE_STATISTICS);
				State = 7277;
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7278;
				Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 7279;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(Context, State);
		EnterRule(_localctx, 546, RULE_change_tracking_option);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7282;
			Match(CHANGE_TRACKING);
			State = 7283;
			Match(EQUAL);
			State = 7299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OFF:
				{
				State = 7284;
				Match(OFF);
				}
				break;
			case ON:
				{
				State = 7285;
				Match(ON);
				State = 7296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,954,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7286;
						change_tracking_option_list();
						State = 7291;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 7287;
							Match(COMMA);
							State = 7288;
							change_tracking_option_list();
							}
							}
							State = 7293;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						} 
					}
					State = 7298;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,954,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(Context, State);
		EnterRule(_localctx, 548, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 7307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO_CLEANUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7301;
				Match(AUTO_CLEANUP);
				State = 7302;
				Match(EQUAL);
				State = 7303;
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7304;
				Match(CHANGE_RETENTION);
				State = 7305;
				Match(EQUAL);
				State = 7306;
				_la = TokenStream.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainment_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(Context, State);
		EnterRule(_localctx, 550, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7309;
			Match(CONTAINMENT);
			State = 7310;
			Match(EQUAL);
			State = 7311;
			_la = TokenStream.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(Context, State);
		EnterRule(_localctx, 552, RULE_cursor_option);
		int _la;
		try {
			State = 7317;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7313;
				Match(CURSOR_CLOSE_ON_COMMIT);
				State = 7314;
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7315;
				Match(CURSOR_DEFAULT);
				State = 7316;
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_endpointContext : ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public IToken state;
		public IToken port;
		public Id_Context cert_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPV6_ADDR() { return GetToken(TSqlParser.IPV6_ADDR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_endpoint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_endpoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_endpoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_endpoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_endpointContext alter_endpoint() {
		Alter_endpointContext _localctx = new Alter_endpointContext(Context, State);
		EnterRule(_localctx, 554, RULE_alter_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7319;
			Match(ALTER);
			State = 7320;
			Match(ENDPOINT);
			State = 7321;
			_localctx.endpointname = id_();
			State = 7324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 7322;
				Match(AUTHORIZATION);
				State = 7323;
				_localctx.login = id_();
				}
			}

			State = 7333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATE) {
				{
				State = 7326;
				Match(STATE);
				State = 7327;
				Match(EQUAL);
				State = 7331;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STARTED:
					{
					State = 7328;
					_localctx.state = Match(STARTED);
					}
					break;
				case STOPPED:
					{
					State = 7329;
					_localctx.state = Match(STOPPED);
					}
					break;
				case DISABLED:
					{
					State = 7330;
					_localctx.state = Match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 7335;
			Match(AS);
			State = 7336;
			Match(TCP);
			State = 7337;
			Match(LR_BRACKET);
			State = 7338;
			Match(LISTENER_PORT);
			State = 7339;
			Match(EQUAL);
			State = 7340;
			_localctx.port = Match(DECIMAL);
			State = 7345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 7341;
				Match(COMMA);
				State = 7342;
				Match(LISTENER_IP);
				State = 7343;
				Match(EQUAL);
				State = 7344;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || ((((_la - 859)) & ~0x3f) == 0 && ((1L << (_la - 859)) & 1649267441665L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 7347;
			Match(RR_BRACKET);
			State = 7457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,985,Context) ) {
			case 1:
				{
				State = 7348;
				Match(TSQL);
				}
				break;
			case 2:
				{
				State = 7349;
				Match(FOR);
				State = 7350;
				Match(SERVICE_BROKER);
				State = 7351;
				Match(LR_BRACKET);
				State = 7352;
				Match(AUTHENTICATION);
				State = 7353;
				Match(EQUAL);
				State = 7370;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WINDOWS:
					{
					State = 7354;
					Match(WINDOWS);
					State = 7356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						State = 7355;
						_la = TokenStream.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 7360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CERTIFICATE) {
						{
						State = 7358;
						Match(CERTIFICATE);
						State = 7359;
						_localctx.cert_name = id_();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					State = 7362;
					Match(CERTIFICATE);
					State = 7363;
					_localctx.cert_name = id_();
					State = 7365;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WINDOWS) {
						{
						State = 7364;
						Match(WINDOWS);
						}
					}

					State = 7368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						State = 7367;
						_la = TokenStream.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7389;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,970,Context) ) {
				case 1:
					{
					State = 7373;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 7372;
						Match(COMMA);
						}
					}

					State = 7375;
					Match(ENCRYPTION);
					State = 7376;
					Match(EQUAL);
					State = 7377;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 7387;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALGORITHM) {
						{
						State = 7378;
						Match(ALGORITHM);
						State = 7385;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
						case 1:
							{
							State = 7379;
							Match(AES);
							}
							break;
						case 2:
							{
							State = 7380;
							Match(RC4);
							}
							break;
						case 3:
							{
							State = 7381;
							Match(AES);
							State = 7382;
							Match(RC4);
							}
							break;
						case 4:
							{
							State = 7383;
							Match(RC4);
							State = 7384;
							Match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				State = 7397;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,972,Context) ) {
				case 1:
					{
					State = 7392;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 7391;
						Match(COMMA);
						}
					}

					State = 7394;
					Match(MESSAGE_FORWARDING);
					State = 7395;
					Match(EQUAL);
					State = 7396;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					State = 7400;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 7399;
						Match(COMMA);
						}
					}

					State = 7402;
					Match(MESSAGE_FORWARD_SIZE);
					State = 7403;
					Match(EQUAL);
					State = 7404;
					Match(DECIMAL);
					}
				}

				State = 7407;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				{
				State = 7408;
				Match(FOR);
				State = 7409;
				Match(DATABASE_MIRRORING);
				State = 7410;
				Match(LR_BRACKET);
				State = 7411;
				Match(AUTHENTICATION);
				State = 7412;
				Match(EQUAL);
				State = 7429;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WINDOWS:
					{
					State = 7413;
					Match(WINDOWS);
					State = 7415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						State = 7414;
						_la = TokenStream.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 7419;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CERTIFICATE) {
						{
						State = 7417;
						Match(CERTIFICATE);
						State = 7418;
						_localctx.cert_name = id_();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					State = 7421;
					Match(CERTIFICATE);
					State = 7422;
					_localctx.cert_name = id_();
					State = 7424;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WINDOWS) {
						{
						State = 7423;
						Match(WINDOWS);
						}
					}

					State = 7427;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						State = 7426;
						_la = TokenStream.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7448;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,983,Context) ) {
				case 1:
					{
					State = 7432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 7431;
						Match(COMMA);
						}
					}

					State = 7434;
					Match(ENCRYPTION);
					State = 7435;
					Match(EQUAL);
					State = 7436;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 7446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALGORITHM) {
						{
						State = 7437;
						Match(ALGORITHM);
						State = 7444;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
						case 1:
							{
							State = 7438;
							Match(AES);
							}
							break;
						case 2:
							{
							State = 7439;
							Match(RC4);
							}
							break;
						case 3:
							{
							State = 7440;
							Match(AES);
							State = 7441;
							Match(RC4);
							}
							break;
						case 4:
							{
							State = 7442;
							Match(RC4);
							State = 7443;
							Match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				State = 7451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7450;
					Match(COMMA);
					}
				}

				State = 7453;
				Match(ROLE);
				State = 7454;
				Match(EQUAL);
				State = 7455;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7456;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_mirroring_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mirroring_set_optionContext mirroring_set_option() {
			return GetRuleContext<Mirroring_set_optionContext>(0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_mirroring_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_mirroring_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_mirroring_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_mirroring_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_mirroring_optionContext database_mirroring_option() {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(Context, State);
		EnterRule(_localctx, 556, RULE_database_mirroring_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7459;
			mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_set_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mirroring_partnerContext mirroring_partner() {
			return GetRuleContext<Mirroring_partnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Partner_optionContext partner_option() {
			return GetRuleContext<Partner_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mirroring_witnessContext mirroring_witness() {
			return GetRuleContext<Mirroring_witnessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Witness_optionContext witness_option() {
			return GetRuleContext<Witness_optionContext>(0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_set_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_set_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_set_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_set_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_set_optionContext mirroring_set_option() {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(Context, State);
		EnterRule(_localctx, 558, RULE_mirroring_set_option);
		try {
			State = 7467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARTNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7461;
				mirroring_partner();
				State = 7462;
				partner_option();
				}
				break;
			case WITNESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7464;
				mirroring_witness();
				State = 7465;
				witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_partnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_partner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_partner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_partner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_partner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_partnerContext mirroring_partner() {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(Context, State);
		EnterRule(_localctx, 560, RULE_mirroring_partner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7469;
			Match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_witnessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_witness; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_witness(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_witness(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_witness(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_witnessContext mirroring_witness() {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(Context, State);
		EnterRule(_localctx, 562, RULE_mirroring_witness);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7471;
			Match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_partner_equalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_partner_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_partner_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_partner_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_partner_equal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_partner_equalContext witness_partner_equal() {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(Context, State);
		EnterRule(_localctx, 564, RULE_witness_partner_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7473;
			Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_optionContext partner_option() {
		Partner_optionContext _localctx = new Partner_optionContext(Context, State);
		EnterRule(_localctx, 566, RULE_partner_option);
		int _la;
		try {
			State = 7487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7475;
				witness_partner_equal();
				State = 7476;
				partner_server();
				}
				break;
			case FAILOVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7478;
				Match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7479;
				Match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7480;
				Match(OFF);
				}
				break;
			case RESUME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7481;
				Match(RESUME);
				}
				break;
			case SAFETY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7482;
				Match(SAFETY);
				State = 7483;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==OFF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SUSPEND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7484;
				Match(SUSPEND);
				}
				break;
			case TIMEOUT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7485;
				Match(TIMEOUT);
				State = 7486;
				Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Witness_serverContext witness_server() {
			return GetRuleContext<Witness_serverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_optionContext witness_option() {
		Witness_optionContext _localctx = new Witness_optionContext(Context, State);
		EnterRule(_localctx, 568, RULE_witness_option);
		try {
			State = 7493;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7489;
				witness_partner_equal();
				State = 7490;
				witness_server();
				}
				break;
			case OFF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7492;
				Match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_serverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_server; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_serverContext witness_server() {
		Witness_serverContext _localctx = new Witness_serverContext(Context, State);
		EnterRule(_localctx, 570, RULE_witness_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7495;
			partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_serverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return GetRuleContext<Partner_server_tcp_prefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return GetRuleContext<Mirroring_host_port_seperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_numberContext port_number() {
			return GetRuleContext<Port_numberContext>(0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_serverContext partner_server() {
		Partner_serverContext _localctx = new Partner_serverContext(Context, State);
		EnterRule(_localctx, 572, RULE_partner_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7497;
			partner_server_tcp_prefix();
			State = 7498;
			host();
			State = 7499;
			mirroring_host_port_seperator();
			State = 7500;
			port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_host_port_seperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_host_port_seperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_host_port_seperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_host_port_seperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_host_port_seperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(Context, State);
		EnterRule(_localctx, 574, RULE_mirroring_host_port_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7502;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_server_tcp_prefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server_tcp_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server_tcp_prefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server_tcp_prefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_server_tcp_prefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(Context, State);
		EnterRule(_localctx, 576, RULE_partner_server_tcp_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7504;
			Match(TCP);
			State = 7505;
			Match(COLON);
			State = 7506;
			Match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_numberContext : ParserRuleContext {
		public IToken port;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPort_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPort_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_numberContext port_number() {
		Port_numberContext _localctx = new Port_numberContext(Context, State);
		EnterRule(_localctx, 578, RULE_port_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7508;
			_localctx.port = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public HostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostContext host() {
		HostContext _localctx = new HostContext(Context, State);
		EnterRule(_localctx, 580, RULE_host);
		try {
			State = 7520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,990,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7510;
				id_();
				State = 7511;
				Match(DOT);
				State = 7512;
				host();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,989,Context) ) {
				case 1:
					{
					State = 7514;
					id_();
					State = 7515;
					Match(DOT);
					}
					break;
				case 2:
					{
					State = 7517;
					id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_correlation_optimization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(Context, State);
		EnterRule(_localctx, 582, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7522;
			Match(DATE_CORRELATION_OPTIMIZATION);
			State = 7523;
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_encryption_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(Context, State);
		EnterRule(_localctx, 584, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7525;
			Match(ENCRYPTION);
			State = 7526;
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_state_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(Context, State);
		EnterRule(_localctx, 586, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7528;
			_la = TokenStream.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_update_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(Context, State);
		EnterRule(_localctx, 588, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7530;
			_la = TokenStream.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_user_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(Context, State);
		EnterRule(_localctx, 590, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7532;
			_la = TokenStream.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelayed_durability_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(Context, State);
		EnterRule(_localctx, 592, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7534;
			Match(DELAYED_DURABILITY);
			State = 7535;
			Match(EQUAL);
			State = 7536;
			_la = TokenStream.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(Context, State);
		EnterRule(_localctx, 594, RULE_external_access_option);
		int _la;
		try {
			State = 7563;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7538;
				Match(DB_CHAINING);
				State = 7539;
				on_off();
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7540;
				Match(TRUSTWORTHY);
				State = 7541;
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7542;
				Match(DEFAULT_LANGUAGE);
				State = 7543;
				Match(EQUAL);
				State = 7546;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 7544;
					id_();
					}
					break;
				case STRING:
					{
					State = 7545;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7548;
				Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 7549;
				Match(EQUAL);
				State = 7552;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 7550;
					id_();
					}
					break;
				case STRING:
					{
					State = 7551;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7554;
				Match(NESTED_TRIGGERS);
				State = 7555;
				Match(EQUAL);
				State = 7556;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7557;
				Match(TRANSFORM_NOISE_WORDS);
				State = 7558;
				Match(EQUAL);
				State = 7559;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7560;
				Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 7561;
				Match(EQUAL);
				State = 7562;
				Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hadr_optionsContext : ParserRuleContext {
		public Id_Context availability_group_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hadr_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHadr_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHadr_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHadr_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hadr_optionsContext hadr_options() {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(Context, State);
		EnterRule(_localctx, 596, RULE_hadr_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7565;
			Match(HADR);
			State = 7574;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OFF:
			case AVAILABILITY:
				{
				State = 7571;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AVAILABILITY:
					{
					State = 7566;
					Match(AVAILABILITY);
					State = 7567;
					Match(GROUP);
					State = 7568;
					Match(EQUAL);
					State = 7569;
					_localctx.availability_group_name = id_();
					}
					break;
				case OFF:
					{
					State = 7570;
					Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SUSPEND:
			case RESUME:
				{
				State = 7573;
				_la = TokenStream.LA(1);
				if ( !(_la==SUSPEND || _la==RESUME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixed_page_allocation_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(Context, State);
		EnterRule(_localctx, 598, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7576;
			Match(MIXED_PAGE_ALLOCATION);
			State = 7577;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(Context, State);
		EnterRule(_localctx, 600, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7579;
			Match(PARAMETERIZATION);
			State = 7580;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCELERATED_DATABASE_RECOVERY() { return GetToken(TSqlParser.ACCELERATED_DATABASE_RECOVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecovery_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(Context, State);
		EnterRule(_localctx, 602, RULE_recovery_option);
		int _la;
		try {
			State = 7591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECOVERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7582;
				Match(RECOVERY);
				State = 7583;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7584;
				Match(TORN_PAGE_DETECTION);
				State = 7585;
				on_off();
				}
				break;
			case ACCELERATED_DATABASE_RECOVERY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7586;
				Match(ACCELERATED_DATABASE_RECOVERY);
				State = 7587;
				Match(EQUAL);
				State = 7588;
				on_off();
				}
				break;
			case PAGE_VERIFY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7589;
				Match(PAGE_VERIFY);
				State = 7590;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM || _la==TORN_PAGE_DETECTION || _la==NONE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_broker_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(Context, State);
		EnterRule(_localctx, 604, RULE_service_broker_option);
		try {
			State = 7599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_BROKER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7593;
				Match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7594;
				Match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7595;
				Match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7596;
				Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7597;
				Match(HONOR_BROKER_PRIORITY);
				State = 7598;
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public IToken MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnapshot_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(Context, State);
		EnterRule(_localctx, 606, RULE_snapshot_option);
		int _la;
		try {
			State = 7606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7601;
				Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 7602;
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7603;
				Match(READ_COMMITTED_SNAPSHOT);
				State = 7604;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OFF:
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7605;
				_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(Context, State);
		EnterRule(_localctx, 608, RULE_sql_option);
		try {
			State = 7629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANSI_NULL_DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7608;
				Match(ANSI_NULL_DEFAULT);
				State = 7609;
				on_off();
				}
				break;
			case ANSI_NULLS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7610;
				Match(ANSI_NULLS);
				State = 7611;
				on_off();
				}
				break;
			case ANSI_PADDING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7612;
				Match(ANSI_PADDING);
				State = 7613;
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7614;
				Match(ANSI_WARNINGS);
				State = 7615;
				on_off();
				}
				break;
			case ARITHABORT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7616;
				Match(ARITHABORT);
				State = 7617;
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7618;
				Match(COMPATIBILITY_LEVEL);
				State = 7619;
				Match(EQUAL);
				State = 7620;
				Match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7621;
				Match(CONCAT_NULL_YIELDS_NULL);
				State = 7622;
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7623;
				Match(NUMERIC_ROUNDABORT);
				State = 7624;
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7625;
				Match(QUOTED_IDENTIFIER);
				State = 7626;
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7627;
				Match(RECURSIVE_TRIGGERS);
				State = 7628;
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_recovery_time_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(Context, State);
		EnterRule(_localctx, 610, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7631;
			Match(TARGET_RECOVERY_TIME);
			State = 7632;
			Match(EQUAL);
			State = 7633;
			Match(DECIMAL);
			State = 7634;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(Context, State);
		EnterRule(_localctx, 612, RULE_termination);
		try {
			State = 7642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7636;
				Match(ROLLBACK);
				State = 7637;
				Match(AFTER);
				State = 7638;
				_localctx.seconds = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7639;
				Match(ROLLBACK);
				State = 7640;
				Match(IMMEDIATE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7641;
				Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_relational_or_xml_or_spatial_indexContext[] drop_relational_or_xml_or_spatial_index() {
			return GetRuleContexts<Drop_relational_or_xml_or_spatial_indexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return GetRuleContext<Drop_relational_or_xml_or_spatial_indexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_backward_compatible_indexContext[] drop_backward_compatible_index() {
			return GetRuleContexts<Drop_backward_compatible_indexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return GetRuleContext<Drop_backward_compatible_indexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(Context, State);
		EnterRule(_localctx, 614, RULE_drop_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7644;
			Match(DROP);
			State = 7645;
			Match(INDEX);
			State = 7648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7646;
				Match(IF);
				State = 7647;
				Match(EXISTS);
				}
			}

			State = 7666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
			case 1:
				{
				State = 7650;
				drop_relational_or_xml_or_spatial_index();
				State = 7655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7651;
					Match(COMMA);
					State = 7652;
					drop_relational_or_xml_or_spatial_index();
					}
					}
					State = 7657;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 7658;
				drop_backward_compatible_index();
				State = 7663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7659;
					Match(COMMA);
					State = 7660;
					drop_backward_compatible_index();
					}
					}
					State = 7665;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 7669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1005,Context) ) {
			case 1:
				{
				State = 7668;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_relational_or_xml_or_spatial_indexContext : ParserRuleContext {
		public Id_Context index_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_relational_or_xml_or_spatial_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_relational_or_xml_or_spatial_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_relational_or_xml_or_spatial_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_relational_or_xml_or_spatial_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(Context, State);
		EnterRule(_localctx, 616, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7671;
			_localctx.index_name = id_();
			State = 7672;
			Match(ON);
			State = 7673;
			full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backward_compatible_indexContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context table_or_view_name;
		public Id_Context index_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backward_compatible_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_backward_compatible_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_backward_compatible_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_backward_compatible_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backward_compatible_indexContext drop_backward_compatible_index() {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(Context, State);
		EnterRule(_localctx, 618, RULE_drop_backward_compatible_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
			case 1:
				{
				State = 7675;
				_localctx.owner_name = id_();
				State = 7676;
				Match(DOT);
				}
				break;
			}
			State = 7680;
			_localctx.table_or_view_name = id_();
			State = 7681;
			Match(DOT);
			State = 7682;
			_localctx.index_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IToken proc;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 620, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7684;
			Match(DROP);
			State = 7685;
			_localctx.proc = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7686;
				Match(IF);
				State = 7687;
				Match(EXISTS);
				}
			}

			State = 7690;
			func_proc_name_schema();
			State = 7695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7691;
				Match(COMMA);
				State = 7692;
				func_proc_name_schema();
				}
				}
				State = 7697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
			case 1:
				{
				State = 7698;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_dml_triggerContext drop_dml_trigger() {
			return GetRuleContext<Drop_dml_triggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_ddl_triggerContext drop_ddl_trigger() {
			return GetRuleContext<Drop_ddl_triggerContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(Context, State);
		EnterRule(_localctx, 622, RULE_drop_trigger);
		try {
			State = 7703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1010,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7701;
				drop_dml_trigger();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7702;
				drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_dml_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_dml_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_dml_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_dml_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_dml_triggerContext drop_dml_trigger() {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(Context, State);
		EnterRule(_localctx, 624, RULE_drop_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7705;
			Match(DROP);
			State = 7706;
			Match(TRIGGER);
			State = 7709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7707;
				Match(IF);
				State = 7708;
				Match(EXISTS);
				}
			}

			State = 7711;
			simple_name();
			State = 7716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7712;
				Match(COMMA);
				State = 7713;
				simple_name();
				}
				}
				State = 7718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1013,Context) ) {
			case 1:
				{
				State = 7719;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ddl_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_ddl_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_ddl_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_ddl_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_ddl_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ddl_triggerContext drop_ddl_trigger() {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(Context, State);
		EnterRule(_localctx, 626, RULE_drop_ddl_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7722;
			Match(DROP);
			State = 7723;
			Match(TRIGGER);
			State = 7726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7724;
				Match(IF);
				State = 7725;
				Match(EXISTS);
				}
			}

			State = 7728;
			simple_name();
			State = 7733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7729;
				Match(COMMA);
				State = 7730;
				simple_name();
				}
				}
				State = 7735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7736;
			Match(ON);
			State = 7740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
				{
				State = 7737;
				Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 7738;
				Match(ALL);
				State = 7739;
				Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1017,Context) ) {
			case 1:
				{
				State = 7742;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 628, RULE_drop_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7745;
			Match(DROP);
			State = 7746;
			Match(FUNCTION);
			State = 7749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7747;
				Match(IF);
				State = 7748;
				Match(EXISTS);
				}
			}

			State = 7751;
			func_proc_name_schema();
			State = 7756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7752;
				Match(COMMA);
				State = 7753;
				func_proc_name_schema();
				}
				}
				State = 7758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7760;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1020,Context) ) {
			case 1:
				{
				State = 7759;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public Id_Context name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(Context, State);
		EnterRule(_localctx, 630, RULE_drop_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7762;
			Match(DROP);
			State = 7763;
			Match(STATISTICS);
			State = 7773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7764;
					Match(COMMA);
					}
				}

				State = 7770;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1022,Context) ) {
				case 1:
					{
					State = 7767;
					table_name();
					State = 7768;
					Match(DOT);
					}
					break;
				}
				State = 7772;
				_localctx.name = id_();
				}
				}
				State = 7775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 562949972876799L) != 0) );
			State = 7777;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 632, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7779;
			Match(DROP);
			State = 7780;
			Match(TABLE);
			State = 7783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7781;
				Match(IF);
				State = 7782;
				Match(EXISTS);
				}
			}

			State = 7785;
			table_name();
			State = 7787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1025,Context) ) {
			case 1:
				{
				State = 7786;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 634, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7789;
			Match(DROP);
			State = 7790;
			Match(VIEW);
			State = 7793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7791;
				Match(IF);
				State = 7792;
				Match(EXISTS);
				}
			}

			State = 7795;
			simple_name();
			State = 7800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7796;
				Match(COMMA);
				State = 7797;
				simple_name();
				}
				}
				State = 7802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1028,Context) ) {
			case 1:
				{
				State = 7803;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(Context, State);
		EnterRule(_localctx, 636, RULE_create_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7806;
			Match(CREATE);
			State = 7807;
			Match(TYPE);
			State = 7808;
			_localctx.name = simple_name();
			State = 7813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 7809;
				Match(FROM);
				State = 7810;
				data_type();
				State = 7811;
				default_value();
				}
			}

			State = 7821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 7815;
				Match(AS);
				State = 7816;
				Match(TABLE);
				State = 7817;
				Match(LR_BRACKET);
				State = 7818;
				column_def_table_constraints();
				State = 7819;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(Context, State);
		EnterRule(_localctx, 638, RULE_drop_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7823;
			Match(DROP);
			State = 7824;
			Match(TYPE);
			State = 7827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7825;
				Match(IF);
				State = 7826;
				Match(EXISTS);
				}
			}

			State = 7829;
			_localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(Context, State);
		EnterRule(_localctx, 640, RULE_rowset_function_limited);
		try {
			State = 7833;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENQUERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7831;
				openquery();
				}
				break;
			case OPENDATASOURCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7832;
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public Id_Context linked_server;
		public IToken query;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENQUERY() { return GetToken(TSqlParser.OPENQUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(Context, State);
		EnterRule(_localctx, 642, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7835;
			Match(OPENQUERY);
			State = 7836;
			Match(LR_BRACKET);
			State = 7837;
			_localctx.linked_server = id_();
			State = 7838;
			Match(COMMA);
			State = 7839;
			_localctx.query = Match(STRING);
			State = 7840;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public Id_Context database;
		public Id_Context scheme;
		public Id_Context table;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENDATASOURCE() { return GetToken(TSqlParser.OPENDATASOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpendatasource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(Context, State);
		EnterRule(_localctx, 644, RULE_opendatasource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7842;
			Match(OPENDATASOURCE);
			State = 7843;
			Match(LR_BRACKET);
			State = 7844;
			_localctx.provider = Match(STRING);
			State = 7845;
			Match(COMMA);
			State = 7846;
			_localctx.init = Match(STRING);
			State = 7847;
			Match(RR_BRACKET);
			State = 7848;
			Match(DOT);
			State = 7850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
				{
				State = 7849;
				_localctx.database = id_();
				}
			}

			State = 7852;
			Match(DOT);
			State = 7854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
				{
				State = 7853;
				_localctx.scheme = id_();
				}
			}

			State = 7856;
			Match(DOT);
			{
			State = 7857;
			_localctx.table = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public Declare_localContext _declare_local;
		public IList<Declare_localContext> _loc = new List<Declare_localContext>();
		public Xml_declarationContext _xml_declaration;
		public IList<Xml_declarationContext> _xml_dec = new List<Xml_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_type_definitionContext xml_type_definition() {
			return GetRuleContext<Xml_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_declarationContext[] xml_declaration() {
			return GetRuleContexts<Xml_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_declarationContext xml_declaration(int i) {
			return GetRuleContext<Xml_declarationContext>(i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 646, RULE_declare_statement);
		int _la;
		try {
			State = 7907;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1044,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7859;
				Match(DECLARE);
				State = 7860;
				Match(LOCAL_ID);
				State = 7862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 7861;
					Match(AS);
					}
				}

				State = 7866;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TABLE:
					{
					State = 7864;
					table_type_definition();
					}
					break;
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 7865;
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7869;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1037,Context) ) {
				case 1:
					{
					State = 7868;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7871;
				Match(DECLARE);
				State = 7872;
				_localctx._declare_local = declare_local();
				_localctx._loc.Add(_localctx._declare_local);
				State = 7877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7873;
					Match(COMMA);
					State = 7874;
					_localctx._declare_local = declare_local();
					_localctx._loc.Add(_localctx._declare_local);
					}
					}
					State = 7879;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7881;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1039,Context) ) {
				case 1:
					{
					State = 7880;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7883;
				Match(DECLARE);
				State = 7884;
				Match(LOCAL_ID);
				State = 7886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 7885;
					Match(AS);
					}
				}

				State = 7888;
				xml_type_definition();
				State = 7890;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1041,Context) ) {
				case 1:
					{
					State = 7889;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7892;
				Match(WITH);
				State = 7893;
				Match(XMLNAMESPACES);
				State = 7894;
				Match(LR_BRACKET);
				State = 7895;
				_localctx._xml_declaration = xml_declaration();
				_localctx._xml_dec.Add(_localctx._xml_declaration);
				State = 7900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7896;
					Match(COMMA);
					State = 7897;
					_localctx._xml_declaration = xml_declaration();
					_localctx._xml_dec.Add(_localctx._xml_declaration);
					}
					}
					State = 7902;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7903;
				Match(RR_BRACKET);
				State = 7905;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1043,Context) ) {
				case 1:
					{
					State = 7904;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_declarationContext : ParserRuleContext {
		public IToken xml_namespace_uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Xml_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_declarationContext xml_declaration() {
		Xml_declarationContext _localctx = new Xml_declarationContext(Context, State);
		EnterRule(_localctx, 648, RULE_xml_declaration);
		try {
			State = 7914;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7909;
				_localctx.xml_namespace_uri = Match(STRING);
				State = 7910;
				Match(AS);
				State = 7911;
				id_();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7912;
				Match(DEFAULT);
				State = 7913;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(TSqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(Context, State);
		EnterRule(_localctx, 650, RULE_cursor_statement);
		int _la;
		try {
			State = 7945;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7916;
				Match(CLOSE);
				State = 7918;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1046,Context) ) {
				case 1:
					{
					State = 7917;
					Match(GLOBAL);
					}
					break;
				}
				State = 7920;
				cursor_name();
				State = 7922;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1047,Context) ) {
				case 1:
					{
					State = 7921;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7924;
				Match(DEALLOCATE);
				State = 7926;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1048,Context) ) {
				case 1:
					{
					State = 7925;
					Match(GLOBAL);
					}
					break;
				}
				State = 7929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CURSOR) {
					{
					State = 7928;
					Match(CURSOR);
					}
				}

				State = 7931;
				cursor_name();
				State = 7933;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1050,Context) ) {
				case 1:
					{
					State = 7932;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7935;
				declare_cursor();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7936;
				fetch_cursor();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7937;
				Match(OPEN);
				State = 7939;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1051,Context) ) {
				case 1:
					{
					State = 7938;
					Match(GLOBAL);
					}
					break;
				}
				State = 7941;
				cursor_name();
				State = 7943;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1052,Context) ) {
				case 1:
					{
					State = 7942;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_databaseContext : ParserRuleContext {
		public Id_Context database_name;
		public IToken file_or_filegroup;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public Id_Context encryptor_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILEGROUP() { return GetTokens(TSqlParser.FILEGROUP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROUP(int i) {
			return GetToken(TSqlParser.FILEGROUP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_databaseContext backup_database() {
		Backup_databaseContext _localctx = new Backup_databaseContext(Context, State);
		EnterRule(_localctx, 652, RULE_backup_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7947;
			Match(BACKUP);
			State = 7948;
			Match(DATABASE);
			{
			State = 7949;
			_localctx.database_name = id_();
			}
			State = 7962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ_WRITE_FILEGROUPS) {
				{
				State = 7950;
				Match(READ_WRITE_FILEGROUPS);
				State = 7959;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1055,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7952;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7951;
							Match(COMMA);
							}
						}

						State = 7954;
						_la = TokenStream.LA(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7955;
						Match(EQUAL);
						State = 7956;
						_localctx.file_or_filegroup = Match(STRING);
						}
						} 
					}
					State = 7961;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1055,Context);
				}
				}
			}

			State = 7972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FILE || _la==FILEGROUP || _la==COMMA) {
				{
				{
				State = 7965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7964;
					Match(COMMA);
					}
				}

				State = 7967;
				_la = TokenStream.LA(1);
				if ( !(_la==FILE || _la==FILEGROUP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7968;
				Match(EQUAL);
				State = 7969;
				_localctx.file_or_filegroup = Match(STRING);
				}
				}
				State = 7974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7998;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1064,Context) ) {
			case 1:
				{
				State = 7975;
				Match(TO);
				State = 7980;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7977;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7976;
							Match(COMMA);
							}
						}

						State = 7979;
						_localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7982;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1060,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 7984;
				Match(TO);
				State = 7994;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7986;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7985;
							Match(COMMA);
							}
						}

						State = 7988;
						_la = TokenStream.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7989;
						Match(EQUAL);
						State = 7992;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
							{
							State = 7990;
							Match(STRING);
							}
							break;
						case ADD:
						case FILLFACTOR:
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DISTRIBUTION:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REPLICATE:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case ROUND_ROBIN:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							State = 7991;
							id_();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7996;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1063,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 8033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1072,Context) ) {
			case 1:
				{
				State = 8010;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8000;
						Match(MIRROR);
						State = 8001;
						Match(TO);
						State = 8006;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8003;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 8002;
									Match(COMMA);
									}
								}

								State = 8005;
								_localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8008;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,1066,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8012;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1067,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 8029;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8014;
						Match(MIRROR);
						State = 8015;
						Match(TO);
						State = 8025;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8017;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 8016;
									Match(COMMA);
									}
								}

								State = 8019;
								_la = TokenStream.LA(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								State = 8020;
								Match(EQUAL);
								State = 8023;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case STRING:
									{
									State = 8021;
									Match(STRING);
									}
									break;
								case ADD:
								case FILLFACTOR:
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DISTRIBUTION:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REPLICATE:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case ROUND_ROBIN:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 8022;
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8027;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,1070,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8031;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1071,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 8195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1108,Context) ) {
			case 1:
				{
				State = 8035;
				Match(WITH);
				State = 8192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1107,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 8190;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1106,Context) ) {
						case 1:
							{
							State = 8037;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8036;
								Match(COMMA);
								}
							}

							State = 8039;
							Match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							State = 8041;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8040;
								Match(COMMA);
								}
							}

							State = 8043;
							Match(COPY_ONLY);
							}
							break;
						case 3:
							{
							State = 8045;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8044;
								Match(COMMA);
								}
							}

							State = 8047;
							_la = TokenStream.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 4:
							{
							State = 8049;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8048;
								Match(COMMA);
								}
							}

							State = 8051;
							Match(DESCRIPTION);
							State = 8052;
							Match(EQUAL);
							State = 8055;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
								{
								State = 8053;
								Match(STRING);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8054;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							State = 8058;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8057;
								Match(COMMA);
								}
							}

							State = 8060;
							Match(NAME);
							State = 8061;
							Match(EQUAL);
							State = 8062;
							_localctx.backup_set_name = id_();
							}
							break;
						case 6:
							{
							State = 8064;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8063;
								Match(COMMA);
								}
							}

							State = 8066;
							Match(CREDENTIAL);
							}
							break;
						case 7:
							{
							State = 8068;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8067;
								Match(COMMA);
								}
							}

							State = 8070;
							Match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							State = 8072;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8071;
								Match(COMMA);
								}
							}

							State = 8086;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case EXPIREDATE:
								{
								State = 8074;
								Match(EXPIREDATE);
								State = 8075;
								Match(EQUAL);
								State = 8078;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case STRING:
									{
									State = 8076;
									Match(STRING);
									}
									break;
								case ADD:
								case FILLFACTOR:
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DISTRIBUTION:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REPLICATE:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case ROUND_ROBIN:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 8077;
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								State = 8080;
								Match(RETAINDAYS);
								State = 8081;
								Match(EQUAL);
								State = 8084;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
									{
									State = 8082;
									Match(DECIMAL);
									}
									break;
								case ADD:
								case FILLFACTOR:
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DISTRIBUTION:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REPLICATE:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case ROUND_ROBIN:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 8083;
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							State = 8089;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8088;
								Match(COMMA);
								}
							}

							State = 8091;
							_la = TokenStream.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 10:
							{
							State = 8093;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8092;
								Match(COMMA);
								}
							}

							State = 8095;
							_la = TokenStream.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 11:
							{
							State = 8097;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8096;
								Match(COMMA);
								}
							}

							State = 8099;
							_la = TokenStream.LA(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 12:
							{
							State = 8101;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8100;
								Match(COMMA);
								}
							}

							State = 8103;
							Match(MEDIADESCRIPTION);
							State = 8104;
							Match(EQUAL);
							State = 8107;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
								{
								State = 8105;
								Match(STRING);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8106;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							State = 8110;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8109;
								Match(COMMA);
								}
							}

							State = 8112;
							Match(MEDIANAME);
							State = 8113;
							Match(EQUAL);
							{
							State = 8114;
							_localctx.medianame = Match(STRING);
							}
							}
							break;
						case 14:
							{
							State = 8116;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8115;
								Match(COMMA);
								}
							}

							State = 8118;
							Match(BLOCKSIZE);
							State = 8119;
							Match(EQUAL);
							State = 8122;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 8120;
								Match(DECIMAL);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8121;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							State = 8125;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8124;
								Match(COMMA);
								}
							}

							State = 8127;
							Match(BUFFERCOUNT);
							State = 8128;
							Match(EQUAL);
							State = 8131;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 8129;
								Match(DECIMAL);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8130;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							State = 8134;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8133;
								Match(COMMA);
								}
							}

							State = 8136;
							Match(MAXTRANSFER);
							State = 8137;
							Match(EQUAL);
							State = 8140;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 8138;
								Match(DECIMAL);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8139;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							State = 8143;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8142;
								Match(COMMA);
								}
							}

							State = 8145;
							_la = TokenStream.LA(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 18:
							{
							State = 8147;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8146;
								Match(COMMA);
								}
							}

							State = 8149;
							_la = TokenStream.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 19:
							{
							State = 8151;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8150;
								Match(COMMA);
								}
							}

							State = 8153;
							Match(RESTART);
							}
							break;
						case 20:
							{
							State = 8155;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8154;
								Match(COMMA);
								}
							}

							State = 8157;
							Match(STATS);
							State = 8160;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==EQUAL) {
								{
								State = 8158;
								Match(EQUAL);
								State = 8159;
								_localctx.stats_percent = Match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							State = 8163;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8162;
								Match(COMMA);
								}
							}

							State = 8165;
							_la = TokenStream.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 22:
							{
							State = 8167;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8166;
								Match(COMMA);
								}
							}

							State = 8169;
							_la = TokenStream.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 23:
							{
							State = 8171;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8170;
								Match(COMMA);
								}
							}

							State = 8173;
							Match(ENCRYPTION);
							State = 8174;
							Match(LR_BRACKET);
							State = 8175;
							Match(ALGORITHM);
							State = 8176;
							Match(EQUAL);
							State = 8177;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & 7L) != 0) || _la==TRIPLE_DES_3KEY) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							State = 8178;
							Match(COMMA);
							State = 8179;
							Match(SERVER);
							State = 8180;
							Match(CERTIFICATE);
							State = 8181;
							Match(EQUAL);
							State = 8188;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,1105,Context) ) {
							case 1:
								{
								State = 8182;
								_localctx.encryptor_name = id_();
								}
								break;
							case 2:
								{
								State = 8183;
								Match(SERVER);
								State = 8184;
								Match(ASYMMETRIC);
								State = 8185;
								Match(KEY);
								State = 8186;
								Match(EQUAL);
								State = 8187;
								_localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 8194;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1107,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_logContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IToken undo_file_name;
		public Id_Context encryptor_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_TRUNCATE() { return GetTokens(TSqlParser.NO_TRUNCATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_TRUNCATE(int i) {
			return GetToken(TSqlParser.NO_TRUNCATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NORECOVERY() { return GetTokens(TSqlParser.NORECOVERY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORECOVERY(int i) {
			return GetToken(TSqlParser.NORECOVERY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STANDBY() { return GetTokens(TSqlParser.STANDBY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDBY(int i) {
			return GetToken(TSqlParser.STANDBY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_log; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_log(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_log(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_log(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_logContext backup_log() {
		Backup_logContext _localctx = new Backup_logContext(Context, State);
		EnterRule(_localctx, 654, RULE_backup_log);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8197;
			Match(BACKUP);
			State = 8198;
			Match(LOG);
			{
			State = 8199;
			_localctx.database_name = id_();
			}
			State = 8223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1114,Context) ) {
			case 1:
				{
				State = 8200;
				Match(TO);
				State = 8205;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8202;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 8201;
							Match(COMMA);
							}
						}

						State = 8204;
						_localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8207;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1110,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 8209;
				Match(TO);
				State = 8219;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8211;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 8210;
							Match(COMMA);
							}
						}

						State = 8213;
						_la = TokenStream.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 8214;
						Match(EQUAL);
						State = 8217;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
							{
							State = 8215;
							Match(STRING);
							}
							break;
						case ADD:
						case FILLFACTOR:
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DISTRIBUTION:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REPLICATE:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case ROUND_ROBIN:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							State = 8216;
							id_();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8221;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1113,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 8258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1122,Context) ) {
			case 1:
				{
				State = 8235;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8225;
						Match(MIRROR);
						State = 8226;
						Match(TO);
						State = 8231;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8228;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 8227;
									Match(COMMA);
									}
								}

								State = 8230;
								_localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8233;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,1116,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8237;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1117,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 8254;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8239;
						Match(MIRROR);
						State = 8240;
						Match(TO);
						State = 8250;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8242;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 8241;
									Match(COMMA);
									}
								}

								State = 8244;
								_la = TokenStream.LA(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								State = 8245;
								Match(EQUAL);
								State = 8248;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case STRING:
									{
									State = 8246;
									Match(STRING);
									}
									break;
								case ADD:
								case FILLFACTOR:
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DISTRIBUTION:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REPLICATE:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case ROUND_ROBIN:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 8247;
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8252;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,1120,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8256;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1121,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 8433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1161,Context) ) {
			case 1:
				{
				State = 8260;
				Match(WITH);
				State = 8430;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1160,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 8428;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1159,Context) ) {
						case 1:
							{
							State = 8262;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8261;
								Match(COMMA);
								}
							}

							State = 8264;
							Match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							State = 8266;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8265;
								Match(COMMA);
								}
							}

							State = 8268;
							Match(COPY_ONLY);
							}
							break;
						case 3:
							{
							State = 8270;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8269;
								Match(COMMA);
								}
							}

							State = 8272;
							_la = TokenStream.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 4:
							{
							State = 8274;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8273;
								Match(COMMA);
								}
							}

							State = 8276;
							Match(DESCRIPTION);
							State = 8277;
							Match(EQUAL);
							State = 8280;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
								{
								State = 8278;
								Match(STRING);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8279;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							State = 8283;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8282;
								Match(COMMA);
								}
							}

							State = 8285;
							Match(NAME);
							State = 8286;
							Match(EQUAL);
							State = 8287;
							_localctx.backup_set_name = id_();
							}
							break;
						case 6:
							{
							State = 8289;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8288;
								Match(COMMA);
								}
							}

							State = 8291;
							Match(CREDENTIAL);
							}
							break;
						case 7:
							{
							State = 8293;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8292;
								Match(COMMA);
								}
							}

							State = 8295;
							Match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							State = 8297;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8296;
								Match(COMMA);
								}
							}

							State = 8311;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case EXPIREDATE:
								{
								State = 8299;
								Match(EXPIREDATE);
								State = 8300;
								Match(EQUAL);
								State = 8303;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case STRING:
									{
									State = 8301;
									Match(STRING);
									}
									break;
								case ADD:
								case FILLFACTOR:
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DISTRIBUTION:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REPLICATE:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case ROUND_ROBIN:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 8302;
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								State = 8305;
								Match(RETAINDAYS);
								State = 8306;
								Match(EQUAL);
								State = 8309;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
									{
									State = 8307;
									Match(DECIMAL);
									}
									break;
								case ADD:
								case FILLFACTOR:
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DISTRIBUTION:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REPLICATE:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case ROUND_ROBIN:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 8308;
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							State = 8314;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8313;
								Match(COMMA);
								}
							}

							State = 8316;
							_la = TokenStream.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 10:
							{
							State = 8318;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8317;
								Match(COMMA);
								}
							}

							State = 8320;
							_la = TokenStream.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 11:
							{
							State = 8322;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8321;
								Match(COMMA);
								}
							}

							State = 8324;
							_la = TokenStream.LA(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 12:
							{
							State = 8326;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8325;
								Match(COMMA);
								}
							}

							State = 8328;
							Match(MEDIADESCRIPTION);
							State = 8329;
							Match(EQUAL);
							State = 8332;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
								{
								State = 8330;
								Match(STRING);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8331;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							State = 8335;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8334;
								Match(COMMA);
								}
							}

							State = 8337;
							Match(MEDIANAME);
							State = 8338;
							Match(EQUAL);
							{
							State = 8339;
							_localctx.medianame = Match(STRING);
							}
							}
							break;
						case 14:
							{
							State = 8341;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8340;
								Match(COMMA);
								}
							}

							State = 8343;
							Match(BLOCKSIZE);
							State = 8344;
							Match(EQUAL);
							State = 8347;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 8345;
								Match(DECIMAL);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8346;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							State = 8350;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8349;
								Match(COMMA);
								}
							}

							State = 8352;
							Match(BUFFERCOUNT);
							State = 8353;
							Match(EQUAL);
							State = 8356;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 8354;
								Match(DECIMAL);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8355;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							State = 8359;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8358;
								Match(COMMA);
								}
							}

							State = 8361;
							Match(MAXTRANSFER);
							State = 8362;
							Match(EQUAL);
							State = 8365;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 8363;
								Match(DECIMAL);
								}
								break;
							case ADD:
							case FILLFACTOR:
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DISTRIBUTION:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REPLICATE:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case ROUND_ROBIN:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 8364;
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							State = 8368;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8367;
								Match(COMMA);
								}
							}

							State = 8370;
							_la = TokenStream.LA(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 18:
							{
							State = 8372;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8371;
								Match(COMMA);
								}
							}

							State = 8374;
							_la = TokenStream.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 19:
							{
							State = 8376;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8375;
								Match(COMMA);
								}
							}

							State = 8378;
							Match(RESTART);
							}
							break;
						case 20:
							{
							State = 8380;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8379;
								Match(COMMA);
								}
							}

							State = 8382;
							Match(STATS);
							State = 8385;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==EQUAL) {
								{
								State = 8383;
								Match(EQUAL);
								State = 8384;
								_localctx.stats_percent = Match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							State = 8388;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8387;
								Match(COMMA);
								}
							}

							State = 8390;
							_la = TokenStream.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 22:
							{
							State = 8392;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8391;
								Match(COMMA);
								}
							}

							State = 8394;
							_la = TokenStream.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 23:
							{
							State = 8396;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8395;
								Match(COMMA);
								}
							}

							State = 8402;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case NORECOVERY:
								{
								State = 8398;
								Match(NORECOVERY);
								}
								break;
							case STANDBY:
								{
								State = 8399;
								Match(STANDBY);
								State = 8400;
								Match(EQUAL);
								State = 8401;
								_localctx.undo_file_name = Match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 24:
							{
							State = 8405;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8404;
								Match(COMMA);
								}
							}

							State = 8407;
							Match(NO_TRUNCATE);
							}
							break;
						case 25:
							{
							State = 8409;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 8408;
								Match(COMMA);
								}
							}

							State = 8411;
							Match(ENCRYPTION);
							State = 8412;
							Match(LR_BRACKET);
							State = 8413;
							Match(ALGORITHM);
							State = 8414;
							Match(EQUAL);
							State = 8415;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & 7L) != 0) || _la==TRIPLE_DES_3KEY) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							State = 8416;
							Match(COMMA);
							State = 8417;
							Match(SERVER);
							State = 8418;
							Match(CERTIFICATE);
							State = 8419;
							Match(EQUAL);
							State = 8426;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,1158,Context) ) {
							case 1:
								{
								State = 8420;
								_localctx.encryptor_name = id_();
								}
								break;
							case 2:
								{
								State = 8421;
								Match(SERVER);
								State = 8422;
								Match(ASYMMETRIC);
								State = 8423;
								Match(KEY);
								State = 8424;
								Match(EQUAL);
								State = 8425;
								_localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 8432;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1160,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_certificateContext : ParserRuleContext {
		public Id_Context certname;
		public IToken cert_file;
		public IToken private_key_file;
		public IToken encryption_password;
		public IToken decryption_pasword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_certificate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_certificate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_certificate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_certificateContext backup_certificate() {
		Backup_certificateContext _localctx = new Backup_certificateContext(Context, State);
		EnterRule(_localctx, 656, RULE_backup_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8435;
			Match(BACKUP);
			State = 8436;
			Match(CERTIFICATE);
			State = 8437;
			_localctx.certname = id_();
			State = 8438;
			Match(TO);
			State = 8439;
			Match(FILE);
			State = 8440;
			Match(EQUAL);
			State = 8441;
			_localctx.cert_file = Match(STRING);
			State = 8473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1167,Context) ) {
			case 1:
				{
				State = 8442;
				Match(WITH);
				State = 8443;
				Match(PRIVATE);
				State = 8444;
				Match(KEY);
				State = 8445;
				Match(LR_BRACKET);
				State = 8468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 8468;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1165,Context) ) {
					case 1:
						{
						State = 8447;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 8446;
							Match(COMMA);
							}
						}

						State = 8449;
						Match(FILE);
						State = 8450;
						Match(EQUAL);
						State = 8451;
						_localctx.private_key_file = Match(STRING);
						}
						break;
					case 2:
						{
						State = 8453;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 8452;
							Match(COMMA);
							}
						}

						State = 8455;
						Match(ENCRYPTION);
						State = 8456;
						Match(BY);
						State = 8457;
						Match(PASSWORD);
						State = 8458;
						Match(EQUAL);
						State = 8459;
						_localctx.encryption_password = Match(STRING);
						}
						break;
					case 3:
						{
						State = 8461;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 8460;
							Match(COMMA);
							}
						}

						State = 8463;
						Match(DECRYPTION);
						State = 8464;
						Match(BY);
						State = 8465;
						Match(PASSWORD);
						State = 8466;
						Match(EQUAL);
						State = 8467;
						_localctx.decryption_pasword = Match(STRING);
						}
						break;
					}
					}
					State = 8470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION || _la==COMMA );
				State = 8472;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_master_keyContext : ParserRuleContext {
		public IToken master_key_backup_file;
		public IToken encryption_password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_master_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_master_keyContext backup_master_key() {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(Context, State);
		EnterRule(_localctx, 658, RULE_backup_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8475;
			Match(BACKUP);
			State = 8476;
			Match(MASTER);
			State = 8477;
			Match(KEY);
			State = 8478;
			Match(TO);
			State = 8479;
			Match(FILE);
			State = 8480;
			Match(EQUAL);
			State = 8481;
			_localctx.master_key_backup_file = Match(STRING);
			State = 8482;
			Match(ENCRYPTION);
			State = 8483;
			Match(BY);
			State = 8484;
			Match(PASSWORD);
			State = 8485;
			Match(EQUAL);
			State = 8486;
			_localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_service_master_keyContext : ParserRuleContext {
		public IToken service_master_key_backup_file;
		public IToken encryption_password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_service_master_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_service_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_service_master_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_service_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_service_master_keyContext backup_service_master_key() {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(Context, State);
		EnterRule(_localctx, 660, RULE_backup_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8488;
			Match(BACKUP);
			State = 8489;
			Match(SERVICE);
			State = 8490;
			Match(MASTER);
			State = 8491;
			Match(KEY);
			State = 8492;
			Match(TO);
			State = 8493;
			Match(FILE);
			State = 8494;
			Match(EQUAL);
			State = 8495;
			_localctx.service_master_key_backup_file = Match(STRING);
			State = 8496;
			Match(ENCRYPTION);
			State = 8497;
			Match(BY);
			State = 8498;
			Match(PASSWORD);
			State = 8499;
			Match(EQUAL);
			State = 8500;
			_localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Kill_processContext kill_process() {
			return GetRuleContext<Kill_processContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kill_query_notificationContext kill_query_notification() {
			return GetRuleContext<Kill_query_notificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kill_stats_jobContext kill_stats_job() {
			return GetRuleContext<Kill_stats_jobContext>(0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_statementContext kill_statement() {
		Kill_statementContext _localctx = new Kill_statementContext(Context, State);
		EnterRule(_localctx, 662, RULE_kill_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8502;
			Match(KILL);
			State = 8506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UOW:
			case DECIMAL:
			case STRING:
				{
				State = 8503;
				kill_process();
				}
				break;
			case QUERY:
				{
				State = 8504;
				kill_query_notification();
				}
				break;
			case STATS:
				{
				State = 8505;
				kill_stats_job();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_processContext : ParserRuleContext {
		public IToken session_id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_process; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_process(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_process(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_process(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_processContext kill_process() {
		Kill_processContext _localctx = new Kill_processContext(Context, State);
		EnterRule(_localctx, 664, RULE_kill_process);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case STRING:
				{
				State = 8508;
				_localctx.session_id = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					_localctx.session_id = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case UOW:
				{
				State = 8509;
				Match(UOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1170,Context) ) {
			case 1:
				{
				State = 8512;
				Match(WITH);
				State = 8513;
				Match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_query_notificationContext : ParserRuleContext {
		public IToken subscription_id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_query_notification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_query_notification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_query_notification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_query_notification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_query_notificationContext kill_query_notification() {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(Context, State);
		EnterRule(_localctx, 666, RULE_kill_query_notification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8516;
			Match(QUERY);
			State = 8517;
			Match(NOTIFICATION);
			State = 8518;
			Match(SUBSCRIPTION);
			State = 8521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 8519;
				Match(ALL);
				}
				break;
			case DECIMAL:
				{
				State = 8520;
				_localctx.subscription_id = Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_stats_jobContext : ParserRuleContext {
		public IToken job_id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_stats_job; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_stats_job(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_stats_job(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_stats_job(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_stats_jobContext kill_stats_job() {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(Context, State);
		EnterRule(_localctx, 668, RULE_kill_stats_job);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8523;
			Match(STATS);
			State = 8524;
			Match(JOB);
			State = 8525;
			_localctx.job_id = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(Context, State);
		EnterRule(_localctx, 670, RULE_execute_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8527;
			Match(EXECUTE);
			State = 8528;
			execute_body();
			State = 8530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1172,Context) ) {
			case 1:
				{
				State = 8529;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_body_batchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Execute_body_batchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body_batch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body_batch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body_batch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_body_batch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_body_batchContext execute_body_batch() {
		Execute_body_batchContext _localctx = new Execute_body_batchContext(Context, State);
		EnterRule(_localctx, 672, RULE_execute_body_batch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8532;
			func_proc_name_server_database_schema();
			State = 8541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1174,Context) ) {
			case 1:
				{
				State = 8533;
				execute_statement_arg();
				State = 8538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 8534;
					Match(COMMA);
					State = 8535;
					execute_statement_arg();
					}
					}
					State = 8540;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 8544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1175,Context) ) {
			case 1:
				{
				State = 8543;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_bodyContext : ParserRuleContext {
		public IToken return_status;
		public Id_Context linkedServer;
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_argContext execute_statement_arg() {
			return GetRuleContext<Execute_statement_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_bodyContext execute_body() {
		Execute_bodyContext _localctx = new Execute_bodyContext(Context, State);
		EnterRule(_localctx, 674, RULE_execute_body);
		int _la;
		try {
			State = 8579;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
			case STRING:
			case DOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8548;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1176,Context) ) {
				case 1:
					{
					State = 8546;
					_localctx.return_status = Match(LOCAL_ID);
					State = 8547;
					Match(EQUAL);
					}
					break;
				}
				State = 8552;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					State = 8550;
					func_proc_name_server_database_schema();
					}
					break;
				case LOCAL_ID:
				case STRING:
					{
					State = 8551;
					execute_var_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8555;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1178,Context) ) {
				case 1:
					{
					State = 8554;
					execute_statement_arg();
					}
					break;
				}
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8557;
				Match(LR_BRACKET);
				State = 8558;
				execute_var_string();
				State = 8563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 8559;
					Match(COMMA);
					State = 8560;
					execute_var_string();
					}
					}
					State = 8565;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 8566;
				Match(RR_BRACKET);
				State = 8573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1181,Context) ) {
				case 1:
					{
					State = 8568;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 8567;
						Match(AS);
						}
					}

					State = 8570;
					_la = TokenStream.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 8571;
					Match(EQUAL);
					State = 8572;
					Match(STRING);
					}
					break;
				}
				State = 8577;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1182,Context) ) {
				case 1:
					{
					State = 8575;
					Match(AT_KEYWORD);
					State = 8576;
					_localctx.linkedServer = id_();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
			return GetRuleContext<Execute_statement_arg_unnamedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_arg_namedContext[] execute_statement_arg_named() {
			return GetRuleContexts<Execute_statement_arg_namedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_arg_namedContext execute_statement_arg_named(int i) {
			return GetRuleContext<Execute_statement_arg_namedContext>(i);
		}
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(Context, State);
		EnterRule(_localctx, 676, RULE_execute_statement_arg);
		try {
			int _alt;
			State = 8597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1186,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8581;
				execute_statement_arg_unnamed();
				State = 8586;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1184,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 8582;
						Match(COMMA);
						State = 8583;
						execute_statement_arg();
						}
						} 
					}
					State = 8588;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1184,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8589;
				execute_statement_arg_named();
				State = 8594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1185,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 8590;
						Match(COMMA);
						State = 8591;
						execute_statement_arg_named();
						}
						} 
					}
					State = 8596;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1185,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_namedContext : ParserRuleContext {
		public IToken name;
		public Execute_parameterContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_namedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_named; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_named(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_named(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg_named(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_namedContext execute_statement_arg_named() {
		Execute_statement_arg_namedContext _localctx = new Execute_statement_arg_namedContext(Context, State);
		EnterRule(_localctx, 678, RULE_execute_statement_arg_named);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8599;
			_localctx.name = Match(LOCAL_ID);
			State = 8600;
			Match(EQUAL);
			State = 8601;
			_localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_unnamedContext : ParserRuleContext {
		public Execute_parameterContext value;
		[System.Diagnostics.DebuggerNonUserCode] public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_unnamedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_unnamed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_unnamed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_unnamed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg_unnamed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
		Execute_statement_arg_unnamedContext _localctx = new Execute_statement_arg_unnamedContext(Context, State);
		EnterRule(_localctx, 680, RULE_execute_statement_arg_unnamed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8603;
			_localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_parameterContext execute_parameter() {
		Execute_parameterContext _localctx = new Execute_parameterContext(Context, State);
		EnterRule(_localctx, 682, RULE_execute_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				State = 8605;
				constant();
				}
				break;
			case LOCAL_ID:
				{
				State = 8606;
				Match(LOCAL_ID);
				State = 8608;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1187,Context) ) {
				case 1:
					{
					State = 8607;
					_la = TokenStream.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 8610;
				id_();
				}
				break;
			case DEFAULT:
				{
				State = 8611;
				Match(DEFAULT);
				}
				break;
			case NULL_:
				{
				State = 8612;
				Match(NULL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(TSqlParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(TSqlParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_var_stringContext execute_var_string() {
			return GetRuleContext<Execute_var_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_var_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(Context, State);
		EnterRule(_localctx, 684, RULE_execute_var_string);
		int _la;
		try {
			State = 8636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8615;
				Match(LOCAL_ID);
				State = 8617;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1189,Context) ) {
				case 1:
					{
					State = 8616;
					_la = TokenStream.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 8625;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1191,Context) ) {
				case 1:
					{
					State = 8619;
					Match(PLUS);
					State = 8620;
					Match(LOCAL_ID);
					State = 8623;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1190,Context) ) {
					case 1:
						{
						State = 8621;
						Match(PLUS);
						State = 8622;
						execute_var_string();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8627;
				Match(STRING);
				State = 8634;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1193,Context) ) {
				case 1:
					{
					State = 8628;
					Match(PLUS);
					State = 8629;
					Match(LOCAL_ID);
					State = 8632;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1192,Context) ) {
					case 1:
						{
						State = 8630;
						Match(PLUS);
						State = 8631;
						execute_var_string();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Table_nameContext on_id;
		public Principal_idContext _principal_id;
		public IList<Principal_idContext> _to_principal = new List<Principal_idContext>();
		public Principal_idContext as_principal;
		[System.Diagnostics.DebuggerNonUserCode] public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Principal_idContext[] principal_id() {
			return GetRuleContexts<Principal_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Principal_idContext principal_id(int i) {
			return GetRuleContext<Principal_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_for_grantContext class_type_for_grant() {
			return GetRuleContext<Class_type_for_grantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERT() { return GetToken(TSqlParser.REVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Open_keyContext open_key() {
			return GetRuleContext<Open_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Close_keyContext close_key() {
			return GetRuleContext<Close_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_keyContext create_key() {
			return GetRuleContext<Create_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_certificateContext create_certificate() {
			return GetRuleContext<Create_certificateContext>(0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecurity_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(Context, State);
		EnterRule(_localctx, 686, RULE_security_statement);
		int _la;
		try {
			State = 8702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1207,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8638;
				execute_clause();
				State = 8640;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1195,Context) ) {
				case 1:
					{
					State = 8639;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8642;
				Match(GRANT);
				State = 8654;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
					{
					State = 8643;
					Match(ALL);
					State = 8645;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVILEGES) {
						{
						State = 8644;
						Match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case BACKUP:
				case CHECKPOINT:
				case CREATE:
				case DELETE:
				case EXECUTE:
				case EXTERNAL:
				case INSERT:
				case KILL:
				case REFERENCES:
				case SELECT:
				case SHUTDOWN:
				case UPDATE:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case RECEIVE:
				case SEND:
				case SHOWPLAN:
				case SUBSCRIBE:
				case TAKE:
				case UNMASK:
				case ADMINISTER:
				case AUTHENTICATE:
				case CONNECT:
				case UNSAFE:
					{
					State = 8647;
					grant_permission();
					State = 8652;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LR_BRACKET) {
						{
						State = 8648;
						Match(LR_BRACKET);
						State = 8649;
						column_name_list();
						State = 8650;
						Match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 8656;
					Match(ON);
					State = 8660;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1199,Context) ) {
					case 1:
						{
						State = 8657;
						class_type_for_grant();
						State = 8658;
						Match(DOUBLE_COLON);
						}
						break;
					}
					State = 8662;
					_localctx.on_id = table_name();
					}
				}

				State = 8665;
				Match(TO);
				State = 8666;
				_localctx._principal_id = principal_id();
				_localctx._to_principal.Add(_localctx._principal_id);
				State = 8671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 8667;
					Match(COMMA);
					State = 8668;
					_localctx._principal_id = principal_id();
					_localctx._to_principal.Add(_localctx._principal_id);
					}
					}
					State = 8673;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 8677;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1202,Context) ) {
				case 1:
					{
					State = 8674;
					Match(WITH);
					State = 8675;
					Match(GRANT);
					State = 8676;
					Match(OPTION);
					}
					break;
				}
				State = 8681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 8679;
					Match(AS);
					State = 8680;
					_localctx.as_principal = principal_id();
					}
				}

				State = 8684;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1204,Context) ) {
				case 1:
					{
					State = 8683;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8686;
				Match(REVERT);
				State = 8693;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1205,Context) ) {
				case 1:
					{
					State = 8687;
					Match(LR_BRACKET);
					State = 8688;
					Match(WITH);
					State = 8689;
					Match(COOKIE);
					State = 8690;
					Match(EQUAL);
					State = 8691;
					Match(LOCAL_ID);
					State = 8692;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 8696;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1206,Context) ) {
				case 1:
					{
					State = 8695;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8698;
				open_key();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8699;
				close_key();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8700;
				create_key();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8701;
				create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Principal_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(TSqlParser.PUBLIC, 0); }
		public Principal_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrincipal_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrincipal_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipal_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Principal_idContext principal_id() {
		Principal_idContext _localctx = new Principal_idContext(Context, State);
		EnterRule(_localctx, 688, RULE_principal_id);
		try {
			State = 8707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8705;
				id_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8706;
				Match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context user_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Existing_keysContext existing_keys() {
			return GetRuleContext<Existing_keysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generate_new_keysContext generate_new_keys() {
			return GetRuleContext<Generate_new_keysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_certificate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_certificate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_certificate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_certificateContext create_certificate() {
		Create_certificateContext _localctx = new Create_certificateContext(Context, State);
		EnterRule(_localctx, 690, RULE_create_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8709;
			Match(CREATE);
			State = 8710;
			Match(CERTIFICATE);
			State = 8711;
			_localctx.certificate_name = id_();
			State = 8714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 8712;
				Match(AUTHORIZATION);
				State = 8713;
				_localctx.user_name = id_();
				}
			}

			State = 8719;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				{
				State = 8716;
				Match(FROM);
				State = 8717;
				existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				State = 8718;
				generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1211,Context) ) {
			case 1:
				{
				State = 8721;
				Match(ACTIVE);
				State = 8722;
				Match(FOR);
				State = 8723;
				Match(BEGIN);
				State = 8724;
				Match(DIALOG);
				State = 8725;
				Match(EQUAL);
				State = 8726;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_keysContext : ParserRuleContext {
		public Id_Context assembly_name;
		public IToken path_to_file;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Private_key_optionsContext private_key_options() {
			return GetRuleContext<Private_key_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Existing_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_keys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExisting_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExisting_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExisting_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Existing_keysContext existing_keys() {
		Existing_keysContext _localctx = new Existing_keysContext(Context, State);
		EnterRule(_localctx, 692, RULE_existing_keys);
		int _la;
		try {
			State = 8746;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSEMBLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8729;
				Match(ASSEMBLY);
				State = 8730;
				_localctx.assembly_name = id_();
				}
				break;
			case FILE:
			case EXECUTABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXECUTABLE) {
					{
					State = 8731;
					Match(EXECUTABLE);
					}
				}

				State = 8734;
				Match(FILE);
				State = 8735;
				Match(EQUAL);
				State = 8736;
				_localctx.path_to_file = Match(STRING);
				State = 8744;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1213,Context) ) {
				case 1:
					{
					State = 8737;
					Match(WITH);
					State = 8738;
					Match(PRIVATE);
					State = 8739;
					Match(KEY);
					State = 8740;
					Match(LR_BRACKET);
					State = 8741;
					private_key_options();
					State = 8742;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_key_optionsContext : ParserRuleContext {
		public IToken path;
		public IToken password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_key_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrivate_key_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrivate_key_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivate_key_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Private_key_optionsContext private_key_options() {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(Context, State);
		EnterRule(_localctx, 694, RULE_private_key_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8748;
			_la = TokenStream.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8749;
			Match(EQUAL);
			State = 8750;
			_localctx.path = Match(STRING);
			State = 8757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 8751;
				Match(COMMA);
				State = 8752;
				_la = TokenStream.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8753;
				Match(BY);
				State = 8754;
				Match(PASSWORD);
				State = 8755;
				Match(EQUAL);
				State = 8756;
				_localctx.password = Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_new_keysContext : ParserRuleContext {
		public IToken password;
		public IToken certificate_subject_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_optionsContext[] date_options() {
			return GetRuleContexts<Date_optionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_optionsContext date_options(int i) {
			return GetRuleContext<Date_optionsContext>(i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_new_keys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGenerate_new_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGenerate_new_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerate_new_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generate_new_keysContext generate_new_keys() {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(Context, State);
		EnterRule(_localctx, 696, RULE_generate_new_keys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENCRYPTION) {
				{
				State = 8759;
				Match(ENCRYPTION);
				State = 8760;
				Match(BY);
				State = 8761;
				Match(PASSWORD);
				State = 8762;
				Match(EQUAL);
				State = 8763;
				_localctx.password = Match(STRING);
				}
			}

			State = 8766;
			Match(WITH);
			State = 8767;
			Match(SUBJECT);
			State = 8768;
			Match(EQUAL);
			State = 8769;
			_localctx.certificate_subject_name = Match(STRING);
			State = 8774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8770;
				Match(COMMA);
				State = 8771;
				date_options();
				}
				}
				State = 8776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_optionsContext date_options() {
		Date_optionsContext _localctx = new Date_optionsContext(Context, State);
		EnterRule(_localctx, 698, RULE_date_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8777;
			_la = TokenStream.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8778;
			Match(EQUAL);
			State = 8779;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken password;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decryption_mechanismContext decryption_mechanism() {
			return GetRuleContext<Decryption_mechanismContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_keyContext open_key() {
		Open_keyContext _localctx = new Open_keyContext(Context, State);
		EnterRule(_localctx, 700, RULE_open_key);
		try {
			State = 8797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1218,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8781;
				Match(OPEN);
				State = 8782;
				Match(SYMMETRIC);
				State = 8783;
				Match(KEY);
				State = 8784;
				_localctx.key_name = id_();
				State = 8785;
				Match(DECRYPTION);
				State = 8786;
				Match(BY);
				State = 8787;
				decryption_mechanism();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8789;
				Match(OPEN);
				State = 8790;
				Match(MASTER);
				State = 8791;
				Match(KEY);
				State = 8792;
				Match(DECRYPTION);
				State = 8793;
				Match(BY);
				State = 8794;
				Match(PASSWORD);
				State = 8795;
				Match(EQUAL);
				State = 8796;
				_localctx.password = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_keyContext : ParserRuleContext {
		public Id_Context key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClose_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClose_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Close_keyContext close_key() {
		Close_keyContext _localctx = new Close_keyContext(Context, State);
		EnterRule(_localctx, 702, RULE_close_key);
		try {
			State = 8810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8799;
				Match(CLOSE);
				State = 8800;
				Match(SYMMETRIC);
				State = 8801;
				Match(KEY);
				State = 8802;
				_localctx.key_name = id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8803;
				Match(CLOSE);
				State = 8804;
				Match(ALL);
				State = 8805;
				Match(SYMMETRIC);
				State = 8806;
				Match(KEYS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8807;
				Match(CLOSE);
				State = 8808;
				Match(MASTER);
				State = 8809;
				Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_keyContext : ParserRuleContext {
		public IToken password;
		public Id_Context key_name;
		public Id_Context user_name;
		public Id_Context provider_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_optionsContext[] key_options() {
			return GetRuleContexts<Key_optionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_optionsContext key_options(int i) {
			return GetRuleContext<Key_optionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Encryption_mechanismContext[] encryption_mechanism() {
			return GetRuleContexts<Encryption_mechanismContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Encryption_mechanismContext encryption_mechanism(int i) {
			return GetRuleContext<Encryption_mechanismContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_keyContext create_key() {
		Create_keyContext _localctx = new Create_keyContext(Context, State);
		EnterRule(_localctx, 704, RULE_create_key);
		int _la;
		try {
			int _alt;
			State = 8847;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1225,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8812;
				Match(CREATE);
				State = 8813;
				Match(MASTER);
				State = 8814;
				Match(KEY);
				State = 8815;
				Match(ENCRYPTION);
				State = 8816;
				Match(BY);
				State = 8817;
				Match(PASSWORD);
				State = 8818;
				Match(EQUAL);
				State = 8819;
				_localctx.password = Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8820;
				Match(CREATE);
				State = 8821;
				Match(SYMMETRIC);
				State = 8822;
				Match(KEY);
				State = 8823;
				_localctx.key_name = id_();
				State = 8826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTHORIZATION) {
					{
					State = 8824;
					Match(AUTHORIZATION);
					State = 8825;
					_localctx.user_name = id_();
					}
				}

				State = 8831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 8828;
					Match(FROM);
					State = 8829;
					Match(PROVIDER);
					State = 8830;
					_localctx.provider_name = id_();
					}
				}

				State = 8833;
				Match(WITH);
				State = 8843;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8838;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							State = 8834;
							key_options();
							}
							break;
						case ENCRYPTION:
							{
							State = 8835;
							Match(ENCRYPTION);
							State = 8836;
							Match(BY);
							State = 8837;
							encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 8841;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 8840;
							Match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8845;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1224,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_optionsContext : ParserRuleContext {
		public IToken pass_phrase;
		public IToken identity_phrase;
		public IToken key_name_in_provider;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlgorithmContext algorithm() {
			return GetRuleContext<AlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKey_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKey_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_optionsContext key_options() {
		Key_optionsContext _localctx = new Key_optionsContext(Context, State);
		EnterRule(_localctx, 706, RULE_key_options);
		int _la;
		try {
			State = 8864;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_SOURCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8849;
				Match(KEY_SOURCE);
				State = 8850;
				Match(EQUAL);
				State = 8851;
				_localctx.pass_phrase = Match(STRING);
				}
				break;
			case ALGORITHM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8852;
				Match(ALGORITHM);
				State = 8853;
				Match(EQUAL);
				State = 8854;
				algorithm();
				}
				break;
			case IDENTITY_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8855;
				Match(IDENTITY_VALUE);
				State = 8856;
				Match(EQUAL);
				State = 8857;
				_localctx.identity_phrase = Match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8858;
				Match(PROVIDER_KEY_NAME);
				State = 8859;
				Match(EQUAL);
				State = 8860;
				_localctx.key_name_in_provider = Match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8861;
				Match(CREATION_DISPOSITION);
				State = 8862;
				Match(EQUAL);
				State = 8863;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_algorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlgorithmContext algorithm() {
		AlgorithmContext _localctx = new AlgorithmContext(Context, State);
		EnterRule(_localctx, 708, RULE_algorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8866;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & 7L) != 0) || _la==DES || _la==DESX || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & 7L) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryption_mechanism; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEncryption_mechanism(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEncryption_mechanism(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncryption_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Encryption_mechanismContext encryption_mechanism() {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(Context, State);
		EnterRule(_localctx, 710, RULE_encryption_mechanism);
		try {
			State = 8879;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CERTIFICATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8868;
				Match(CERTIFICATE);
				State = 8869;
				_localctx.certificate_name = id_();
				}
				break;
			case ASYMMETRIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8870;
				Match(ASYMMETRIC);
				State = 8871;
				Match(KEY);
				State = 8872;
				_localctx.asym_key_name = id_();
				}
				break;
			case SYMMETRIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8873;
				Match(SYMMETRIC);
				State = 8874;
				Match(KEY);
				State = 8875;
				_localctx.decrypting_Key_name = id_();
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8876;
				Match(PASSWORD);
				State = 8877;
				Match(EQUAL);
				State = 8878;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decryption_mechanism; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDecryption_mechanism(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDecryption_mechanism(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecryption_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decryption_mechanismContext decryption_mechanism() {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(Context, State);
		EnterRule(_localctx, 712, RULE_decryption_mechanism);
		try {
			State = 8904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CERTIFICATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8881;
				Match(CERTIFICATE);
				State = 8882;
				_localctx.certificate_name = id_();
				State = 8887;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1228,Context) ) {
				case 1:
					{
					State = 8883;
					Match(WITH);
					State = 8884;
					Match(PASSWORD);
					State = 8885;
					Match(EQUAL);
					State = 8886;
					Match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8889;
				Match(ASYMMETRIC);
				State = 8890;
				Match(KEY);
				State = 8891;
				_localctx.asym_key_name = id_();
				State = 8896;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1229,Context) ) {
				case 1:
					{
					State = 8892;
					Match(WITH);
					State = 8893;
					Match(PASSWORD);
					State = 8894;
					Match(EQUAL);
					State = 8895;
					Match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8898;
				Match(SYMMETRIC);
				State = 8899;
				Match(KEY);
				State = 8900;
				_localctx.decrypting_Key_name = id_();
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8901;
				Match(PASSWORD);
				State = 8902;
				Match(EQUAL);
				State = 8903;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMINISTER() { return GetToken(TSqlParser.ADMINISTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATIONS() { return GetToken(TSqlParser.OPERATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCES() { return GetToken(TSqlParser.RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETTINGS() { return GetToken(TSqlParser.SETTINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACE() { return GetToken(TSqlParser.TRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATASPACE() { return GetToken(TSqlParser.DATASPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINKED() { return GetToken(TSqlParser.LINKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASK() { return GetToken(TSqlParser.MASK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DDL() { return GetToken(TSqlParser.DDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHENTICATE() { return GetToken(TSqlParser.AUTHENTICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(TSqlParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPT() { return GetToken(TSqlParser.SCRIPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(TSqlParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURABLES() { return GetToken(TSqlParser.SECURABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIBE() { return GetToken(TSqlParser.SUBSCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFICATIONS() { return GetToken(TSqlParser.NOTIFICATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNERSHIP() { return GetToken(TSqlParser.OWNERSHIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMASK() { return GetToken(TSqlParser.UNMASK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(TSqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACKING() { return GetToken(TSqlParser.TRACKING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION() { return GetToken(TSqlParser.DEFINITION, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_permission(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(Context, State);
		EnterRule(_localctx, 714, RULE_grant_permission);
		int _la;
		try {
			State = 9119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADMINISTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8906;
				Match(ADMINISTER);
				State = 8912;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BULK:
					{
					State = 8907;
					Match(BULK);
					State = 8908;
					Match(OPERATIONS);
					}
					break;
				case DATABASE:
					{
					State = 8909;
					Match(DATABASE);
					State = 8910;
					Match(BULK);
					State = 8911;
					Match(OPERATIONS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8914;
				Match(ALTER);
				State = 8985;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ANY:
					{
					State = 8915;
					Match(ANY);
					State = 8978;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case APPLICATION:
						{
						State = 8916;
						Match(APPLICATION);
						State = 8917;
						Match(ROLE);
						}
						break;
					case ASSEMBLY:
						{
						State = 8918;
						Match(ASSEMBLY);
						}
						break;
					case ASYMMETRIC:
						{
						State = 8919;
						Match(ASYMMETRIC);
						State = 8920;
						Match(KEY);
						}
						break;
					case AVAILABILITY:
						{
						State = 8921;
						Match(AVAILABILITY);
						State = 8922;
						Match(GROUP);
						}
						break;
					case CERTIFICATE:
						{
						State = 8923;
						Match(CERTIFICATE);
						}
						break;
					case COLUMN:
						{
						State = 8924;
						Match(COLUMN);
						State = 8929;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ENCRYPTION:
							{
							State = 8925;
							Match(ENCRYPTION);
							State = 8926;
							Match(KEY);
							}
							break;
						case MASTER:
							{
							State = 8927;
							Match(MASTER);
							State = 8928;
							Match(KEY);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case CONNECTION:
						{
						State = 8931;
						Match(CONNECTION);
						}
						break;
					case CONTRACT:
						{
						State = 8932;
						Match(CONTRACT);
						}
						break;
					case CREDENTIAL:
						{
						State = 8933;
						Match(CREDENTIAL);
						}
						break;
					case DATABASE:
						{
						State = 8934;
						Match(DATABASE);
						State = 8942;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case AUDIT:
							{
							State = 8935;
							Match(AUDIT);
							}
							break;
						case DDL:
							{
							State = 8936;
							Match(DDL);
							State = 8937;
							Match(TRIGGER);
							}
							break;
						case EVENT:
							{
							State = 8938;
							Match(EVENT);
							State = 8939;
							_la = TokenStream.LA(1);
							if ( !(_la==NOTIFICATION || _la==SESSION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case SCOPED:
							{
							State = 8940;
							Match(SCOPED);
							State = 8941;
							Match(CONFIGURATION);
							}
							break;
						case ON:
						case TO:
						case LR_BRACKET:
							break;
						default:
							break;
						}
						}
						break;
					case DATASPACE:
						{
						State = 8944;
						Match(DATASPACE);
						}
						break;
					case ENDPOINT:
						{
						State = 8945;
						Match(ENDPOINT);
						}
						break;
					case EVENT:
						{
						State = 8946;
						Match(EVENT);
						State = 8947;
						_la = TokenStream.LA(1);
						if ( !(_la==NOTIFICATION || _la==SESSION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case EXTERNAL:
						{
						State = 8948;
						Match(EXTERNAL);
						State = 8954;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case DATA:
							{
							State = 8949;
							Match(DATA);
							State = 8950;
							Match(SOURCE);
							}
							break;
						case FILE:
							{
							State = 8951;
							Match(FILE);
							State = 8952;
							Match(FORMAT);
							}
							break;
						case LIBRARY:
							{
							State = 8953;
							Match(LIBRARY);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case FULLTEXT:
						{
						State = 8956;
						Match(FULLTEXT);
						State = 8957;
						Match(CATALOG);
						}
						break;
					case LINKED:
						{
						State = 8958;
						Match(LINKED);
						State = 8959;
						Match(SERVER);
						}
						break;
					case LOGIN:
						{
						State = 8960;
						Match(LOGIN);
						}
						break;
					case MASK:
						{
						State = 8961;
						Match(MASK);
						}
						break;
					case MESSAGE:
						{
						State = 8962;
						Match(MESSAGE);
						State = 8963;
						Match(TYPE);
						}
						break;
					case REMOTE:
						{
						State = 8964;
						Match(REMOTE);
						State = 8965;
						Match(SERVICE);
						State = 8966;
						Match(BINDING);
						}
						break;
					case ROLE:
						{
						State = 8967;
						Match(ROLE);
						}
						break;
					case ROUTE:
						{
						State = 8968;
						Match(ROUTE);
						}
						break;
					case SCHEMA:
						{
						State = 8969;
						Match(SCHEMA);
						}
						break;
					case SECURITY:
						{
						State = 8970;
						Match(SECURITY);
						State = 8971;
						Match(POLICY);
						}
						break;
					case SERVER:
						{
						State = 8972;
						Match(SERVER);
						State = 8973;
						_la = TokenStream.LA(1);
						if ( !(_la==AUDIT || _la==ROLE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case SERVICE:
						{
						State = 8974;
						Match(SERVICE);
						}
						break;
					case SYMMETRIC:
						{
						State = 8975;
						Match(SYMMETRIC);
						State = 8976;
						Match(KEY);
						}
						break;
					case USER:
						{
						State = 8977;
						Match(USER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case RESOURCES:
					{
					State = 8980;
					Match(RESOURCES);
					}
					break;
				case SERVER:
					{
					State = 8981;
					Match(SERVER);
					State = 8982;
					Match(STATE);
					}
					break;
				case SETTINGS:
					{
					State = 8983;
					Match(SETTINGS);
					}
					break;
				case TRACE:
					{
					State = 8984;
					Match(TRACE);
					}
					break;
				case ON:
				case TO:
				case LR_BRACKET:
					break;
				default:
					break;
				}
				}
				break;
			case AUTHENTICATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8987;
				Match(AUTHENTICATE);
				State = 8989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SERVER) {
					{
					State = 8988;
					Match(SERVER);
					}
				}

				}
				break;
			case BACKUP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8991;
				Match(BACKUP);
				State = 8992;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==LOG) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CHECKPOINT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8993;
				Match(CHECKPOINT);
				}
				break;
			case CONNECT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8994;
				Match(CONNECT);
				State = 8999;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ANY:
					{
					State = 8995;
					Match(ANY);
					State = 8996;
					Match(DATABASE);
					}
					break;
				case REPLICATION:
					{
					State = 8997;
					Match(REPLICATION);
					}
					break;
				case SQL:
					{
					State = 8998;
					Match(SQL);
					}
					break;
				case ON:
				case TO:
				case LR_BRACKET:
					break;
				default:
					break;
				}
				}
				break;
			case CONTROL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9001;
				Match(CONTROL);
				State = 9003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SERVER) {
					{
					State = 9002;
					Match(SERVER);
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9005;
				Match(CREATE);
				State = 9059;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AGGREGATE:
					{
					State = 9006;
					Match(AGGREGATE);
					}
					break;
				case ANY:
					{
					State = 9007;
					Match(ANY);
					State = 9008;
					Match(DATABASE);
					}
					break;
				case ASSEMBLY:
					{
					State = 9009;
					Match(ASSEMBLY);
					}
					break;
				case ASYMMETRIC:
					{
					State = 9010;
					Match(ASYMMETRIC);
					State = 9011;
					Match(KEY);
					}
					break;
				case AVAILABILITY:
					{
					State = 9012;
					Match(AVAILABILITY);
					State = 9013;
					Match(GROUP);
					}
					break;
				case CERTIFICATE:
					{
					State = 9014;
					Match(CERTIFICATE);
					}
					break;
				case CONTRACT:
					{
					State = 9015;
					Match(CONTRACT);
					}
					break;
				case DATABASE:
					{
					State = 9016;
					Match(DATABASE);
					State = 9020;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DDL) {
						{
						State = 9017;
						Match(DDL);
						State = 9018;
						Match(EVENT);
						State = 9019;
						Match(NOTIFICATION);
						}
					}

					}
					break;
				case DDL:
					{
					State = 9022;
					Match(DDL);
					State = 9023;
					Match(EVENT);
					State = 9024;
					Match(NOTIFICATION);
					}
					break;
				case DEFAULT:
					{
					State = 9025;
					Match(DEFAULT);
					}
					break;
				case ENDPOINT:
					{
					State = 9026;
					Match(ENDPOINT);
					}
					break;
				case EXTERNAL:
					{
					State = 9027;
					Match(EXTERNAL);
					State = 9028;
					Match(LIBRARY);
					}
					break;
				case FULLTEXT:
					{
					State = 9029;
					Match(FULLTEXT);
					State = 9030;
					Match(CATALOG);
					}
					break;
				case FUNCTION:
					{
					State = 9031;
					Match(FUNCTION);
					}
					break;
				case MESSAGE:
					{
					State = 9032;
					Match(MESSAGE);
					State = 9033;
					Match(TYPE);
					}
					break;
				case PROCEDURE:
					{
					State = 9034;
					Match(PROCEDURE);
					}
					break;
				case QUEUE:
					{
					State = 9035;
					Match(QUEUE);
					}
					break;
				case REMOTE:
					{
					State = 9036;
					Match(REMOTE);
					State = 9037;
					Match(SERVICE);
					State = 9038;
					Match(BINDING);
					}
					break;
				case ROLE:
					{
					State = 9039;
					Match(ROLE);
					}
					break;
				case ROUTE:
					{
					State = 9040;
					Match(ROUTE);
					}
					break;
				case RULE:
					{
					State = 9041;
					Match(RULE);
					}
					break;
				case SCHEMA:
					{
					State = 9042;
					Match(SCHEMA);
					}
					break;
				case SEQUENCE:
					{
					State = 9043;
					Match(SEQUENCE);
					}
					break;
				case SERVER:
					{
					State = 9044;
					Match(SERVER);
					State = 9045;
					Match(ROLE);
					}
					break;
				case SERVICE:
					{
					State = 9046;
					Match(SERVICE);
					}
					break;
				case SYMMETRIC:
					{
					State = 9047;
					Match(SYMMETRIC);
					State = 9048;
					Match(KEY);
					}
					break;
				case SYNONYM:
					{
					State = 9049;
					Match(SYNONYM);
					}
					break;
				case TABLE:
					{
					State = 9050;
					Match(TABLE);
					}
					break;
				case TRACE:
					{
					State = 9051;
					Match(TRACE);
					State = 9052;
					Match(EVENT);
					State = 9053;
					Match(NOTIFICATION);
					}
					break;
				case TYPE:
					{
					State = 9054;
					Match(TYPE);
					}
					break;
				case VIEW:
					{
					State = 9055;
					Match(VIEW);
					}
					break;
				case XML:
					{
					State = 9056;
					Match(XML);
					State = 9057;
					Match(SCHEMA);
					State = 9058;
					Match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9061;
				Match(DELETE);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9062;
				Match(EXECUTE);
				State = 9066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 9063;
					Match(ANY);
					State = 9064;
					Match(EXTERNAL);
					State = 9065;
					Match(SCRIPT);
					}
				}

				}
				break;
			case EXTERNAL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9068;
				Match(EXTERNAL);
				State = 9069;
				Match(ACCESS);
				State = 9070;
				Match(ASSEMBLY);
				}
				break;
			case IMPERSONATE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9071;
				Match(IMPERSONATE);
				State = 9074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 9072;
					Match(ANY);
					State = 9073;
					Match(LOGIN);
					}
				}

				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9076;
				Match(INSERT);
				}
				break;
			case KILL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9077;
				Match(KILL);
				State = 9078;
				Match(DATABASE);
				State = 9079;
				Match(CONNECTION);
				}
				break;
			case RECEIVE:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9080;
				Match(RECEIVE);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9081;
				Match(REFERENCES);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9082;
				Match(SELECT);
				State = 9086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 9083;
					Match(ALL);
					State = 9084;
					Match(USER);
					State = 9085;
					Match(SECURABLES);
					}
				}

				}
				break;
			case SEND:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9088;
				Match(SEND);
				}
				break;
			case SHOWPLAN:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9089;
				Match(SHOWPLAN);
				}
				break;
			case SHUTDOWN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9090;
				Match(SHUTDOWN);
				}
				break;
			case SUBSCRIBE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9091;
				Match(SUBSCRIBE);
				State = 9092;
				Match(QUERY);
				State = 9093;
				Match(NOTIFICATIONS);
				}
				break;
			case TAKE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9094;
				Match(TAKE);
				State = 9095;
				Match(OWNERSHIP);
				}
				break;
			case UNMASK:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9096;
				Match(UNMASK);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9097;
				Match(UNSAFE);
				State = 9098;
				Match(ASSEMBLY);
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9099;
				Match(UPDATE);
				}
				break;
			case VIEW:
				EnterOuterAlt(_localctx, 26);
				{
				State = 9100;
				Match(VIEW);
				State = 9117;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ANY:
					{
					State = 9101;
					Match(ANY);
					State = 9108;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DATABASE:
						{
						State = 9102;
						Match(DATABASE);
						}
						break;
					case DEFINITION:
						{
						State = 9103;
						Match(DEFINITION);
						}
						break;
					case COLUMN:
						{
						State = 9104;
						Match(COLUMN);
						State = 9105;
						_la = TokenStream.LA(1);
						if ( !(_la==ENCRYPTION || _la==MASTER) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9106;
						Match(KEY);
						State = 9107;
						Match(DEFINITION);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case CHANGE:
					{
					State = 9110;
					Match(CHANGE);
					State = 9111;
					Match(TRACKING);
					}
					break;
				case DATABASE:
					{
					State = 9112;
					Match(DATABASE);
					State = 9113;
					Match(STATE);
					}
					break;
				case DEFINITION:
					{
					State = 9114;
					Match(DEFINITION);
					}
					break;
				case SERVER:
					{
					State = 9115;
					Match(SERVER);
					State = 9116;
					Match(STATE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public Id_Context member_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 716, RULE_set_statement);
		int _la;
		try {
			State = 9160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9121;
				Match(SET);
				State = 9122;
				Match(LOCAL_ID);
				State = 9125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 9123;
					Match(DOT);
					State = 9124;
					_localctx.member_name = id_();
					}
				}

				State = 9127;
				Match(EQUAL);
				State = 9128;
				expression(0);
				State = 9130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1249,Context) ) {
				case 1:
					{
					State = 9129;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9132;
				Match(SET);
				State = 9133;
				Match(LOCAL_ID);
				State = 9134;
				assignment_operator();
				State = 9135;
				expression(0);
				State = 9137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1250,Context) ) {
				case 1:
					{
					State = 9136;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9139;
				Match(SET);
				State = 9140;
				Match(LOCAL_ID);
				State = 9141;
				Match(EQUAL);
				State = 9142;
				Match(CURSOR);
				State = 9143;
				declare_set_cursor_common();
				State = 9154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 9144;
					Match(FOR);
					State = 9152;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case READ:
						{
						State = 9145;
						Match(READ);
						State = 9146;
						Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 9147;
						Match(UPDATE);
						State = 9150;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OF) {
							{
							State = 9148;
							Match(OF);
							State = 9149;
							column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 9157;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1254,Context) ) {
				case 1:
					{
					State = 9156;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9159;
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTRIBUTED() { return GetToken(TSqlParser.DISTRIBUTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAN() { return GetToken(TSqlParser.TRAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(TSqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(Context, State);
		EnterRule(_localctx, 718, RULE_transaction_statement);
		int _la;
		try {
			State = 9243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9162;
				Match(BEGIN);
				State = 9163;
				Match(DISTRIBUTED);
				State = 9164;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1256,Context) ) {
				case 1:
					{
					State = 9165;
					id_();
					}
					break;
				case 2:
					{
					State = 9166;
					Match(LOCAL_ID);
					}
					break;
				}
				State = 9170;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1257,Context) ) {
				case 1:
					{
					State = 9169;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9172;
				Match(BEGIN);
				State = 9173;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1260,Context) ) {
				case 1:
					{
					State = 9176;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ADD:
					case FILLFACTOR:
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DISTRIBUTION:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REPLICATE:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case ROUND_ROBIN:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 9174;
						id_();
						}
						break;
					case LOCAL_ID:
						{
						State = 9175;
						Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9181;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1259,Context) ) {
					case 1:
						{
						State = 9178;
						Match(WITH);
						State = 9179;
						Match(MARK);
						State = 9180;
						Match(STRING);
						}
						break;
					}
					}
					break;
				}
				State = 9186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1261,Context) ) {
				case 1:
					{
					State = 9185;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9188;
				Match(COMMIT);
				State = 9189;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1264,Context) ) {
				case 1:
					{
					State = 9192;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ADD:
					case FILLFACTOR:
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DISTRIBUTION:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REPLICATE:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case ROUND_ROBIN:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 9190;
						id_();
						}
						break;
					case LOCAL_ID:
						{
						State = 9191;
						Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9200;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1263,Context) ) {
					case 1:
						{
						State = 9194;
						Match(WITH);
						State = 9195;
						Match(LR_BRACKET);
						State = 9196;
						Match(DELAYED_DURABILITY);
						State = 9197;
						Match(EQUAL);
						State = 9198;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9199;
						Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 9205;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1265,Context) ) {
				case 1:
					{
					State = 9204;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9207;
				Match(COMMIT);
				State = 9209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1266,Context) ) {
				case 1:
					{
					State = 9208;
					Match(WORK);
					}
					break;
				}
				State = 9212;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1267,Context) ) {
				case 1:
					{
					State = 9211;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9214;
				Match(COMMIT);
				State = 9215;
				id_();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9216;
				Match(ROLLBACK);
				State = 9217;
				id_();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9218;
				Match(ROLLBACK);
				State = 9219;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1268,Context) ) {
				case 1:
					{
					State = 9220;
					id_();
					}
					break;
				case 2:
					{
					State = 9221;
					Match(LOCAL_ID);
					}
					break;
				}
				State = 9225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1269,Context) ) {
				case 1:
					{
					State = 9224;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9227;
				Match(ROLLBACK);
				State = 9229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1270,Context) ) {
				case 1:
					{
					State = 9228;
					Match(WORK);
					}
					break;
				}
				State = 9232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1271,Context) ) {
				case 1:
					{
					State = 9231;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9234;
				Match(SAVE);
				State = 9235;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9238;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1272,Context) ) {
				case 1:
					{
					State = 9236;
					id_();
					}
					break;
				case 2:
					{
					State = 9237;
					Match(LOCAL_ID);
					}
					break;
				}
				State = 9241;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1273,Context) ) {
				case 1:
					{
					State = 9240;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_batch_statementContext : ParserRuleContext {
		public IToken count;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO_BATCH() { return GetToken(TSqlParser.GO_BATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_batch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_batch_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_batch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_batch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo_batch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Go_batch_statementContext go_batch_statement() {
		Go_batch_statementContext _localctx = new Go_batch_statementContext(Context, State);
		EnterRule(_localctx, 720, RULE_go_batch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9245;
			Match(GO_BATCH);
			State = 9247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECIMAL) {
				{
				State = 9246;
				_localctx.count = Match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(Context, State);
		EnterRule(_localctx, 722, RULE_go_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9249;
			Match(GO);
			State = 9251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECIMAL) {
				{
				State = 9250;
				_localctx.count = Match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public Id_Context database;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(Context, State);
		EnterRule(_localctx, 724, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9253;
			Match(USE);
			State = 9254;
			_localctx.database = id_();
			State = 9256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1277,Context) ) {
			case 1:
				{
				State = 9255;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setuser_statementContext : ParserRuleContext {
		public IToken user;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUSER() { return GetToken(TSqlParser.SETUSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setuser_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSetuser_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSetuser_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetuser_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Setuser_statementContext setuser_statement() {
		Setuser_statementContext _localctx = new Setuser_statementContext(Context, State);
		EnterRule(_localctx, 726, RULE_setuser_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9258;
			Match(SETUSER);
			State = 9260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 9259;
				_localctx.user = Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reconfigure_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reconfigure_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReconfigure_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReconfigure_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReconfigure_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reconfigure_statementContext reconfigure_statement() {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(Context, State);
		EnterRule(_localctx, 728, RULE_reconfigure_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9262;
			Match(RECONFIGURE);
			State = 9265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1279,Context) ) {
			case 1:
				{
				State = 9263;
				Match(WITH);
				State = 9264;
				Match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shutdown_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdown_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterShutdown_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitShutdown_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShutdown_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shutdown_statementContext shutdown_statement() {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(Context, State);
		EnterRule(_localctx, 730, RULE_shutdown_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9267;
			Match(SHUTDOWN);
			State = 9270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1280,Context) ) {
			case 1:
				{
				State = 9268;
				Match(WITH);
				State = 9269;
				Match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checkpoint_statementContext : ParserRuleContext {
		public IToken checkPointDuration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Checkpoint_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpoint_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCheckpoint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCheckpoint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckpoint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Checkpoint_statementContext checkpoint_statement() {
		Checkpoint_statementContext _localctx = new Checkpoint_statementContext(Context, State);
		EnterRule(_localctx, 732, RULE_checkpoint_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9272;
			Match(CHECKPOINT);
			State = 9274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECIMAL) {
				{
				State = 9273;
				_localctx.checkPointDuration = Match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_specialContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHRINKLOG() { return GetToken(TSqlParser.SHRINKLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Dbcc_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_special; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_special(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_special(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_specialContext dbcc_special() {
		Dbcc_specialContext _localctx = new Dbcc_specialContext(Context, State);
		EnterRule(_localctx, 734, RULE_dbcc_special);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9276;
			Match(DBCC);
			State = 9277;
			Match(SHRINKLOG);
			State = 9287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1283,Context) ) {
			case 1:
				{
				State = 9278;
				Match(LR_BRACKET);
				State = 9279;
				Match(SIZE);
				State = 9280;
				Match(EQUAL);
				State = 9284;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1282,Context) ) {
				case 1:
					{
					State = 9281;
					constant_expression();
					}
					break;
				case 2:
					{
					State = 9282;
					id_();
					}
					break;
				case 3:
					{
					State = 9283;
					Match(DEFAULT);
					}
					break;
				}
				State = 9286;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 9290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1284,Context) ) {
			case 1:
				{
				State = 9289;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clauseContext : ParserRuleContext {
		public Dbcc_commandContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dbcc_commandContext dbcc_command() {
			return GetRuleContext<Dbcc_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dbcc_optionsContext dbcc_options() {
			return GetRuleContext<Dbcc_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clauseContext dbcc_clause() {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(Context, State);
		EnterRule(_localctx, 736, RULE_dbcc_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9292;
			Match(DBCC);
			State = 9293;
			_localctx.name = dbcc_command();
			State = 9298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1285,Context) ) {
			case 1:
				{
				State = 9294;
				Match(LR_BRACKET);
				State = 9295;
				expression_list();
				State = 9296;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 9302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1286,Context) ) {
			case 1:
				{
				State = 9300;
				Match(WITH);
				State = 9301;
				dbcc_options();
				}
				break;
			}
			State = 9305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1287,Context) ) {
			case 1:
				{
				State = 9304;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Dbcc_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_commandContext dbcc_command() {
		Dbcc_commandContext _localctx = new Dbcc_commandContext(Context, State);
		EnterRule(_localctx, 738, RULE_dbcc_command);
		try {
			State = 9309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9307;
				simple_id();
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9308;
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_optionsContext dbcc_options() {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(Context, State);
		EnterRule(_localctx, 740, RULE_dbcc_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9311;
			simple_id();
			State = 9314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 9312;
				Match(COMMA);
				State = 9313;
				simple_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(Context, State);
		EnterRule(_localctx, 742, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9316;
			Match(EXECUTE);
			State = 9317;
			Match(AS);
			State = 9318;
			_localctx.clause = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_local(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(Context, State);
		EnterRule(_localctx, 744, RULE_declare_local);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9320;
			Match(LOCAL_ID);
			State = 9322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 9321;
				Match(AS);
				}
			}

			State = 9324;
			data_type();
			State = 9327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 9325;
				Match(EQUAL);
				State = 9326;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_type_indicesContext[] table_type_indices() {
			return GetRuleContexts<Table_type_indicesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_type_indicesContext table_type_indices(int i) {
			return GetRuleContext<Table_type_indicesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(Context, State);
		EnterRule(_localctx, 746, RULE_table_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9329;
			Match(TABLE);
			State = 9330;
			Match(LR_BRACKET);
			State = 9331;
			column_def_table_constraints();
			State = 9338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CHECK || _la==INDEX || _la==PRIMARY || _la==UNIQUE || _la==COMMA) {
				{
				{
				State = 9333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9332;
					Match(COMMA);
					}
				}

				State = 9335;
				table_type_indices();
				}
				}
				State = 9340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9341;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_indicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Table_type_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_indices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_indices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_indices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_indices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_indicesContext table_type_indices() {
		Table_type_indicesContext _localctx = new Table_type_indicesContext(Context, State);
		EnterRule(_localctx, 748, RULE_table_type_indices);
		int _la;
		try {
			State = 9364;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX:
			case PRIMARY:
			case UNIQUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9353;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INDEX:
				case PRIMARY:
					{
					{
					State = 9347;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY:
						{
						State = 9343;
						Match(PRIMARY);
						State = 9344;
						Match(KEY);
						}
						break;
					case INDEX:
						{
						State = 9345;
						Match(INDEX);
						State = 9346;
						id_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 9349;
						_la = TokenStream.LA(1);
						if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					}
					break;
				case UNIQUE:
					{
					State = 9352;
					Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9355;
				Match(LR_BRACKET);
				State = 9356;
				column_name_list_with_order();
				State = 9357;
				Match(RR_BRACKET);
				}
				break;
			case CHECK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9359;
				Match(CHECK);
				State = 9360;
				Match(LR_BRACKET);
				State = 9361;
				search_condition(0);
				State = 9362;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_schema_collectionContext xml_schema_collection() {
			return GetRuleContext<Xml_schema_collectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_type_definitionContext xml_type_definition() {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(Context, State);
		EnterRule(_localctx, 750, RULE_xml_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9366;
			Match(XML);
			State = 9367;
			Match(LR_BRACKET);
			State = 9369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				State = 9368;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 9371;
			xml_schema_collection();
			State = 9372;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_schema_collectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_schema_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_schema_collection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_schema_collection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_schema_collectionContext xml_schema_collection() {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(Context, State);
		EnterRule(_localctx, 752, RULE_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9374;
			Match(ID);
			State = 9375;
			Match(DOT);
			State = 9376;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(Context, State);
		EnterRule(_localctx, 754, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9378;
			column_def_table_constraint();
			State = 9385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1300,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 9379;
						Match(COMMA);
						}
					}

					State = 9382;
					column_def_table_constraint();
					}
					} 
				}
				State = 9387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1300,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Materialized_column_definitionContext materialized_column_definition() {
			return GetRuleContext<Materialized_column_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(Context, State);
		EnterRule(_localctx, 756, RULE_column_def_table_constraint);
		try {
			State = 9391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1301,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9388;
				column_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9389;
				materialized_column_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9390;
				table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Id_Context constraint;
		public IToken seed;
		public IToken increment;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_or_defaultContext[] null_or_default() {
			return GetRuleContexts<Null_or_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_or_defaultContext null_or_default(int i) {
			return GetRuleContext<Null_or_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 758, RULE_column_definition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9393;
			id_();
			State = 9400;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case DOUBLE:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 9394;
				data_type();
				}
				break;
			case AS:
				{
				State = 9395;
				Match(AS);
				State = 9396;
				expression(0);
				State = 9398;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1302,Context) ) {
				case 1:
					{
					State = 9397;
					Match(PERSISTED);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 9402;
				Match(COLLATE);
				State = 9403;
				id_();
				}
			}

			State = 9407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1305,Context) ) {
			case 1:
				{
				State = 9406;
				null_notnull();
				}
				break;
			}
			State = 9430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1310,Context) ) {
			case 1:
				{
				State = 9411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 9409;
					Match(CONSTRAINT);
					State = 9410;
					_localctx.constraint = id_();
					}
				}

				State = 9413;
				null_or_default();
				State = 9415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1307,Context) ) {
				case 1:
					{
					State = 9414;
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 9417;
				Match(IDENTITY);
				State = 9423;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1308,Context) ) {
				case 1:
					{
					State = 9418;
					Match(LR_BRACKET);
					State = 9419;
					_localctx.seed = Match(DECIMAL);
					State = 9420;
					Match(COMMA);
					State = 9421;
					_localctx.increment = Match(DECIMAL);
					State = 9422;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 9428;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1309,Context) ) {
				case 1:
					{
					State = 9425;
					Match(NOT);
					State = 9426;
					Match(FOR);
					State = 9427;
					Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 9433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				State = 9432;
				Match(ROWGUIDCOL);
				}
			}

			State = 9438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1312,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9435;
					column_constraint();
					}
					} 
				}
				State = 9440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1312,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Materialized_column_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialized_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMaterialized_column_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMaterialized_column_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialized_column_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Materialized_column_definitionContext materialized_column_definition() {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(Context, State);
		EnterRule(_localctx, 760, RULE_materialized_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9441;
			id_();
			State = 9442;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 9443;
			expression(0);
			State = 9447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1313,Context) ) {
			case 1:
				{
				State = 9444;
				Match(MATERIALIZED);
				}
				break;
			case 2:
				{
				State = 9445;
				Match(NOT);
				State = 9446;
				Match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext pk;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 762, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 9449;
				Match(CONSTRAINT);
				State = 9450;
				_localctx.constraint = id_();
				}
			}

			State = 9490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 9456;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 9453;
					Match(PRIMARY);
					State = 9454;
					Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 9455;
					Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 9458;
					clustered();
					}
				}

				State = 9462;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1317,Context) ) {
				case 1:
					{
					State = 9461;
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				State = 9464;
				Match(CHECK);
				State = 9468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9465;
					Match(NOT);
					State = 9466;
					Match(FOR);
					State = 9467;
					Match(REPLICATION);
					}
				}

				State = 9470;
				Match(LR_BRACKET);
				State = 9471;
				search_condition(0);
				State = 9472;
				Match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				State = 9476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOREIGN) {
					{
					State = 9474;
					Match(FOREIGN);
					State = 9475;
					Match(KEY);
					}
				}

				State = 9478;
				Match(REFERENCES);
				State = 9479;
				table_name();
				State = 9480;
				Match(LR_BRACKET);
				State = 9481;
				_localctx.pk = column_name_list();
				State = 9482;
				Match(RR_BRACKET);
				State = 9484;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1320,Context) ) {
				case 1:
					{
					State = 9483;
					on_delete();
					}
					break;
				}
				State = 9487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 9486;
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL_:
				{
				State = 9489;
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(TSqlParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(TSqlParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 764, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 9492;
				Match(CONSTRAINT);
				State = 9493;
				_localctx.constraint = id_();
				}
			}

			State = 9566;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 9499;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 9496;
					Match(PRIMARY);
					State = 9497;
					Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 9498;
					Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 9501;
					clustered();
					}
				}

				State = 9504;
				Match(LR_BRACKET);
				State = 9505;
				column_name_list_with_order();
				State = 9506;
				Match(RR_BRACKET);
				State = 9508;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1326,Context) ) {
				case 1:
					{
					State = 9507;
					index_options();
					}
					break;
				}
				State = 9512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 9510;
					Match(ON);
					State = 9511;
					id_();
					}
				}

				}
				break;
			case CHECK:
				{
				State = 9514;
				Match(CHECK);
				State = 9518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9515;
					Match(NOT);
					State = 9516;
					Match(FOR);
					State = 9517;
					Match(REPLICATION);
					}
				}

				State = 9520;
				Match(LR_BRACKET);
				State = 9521;
				search_condition(0);
				State = 9522;
				Match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				State = 9524;
				Match(DEFAULT);
				State = 9526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1329,Context) ) {
				case 1:
					{
					State = 9525;
					Match(LR_BRACKET);
					}
					break;
				}
				State = 9540;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1332,Context) ) {
				case 1:
					{
					State = 9532;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						State = 9532;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
							{
							State = 9528;
							Match(STRING);
							}
							break;
						case PLUS:
							{
							State = 9529;
							Match(PLUS);
							}
							break;
						case ADD:
						case COALESCE:
						case CONTAINSTABLE:
						case CONVERT:
						case CURRENT_TIMESTAMP:
						case CURRENT_USER:
						case FILLFACTOR:
						case FREETEXTTABLE:
						case IDENTITY:
						case LEFT:
						case NULLIF:
						case OPENJSON:
						case PRECISION:
						case RIGHT:
						case SEMANTICKEYPHRASETABLE:
						case SEMANTICSIMILARITYDETAILSTABLE:
						case SEMANTICSIMILARITYTABLE:
						case SESSION_USER:
						case SYSTEM_USER:
						case USER:
						case DOLLAR_PARTITION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DISTRIBUTION:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REPLICATE:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case ROUND_ROBIN:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case LOCAL_ID:
						case ID:
						case DOT:
						case LR_BRACKET:
							{
							State = 9530;
							function_call();
							}
							break;
						case DECIMAL:
							{
							State = 9531;
							Match(DECIMAL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						State = 9534;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3320043274244L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144256200576344081L) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & -2392468582294015L) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & -282574489911297L) != 0) || ((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & -65537L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & -4611694818815377409L) != 0) || ((((_la - 465)) & ~0x3f) == 0 && ((1L << (_la - 465)) & -137438953473L) != 0) || ((((_la - 529)) & ~0x3f) == 0 && ((1L << (_la - 529)) & -70368744185857L) != 0) || ((((_la - 593)) & ~0x3f) == 0 && ((1L << (_la - 593)) & -145242599811219459L) != 0) || ((((_la - 657)) & ~0x3f) == 0 && ((1L << (_la - 657)) & -1125899919426305L) != 0) || ((((_la - 721)) & ~0x3f) == 0 && ((1L << (_la - 721)) & -1099511644291L) != 0) || ((((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & -2450107731957317633L) != 0) || ((((_la - 853)) & ~0x3f) == 0 && ((1L << (_la - 853)) & 137715777661L) != 0) );
					}
					break;
				case 2:
					{
					State = 9536;
					Match(NEXT);
					State = 9537;
					Match(VALUE);
					State = 9538;
					Match(FOR);
					State = 9539;
					table_name();
					}
					break;
				}
				State = 9543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RR_BRACKET) {
					{
					State = 9542;
					Match(RR_BRACKET);
					}
				}

				State = 9545;
				Match(FOR);
				State = 9546;
				id_();
				}
				break;
			case FOREIGN:
				{
				State = 9547;
				Match(FOREIGN);
				State = 9548;
				Match(KEY);
				State = 9549;
				Match(LR_BRACKET);
				State = 9550;
				_localctx.fk = column_name_list();
				State = 9551;
				Match(RR_BRACKET);
				State = 9552;
				Match(REFERENCES);
				State = 9553;
				table_name();
				State = 9558;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1334,Context) ) {
				case 1:
					{
					State = 9554;
					Match(LR_BRACKET);
					State = 9555;
					_localctx.pk = column_name_list();
					State = 9556;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 9561;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1335,Context) ) {
				case 1:
					{
					State = 9560;
					on_delete();
					}
					break;
				}
				State = 9564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 9563;
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_deleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_delete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_delete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_delete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_deleteContext on_delete() {
		On_deleteContext _localctx = new On_deleteContext(Context, State);
		EnterRule(_localctx, 766, RULE_on_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9568;
			Match(ON);
			State = 9569;
			Match(DELETE);
			State = 9577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1338,Context) ) {
			case 1:
				{
				State = 9570;
				Match(NO);
				State = 9571;
				Match(ACTION);
				}
				break;
			case 2:
				{
				State = 9572;
				Match(CASCADE);
				}
				break;
			case 3:
				{
				State = 9573;
				Match(SET);
				State = 9574;
				Match(NULL_);
				}
				break;
			case 4:
				{
				State = 9575;
				Match(SET);
				State = 9576;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_updateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_update; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_update(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_update(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_update(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_updateContext on_update() {
		On_updateContext _localctx = new On_updateContext(Context, State);
		EnterRule(_localctx, 768, RULE_on_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9579;
			Match(ON);
			State = 9580;
			Match(UPDATE);
			State = 9588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1339,Context) ) {
			case 1:
				{
				State = 9581;
				Match(NO);
				State = 9582;
				Match(ACTION);
				}
				break;
			case 2:
				{
				State = 9583;
				Match(CASCADE);
				}
				break;
			case 3:
				{
				State = 9584;
				Match(SET);
				State = 9585;
				Match(NULL_);
				}
				break;
			case 4:
				{
				State = 9586;
				Match(SET);
				State = 9587;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(Context, State);
		EnterRule(_localctx, 770, RULE_index_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9590;
			Match(WITH);
			State = 9591;
			Match(LR_BRACKET);
			State = 9592;
			index_option();
			State = 9597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9593;
				Match(COMMA);
				State = 9594;
				index_option();
				}
				}
				State = 9599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9600;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEAP() { return GetToken(TSqlParser.HEAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(Context, State);
		EnterRule(_localctx, 772, RULE_index_option);
		int _la;
		try {
			State = 9643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1346,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9604;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 9602;
					simple_id();
					}
					break;
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
					{
					State = 9603;
					keyword();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9606;
				Match(EQUAL);
				State = 9611;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 9607;
					simple_id();
					}
					break;
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
					{
					State = 9608;
					keyword();
					}
					break;
				case OFF:
				case ON:
					{
					State = 9609;
					on_off();
					}
					break;
				case DECIMAL:
					{
					State = 9610;
					Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9613;
				Match(CLUSTERED);
				State = 9614;
				Match(COLUMNSTORE);
				State = 9615;
				Match(INDEX);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9616;
				Match(HEAP);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9617;
				Match(DISTRIBUTION);
				State = 9618;
				Match(EQUAL);
				State = 9619;
				Match(HASH);
				State = 9620;
				Match(LR_BRACKET);
				State = 9621;
				id_();
				State = 9622;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9624;
				Match(CLUSTERED);
				State = 9625;
				Match(INDEX);
				State = 9626;
				Match(LR_BRACKET);
				State = 9627;
				id_();
				State = 9629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 9628;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 9638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 9631;
					Match(COMMA);
					State = 9632;
					id_();
					State = 9634;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ASC || _la==DESC) {
						{
						State = 9633;
						_la = TokenStream.LA(1);
						if ( !(_la==ASC || _la==DESC) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					}
					State = 9640;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 9641;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(Context, State);
		EnterRule(_localctx, 774, RULE_declare_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9645;
			Match(DECLARE);
			State = 9646;
			cursor_name();
			State = 9678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1354,Context) ) {
			case 1:
				{
				State = 9647;
				Match(CURSOR);
				State = 9657;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1349,Context) ) {
				case 1:
					{
					State = 9648;
					declare_set_cursor_common();
					State = 9655;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR) {
						{
						State = 9649;
						Match(FOR);
						State = 9650;
						Match(UPDATE);
						State = 9653;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OF) {
							{
							State = 9651;
							Match(OF);
							State = 9652;
							column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 9660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INSENSITIVE || _la==SEMI_SENSITIVE) {
					{
					State = 9659;
					_la = TokenStream.LA(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 9663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SCROLL) {
					{
					State = 9662;
					Match(SCROLL);
					}
				}

				State = 9665;
				Match(CURSOR);
				State = 9666;
				Match(FOR);
				State = 9667;
				select_statement_standalone();
				State = 9676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 9668;
					Match(FOR);
					State = 9674;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case READ:
						{
						State = 9669;
						Match(READ);
						State = 9670;
						Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 9671;
						Match(UPDATE);
						}
						break;
					case OF:
						{
						{
						State = 9672;
						Match(OF);
						State = 9673;
						column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			State = 9681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1355,Context) ) {
			case 1:
				{
				State = 9680;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_set_cursor_common_partialContext[] declare_set_cursor_common_partial() {
			return GetRuleContexts<Declare_set_cursor_common_partialContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return GetRuleContext<Declare_set_cursor_common_partialContext>(i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(Context, State);
		EnterRule(_localctx, 776, RULE_declare_set_cursor_common);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & 2233385091073L) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & 2147483651L) != 0) || _la==TYPE_WARNING) {
				{
				{
				State = 9683;
				declare_set_cursor_common_partial();
				}
				}
				State = 9688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9689;
			Match(FOR);
			State = 9690;
			select_statement_standalone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_common_partialContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common_partial; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common_partial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common_partial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common_partial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(Context, State);
		EnterRule(_localctx, 778, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			State = 9697;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
			case LOCAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9692;
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9693;
				_la = TokenStream.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9694;
				_la = TokenStream.LA(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9695;
				_la = TokenStream.LA(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TYPE_WARNING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9696;
				Match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(Context, State);
		EnterRule(_localctx, 780, RULE_fetch_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9699;
			Match(FETCH);
			State = 9709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1359,Context) ) {
			case 1:
				{
				State = 9706;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEXT:
					{
					State = 9700;
					Match(NEXT);
					}
					break;
				case PRIOR:
					{
					State = 9701;
					Match(PRIOR);
					}
					break;
				case FIRST:
					{
					State = 9702;
					Match(FIRST);
					}
					break;
				case LAST:
					{
					State = 9703;
					Match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					State = 9704;
					_la = TokenStream.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 9705;
					expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				State = 9708;
				Match(FROM);
				}
				break;
			}
			State = 9712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1360,Context) ) {
			case 1:
				{
				State = 9711;
				Match(GLOBAL);
				}
				break;
			}
			State = 9714;
			cursor_name();
			State = 9724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 9715;
				Match(INTO);
				State = 9716;
				Match(LOCAL_ID);
				State = 9721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 9717;
					Match(COMMA);
					State = 9718;
					Match(LOCAL_ID);
					}
					}
					State = 9723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 9727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1363,Context) ) {
			case 1:
				{
				State = 9726;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_INSERT() { return GetToken(TSqlParser.IDENTITY_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_listContext[] special_list() {
			return GetRuleContexts<Special_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_listContext special_list(int i) {
			return GetRuleContext<Special_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(Context, State);
		EnterRule(_localctx, 782, RULE_set_special);
		int _la;
		try {
			State = 9790;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1372,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9729;
				Match(SET);
				State = 9730;
				id_();
				State = 9734;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 9731;
					id_();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 9732;
					constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					State = 9733;
					on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9737;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1365,Context) ) {
				case 1:
					{
					State = 9736;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9739;
				Match(SET);
				State = 9740;
				Match(STATISTICS);
				State = 9741;
				_la = TokenStream.LA(1);
				if ( !(_la==TIME || _la==XML || _la==IO || _la==PROFILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9742;
				on_off();
				State = 9744;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1366,Context) ) {
				case 1:
					{
					State = 9743;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9746;
				Match(SET);
				State = 9747;
				Match(ROWCOUNT);
				State = 9748;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9750;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1367,Context) ) {
				case 1:
					{
					State = 9749;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9752;
				Match(SET);
				State = 9753;
				Match(TRANSACTION);
				State = 9754;
				Match(ISOLATION);
				State = 9755;
				Match(LEVEL);
				State = 9765;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1368,Context) ) {
				case 1:
					{
					State = 9756;
					Match(READ);
					State = 9757;
					Match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					State = 9758;
					Match(READ);
					State = 9759;
					Match(COMMITTED);
					}
					break;
				case 3:
					{
					State = 9760;
					Match(REPEATABLE);
					State = 9761;
					Match(READ);
					}
					break;
				case 4:
					{
					State = 9762;
					Match(SNAPSHOT);
					}
					break;
				case 5:
					{
					State = 9763;
					Match(SERIALIZABLE);
					}
					break;
				case 6:
					{
					State = 9764;
					Match(DECIMAL);
					}
					break;
				}
				State = 9768;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1369,Context) ) {
				case 1:
					{
					State = 9767;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9770;
				Match(SET);
				State = 9771;
				Match(IDENTITY_INSERT);
				State = 9772;
				table_name();
				State = 9773;
				on_off();
				State = 9775;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1370,Context) ) {
				case 1:
					{
					State = 9774;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9777;
				Match(SET);
				State = 9778;
				special_list();
				State = 9783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 9779;
					Match(COMMA);
					State = 9780;
					special_list();
					}
					}
					State = 9785;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 9786;
				on_off();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9788;
				Match(SET);
				State = 9789;
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_DEFAULTS() { return GetToken(TSqlParser.ANSI_DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULL_DFLT_OFF() { return GetToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULL_DFLT_ON() { return GetToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHIGNORE() { return GetToken(TSqlParser.ARITHIGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FMTONLY() { return GetToken(TSqlParser.FMTONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCEPLAN() { return GetToken(TSqlParser.FORCEPLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_TRANSACTIONS() { return GetToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOEXEol() { return GetToken(TSqlParser.NOEXEol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSEONLY() { return GetToken(TSqlParser.PARSEONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_PROC_TRANSACTIONS() { return GetToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOWPLAN_ALL() { return GetToken(TSqlParser.SHOWPLAN_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOWPLAN_TEXT() { return GetToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOWPLAN_XML() { return GetToken(TSqlParser.SHOWPLAN_XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XACT_ABORT() { return GetToken(TSqlParser.XACT_ABORT, 0); }
		public Special_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSpecial_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSpecial_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecial_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Special_listContext special_list() {
		Special_listContext _localctx = new Special_listContext(Context, State);
		EnterRule(_localctx, 784, RULE_special_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9792;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & 4612248968380809255L) != 0) || ((((_la - 438)) & ~0x3f) == 0 && ((1L << (_la - 438)) & 9007199254743041L) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & -9007199254740991L) != 0) || _la==SHOWPLAN_TEXT || _la==SHOWPLAN_XML) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_LOCAL_ID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(Context, State);
		EnterRule(_localctx, 786, RULE_constant_LOCAL_ID);
		try {
			State = 9796;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9794;
				constant();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9795;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext bracket_expression() {
			return GetRuleContext<Bracket_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operator_expressionContext unary_operator_expression() {
			return GetRuleContext<Unary_operator_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_ACTION() { return GetToken(TSqlParser.DOLLAR_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(TSqlParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(TSqlParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(TSqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(TSqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(TSqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_BAR() { return GetToken(TSqlParser.DOUBLE_BAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Time_zoneContext time_zone() {
			return GetRuleContext<Time_zoneContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 788;
		EnterRecursionRule(_localctx, 788, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1374,Context) ) {
			case 1:
				{
				State = 9799;
				primitive_expression();
				}
				break;
			case 2:
				{
				State = 9800;
				function_call();
				}
				break;
			case 3:
				{
				State = 9801;
				case_expression();
				}
				break;
			case 4:
				{
				State = 9802;
				full_column_name();
				}
				break;
			case 5:
				{
				State = 9803;
				bracket_expression();
				}
				break;
			case 6:
				{
				State = 9804;
				unary_operator_expression();
				}
				break;
			case 7:
				{
				State = 9805;
				over_clause();
				}
				break;
			case 8:
				{
				State = 9806;
				Match(DOLLAR_ACTION);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9830;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1377,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9828;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1376,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9809;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 9810;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 887)) & ~0x3f) == 0 && ((1L << (_la - 887)) & 7L) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9811;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9812;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 9813;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 875)) & ~0x3f) == 0 && ((1L << (_la - 875)) & 1933313L) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9814;
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9815;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 9816;
						Match(DOT);
						State = 9821;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case VALUE:
							{
							State = 9817;
							value_call();
							}
							break;
						case QUERY:
							{
							State = 9818;
							query_call();
							}
							break;
						case EXIST:
							{
							State = 9819;
							exist_call();
							}
							break;
						case MODIFY:
							{
							State = 9820;
							modify_call();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9823;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 9824;
						Match(COLLATE);
						State = 9825;
						id_();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9826;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 9827;
						time_zone();
						}
						break;
					}
					} 
				}
				State = 9832;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1377,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Time_zoneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(TSqlParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_zone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime_zone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime_zone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_zone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_zoneContext time_zone() {
		Time_zoneContext _localctx = new Time_zoneContext(Context, State);
		EnterRule(_localctx, 790, RULE_time_zone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9833;
			Match(AT_KEYWORD);
			State = 9834;
			Match(TIME);
			State = 9835;
			Match(ZONE);
			State = 9836;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(Context, State);
		EnterRule(_localctx, 792, RULE_primitive_expression);
		try {
			State = 9842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9838;
				Match(DEFAULT);
				}
				break;
			case NULL_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9839;
				Match(NULL_);
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9840;
				Match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9841;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(TSqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(Context, State);
		EnterRule(_localctx, 794, RULE_case_expression);
		int _la;
		try {
			State = 9869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1383,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9844;
				Match(CASE);
				State = 9845;
				_localctx.caseExpr = expression(0);
				State = 9847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 9846;
					switch_section();
					}
					}
					State = 9849;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 9853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 9851;
					Match(ELSE);
					State = 9852;
					_localctx.elseExpr = expression(0);
					}
				}

				State = 9855;
				Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9857;
				Match(CASE);
				State = 9859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 9858;
					switch_search_condition_section();
					}
					}
					State = 9861;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 9865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 9863;
					Match(ELSE);
					State = 9864;
					_localctx.elseExpr = expression(0);
					}
				}

				State = 9867;
				Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_expressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(TSqlParser.BIT_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_expressionContext unary_operator_expression() {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(Context, State);
		EnterRule(_localctx, 796, RULE_unary_operator_expression);
		int _la;
		try {
			State = 9875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIT_NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9871;
				Match(BIT_NOT);
				State = 9872;
				expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9873;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9874;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 798, RULE_bracket_expression);
		try {
			State = 9885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1385,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9877;
				Match(LR_BRACKET);
				State = 9878;
				expression(0);
				State = 9879;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9881;
				Match(LR_BRACKET);
				State = 9882;
				subquery();
				State = 9883;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 800, RULE_constant_expression);
		try {
			State = 9895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1386,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9887;
				Match(NULL_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9888;
				constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9889;
				function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9890;
				Match(LOCAL_ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9891;
				Match(LR_BRACKET);
				State = 9892;
				constant_expression();
				State = 9893;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 802, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9897;
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public Common_table_expressionContext _common_table_expression;
		public IList<Common_table_expressionContext> _ctes = new List<Common_table_expressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(Context, State);
		EnterRule(_localctx, 804, RULE_with_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9899;
			Match(WITH);
			State = 9900;
			_localctx._common_table_expression = common_table_expression();
			_localctx._ctes.Add(_localctx._common_table_expression);
			State = 9905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9901;
				Match(COMMA);
				State = 9902;
				_localctx._common_table_expression = common_table_expression();
				_localctx._ctes.Add(_localctx._common_table_expression);
				}
				}
				State = 9907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Id_Context expression_name;
		public Column_name_listContext columns;
		public Select_statementContext cte_query;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 806, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9908;
			_localctx.expression_name = id_();
			State = 9913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 9909;
				Match(LR_BRACKET);
				State = 9910;
				_localctx.columns = column_name_list();
				State = 9911;
				Match(RR_BRACKET);
				}
			}

			State = 9915;
			Match(AS);
			State = 9916;
			Match(LR_BRACKET);
			State = 9917;
			_localctx.cte_query = select_statement();
			State = 9918;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(Context, State);
		EnterRule(_localctx, 808, RULE_update_elem);
		try {
			State = 9945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1392,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9920;
				Match(LOCAL_ID);
				State = 9921;
				Match(EQUAL);
				State = 9922;
				full_column_name();
				State = 9925;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQUAL:
					{
					State = 9923;
					Match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 9924;
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9927;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9931;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					State = 9929;
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					State = 9930;
					Match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9935;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQUAL:
					{
					State = 9933;
					Match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 9934;
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9937;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9938;
				_localctx.udt_column_name = id_();
				State = 9939;
				Match(DOT);
				State = 9940;
				_localctx.method_name = id_();
				State = 9941;
				Match(LR_BRACKET);
				State = 9942;
				expression_list();
				State = 9943;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elem_mergeContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elem_mergeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem_merge; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem_merge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem_merge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_elem_merge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_elem_mergeContext update_elem_merge() {
		Update_elem_mergeContext _localctx = new Update_elem_mergeContext(Context, State);
		EnterRule(_localctx, 810, RULE_update_elem_merge);
		try {
			State = 9963;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1395,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9949;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					State = 9947;
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					State = 9948;
					Match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9953;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQUAL:
					{
					State = 9951;
					Match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 9952;
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9955;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9956;
				_localctx.udt_column_name = id_();
				State = 9957;
				Match(DOT);
				State = 9958;
				_localctx.method_name = id_();
				State = 9959;
				Match(LR_BRACKET);
				State = 9960;
				expression_list();
				State = 9961;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Search_conditionContext _localctx = new Search_conditionContext(Context, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 812;
		EnterRecursionRule(_localctx, 812, RULE_search_condition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 9969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NOT) {
				{
				{
				State = 9966;
				Match(NOT);
				}
				}
				State = 9971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1397,Context) ) {
			case 1:
				{
				State = 9972;
				predicate();
				}
				break;
			case 2:
				{
				State = 9973;
				Match(LR_BRACKET);
				State = 9974;
				search_condition(0);
				State = 9975;
				Match(RR_BRACKET);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9987;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1399,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9985;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1398,Context) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 9979;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 9980;
						Match(AND);
						State = 9981;
						search_condition(3);
						}
						break;
					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 9982;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 9983;
						Match(OR);
						State = 9984;
						search_condition(2);
						}
						break;
					}
					} 
				}
				State = 9989;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1399,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Freetext_predicateContext freetext_predicate() {
			return GetRuleContext<Freetext_predicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(TSqlParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(TSqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(TSqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(TSqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 814, RULE_predicate);
		int _la;
		try {
			State = 10051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1405,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9990;
				Match(EXISTS);
				State = 9991;
				Match(LR_BRACKET);
				State = 9992;
				subquery();
				State = 9993;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9995;
				freetext_predicate();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9996;
				expression(0);
				State = 9997;
				comparison_operator();
				State = 9998;
				expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10000;
				expression(0);
				State = 10001;
				comparison_operator();
				State = 10002;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10003;
				Match(LR_BRACKET);
				State = 10004;
				subquery();
				State = 10005;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10007;
				expression(0);
				State = 10011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NOT) {
					{
					{
					State = 10008;
					Match(NOT);
					}
					}
					State = 10013;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10014;
				Match(BETWEEN);
				State = 10015;
				expression(0);
				State = 10016;
				Match(AND);
				State = 10017;
				expression(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10019;
				expression(0);
				State = 10023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NOT) {
					{
					{
					State = 10020;
					Match(NOT);
					}
					}
					State = 10025;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10026;
				Match(IN);
				State = 10027;
				Match(LR_BRACKET);
				State = 10030;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1402,Context) ) {
				case 1:
					{
					State = 10028;
					subquery();
					}
					break;
				case 2:
					{
					State = 10029;
					expression_list();
					}
					break;
				}
				State = 10032;
				Match(RR_BRACKET);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10034;
				expression(0);
				State = 10038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NOT) {
					{
					{
					State = 10035;
					Match(NOT);
					}
					}
					State = 10040;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10041;
				Match(LIKE);
				State = 10042;
				expression(0);
				State = 10045;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1404,Context) ) {
				case 1:
					{
					State = 10043;
					Match(ESCAPE);
					State = 10044;
					expression(0);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10047;
				expression(0);
				State = 10048;
				Match(IS);
				State = 10049;
				null_notnull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Sql_unionContext _sql_union;
		public IList<Sql_unionContext> _unions = new List<Sql_unionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_unionContext[] sql_union() {
			return GetRuleContexts<Sql_unionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_unionContext sql_union(int i) {
			return GetRuleContext<Sql_unionContext>(i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 816, RULE_query_expression);
		int _la;
		try {
			int _alt;
			State = 10076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1411,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10064;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
					{
					State = 10053;
					query_specification();
					}
					break;
				case LR_BRACKET:
					{
					State = 10054;
					Match(LR_BRACKET);
					State = 10055;
					query_expression();
					State = 10056;
					Match(RR_BRACKET);
					State = 10062;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1407,Context) ) {
					case 1:
						{
						State = 10057;
						Match(UNION);
						State = 10059;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL) {
							{
							State = 10058;
							Match(ALL);
							}
						}

						State = 10061;
						query_expression();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10066;
				query_specification();
				State = 10068;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1409,Context) ) {
				case 1:
					{
					State = 10067;
					order_by_clause();
					}
					break;
				}
				State = 10073;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1410,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 10070;
						_localctx._sql_union = sql_union();
						_localctx._unions.Add(_localctx._sql_union);
						}
						} 
					}
					State = 10075;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1410,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_unionContext : ParserRuleContext {
		public Query_specificationContext spec;
		public Query_expressionContext op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(TSqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(TSqlParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Sql_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_union; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_union(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_union(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_union(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_unionContext sql_union() {
		Sql_unionContext _localctx = new Sql_unionContext(Context, State);
		EnterRule(_localctx, 818, RULE_sql_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 10078;
				Match(UNION);
				State = 10080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 10079;
					Match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				State = 10082;
				Match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				State = 10083;
				Match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 10091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 10086;
				_localctx.spec = query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				State = 10087;
				Match(LR_BRACKET);
				State = 10088;
				_localctx.op = query_expression();
				State = 10089;
				Match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public IToken allOrDistinct;
		public Top_clauseContext top;
		public Select_listContext columns;
		public Table_nameContext into;
		public Table_sourcesContext from;
		public Search_conditionContext where;
		public IToken groupByAll;
		public Group_by_itemContext _group_by_item;
		public IList<Group_by_itemContext> _groupBys = new List<Group_by_itemContext>();
		public Search_conditionContext having;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(TSqlParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(Context, State);
		EnterRule(_localctx, 820, RULE_query_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10093;
			Match(SELECT);
			State = 10095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 10094;
				_localctx.allOrDistinct = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.allOrDistinct = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 10098;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 10097;
				_localctx.top = top_clause();
				}
			}

			State = 10100;
			_localctx.columns = select_list();
			State = 10103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 10101;
				Match(INTO);
				State = 10102;
				_localctx.into = table_name();
				}
			}

			State = 10107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 10105;
				Match(FROM);
				State = 10106;
				_localctx.from = table_sources();
				}
			}

			State = 10111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 10109;
				Match(WHERE);
				State = 10110;
				_localctx.where = search_condition(0);
				}
			}

			State = 10126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 10113;
				Match(GROUP);
				State = 10114;
				Match(BY);
				State = 10116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 10115;
					_localctx.groupByAll = Match(ALL);
					}
				}

				State = 10118;
				_localctx._group_by_item = group_by_item();
				_localctx._groupBys.Add(_localctx._group_by_item);
				State = 10123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 10119;
					Match(COMMA);
					State = 10120;
					_localctx._group_by_item = group_by_item();
					_localctx._groupBys.Add(_localctx._group_by_item);
					}
					}
					State = 10125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 10130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 10128;
				Match(HAVING);
				State = 10129;
				_localctx.having = search_condition(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_percentContext top_percent() {
			return GetRuleContext<Top_percentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_countContext top_count() {
			return GetRuleContext<Top_countContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(Context, State);
		EnterRule(_localctx, 822, RULE_top_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10132;
			Match(TOP);
			State = 10135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1424,Context) ) {
			case 1:
				{
				State = 10133;
				top_percent();
				}
				break;
			case 2:
				{
				State = 10134;
				top_count();
				}
				break;
			}
			State = 10139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 10137;
				Match(WITH);
				State = 10138;
				Match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_percentContext : ParserRuleContext {
		public IToken percent_constant;
		public ExpressionContext topper_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_percent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_percent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_percent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_percent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_percentContext top_percent() {
		Top_percentContext _localctx = new Top_percentContext(Context, State);
		EnterRule(_localctx, 824, RULE_top_percent);
		int _la;
		try {
			State = 10148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case FLOAT:
			case REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10141;
				_localctx.percent_constant = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & 49L) != 0)) ) {
					_localctx.percent_constant = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10142;
				Match(PERCENT);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10143;
				Match(LR_BRACKET);
				State = 10144;
				_localctx.topper_expression = expression(0);
				State = 10145;
				Match(RR_BRACKET);
				State = 10146;
				Match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_countContext : ParserRuleContext {
		public IToken count_constant;
		public ExpressionContext topcount_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_count; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_count(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_count(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_countContext top_count() {
		Top_countContext _localctx = new Top_countContext(Context, State);
		EnterRule(_localctx, 826, RULE_top_count);
		try {
			State = 10155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10150;
				_localctx.count_constant = Match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10151;
				Match(LR_BRACKET);
				State = 10152;
				_localctx.topcount_expression = expression(0);
				State = 10153;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public Order_by_expressionContext _order_by_expression;
		public IList<Order_by_expressionContext> _order_bys = new List<Order_by_expressionContext>();
		public ExpressionContext offset_exp;
		public IToken offset_rows;
		public IToken fetch_offset;
		public ExpressionContext fetch_exp;
		public IToken fetch_rows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROW() { return GetTokens(TSqlParser.ROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW(int i) {
			return GetToken(TSqlParser.ROW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROWS() { return GetTokens(TSqlParser.ROWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS(int i) {
			return GetToken(TSqlParser.ROWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 828, RULE_order_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10157;
			Match(ORDER);
			State = 10158;
			Match(BY);
			State = 10159;
			_localctx._order_by_expression = order_by_expression();
			_localctx._order_bys.Add(_localctx._order_by_expression);
			State = 10164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10160;
				Match(COMMA);
				State = 10161;
				_localctx._order_by_expression = order_by_expression();
				_localctx._order_bys.Add(_localctx._order_by_expression);
				}
				}
				State = 10166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 10178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1430,Context) ) {
			case 1:
				{
				State = 10167;
				Match(OFFSET);
				State = 10168;
				_localctx.offset_exp = expression(0);
				State = 10169;
				_localctx.offset_rows = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
					_localctx.offset_rows = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1429,Context) ) {
				case 1:
					{
					State = 10170;
					Match(FETCH);
					State = 10171;
					_localctx.fetch_offset = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
						_localctx.fetch_offset = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 10172;
					_localctx.fetch_exp = expression(0);
					State = 10173;
					_localctx.fetch_rows = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
						_localctx.fetch_rows = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 10174;
					Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROWSE() { return GetToken(TSqlParser.BROWSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_common_directivesContext[] xml_common_directives() {
			return GetRuleContexts<Xml_common_directivesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_common_directivesContext xml_common_directives(int i) {
			return GetRuleContext<Xml_common_directivesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(Context, State);
		EnterRule(_localctx, 830, RULE_for_clause);
		int _la;
		try {
			int _alt;
			State = 10272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1449,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10180;
				Match(FOR);
				State = 10181;
				Match(BROWSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10182;
				Match(FOR);
				State = 10183;
				Match(XML);
				State = 10191;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RAW:
					{
					State = 10184;
					Match(RAW);
					State = 10188;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1431,Context) ) {
					case 1:
						{
						State = 10185;
						Match(LR_BRACKET);
						State = 10186;
						Match(STRING);
						State = 10187;
						Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					State = 10190;
					Match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1433,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 10193;
						xml_common_directives();
						}
						} 
					}
					State = 10198;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1433,Context);
				}
				State = 10209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1436,Context) ) {
				case 1:
					{
					State = 10199;
					Match(COMMA);
					State = 10207;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case XMLDATA:
						{
						State = 10200;
						Match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						State = 10201;
						Match(XMLSCHEMA);
						State = 10205;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1434,Context) ) {
						case 1:
							{
							State = 10202;
							Match(LR_BRACKET);
							State = 10203;
							Match(STRING);
							State = 10204;
							Match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 10216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10211;
					Match(COMMA);
					State = 10212;
					Match(ELEMENTS);
					State = 10214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1437,Context) ) {
					case 1:
						{
						State = 10213;
						_la = TokenStream.LA(1);
						if ( !(_la==XSINIL || _la==ABSENT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10218;
				Match(FOR);
				State = 10219;
				Match(XML);
				State = 10220;
				Match(EXPLICIT);
				State = 10224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1439,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 10221;
						xml_common_directives();
						}
						} 
					}
					State = 10226;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1439,Context);
				}
				State = 10229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10227;
					Match(COMMA);
					State = 10228;
					Match(XMLDATA);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10231;
				Match(FOR);
				State = 10232;
				Match(XML);
				State = 10233;
				Match(PATH);
				State = 10237;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1441,Context) ) {
				case 1:
					{
					State = 10234;
					Match(LR_BRACKET);
					State = 10235;
					Match(STRING);
					State = 10236;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 10242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1442,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 10239;
						xml_common_directives();
						}
						} 
					}
					State = 10244;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1442,Context);
				}
				State = 10250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10245;
					Match(COMMA);
					State = 10246;
					Match(ELEMENTS);
					State = 10248;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1443,Context) ) {
					case 1:
						{
						State = 10247;
						_la = TokenStream.LA(1);
						if ( !(_la==XSINIL || _la==ABSENT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10252;
				Match(FOR);
				State = 10253;
				Match(JSON);
				State = 10254;
				_la = TokenStream.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1446,Context) ) {
				case 1:
					{
					State = 10255;
					Match(COMMA);
					State = 10256;
					Match(ROOT);
					State = 10260;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1445,Context) ) {
					case 1:
						{
						State = 10257;
						Match(LR_BRACKET);
						State = 10258;
						Match(STRING);
						State = 10259;
						Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 10266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1447,Context) ) {
				case 1:
					{
					State = 10264;
					Match(COMMA);
					State = 10265;
					Match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				State = 10270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10268;
					Match(COMMA);
					State = 10269;
					Match(WITHOUT_ARRAY_WRAPPER);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_common_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(Context, State);
		EnterRule(_localctx, 832, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10274;
			Match(COMMA);
			State = 10283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_BASE64:
				{
				State = 10275;
				Match(BINARY_BASE64);
				}
				break;
			case TYPE:
				{
				State = 10276;
				Match(TYPE);
				}
				break;
			case ROOT:
				{
				State = 10277;
				Match(ROOT);
				State = 10281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1450,Context) ) {
				case 1:
					{
					State = 10278;
					Match(LR_BRACKET);
					State = 10279;
					Match(STRING);
					State = 10280;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext order_by;
		public IToken ascending;
		public IToken descending;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(Context, State);
		EnterRule(_localctx, 834, RULE_order_by_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10285;
			_localctx.order_by = expression(0);
			State = 10288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC:
				{
				State = 10286;
				_localctx.ascending = Match(ASC);
				}
				break;
			case DESC:
				{
				State = 10287;
				_localctx.descending = Match(DESC);
				}
				break;
			case Eof:
			case ADD:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CHECKPOINT:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DENY:
			case DROP:
			case ELSE:
			case END:
			case EXCEPT:
			case EXECUTE:
			case FETCH:
			case FILLFACTOR:
			case FOR:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case INTERSECT:
			case KILL:
			case MERGE:
			case OPEN:
			case OPENJSON:
			case OPTION:
			case ORDER:
			case PRECISION:
			case PRINT:
			case RAISERROR:
			case RECONFIGURE:
			case RETURN:
			case REVERT:
			case REVOKE:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UNION:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOT:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 836, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10290;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public OptionContext _option;
		public IList<OptionContext> _options = new List<OptionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(Context, State);
		EnterRule(_localctx, 838, RULE_option_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10292;
			Match(OPTION);
			State = 10293;
			Match(LR_BRACKET);
			State = 10294;
			_localctx._option = option();
			_localctx._options.Add(_localctx._option);
			State = 10299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10295;
				Match(COMMA);
				State = 10296;
				_localctx._option = option();
				_localctx._options.Add(_localctx._option);
				}
				}
				State = 10301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 10302;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(TSqlParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 840, RULE_option);
		int _la;
		try {
			State = 10349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1455,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10304;
				Match(FAST);
				State = 10305;
				_localctx.number_rows = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10306;
				_la = TokenStream.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10307;
				Match(GROUP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10308;
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10309;
				Match(UNION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10310;
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10311;
				Match(JOIN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10312;
				Match(EXPAND);
				State = 10313;
				Match(VIEWS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10314;
				Match(FORCE);
				State = 10315;
				Match(ORDER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10316;
				Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10317;
				Match(KEEP);
				State = 10318;
				Match(PLAN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10319;
				Match(KEEPFIXED);
				State = 10320;
				Match(PLAN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10321;
				Match(MAXDOP);
				State = 10322;
				_localctx.number_of_processors = Match(DECIMAL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10323;
				Match(MAXRECURSION);
				State = 10324;
				_localctx.number_recursion = Match(DECIMAL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10325;
				Match(OPTIMIZE);
				State = 10326;
				Match(FOR);
				State = 10327;
				Match(LR_BRACKET);
				State = 10328;
				optimize_for_arg();
				State = 10333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 10329;
					Match(COMMA);
					State = 10330;
					optimize_for_arg();
					}
					}
					State = 10335;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10336;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10338;
				Match(OPTIMIZE);
				State = 10339;
				Match(FOR);
				State = 10340;
				Match(UNKNOWN);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10341;
				Match(PARAMETERIZATION);
				State = 10342;
				_la = TokenStream.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10343;
				Match(RECOMPILE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10344;
				Match(ROBUST);
				State = 10345;
				Match(PLAN);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10346;
				Match(USE);
				State = 10347;
				Match(PLAN);
				State = 10348;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimize_for_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(Context, State);
		EnterRule(_localctx, 842, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10351;
			Match(LOCAL_ID);
			State = 10358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNKNOWN:
				{
				State = 10352;
				Match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				State = 10353;
				Match(EQUAL);
				State = 10356;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 10354;
					constant();
					}
					break;
				case NULL_:
					{
					State = 10355;
					Match(NULL_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext _select_list_elem;
		public IList<Select_list_elemContext> _selectElement = new List<Select_list_elemContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 844, RULE_select_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10360;
			_localctx._select_list_elem = select_list_elem();
			_localctx._selectElement.Add(_localctx._select_list_elem);
			State = 10365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10361;
				Match(COMMA);
				State = 10362;
				_localctx._select_list_elem = select_list_elem();
				_localctx._selectElement.Add(_localctx._select_list_elem);
				}
				}
				State = 10367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_method_argumentsContext : ParserRuleContext {
		public Execute_var_stringContext _execute_var_string;
		public IList<Execute_var_stringContext> _argument = new List<Execute_var_stringContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_method_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_method_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_method_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdt_method_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Udt_method_argumentsContext udt_method_arguments() {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(Context, State);
		EnterRule(_localctx, 846, RULE_udt_method_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10368;
			Match(LR_BRACKET);
			State = 10369;
			_localctx._execute_var_string = execute_var_string();
			_localctx._argument.Add(_localctx._execute_var_string);
			State = 10374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10370;
				Match(COMMA);
				State = 10371;
				_localctx._execute_var_string = execute_var_string();
				_localctx._argument.Add(_localctx._execute_var_string);
				}
				}
				State = 10376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 10377;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsteriskContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public AsteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asterisk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsterisk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsterisk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsterisk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsteriskContext asterisk() {
		AsteriskContext _localctx = new AsteriskContext(Context, State);
		EnterRule(_localctx, 848, RULE_asterisk);
		int _la;
		try {
			State = 10388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1461,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 10379;
					table_name();
					State = 10380;
					Match(DOT);
					}
				}

				State = 10384;
				Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10385;
				_la = TokenStream.LA(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10386;
				Match(DOT);
				State = 10387;
				Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(TSqlParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_elemContext column_elem() {
		Column_elemContext _localctx = new Column_elemContext(Context, State);
		EnterRule(_localctx, 850, RULE_column_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1462,Context) ) {
			case 1:
				{
				State = 10390;
				full_column_name();
				}
				break;
			case 2:
				{
				State = 10391;
				Match(DOLLAR);
				State = 10392;
				Match(IDENTITY);
				}
				break;
			case 3:
				{
				State = 10393;
				Match(DOLLAR);
				State = 10394;
				Match(ROWGUID);
				}
				break;
			case 4:
				{
				State = 10395;
				Match(NULL_);
				}
				break;
			}
			State = 10399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1463,Context) ) {
			case 1:
				{
				State = 10398;
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context non_static_attr;
		public Id_Context static_attr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Udt_method_argumentsContext udt_method_arguments() {
			return GetRuleContext<Udt_method_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Udt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdt_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Udt_elemContext udt_elem() {
		Udt_elemContext _localctx = new Udt_elemContext(Context, State);
		EnterRule(_localctx, 852, RULE_udt_elem);
		try {
			State = 10417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1467,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10401;
				_localctx.udt_column_name = id_();
				State = 10402;
				Match(DOT);
				State = 10403;
				_localctx.non_static_attr = id_();
				State = 10404;
				udt_method_arguments();
				State = 10406;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1464,Context) ) {
				case 1:
					{
					State = 10405;
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10408;
				_localctx.udt_column_name = id_();
				State = 10409;
				Match(DOUBLE_COLON);
				State = 10410;
				_localctx.static_attr = id_();
				State = 10412;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1465,Context) ) {
				case 1:
					{
					State = 10411;
					udt_method_arguments();
					}
					break;
				}
				State = 10415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1466,Context) ) {
				case 1:
					{
					State = 10414;
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elemContext : ParserRuleContext {
		public Column_aliasContext leftAlias;
		public IToken eq;
		public ExpressionContext leftAssignment;
		public ExpressionContext expressionAs;
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elemContext expression_elem() {
		Expression_elemContext _localctx = new Expression_elemContext(Context, State);
		EnterRule(_localctx, 854, RULE_expression_elem);
		try {
			State = 10427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1469,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10419;
				_localctx.leftAlias = column_alias();
				State = 10420;
				_localctx.eq = Match(EQUAL);
				State = 10421;
				_localctx.leftAssignment = expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10423;
				_localctx.expressionAs = expression(0);
				State = 10425;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1468,Context) ) {
				case 1:
					{
					State = 10424;
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_elemContext column_elem() {
			return GetRuleContext<Column_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Udt_elemContext udt_elem() {
			return GetRuleContext<Udt_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_elemContext expression_elem() {
			return GetRuleContext<Expression_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(Context, State);
		EnterRule(_localctx, 856, RULE_select_list_elem);
		try {
			State = 10452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1473,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10429;
				asterisk();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10430;
				column_elem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10431;
				udt_elem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10432;
				Match(LOCAL_ID);
				State = 10435;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 10433;
					assignment_operator();
					}
					break;
				case EQUAL:
					{
					State = 10434;
					Match(EQUAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10442;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1471,Context) ) {
				case 1:
					{
					State = 10437;
					expression(0);
					}
					break;
				case 2:
					{
					State = 10438;
					Match(NEXT);
					State = 10439;
					Match(VALUE);
					State = 10440;
					Match(FOR);
					State = 10441;
					table_name();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10444;
				expression_elem();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10445;
				Match(NEXT);
				State = 10446;
				Match(VALUE);
				State = 10447;
				Match(FOR);
				State = 10448;
				table_name();
				State = 10450;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1472,Context) ) {
				case 1:
					{
					State = 10449;
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		public Table_sourceContext _table_source;
		public IList<Table_sourceContext> _source = new List<Table_sourceContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_sources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(Context, State);
		EnterRule(_localctx, 858, RULE_table_sources);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10454;
			_localctx._table_source = table_source();
			_localctx._source.Add(_localctx._table_source);
			State = 10459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10455;
				Match(COMMA);
				State = 10456;
				_localctx._table_source = table_source();
				_localctx._source.Add(_localctx._table_source);
				}
				}
				State = 10461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(Context, State);
		EnterRule(_localctx, 860, RULE_table_source);
		try {
			State = 10467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1475,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10462;
				table_source_item_joined();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10463;
				Match(LR_BRACKET);
				State = 10464;
				table_source();
				State = 10465;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_item_joinedContext : ParserRuleContext {
		public Join_partContext _join_part;
		public IList<Join_partContext> _joins = new List<Join_partContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item_joined; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item_joined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item_joined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_joined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_item_joinedContext table_source_item_joined() {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(Context, State);
		EnterRule(_localctx, 862, RULE_table_source_item_joined);
		try {
			int _alt;
			State = 10485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1478,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10469;
				table_source_item();
				State = 10473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1476,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 10470;
						_localctx._join_part = join_part();
						_localctx._joins.Add(_localctx._join_part);
						}
						} 
					}
					State = 10475;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1476,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10476;
				Match(LR_BRACKET);
				State = 10477;
				table_source_item_joined();
				State = 10478;
				Match(RR_BRACKET);
				State = 10482;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1477,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 10479;
						_localctx._join_part = join_part();
						_localctx._joins.Add(_localctx._join_part);
						}
						} 
					}
					State = 10484;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1477,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public IToken loc_id;
		public IToken loc_id_call;
		public Function_callContext loc_fcall;
		public Function_callContext oldstyle_fcall;
		[System.Diagnostics.DebuggerNonUserCode] public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nodes_methodContext nodes_method() {
			return GetRuleContext<Nodes_methodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Open_xmlContext open_xml() {
			return GetRuleContext<Open_xmlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Open_jsonContext open_json() {
			return GetRuleContext<Open_jsonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(Context, State);
		EnterRule(_localctx, 864, RULE_table_source_item);
		try {
			State = 10546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1493,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10487;
				table_name_with_hint();
				State = 10489;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1479,Context) ) {
				case 1:
					{
					State = 10488;
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10491;
				full_table_name();
				State = 10493;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1480,Context) ) {
				case 1:
					{
					State = 10492;
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10495;
				rowset_function();
				State = 10497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1481,Context) ) {
				case 1:
					{
					State = 10496;
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10499;
				Match(LR_BRACKET);
				State = 10500;
				derived_table();
				State = 10501;
				Match(RR_BRACKET);
				State = 10506;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1483,Context) ) {
				case 1:
					{
					State = 10502;
					as_table_alias();
					State = 10504;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1482,Context) ) {
					case 1:
						{
						State = 10503;
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10508;
				change_table();
				State = 10510;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1484,Context) ) {
				case 1:
					{
					State = 10509;
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10512;
				function_call();
				State = 10517;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1486,Context) ) {
				case 1:
					{
					State = 10513;
					as_table_alias();
					State = 10515;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1485,Context) ) {
					case 1:
						{
						State = 10514;
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10519;
				_localctx.loc_id = Match(LOCAL_ID);
				State = 10521;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1487,Context) ) {
				case 1:
					{
					State = 10520;
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10523;
				nodes_method();
				State = 10528;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1489,Context) ) {
				case 1:
					{
					State = 10524;
					as_table_alias();
					State = 10526;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1488,Context) ) {
					case 1:
						{
						State = 10525;
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10530;
				_localctx.loc_id_call = Match(LOCAL_ID);
				State = 10531;
				Match(DOT);
				State = 10532;
				_localctx.loc_fcall = function_call();
				State = 10537;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1491,Context) ) {
				case 1:
					{
					State = 10533;
					as_table_alias();
					State = 10535;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1490,Context) ) {
					case 1:
						{
						State = 10534;
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10539;
				open_xml();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10540;
				open_json();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10541;
				Match(DOUBLE_COLON);
				State = 10542;
				_localctx.oldstyle_fcall = function_call();
				State = 10544;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1492,Context) ) {
				case 1:
					{
					State = 10543;
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_xmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENXML() { return GetToken(TSqlParser.OPENXML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_declarationContext schema_declaration() {
			return GetRuleContext<Schema_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_xml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_xml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_xml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_xml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_xmlContext open_xml() {
		Open_xmlContext _localctx = new Open_xmlContext(Context, State);
		EnterRule(_localctx, 866, RULE_open_xml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10548;
			Match(OPENXML);
			State = 10549;
			Match(LR_BRACKET);
			State = 10550;
			expression(0);
			State = 10551;
			Match(COMMA);
			State = 10552;
			expression(0);
			State = 10555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 10553;
				Match(COMMA);
				State = 10554;
				expression(0);
				}
			}

			State = 10557;
			Match(RR_BRACKET);
			State = 10563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1495,Context) ) {
			case 1:
				{
				State = 10558;
				Match(WITH);
				State = 10559;
				Match(LR_BRACKET);
				State = 10560;
				schema_declaration();
				State = 10561;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 10566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1496,Context) ) {
			case 1:
				{
				State = 10565;
				as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_jsonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_declarationContext json_declaration() {
			return GetRuleContext<Json_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_jsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_json(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_json(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_json(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_jsonContext open_json() {
		Open_jsonContext _localctx = new Open_jsonContext(Context, State);
		EnterRule(_localctx, 868, RULE_open_json);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10568;
			Match(OPENJSON);
			State = 10569;
			Match(LR_BRACKET);
			State = 10570;
			expression(0);
			State = 10573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 10571;
				Match(COMMA);
				State = 10572;
				expression(0);
				}
			}

			State = 10575;
			Match(RR_BRACKET);
			State = 10581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1498,Context) ) {
			case 1:
				{
				State = 10576;
				Match(WITH);
				State = 10577;
				Match(LR_BRACKET);
				State = 10578;
				json_declaration();
				State = 10579;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 10584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1499,Context) ) {
			case 1:
				{
				State = 10583;
				as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_declarationContext : ParserRuleContext {
		public Json_column_declarationContext _json_column_declaration;
		public IList<Json_column_declarationContext> _json_col = new List<Json_column_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Json_column_declarationContext[] json_column_declaration() {
			return GetRuleContexts<Json_column_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_column_declarationContext json_column_declaration(int i) {
			return GetRuleContext<Json_column_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Json_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Json_declarationContext json_declaration() {
		Json_declarationContext _localctx = new Json_declarationContext(Context, State);
		EnterRule(_localctx, 870, RULE_json_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10586;
			_localctx._json_column_declaration = json_column_declaration();
			_localctx._json_col.Add(_localctx._json_column_declaration);
			State = 10591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10587;
				Match(COMMA);
				State = 10588;
				_localctx._json_column_declaration = json_column_declaration();
				_localctx._json_col.Add(_localctx._json_column_declaration);
				}
				}
				State = 10593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_column_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext column_declaration() {
			return GetRuleContext<Column_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public Json_column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_column_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_column_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_column_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson_column_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Json_column_declarationContext json_column_declaration() {
		Json_column_declarationContext _localctx = new Json_column_declarationContext(Context, State);
		EnterRule(_localctx, 872, RULE_json_column_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10594;
			column_declaration();
			State = 10597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 10595;
				Match(AS);
				State = 10596;
				Match(JSON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_declarationContext : ParserRuleContext {
		public Column_declarationContext _column_declaration;
		public IList<Column_declarationContext> _xml_col = new List<Column_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(Context, State);
		EnterRule(_localctx, 874, RULE_schema_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10599;
			_localctx._column_declaration = column_declaration();
			_localctx._xml_col.Add(_localctx._column_declaration);
			State = 10604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10600;
				Match(COMMA);
				State = 10601;
				_localctx._column_declaration = column_declaration();
				_localctx._xml_col.Add(_localctx._column_declaration);
				}
				}
				State = 10606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(Context, State);
		EnterRule(_localctx, 876, RULE_column_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10607;
			id_();
			State = 10608;
			data_type();
			State = 10610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 10609;
				Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Change_table_changesContext change_table_changes() {
			return GetRuleContext<Change_table_changesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Change_table_versionContext change_table_version() {
			return GetRuleContext<Change_table_versionContext>(0);
		}
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(Context, State);
		EnterRule(_localctx, 878, RULE_change_table);
		try {
			State = 10614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1504,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10612;
				change_table_changes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10613;
				change_table_version();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_changesContext : ParserRuleContext {
		public Table_nameContext changetable;
		public IToken changesid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Change_table_changesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_changes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_changes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_changes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table_changes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_changesContext change_table_changes() {
		Change_table_changesContext _localctx = new Change_table_changesContext(Context, State);
		EnterRule(_localctx, 880, RULE_change_table_changes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10616;
			Match(CHANGETABLE);
			State = 10617;
			Match(LR_BRACKET);
			State = 10618;
			Match(CHANGES);
			State = 10619;
			_localctx.changetable = table_name();
			State = 10620;
			Match(COMMA);
			State = 10621;
			_localctx.changesid = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_ || _la==LOCAL_ID || _la==DECIMAL) ) {
				_localctx.changesid = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 10622;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_versionContext : ParserRuleContext {
		public Table_nameContext versiontable;
		public Full_column_name_listContext pk_columns;
		public Select_listContext pk_values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(TSqlParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Change_table_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table_version(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_versionContext change_table_version() {
		Change_table_versionContext _localctx = new Change_table_versionContext(Context, State);
		EnterRule(_localctx, 882, RULE_change_table_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10624;
			Match(CHANGETABLE);
			State = 10625;
			Match(LR_BRACKET);
			State = 10626;
			Match(VERSION);
			State = 10627;
			_localctx.versiontable = table_name();
			State = 10628;
			Match(COMMA);
			State = 10629;
			_localctx.pk_columns = full_column_name_list();
			State = 10630;
			Match(COMMA);
			State = 10631;
			_localctx.pk_values = select_list();
			State = 10632;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Join_onContext join_on() {
			return GetRuleContext<Join_onContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cross_joinContext cross_join() {
			return GetRuleContext<Cross_joinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Apply_Context apply_() {
			return GetRuleContext<Apply_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PivotContext pivot() {
			return GetRuleContext<PivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpivotContext unpivot() {
			return GetRuleContext<UnpivotContext>(0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(Context, State);
		EnterRule(_localctx, 884, RULE_join_part);
		try {
			State = 10639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1505,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10634;
				join_on();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10635;
				cross_join();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10636;
				apply_();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10637;
				pivot();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10638;
				unpivot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_onContext : ParserRuleContext {
		public IToken inner;
		public IToken join_type;
		public IToken outer;
		public IToken join_hint;
		public Table_sourceContext source;
		public Search_conditionContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(TSqlParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Join_onContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_on; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_on(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_on(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_on(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_onContext join_on() {
		Join_onContext _localctx = new Join_onContext(Context, State);
		EnterRule(_localctx, 886, RULE_join_on);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10648;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
			case JOIN:
			case MERGE:
			case HASH:
			case LOOP:
			case REMOTE:
				{
				State = 10642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER) {
					{
					State = 10641;
					_localctx.inner = Match(INNER);
					}
				}

				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				State = 10644;
				_localctx.join_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_localctx.join_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 10645;
					_localctx.outer = Match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 10651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
				{
				State = 10650;
				_localctx.join_hint = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
					_localctx.join_hint = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 10653;
			Match(JOIN);
			State = 10654;
			_localctx.source = table_source();
			State = 10655;
			Match(ON);
			State = 10656;
			_localctx.cond = search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_joinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCross_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCross_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCross_join(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cross_joinContext cross_join() {
		Cross_joinContext _localctx = new Cross_joinContext(Context, State);
		EnterRule(_localctx, 888, RULE_cross_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10658;
			Match(CROSS);
			State = 10659;
			Match(JOIN);
			State = 10660;
			table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Apply_Context : ParserRuleContext {
		public IToken apply_style;
		public Table_sourceContext source;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Apply_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterApply_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitApply_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApply_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Apply_Context apply_() {
		Apply_Context _localctx = new Apply_Context(Context, State);
		EnterRule(_localctx, 890, RULE_apply_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10662;
			_localctx.apply_style = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CROSS || _la==OUTER) ) {
				_localctx.apply_style = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 10663;
			Match(APPLY);
			State = 10664;
			_localctx.source = table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PivotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(TSqlParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public PivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PivotContext pivot() {
		PivotContext _localctx = new PivotContext(Context, State);
		EnterRule(_localctx, 892, RULE_pivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10666;
			Match(PIVOT);
			State = 10667;
			pivot_clause();
			State = 10668;
			as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpivotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(TSqlParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public UnpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpivotContext unpivot() {
		UnpivotContext _localctx = new UnpivotContext(Context, State);
		EnterRule(_localctx, 894, RULE_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10670;
			Match(UNPIVOT);
			State = 10671;
			unpivot_clause();
			State = 10672;
			as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(Context, State);
		EnterRule(_localctx, 896, RULE_pivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10674;
			Match(LR_BRACKET);
			State = 10675;
			aggregate_windowed_function();
			State = 10676;
			Match(FOR);
			State = 10677;
			full_column_name();
			State = 10678;
			Match(IN);
			State = 10679;
			column_alias_list();
			State = 10680;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ExpressionContext unpivot_exp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(Context, State);
		EnterRule(_localctx, 898, RULE_unpivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10682;
			Match(LR_BRACKET);
			State = 10683;
			_localctx.unpivot_exp = expression(0);
			State = 10684;
			Match(FOR);
			State = 10685;
			full_column_name();
			State = 10686;
			Match(IN);
			State = 10687;
			Match(LR_BRACKET);
			State = 10688;
			full_column_name_list();
			State = 10689;
			Match(RR_BRACKET);
			State = 10690;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_name_listContext : ParserRuleContext {
		public Full_column_nameContext _full_column_name;
		public IList<Full_column_nameContext> _column = new List<Full_column_nameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_name_listContext full_column_name_list() {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(Context, State);
		EnterRule(_localctx, 900, RULE_full_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10692;
			_localctx._full_column_name = full_column_name();
			_localctx._column.Add(_localctx._full_column_name);
			State = 10697;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1510,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 10693;
					Match(COMMA);
					State = 10694;
					_localctx._full_column_name = full_column_name();
					_localctx._column.Add(_localctx._full_column_name);
					}
					} 
				}
				State = 10699;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1510,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name_with_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(Context, State);
		EnterRule(_localctx, 902, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10700;
			table_name();
			State = 10702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1511,Context) ) {
			case 1:
				{
				State = 10701;
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENROWSET() { return GetToken(TSqlParser.OPENROWSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(Context, State);
		EnterRule(_localctx, 904, RULE_rowset_function);
		int _la;
		try {
			State = 10730;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1514,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 10704;
				Match(OPENROWSET);
				State = 10705;
				Match(LR_BRACKET);
				State = 10706;
				_localctx.provider_name = Match(STRING);
				State = 10707;
				Match(COMMA);
				State = 10708;
				_localctx.connectionString = Match(STRING);
				State = 10709;
				Match(COMMA);
				State = 10710;
				_localctx.sql = Match(STRING);
				State = 10711;
				Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 10712;
				Match(OPENROWSET);
				State = 10713;
				Match(LR_BRACKET);
				State = 10714;
				Match(BULK);
				State = 10715;
				_localctx.data_file = Match(STRING);
				State = 10716;
				Match(COMMA);
				State = 10726;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1513,Context) ) {
				case 1:
					{
					State = 10717;
					bulk_option();
					State = 10722;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 10718;
						Match(COMMA);
						State = 10719;
						bulk_option();
						}
						}
						State = 10724;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 10725;
					id_();
					}
					break;
				}
				State = 10728;
				Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBulk_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(Context, State);
		EnterRule(_localctx, 906, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10732;
			id_();
			State = 10733;
			Match(EQUAL);
			State = 10734;
			_localctx.bulk_option_value = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext[] subquery() {
			return GetRuleContexts<SubqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery(int i) {
			return GetRuleContext<SubqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION() { return GetTokens(TSqlParser.UNION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION(int i) {
			return GetToken(TSqlParser.UNION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerived_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(Context, State);
		EnterRule(_localctx, 908, RULE_derived_table);
		int _la;
		try {
			State = 10754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1516,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10736;
				subquery();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10737;
				Match(LR_BRACKET);
				State = 10738;
				subquery();
				State = 10744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==UNION) {
					{
					{
					State = 10739;
					Match(UNION);
					State = 10740;
					Match(ALL);
					State = 10741;
					subquery();
					}
					}
					State = 10746;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10747;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10749;
				table_value_constructor();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10750;
				Match(LR_BRACKET);
				State = 10751;
				table_value_constructor();
				State = 10752;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RANKING_WINDOWED_FUNCContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRANKING_WINDOWED_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRANKING_WINDOWED_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRANKING_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BUILT_IN_FUNCContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Built_in_functionsContext built_in_functions() {
			return GetRuleContext<Built_in_functionsContext>(0);
		}
		public BUILT_IN_FUNCContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBUILT_IN_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBUILT_IN_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBUILT_IN_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FREE_TEXTContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Freetext_functionContext freetext_function() {
			return GetRuleContext<Freetext_functionContext>(0);
		}
		public FREE_TEXTContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFREE_TEXT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFREE_TEXT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFREE_TEXT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANALYTIC_WINDOWED_FUNCContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analytic_windowed_functionContext analytic_windowed_function() {
			return GetRuleContext<Analytic_windowed_functionContext>(0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterANALYTIC_WINDOWED_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitANALYTIC_WINDOWED_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitANALYTIC_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SCALAR_FUNCTIONContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCALAR_FUNCTION(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCALAR_FUNCTION(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSCALAR_FUNCTION(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PARTITION_FUNCContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Partition_functionContext partition_function() {
			return GetRuleContext<Partition_functionContext>(0);
		}
		public PARTITION_FUNCContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPARTITION_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPARTITION_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARTITION_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AGGREGATE_WINDOWED_FUNCContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAGGREGATE_WINDOWED_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAGGREGATE_WINDOWED_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAGGREGATE_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 910, RULE_function_call);
		int _la;
		try {
			State = 10769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1518,Context) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10756;
				ranking_windowed_function();
				}
				break;
			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 10757;
				aggregate_windowed_function();
				}
				break;
			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 10758;
				analytic_windowed_function();
				}
				break;
			case 4:
				_localctx = new BUILT_IN_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 10759;
				built_in_functions();
				}
				break;
			case 5:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 10760;
				scalar_function_name();
				State = 10761;
				Match(LR_BRACKET);
				State = 10763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144057532678148L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 153263537270038545L) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & -2392468582294015L) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & -282574489911297L) != 0) || ((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & -65537L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & -1L) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & -4611694818815377409L) != 0) || ((((_la - 465)) & ~0x3f) == 0 && ((1L << (_la - 465)) & -137438953473L) != 0) || ((((_la - 529)) & ~0x3f) == 0 && ((1L << (_la - 529)) & -70368744185857L) != 0) || ((((_la - 593)) & ~0x3f) == 0 && ((1L << (_la - 593)) & -145242462372265987L) != 0) || ((((_la - 657)) & ~0x3f) == 0 && ((1L << (_la - 657)) & -1125899919426305L) != 0) || ((((_la - 721)) & ~0x3f) == 0 && ((1L << (_la - 721)) & -1099511644291L) != 0) || ((((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & -2450107731957317633L) != 0) || ((((_la - 853)) & ~0x3f) == 0 && ((1L << (_la - 853)) & 962483717117L) != 0)) {
					{
					State = 10762;
					expression_list();
					}
				}

				State = 10765;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new FREE_TEXTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 10767;
				freetext_function();
				}
				break;
			case 7:
				_localctx = new PARTITION_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 10768;
				partition_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_functionContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context func_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_PARTITION() { return GetToken(TSqlParser.DOLLAR_PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartition_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartition_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_functionContext partition_function() {
		Partition_functionContext _localctx = new Partition_functionContext(Context, State);
		EnterRule(_localctx, 912, RULE_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
				{
				State = 10771;
				_localctx.database = id_();
				State = 10772;
				Match(DOT);
				}
			}

			State = 10776;
			Match(DOLLAR_PARTITION);
			State = 10777;
			Match(DOT);
			State = 10778;
			_localctx.func_name = id_();
			State = 10779;
			Match(LR_BRACKET);
			State = 10780;
			expression(0);
			State = 10781;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINSTABLE() { return GetToken(TSqlParser.CONTAINSTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREETEXTTABLE() { return GetToken(TSqlParser.FREETEXTTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMANTICSIMILARITYTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMANTICKEYPHRASETABLE() { return GetToken(TSqlParser.SEMANTICKEYPHRASETABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMANTICSIMILARITYDETAILSTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE, 0); }
		public Freetext_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreetext_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_functionContext freetext_function() {
		Freetext_functionContext _localctx = new Freetext_functionContext(Context, State);
		EnterRule(_localctx, 914, RULE_freetext_function);
		int _la;
		try {
			State = 10851;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTAINSTABLE:
			case FREETEXTTABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10783;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTAINSTABLE || _la==FREETEXTTABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10784;
				Match(LR_BRACKET);
				State = 10785;
				table_name();
				State = 10786;
				Match(COMMA);
				State = 10800;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					State = 10787;
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					State = 10788;
					Match(LR_BRACKET);
					State = 10789;
					full_column_name();
					State = 10794;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 10790;
						Match(COMMA);
						State = 10791;
						full_column_name();
						}
						}
						State = 10796;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 10797;
					Match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					State = 10799;
					Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10802;
				Match(COMMA);
				State = 10803;
				expression(0);
				State = 10807;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1522,Context) ) {
				case 1:
					{
					State = 10804;
					Match(COMMA);
					State = 10805;
					Match(LANGUAGE);
					State = 10806;
					expression(0);
					}
					break;
				}
				State = 10811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10809;
					Match(COMMA);
					State = 10810;
					expression(0);
					}
				}

				State = 10813;
				Match(RR_BRACKET);
				}
				break;
			case SEMANTICKEYPHRASETABLE:
			case SEMANTICSIMILARITYTABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10815;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMANTICKEYPHRASETABLE || _la==SEMANTICSIMILARITYTABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10816;
				Match(LR_BRACKET);
				State = 10817;
				table_name();
				State = 10818;
				Match(COMMA);
				State = 10832;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					State = 10819;
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					State = 10820;
					Match(LR_BRACKET);
					State = 10821;
					full_column_name();
					State = 10826;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 10822;
						Match(COMMA);
						State = 10823;
						full_column_name();
						}
						}
						State = 10828;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 10829;
					Match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					State = 10831;
					Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10834;
				Match(COMMA);
				State = 10835;
				expression(0);
				State = 10836;
				Match(RR_BRACKET);
				}
				break;
			case SEMANTICSIMILARITYDETAILSTABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10838;
				Match(SEMANTICSIMILARITYDETAILSTABLE);
				State = 10839;
				Match(LR_BRACKET);
				State = 10840;
				table_name();
				State = 10841;
				Match(COMMA);
				State = 10842;
				full_column_name();
				State = 10843;
				Match(COMMA);
				State = 10844;
				expression(0);
				State = 10845;
				Match(COMMA);
				State = 10846;
				full_column_name();
				State = 10847;
				Match(COMMA);
				State = 10848;
				expression(0);
				State = 10849;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_predicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREETEXT() { return GetToken(TSqlParser.FREETEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public Freetext_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_predicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_predicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreetext_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_predicateContext freetext_predicate() {
		Freetext_predicateContext _localctx = new Freetext_predicateContext(Context, State);
		EnterRule(_localctx, 916, RULE_freetext_predicate);
		int _la;
		try {
			State = 10909;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTAINS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10853;
				Match(CONTAINS);
				State = 10854;
				Match(LR_BRACKET);
				State = 10875;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1528,Context) ) {
				case 1:
					{
					State = 10855;
					full_column_name();
					}
					break;
				case 2:
					{
					State = 10856;
					Match(LR_BRACKET);
					State = 10857;
					full_column_name();
					State = 10862;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 10858;
						Match(COMMA);
						State = 10859;
						full_column_name();
						}
						}
						State = 10864;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 10865;
					Match(RR_BRACKET);
					}
					break;
				case 3:
					{
					State = 10867;
					Match(STAR);
					}
					break;
				case 4:
					{
					State = 10868;
					Match(PROPERTY);
					State = 10869;
					Match(LR_BRACKET);
					State = 10870;
					full_column_name();
					State = 10871;
					Match(COMMA);
					State = 10872;
					expression(0);
					State = 10873;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 10877;
				Match(COMMA);
				State = 10878;
				expression(0);
				State = 10879;
				Match(RR_BRACKET);
				}
				break;
			case FREETEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10881;
				Match(FREETEXT);
				State = 10882;
				Match(LR_BRACKET);
				State = 10883;
				table_name();
				State = 10884;
				Match(COMMA);
				State = 10898;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					State = 10885;
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					State = 10886;
					Match(LR_BRACKET);
					State = 10887;
					full_column_name();
					State = 10892;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 10888;
						Match(COMMA);
						State = 10889;
						full_column_name();
						}
						}
						State = 10894;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 10895;
					Match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					State = 10897;
					Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10900;
				Match(COMMA);
				State = 10901;
				expression(0);
				State = 10905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10902;
					Match(COMMA);
					State = 10903;
					Match(LANGUAGE);
					State = 10904;
					expression(0);
					}
				}

				State = 10907;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Built_in_functionsContext : ParserRuleContext {
		public Built_in_functionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_built_in_functions; } }
	 
		public Built_in_functionsContext() { }
		public virtual void CopyFrom(Built_in_functionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CURRENT_USERContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_USER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_USER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCURRENT_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEADDContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext number;
		public ExpressionContext date;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEADDContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEADD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEADD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEADD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CHECKSUMContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHECKSUM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHECKSUM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCHECKSUM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CURRENT_TIMESTAMPContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMESTAMP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMESTAMP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCURRENT_TIMESTAMP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BINARY_CHECKSUMContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public BINARY_CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBINARY_CHECKSUM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBINARY_CHECKSUM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBINARY_CHECKSUM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SYSTEM_USERContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSTEM_USER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSTEM_USER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSYSTEM_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NULLIFContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(TSqlParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NULLIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNULLIF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNULLIF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNULLIF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SESSION_USERContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSION_USER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSION_USER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSESSION_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CONVERTContext : Built_in_functionsContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(TSqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONVERTContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONVERT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONVERT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCONVERT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XML_DATA_TYPE_FUNCContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_data_type_methodsContext xml_data_type_methods() {
			return GetRuleContext<Xml_data_type_methodsContext>(0);
		}
		public XML_DATA_TYPE_FUNCContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXML_DATA_TYPE_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXML_DATA_TYPE_FUNC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXML_DATA_TYPE_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COALESCEContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(TSqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public COALESCEContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOALESCE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOALESCE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOALESCE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CASTContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCAST(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCAST(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MIN_ACTIVE_ROWVERSIONContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMIN_ACTIVE_ROWVERSION(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMIN_ACTIVE_ROWVERSION(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMIN_ACTIVE_ROWVERSION(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IIFContext : Built_in_functionsContext {
		public Search_conditionContext cond;
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIIF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIIF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIIF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEPARTContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATEPARTContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEPART(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEPART(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEPART(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class USERContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUSER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUSER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUSER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STUFFContext : Built_in_functionsContext {
		public ExpressionContext str;
		public IToken from;
		public IToken to;
		public ExpressionContext str_with;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTUFF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTUFF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTUFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDENTITYContext : Built_in_functionsContext {
		public IToken seed;
		public IToken increment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENTITY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENTITY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDENTITY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATENAMEContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATENAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATENAME(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATENAME(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATENAME(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GETUTCDATEContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public GETUTCDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETUTCDATE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETUTCDATE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGETUTCDATE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TRY_CASTContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_CAST() { return GetToken(TSqlParser.TRY_CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public TRY_CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTRY_CAST(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTRY_CAST(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTRY_CAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ISNULLContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ISNULLContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISNULL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISNULL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitISNULL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEDIFFContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date_first;
		public ExpressionContext date_second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEDIFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEDIFF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEDIFF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEDIFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GETDATEContext : Built_in_functionsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public GETDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETDATE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETDATE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGETDATE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STRINGAGGContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public STRINGAGGContext(Built_in_functionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTRINGAGG(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTRINGAGG(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTRINGAGG(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Built_in_functionsContext built_in_functions() {
		Built_in_functionsContext _localctx = new Built_in_functionsContext(Context, State);
		EnterRule(_localctx, 918, RULE_built_in_functions);
		int _la;
		try {
			State = 11057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1537,Context) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10911;
				Match(BINARY_CHECKSUM);
				State = 10912;
				Match(LR_BRACKET);
				State = 10913;
				Match(STAR);
				State = 10914;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new CASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 10915;
				Match(CAST);
				State = 10916;
				Match(LR_BRACKET);
				State = 10917;
				expression(0);
				State = 10918;
				Match(AS);
				State = 10919;
				data_type();
				State = 10920;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new TRY_CASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 10922;
				Match(TRY_CAST);
				State = 10923;
				Match(LR_BRACKET);
				State = 10924;
				expression(0);
				State = 10925;
				Match(AS);
				State = 10926;
				data_type();
				State = 10927;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new CONVERTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 10929;
				Match(CONVERT);
				State = 10930;
				Match(LR_BRACKET);
				State = 10931;
				((CONVERTContext)_localctx).convert_data_type = data_type();
				State = 10932;
				Match(COMMA);
				State = 10933;
				((CONVERTContext)_localctx).convert_expression = expression(0);
				State = 10936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10934;
					Match(COMMA);
					State = 10935;
					((CONVERTContext)_localctx).style = expression(0);
					}
				}

				State = 10938;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 10940;
				Match(CHECKSUM);
				State = 10941;
				Match(LR_BRACKET);
				State = 10942;
				Match(STAR);
				State = 10943;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new COALESCEContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 10944;
				Match(COALESCE);
				State = 10945;
				Match(LR_BRACKET);
				State = 10946;
				expression_list();
				State = 10947;
				Match(RR_BRACKET);
				}
				break;
			case 7:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 10949;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case 8:
				_localctx = new CURRENT_USERContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 10950;
				Match(CURRENT_USER);
				}
				break;
			case 9:
				_localctx = new DATEADDContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 10951;
				Match(DATEADD);
				State = 10952;
				Match(LR_BRACKET);
				State = 10953;
				((DATEADDContext)_localctx).datepart = Match(ID);
				State = 10954;
				Match(COMMA);
				State = 10955;
				((DATEADDContext)_localctx).number = expression(0);
				State = 10956;
				Match(COMMA);
				State = 10957;
				((DATEADDContext)_localctx).date = expression(0);
				State = 10958;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new DATEDIFFContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 10960;
				Match(DATEDIFF);
				State = 10961;
				Match(LR_BRACKET);
				State = 10962;
				((DATEDIFFContext)_localctx).datepart = Match(ID);
				State = 10963;
				Match(COMMA);
				State = 10964;
				((DATEDIFFContext)_localctx).date_first = expression(0);
				State = 10965;
				Match(COMMA);
				State = 10966;
				((DATEDIFFContext)_localctx).date_second = expression(0);
				State = 10967;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new DATENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 10969;
				Match(DATENAME);
				State = 10970;
				Match(LR_BRACKET);
				State = 10971;
				((DATENAMEContext)_localctx).datepart = Match(ID);
				State = 10972;
				Match(COMMA);
				State = 10973;
				((DATENAMEContext)_localctx).date = expression(0);
				State = 10974;
				Match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new DATEPARTContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 10976;
				Match(DATEPART);
				State = 10977;
				Match(LR_BRACKET);
				State = 10978;
				((DATEPARTContext)_localctx).datepart = Match(ID);
				State = 10979;
				Match(COMMA);
				State = 10980;
				((DATEPARTContext)_localctx).date = expression(0);
				State = 10981;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new GETDATEContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 10983;
				Match(GETDATE);
				State = 10984;
				Match(LR_BRACKET);
				State = 10985;
				Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new GETUTCDATEContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 10986;
				Match(GETUTCDATE);
				State = 10987;
				Match(LR_BRACKET);
				State = 10988;
				Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 10989;
				Match(IDENTITY);
				State = 10990;
				Match(LR_BRACKET);
				State = 10991;
				data_type();
				State = 10994;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1534,Context) ) {
				case 1:
					{
					State = 10992;
					Match(COMMA);
					State = 10993;
					((IDENTITYContext)_localctx).seed = Match(DECIMAL);
					}
					break;
				}
				State = 10998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10996;
					Match(COMMA);
					State = 10997;
					((IDENTITYContext)_localctx).increment = Match(DECIMAL);
					}
				}

				State = 11000;
				Match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 11002;
				Match(MIN_ACTIVE_ROWVERSION);
				State = 11003;
				Match(LR_BRACKET);
				State = 11004;
				Match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new NULLIFContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 11005;
				Match(NULLIF);
				State = 11006;
				Match(LR_BRACKET);
				State = 11007;
				((NULLIFContext)_localctx).left = expression(0);
				State = 11008;
				Match(COMMA);
				State = 11009;
				((NULLIFContext)_localctx).right = expression(0);
				State = 11010;
				Match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new STUFFContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 11012;
				Match(STUFF);
				State = 11013;
				Match(LR_BRACKET);
				State = 11014;
				((STUFFContext)_localctx).str = expression(0);
				State = 11015;
				Match(COMMA);
				State = 11016;
				((STUFFContext)_localctx).from = Match(DECIMAL);
				State = 11017;
				Match(COMMA);
				State = 11018;
				((STUFFContext)_localctx).to = Match(DECIMAL);
				State = 11019;
				Match(COMMA);
				State = 11020;
				((STUFFContext)_localctx).str_with = expression(0);
				State = 11021;
				Match(RR_BRACKET);
				}
				break;
			case 19:
				_localctx = new SESSION_USERContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 11023;
				Match(SESSION_USER);
				}
				break;
			case 20:
				_localctx = new SYSTEM_USERContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 11024;
				Match(SYSTEM_USER);
				}
				break;
			case 21:
				_localctx = new USERContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 11025;
				Match(USER);
				}
				break;
			case 22:
				_localctx = new ISNULLContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 11026;
				Match(ISNULL);
				State = 11027;
				Match(LR_BRACKET);
				State = 11028;
				((ISNULLContext)_localctx).left = expression(0);
				State = 11029;
				Match(COMMA);
				State = 11030;
				((ISNULLContext)_localctx).right = expression(0);
				State = 11031;
				Match(RR_BRACKET);
				}
				break;
			case 23:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 11033;
				xml_data_type_methods();
				}
				break;
			case 24:
				_localctx = new IIFContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 11034;
				Match(IIF);
				State = 11035;
				Match(LR_BRACKET);
				State = 11036;
				((IIFContext)_localctx).cond = search_condition(0);
				State = 11037;
				Match(COMMA);
				State = 11038;
				((IIFContext)_localctx).left = expression(0);
				State = 11039;
				Match(COMMA);
				State = 11040;
				((IIFContext)_localctx).right = expression(0);
				State = 11041;
				Match(RR_BRACKET);
				}
				break;
			case 25:
				_localctx = new STRINGAGGContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 11043;
				Match(STRING_AGG);
				State = 11044;
				Match(LR_BRACKET);
				State = 11045;
				((STRINGAGGContext)_localctx).expr = expression(0);
				State = 11046;
				Match(COMMA);
				State = 11047;
				((STRINGAGGContext)_localctx).separator = expression(0);
				State = 11048;
				Match(RR_BRACKET);
				State = 11055;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1536,Context) ) {
				case 1:
					{
					State = 11049;
					Match(WITHIN);
					State = 11050;
					Match(GROUP);
					State = 11051;
					Match(LR_BRACKET);
					State = 11052;
					order_by_clause();
					State = 11053;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_data_type_methodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Value_methodContext value_method() {
			return GetRuleContext<Value_methodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exist_methodContext exist_method() {
			return GetRuleContext<Exist_methodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_data_type_methods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_data_type_methods(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_data_type_methods(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_data_type_methods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_data_type_methodsContext xml_data_type_methods() {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(Context, State);
		EnterRule(_localctx, 920, RULE_xml_data_type_methods);
		try {
			State = 11063;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1538,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11059;
				value_method();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11060;
				query_method();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11061;
				exist_method();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11062;
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public IToken eventdata;
		public Query_methodContext query;
		public Value_callContext call;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Value_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_methodContext value_method() {
		Value_methodContext _localctx = new Value_methodContext(Context, State);
		EnterRule(_localctx, 922, RULE_value_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1539,Context) ) {
			case 1:
				{
				State = 11065;
				_localctx.loc_id = Match(LOCAL_ID);
				}
				break;
			case 2:
				{
				State = 11066;
				_localctx.value_id = id_();
				}
				break;
			case 3:
				{
				State = 11067;
				_localctx.eventdata = Match(EVENTDATA);
				}
				break;
			case 4:
				{
				State = 11068;
				_localctx.query = query_method();
				}
				break;
			case 5:
				{
				State = 11069;
				Match(LR_BRACKET);
				State = 11070;
				subquery();
				State = 11071;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 11075;
			Match(DOT);
			State = 11076;
			_localctx.call = value_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_callContext : ParserRuleContext {
		public IToken xquery;
		public IToken sqltype;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Value_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_callContext value_call() {
		Value_callContext _localctx = new Value_callContext(Context, State);
		EnterRule(_localctx, 924, RULE_value_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11078;
			Match(VALUE);
			State = 11079;
			Match(LR_BRACKET);
			State = 11080;
			_localctx.xquery = Match(STRING);
			State = 11081;
			Match(COMMA);
			State = 11082;
			_localctx.sqltype = Match(STRING);
			State = 11083;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Full_table_nameContext table;
		public Query_callContext call;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Query_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_methodContext query_method() {
		Query_methodContext _localctx = new Query_methodContext(Context, State);
		EnterRule(_localctx, 926, RULE_query_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11092;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1540,Context) ) {
			case 1:
				{
				State = 11085;
				_localctx.loc_id = Match(LOCAL_ID);
				}
				break;
			case 2:
				{
				State = 11086;
				_localctx.value_id = id_();
				}
				break;
			case 3:
				{
				State = 11087;
				_localctx.table = full_table_name();
				}
				break;
			case 4:
				{
				State = 11088;
				Match(LR_BRACKET);
				State = 11089;
				subquery();
				State = 11090;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 11094;
			Match(DOT);
			State = 11095;
			_localctx.call = query_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_callContext : ParserRuleContext {
		public IToken xquery;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Query_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_callContext query_call() {
		Query_callContext _localctx = new Query_callContext(Context, State);
		EnterRule(_localctx, 928, RULE_query_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11097;
			Match(QUERY);
			State = 11098;
			Match(LR_BRACKET);
			State = 11099;
			_localctx.xquery = Match(STRING);
			State = 11100;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Exist_callContext call;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Exist_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExist_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exist_methodContext exist_method() {
		Exist_methodContext _localctx = new Exist_methodContext(Context, State);
		EnterRule(_localctx, 930, RULE_exist_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				{
				State = 11102;
				_localctx.loc_id = Match(LOCAL_ID);
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 11103;
				_localctx.value_id = id_();
				}
				break;
			case LR_BRACKET:
				{
				State = 11104;
				Match(LR_BRACKET);
				State = 11105;
				subquery();
				State = 11106;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 11110;
			Match(DOT);
			State = 11111;
			_localctx.call = exist_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_callContext : ParserRuleContext {
		public IToken xquery;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Exist_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExist_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exist_callContext exist_call() {
		Exist_callContext _localctx = new Exist_callContext(Context, State);
		EnterRule(_localctx, 932, RULE_exist_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11113;
			Match(EXIST);
			State = 11114;
			Match(LR_BRACKET);
			State = 11115;
			_localctx.xquery = Match(STRING);
			State = 11116;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Modify_callContext call;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Modify_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modify_methodContext modify_method() {
		Modify_methodContext _localctx = new Modify_methodContext(Context, State);
		EnterRule(_localctx, 934, RULE_modify_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				{
				State = 11118;
				_localctx.loc_id = Match(LOCAL_ID);
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 11119;
				_localctx.value_id = id_();
				}
				break;
			case LR_BRACKET:
				{
				State = 11120;
				Match(LR_BRACKET);
				State = 11121;
				subquery();
				State = 11122;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 11126;
			Match(DOT);
			State = 11127;
			_localctx.call = modify_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_callContext : ParserRuleContext {
		public IToken xml_dml;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Modify_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modify_callContext modify_call() {
		Modify_callContext _localctx = new Modify_callContext(Context, State);
		EnterRule(_localctx, 936, RULE_modify_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11129;
			Match(MODIFY);
			State = 11130;
			Match(LR_BRACKET);
			State = 11131;
			_localctx.xml_dml = Match(STRING);
			State = 11132;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nodes_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public IToken xquery;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Nodes_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodes_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNodes_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNodes_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodes_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nodes_methodContext nodes_method() {
		Nodes_methodContext _localctx = new Nodes_methodContext(Context, State);
		EnterRule(_localctx, 938, RULE_nodes_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				{
				State = 11134;
				_localctx.loc_id = Match(LOCAL_ID);
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 11135;
				_localctx.value_id = id_();
				}
				break;
			case LR_BRACKET:
				{
				State = 11136;
				Match(LR_BRACKET);
				State = 11137;
				subquery();
				State = 11138;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 11142;
			Match(DOT);
			State = 11143;
			Match(NODES);
			State = 11144;
			Match(LR_BRACKET);
			State = 11145;
			_localctx.xquery = Match(STRING);
			State = 11146;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 940, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11148;
			Match(WHEN);
			State = 11149;
			expression(0);
			State = 11150;
			Match(THEN);
			State = 11151;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_search_condition_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(Context, State);
		EnterRule(_localctx, 942, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11153;
			Match(WHEN);
			State = 11154;
			search_condition(0);
			State = 11155;
			Match(THEN);
			State = 11156;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_column_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_column_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_aliasContext as_column_alias() {
		As_column_aliasContext _localctx = new As_column_aliasContext(Context, State);
		EnterRule(_localctx, 944, RULE_as_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 11158;
				Match(AS);
				}
			}

			State = 11161;
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_table_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(Context, State);
		EnterRule(_localctx, 946, RULE_as_table_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 11163;
				Match(AS);
				}
			}

			State = 11166;
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 948, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11168;
			id_();
			State = 11170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1546,Context) ) {
			case 1:
				{
				State = 11169;
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(Context, State);
		EnterRule(_localctx, 950, RULE_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 11172;
				Match(WITH);
				}
			}

			State = 11175;
			Match(LR_BRACKET);
			State = 11176;
			_localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 11183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HOLDLOCK || _la==INDEX || _la==NOEXPAND || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & 3073L) != 0) || _la==FORCESEEK || _la==ID || _la==COMMA) {
				{
				{
				State = 11178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 11177;
					Match(COMMA);
					}
				}

				State = 11180;
				_localctx._table_hint = table_hint();
				_localctx._hint.Add(_localctx._table_hint);
				}
				}
				State = 11185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 11186;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_with_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(Context, State);
		EnterRule(_localctx, 952, RULE_insert_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11188;
			Match(WITH);
			State = 11189;
			Match(LR_BRACKET);
			State = 11190;
			_localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 11197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HOLDLOCK || _la==INDEX || _la==NOEXPAND || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & 3073L) != 0) || _la==FORCESEEK || _la==ID || _la==COMMA) {
				{
				{
				State = 11192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 11191;
					Match(COMMA);
					}
				}

				State = 11194;
				_localctx._table_hint = table_hint();
				_localctx._hint.Add(_localctx._table_hint);
				}
				}
				State = 11199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 11200;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLDLOCK() { return GetToken(TSqlParser.HOLDLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(Context, State);
		EnterRule(_localctx, 954, RULE_table_hint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOEXPAND) {
				{
				State = 11202;
				Match(NOEXPAND);
				}
			}

			State = 11254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1558,Context) ) {
			case 1:
				{
				State = 11205;
				Match(INDEX);
				State = 11225;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 11206;
					Match(LR_BRACKET);
					State = 11207;
					index_value();
					State = 11212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 11208;
						Match(COMMA);
						State = 11209;
						index_value();
						}
						}
						State = 11214;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 11215;
					Match(RR_BRACKET);
					}
					break;
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
					{
					State = 11217;
					index_value();
					State = 11222;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1554,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 11218;
							Match(COMMA);
							State = 11219;
							index_value();
							}
							} 
						}
						State = 11224;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,1554,Context);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 11227;
				Match(INDEX);
				State = 11228;
				Match(EQUAL);
				State = 11229;
				index_value();
				}
				break;
			case 3:
				{
				State = 11230;
				Match(FORCESEEK);
				State = 11245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 11231;
					Match(LR_BRACKET);
					State = 11232;
					index_value();
					State = 11233;
					Match(LR_BRACKET);
					State = 11234;
					Match(ID);
					State = 11239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 11235;
						Match(COMMA);
						State = 11236;
						Match(ID);
						}
						}
						State = 11241;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 11242;
					Match(RR_BRACKET);
					State = 11243;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				State = 11247;
				Match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				State = 11248;
				Match(SNAPSHOT);
				}
				break;
			case 6:
				{
				State = 11249;
				Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 11250;
				Match(EQUAL);
				State = 11251;
				Match(DECIMAL);
				}
				break;
			case 7:
				{
				State = 11252;
				Match(HOLDLOCK);
				}
				break;
			case 8:
				{
				State = 11253;
				Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(Context, State);
		EnterRule(_localctx, 956, RULE_index_value);
		try {
			State = 11258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11256;
				id_();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11257;
				Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public Column_aliasContext _column_alias;
		public IList<Column_aliasContext> _alias = new List<Column_aliasContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(Context, State);
		EnterRule(_localctx, 958, RULE_column_alias_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11260;
			Match(LR_BRACKET);
			State = 11261;
			_localctx._column_alias = column_alias();
			_localctx._alias.Add(_localctx._column_alias);
			State = 11266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 11262;
				Match(COMMA);
				State = 11263;
				_localctx._column_alias = column_alias();
				_localctx._alias.Add(_localctx._column_alias);
				}
				}
				State = 11268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 11269;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 960, RULE_column_alias);
		try {
			State = 11273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11271;
				id_();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11272;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		public Expression_listContext _expression_list;
		public IList<Expression_listContext> _exps = new List<Expression_listContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_value_constructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(Context, State);
		EnterRule(_localctx, 962, RULE_table_value_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11275;
			Match(VALUES);
			State = 11276;
			Match(LR_BRACKET);
			State = 11277;
			_localctx._expression_list = expression_list();
			_localctx._exps.Add(_localctx._expression_list);
			State = 11278;
			Match(RR_BRACKET);
			State = 11286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 11279;
				Match(COMMA);
				State = 11280;
				Match(LR_BRACKET);
				State = 11281;
				_localctx._expression_list = expression_list();
				_localctx._exps.Add(_localctx._expression_list);
				State = 11282;
				Match(RR_BRACKET);
				}
				}
				State = 11288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exp = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 964, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11289;
			_localctx._expression = expression(0);
			_localctx._exp.Add(_localctx._expression);
			State = 11294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 11290;
				Match(COMMA);
				State = 11291;
				_localctx._expression = expression(0);
				_localctx._exp.Add(_localctx._expression);
				}
				}
				State = 11296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRanking_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(Context, State);
		EnterRule(_localctx, 966, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 11307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11297;
				_la = TokenStream.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11298;
				Match(LR_BRACKET);
				State = 11299;
				Match(RR_BRACKET);
				State = 11300;
				over_clause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11301;
				Match(NTILE);
				State = 11302;
				Match(LR_BRACKET);
				State = 11303;
				expression(0);
				State = 11304;
				Match(RR_BRACKET);
				State = 11305;
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public IToken agg_func;
		public IToken cnt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(Context, State);
		EnterRule(_localctx, 968, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 11341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11309;
				_localctx.agg_func = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & 175921860444419L) != 0)) ) {
					_localctx.agg_func = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11310;
				Match(LR_BRACKET);
				State = 11311;
				all_distinct_expression();
				State = 11312;
				Match(RR_BRACKET);
				State = 11314;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1565,Context) ) {
				case 1:
					{
					State = 11313;
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11316;
				_localctx.cnt = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
					_localctx.cnt = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11317;
				Match(LR_BRACKET);
				State = 11320;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 11318;
					Match(STAR);
					}
					break;
				case ADD:
				case ALL:
				case CASE:
				case COALESCE:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FILLFACTOR:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NULL_:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case DOLLAR_PARTITION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case DOLLAR_ACTION:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 11319;
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 11322;
				Match(RR_BRACKET);
				State = 11324;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1567,Context) ) {
				case 1:
					{
					State = 11323;
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11326;
				Match(CHECKSUM_AGG);
				State = 11327;
				Match(LR_BRACKET);
				State = 11328;
				all_distinct_expression();
				State = 11329;
				Match(RR_BRACKET);
				}
				break;
			case GROUPING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11331;
				Match(GROUPING);
				State = 11332;
				Match(LR_BRACKET);
				State = 11333;
				expression(0);
				State = 11334;
				Match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11336;
				Match(GROUPING_ID);
				State = 11337;
				Match(LR_BRACKET);
				State = 11338;
				expression_list();
				State = 11339;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analytic_windowed_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(TSqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(TSqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTILE_CONT() { return GetToken(TSqlParser.PERCENTILE_CONT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTILE_DISC() { return GetToken(TSqlParser.PERCENTILE_DISC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analytic_windowed_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnalytic_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnalytic_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalytic_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analytic_windowed_functionContext analytic_windowed_function() {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(Context, State);
		EnterRule(_localctx, 970, RULE_analytic_windowed_function);
		int _la;
		try {
			State = 11399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11343;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11344;
				Match(LR_BRACKET);
				State = 11345;
				expression(0);
				State = 11346;
				Match(RR_BRACKET);
				State = 11347;
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11349;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11350;
				Match(LR_BRACKET);
				State = 11351;
				expression(0);
				State = 11358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 11352;
					Match(COMMA);
					State = 11353;
					expression(0);
					State = 11356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 11354;
						Match(COMMA);
						State = 11355;
						expression(0);
						}
					}

					}
				}

				State = 11360;
				Match(RR_BRACKET);
				State = 11361;
				over_clause();
				}
				break;
			case CUME_DIST:
			case PERCENT_RANK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11363;
				_la = TokenStream.LA(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11364;
				Match(LR_BRACKET);
				State = 11365;
				Match(RR_BRACKET);
				State = 11366;
				Match(OVER);
				State = 11367;
				Match(LR_BRACKET);
				State = 11371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 11368;
					Match(PARTITION);
					State = 11369;
					Match(BY);
					State = 11370;
					expression_list();
					}
				}

				State = 11373;
				order_by_clause();
				State = 11374;
				Match(RR_BRACKET);
				}
				break;
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11376;
				_la = TokenStream.LA(1);
				if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11377;
				Match(LR_BRACKET);
				State = 11378;
				expression(0);
				State = 11379;
				Match(RR_BRACKET);
				State = 11380;
				Match(WITHIN);
				State = 11381;
				Match(GROUP);
				State = 11382;
				Match(LR_BRACKET);
				State = 11383;
				Match(ORDER);
				State = 11384;
				Match(BY);
				State = 11385;
				expression(0);
				State = 11387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 11386;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 11389;
				Match(RR_BRACKET);
				State = 11390;
				Match(OVER);
				State = 11391;
				Match(LR_BRACKET);
				State = 11395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 11392;
					Match(PARTITION);
					State = 11393;
					Match(BY);
					State = 11394;
					expression_list();
					}
				}

				State = 11397;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_distinct_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(Context, State);
		EnterRule(_localctx, 972, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 11401;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 11404;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 974, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11406;
			Match(OVER);
			State = 11407;
			Match(LR_BRACKET);
			State = 11411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 11408;
				Match(PARTITION);
				State = 11409;
				Match(BY);
				State = 11410;
				expression_list();
				}
			}

			State = 11414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 11413;
				order_by_clause();
				}
			}

			State = 11417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 11416;
				row_or_range_clause();
				}
			}

			State = 11419;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_or_range_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(Context, State);
		EnterRule(_localctx, 976, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11421;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 11422;
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_extent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(Context, State);
		EnterRule(_localctx, 978, RULE_window_frame_extent);
		try {
			State = 11430;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11424;
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11425;
				Match(BETWEEN);
				State = 11426;
				window_frame_bound();
				State = 11427;
				Match(AND);
				State = 11428;
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(Context, State);
		EnterRule(_localctx, 980, RULE_window_frame_bound);
		try {
			State = 11434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1580,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11432;
				window_frame_preceding();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11433;
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_preceding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(Context, State);
		EnterRule(_localctx, 982, RULE_window_frame_preceding);
		try {
			State = 11442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11436;
				Match(UNBOUNDED);
				State = 11437;
				Match(PRECEDING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11438;
				Match(DECIMAL);
				State = 11439;
				Match(PRECEDING);
				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11440;
				Match(CURRENT);
				State = 11441;
				Match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_following(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(Context, State);
		EnterRule(_localctx, 984, RULE_window_frame_following);
		try {
			State = 11448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11444;
				Match(UNBOUNDED);
				State = 11445;
				Match(FOLLOWING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11446;
				Match(DECIMAL);
				State = 11447;
				Match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(Context, State);
		EnterRule(_localctx, 986, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			State = 11484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESTREAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11450;
				Match(FILESTREAM);
				{
				State = 11451;
				database_filestream_option();
				State = 11456;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1583,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 11452;
						Match(COMMA);
						State = 11453;
						database_filestream_option();
						}
						} 
					}
					State = 11458;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1583,Context);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11459;
				Match(DEFAULT_LANGUAGE);
				State = 11460;
				Match(EQUAL);
				State = 11463;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 11461;
					id_();
					}
					break;
				case STRING:
					{
					State = 11462;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11465;
				Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 11466;
				Match(EQUAL);
				State = 11469;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case FILLFACTOR:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISTRIBUTION:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REPLICATE:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROUND_ROBIN:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 11467;
					id_();
					}
					break;
				case STRING:
					{
					State = 11468;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11471;
				Match(NESTED_TRIGGERS);
				State = 11472;
				Match(EQUAL);
				State = 11473;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11474;
				Match(TRANSFORM_NOISE_WORDS);
				State = 11475;
				Match(EQUAL);
				State = 11476;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11477;
				Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 11478;
				Match(EQUAL);
				State = 11479;
				Match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11480;
				Match(DB_CHAINING);
				State = 11481;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11482;
				Match(TRUSTWORTHY);
				State = 11483;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_filestream_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(Context, State);
		EnterRule(_localctx, 988, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11486;
			Match(LR_BRACKET);
			State = 11493;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				State = 11487;
				Match(NON_TRANSACTED_ACCESS);
				State = 11488;
				Match(EQUAL);
				State = 11489;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				State = 11490;
				Match(DIRECTORY_NAME);
				State = 11491;
				Match(EQUAL);
				State = 11492;
				Match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 11495;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_file_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(Context, State);
		EnterRule(_localctx, 990, RULE_database_file_spec);
		try {
			State = 11499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILEGROUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11497;
				file_group();
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11498;
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONTAINS() { return GetTokens(TSqlParser.CONTAINS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS(int i) {
			return GetToken(TSqlParser.CONTAINS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(Context, State);
		EnterRule(_localctx, 992, RULE_file_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11501;
			Match(FILEGROUP);
			State = 11502;
			id_();
			State = 11505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1589,Context) ) {
			case 1:
				{
				State = 11503;
				Match(CONTAINS);
				State = 11504;
				Match(FILESTREAM);
				}
				break;
			}
			State = 11508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 11507;
				Match(DEFAULT);
				}
			}

			State = 11512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 11510;
				Match(CONTAINS);
				State = 11511;
				Match(MEMORY_OPTIMIZED_DATA);
				}
			}

			State = 11514;
			file_spec();
			State = 11519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1592,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 11515;
					Match(COMMA);
					State = 11516;
					file_spec();
					}
					} 
				}
				State = 11521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1592,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken file;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(Context, State);
		EnterRule(_localctx, 994, RULE_file_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11522;
			Match(LR_BRACKET);
			State = 11523;
			Match(NAME);
			State = 11524;
			Match(EQUAL);
			State = 11527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 11525;
				id_();
				}
				break;
			case STRING:
				{
				State = 11526;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 11530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 11529;
				Match(COMMA);
				}
			}

			State = 11532;
			Match(FILENAME);
			State = 11533;
			Match(EQUAL);
			State = 11534;
			_localctx.file = Match(STRING);
			State = 11536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 11535;
				Match(COMMA);
				}
			}

			State = 11544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 11538;
				Match(SIZE);
				State = 11539;
				Match(EQUAL);
				State = 11540;
				file_size();
				State = 11542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 11541;
					Match(COMMA);
					}
				}

				}
			}

			State = 11555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAXSIZE) {
				{
				State = 11546;
				Match(MAXSIZE);
				State = 11547;
				Match(EQUAL);
				State = 11550;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
					{
					State = 11548;
					file_size();
					}
					break;
				case UNLIMITED:
					{
					State = 11549;
					Match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 11553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 11552;
					Match(COMMA);
					}
				}

				}
			}

			State = 11563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILEGROWTH) {
				{
				State = 11557;
				Match(FILEGROWTH);
				State = 11558;
				Match(EQUAL);
				State = 11559;
				file_size();
				State = 11561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 11560;
					Match(COMMA);
					}
				}

				}
			}

			State = 11565;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(Context, State);
		EnterRule(_localctx, 996, RULE_entity_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1604,Context) ) {
			case 1:
				{
				State = 11567;
				_localctx.server = id_();
				State = 11568;
				Match(DOT);
				State = 11569;
				_localctx.database = id_();
				State = 11570;
				Match(DOT);
				State = 11571;
				_localctx.schema = id_();
				State = 11572;
				Match(DOT);
				}
				break;
			case 2:
				{
				State = 11574;
				_localctx.database = id_();
				State = 11575;
				Match(DOT);
				State = 11577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11576;
					_localctx.schema = id_();
					}
				}

				State = 11579;
				Match(DOT);
				}
				break;
			case 3:
				{
				State = 11581;
				_localctx.schema = id_();
				State = 11582;
				Match(DOT);
				}
				break;
			}
			State = 11586;
			_localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_azure_dwContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context object_name;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_azure_dw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_azure_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_azure_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(Context, State);
		EnterRule(_localctx, 998, RULE_entity_name_for_azure_dw);
		try {
			State = 11593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1605,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11588;
				_localctx.schema = id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11589;
				_localctx.schema = id_();
				State = 11590;
				Match(DOT);
				State = 11591;
				_localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_parallel_dwContext : ParserRuleContext {
		public Id_Context schema_database;
		public Id_Context schema;
		public Id_Context object_name;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_parallel_dw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_parallel_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_parallel_dw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(Context, State);
		EnterRule(_localctx, 1000, RULE_entity_name_for_parallel_dw);
		try {
			State = 11600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1606,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11595;
				_localctx.schema_database = id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11596;
				_localctx.schema = id_();
				State = 11597;
				Match(DOT);
				State = 11598;
				_localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public Id_Context linkedServer;
		public Id_Context schema;
		public Id_Context server;
		public Id_Context database;
		public Id_Context table;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(Context, State);
		EnterRule(_localctx, 1002, RULE_full_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1608,Context) ) {
			case 1:
				{
				State = 11602;
				_localctx.linkedServer = id_();
				State = 11603;
				Match(DOT);
				State = 11604;
				Match(DOT);
				State = 11605;
				_localctx.schema = id_();
				State = 11606;
				Match(DOT);
				}
				break;
			case 2:
				{
				State = 11608;
				_localctx.server = id_();
				State = 11609;
				Match(DOT);
				State = 11610;
				_localctx.database = id_();
				State = 11611;
				Match(DOT);
				State = 11612;
				_localctx.schema = id_();
				State = 11613;
				Match(DOT);
				}
				break;
			case 3:
				{
				State = 11615;
				_localctx.database = id_();
				State = 11616;
				Match(DOT);
				State = 11618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11617;
					_localctx.schema = id_();
					}
				}

				State = 11620;
				Match(DOT);
				}
				break;
			case 4:
				{
				State = 11622;
				_localctx.schema = id_();
				State = 11623;
				Match(DOT);
				}
				break;
			}
			State = 11627;
			_localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public IToken blocking_hierarchy;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 1004, RULE_table_name);
		int _la;
		try {
			State = 11655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1613,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11639;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1610,Context) ) {
				case 1:
					{
					State = 11629;
					_localctx.database = id_();
					State = 11630;
					Match(DOT);
					State = 11632;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
						{
						State = 11631;
						_localctx.schema = id_();
						}
					}

					State = 11634;
					Match(DOT);
					}
					break;
				case 2:
					{
					State = 11636;
					_localctx.schema = id_();
					State = 11637;
					Match(DOT);
					}
					break;
				}
				State = 11641;
				_localctx.table = id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11652;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1612,Context) ) {
				case 1:
					{
					State = 11642;
					_localctx.database = id_();
					State = 11643;
					Match(DOT);
					State = 11645;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
						{
						State = 11644;
						_localctx.schema = id_();
						}
					}

					State = 11647;
					Match(DOT);
					}
					break;
				case 2:
					{
					State = 11649;
					_localctx.schema = id_();
					State = 11650;
					Match(DOT);
					}
					break;
				}
				State = 11654;
				_localctx.blocking_hierarchy = Match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context name;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(Context, State);
		EnterRule(_localctx, 1006, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1614,Context) ) {
			case 1:
				{
				State = 11657;
				_localctx.schema = id_();
				State = 11658;
				Match(DOT);
				}
				break;
			}
			State = 11662;
			_localctx.name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_schemaContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context procedure;
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_schemaContext func_proc_name_schema() {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(Context, State);
		EnterRule(_localctx, 1008, RULE_func_proc_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1615,Context) ) {
			case 1:
				{
				{
				State = 11664;
				_localctx.schema = id_();
				}
				State = 11665;
				Match(DOT);
				}
				break;
			}
			State = 11669;
			_localctx.procedure = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_database_schemaContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_database_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_database_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_database_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_database_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(Context, State);
		EnterRule(_localctx, 1010, RULE_func_proc_name_database_schema);
		int _la;
		try {
			State = 11681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1618,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11671;
					_localctx.database = id_();
					}
				}

				State = 11674;
				Match(DOT);
				State = 11676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11675;
					_localctx.schema = id_();
					}
				}

				State = 11678;
				Match(DOT);
				State = 11679;
				_localctx.procedure = id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11680;
				func_proc_name_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_server_database_schemaContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_server_database_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_server_database_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_server_database_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_server_database_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(Context, State);
		EnterRule(_localctx, 1012, RULE_func_proc_name_server_database_schema);
		int _la;
		try {
			State = 11697;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1622,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11683;
					_localctx.server = id_();
					}
				}

				State = 11686;
				Match(DOT);
				State = 11688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11687;
					_localctx.database = id_();
					}
				}

				State = 11690;
				Match(DOT);
				State = 11692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11691;
					_localctx.schema = id_();
					}
				}

				State = 11694;
				Match(DOT);
				State = 11695;
				_localctx.procedure = id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11696;
				func_proc_name_database_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(Context, State);
		EnterRule(_localctx, 1014, RULE_ddl_object);
		try {
			State = 11701;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11699;
				full_table_name();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11700;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public Id_Context column_name;
		public Id_Context server;
		public Id_Context schema;
		public Id_Context tablename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(Context, State);
		EnterRule(_localctx, 1016, RULE_full_column_name);
		int _la;
		try {
			State = 11734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1630,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11703;
				_la = TokenStream.LA(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11704;
				Match(DOT);
				State = 11705;
				_localctx.column_name = id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11706;
					_localctx.server = id_();
					}
				}

				State = 11709;
				Match(DOT);
				State = 11711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11710;
					_localctx.schema = id_();
					}
				}

				State = 11713;
				Match(DOT);
				State = 11715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11714;
					_localctx.tablename = id_();
					}
				}

				State = 11717;
				Match(DOT);
				State = 11718;
				_localctx.column_name = id_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11719;
					_localctx.schema = id_();
					}
				}

				State = 11722;
				Match(DOT);
				State = 11724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11723;
					_localctx.tablename = id_();
					}
				}

				State = 11726;
				Match(DOT);
				State = 11727;
				_localctx.column_name = id_();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
					{
					State = 11728;
					_localctx.tablename = id_();
					}
				}

				State = 11731;
				Match(DOT);
				State = 11732;
				_localctx.column_name = id_();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11733;
				_localctx.column_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_list_with_orderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list_with_order; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list_with_order(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list_with_order(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list_with_order(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_list_with_orderContext column_name_list_with_order() {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(Context, State);
		EnterRule(_localctx, 1018, RULE_column_name_list_with_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11736;
			id_();
			State = 11738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 11737;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 11747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 11740;
				Match(COMMA);
				State = 11741;
				id_();
				State = 11743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 11742;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 11749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_name_listContext : ParserRuleContext {
		public Insert_column_idContext _insert_column_id;
		public IList<Insert_column_idContext> _col = new List<Insert_column_idContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_idContext[] insert_column_id() {
			return GetRuleContexts<Insert_column_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_idContext insert_column_id(int i) {
			return GetRuleContext<Insert_column_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Insert_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_name_listContext insert_column_name_list() {
		Insert_column_name_listContext _localctx = new Insert_column_name_listContext(Context, State);
		EnterRule(_localctx, 1020, RULE_insert_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11750;
			_localctx._insert_column_id = insert_column_id();
			_localctx._col.Add(_localctx._insert_column_id);
			State = 11755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 11751;
				Match(COMMA);
				State = 11752;
				_localctx._insert_column_id = insert_column_id();
				_localctx._col.Add(_localctx._insert_column_id);
				}
				}
				State = 11757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_idContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _ignore = new List<Id_Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Insert_column_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_column_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_idContext insert_column_id() {
		Insert_column_idContext _localctx = new Insert_column_idContext(Context, State);
		EnterRule(_localctx, 1022, RULE_insert_column_id);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11764;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1636,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 11759;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 19455487L) != 0)) {
						{
						State = 11758;
						_localctx._id_ = id_();
						_localctx._ignore.Add(_localctx._id_);
						}
					}

					State = 11761;
					Match(DOT);
					}
					} 
				}
				State = 11766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1636,Context);
			}
			State = 11767;
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _col = new List<Id_Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 1024, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11769;
			_localctx._id_ = id_();
			_localctx._col.Add(_localctx._id_);
			State = 11774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 11770;
				Match(COMMA);
				State = 11771;
				_localctx._id_ = id_();
				_localctx._col.Add(_localctx._id_);
				}
				}
				State = 11776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 1026, RULE_cursor_name);
		try {
			State = 11779;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11777;
				id_();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11778;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_off(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(Context, State);
		EnterRule(_localctx, 1028, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11781;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustered(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(Context, State);
		EnterRule(_localctx, 1030, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11783;
			_la = TokenStream.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_notnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(Context, State);
		EnterRule(_localctx, 1032, RULE_null_notnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 11785;
				Match(NOT);
				}
			}

			State = 11788;
			Match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_or_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_or_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_or_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_or_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_or_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_or_defaultContext null_or_default() {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(Context, State);
		EnterRule(_localctx, 1034, RULE_null_or_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL_:
				{
				State = 11790;
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				State = 11791;
				Match(DEFAULT);
				State = 11792;
				constant_expression();
				State = 11795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 11793;
					Match(COLLATE);
					State = 11794;
					id_();
					}
				}

				State = 11799;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1641,Context) ) {
				case 1:
					{
					State = 11797;
					Match(WITH);
					State = 11798;
					Match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(Context, State);
		EnterRule(_localctx, 1036, RULE_scalar_function_name);
		try {
			State = 11808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1643,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11803;
				func_proc_name_server_database_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11804;
				Match(RIGHT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11805;
				Match(LEFT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11806;
				Match(BINARY_CHECKSUM);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11807;
				Match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_timerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_timer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_timer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_timer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_conversation_timer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_timerContext begin_conversation_timer() {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(Context, State);
		EnterRule(_localctx, 1038, RULE_begin_conversation_timer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11810;
			Match(BEGIN);
			State = 11811;
			Match(CONVERSATION);
			State = 11812;
			Match(TIMER);
			State = 11813;
			Match(LR_BRACKET);
			State = 11814;
			Match(LOCAL_ID);
			State = 11815;
			Match(RR_BRACKET);
			State = 11816;
			Match(TIMEOUT);
			State = 11817;
			Match(EQUAL);
			State = 11818;
			time();
			State = 11820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1644,Context) ) {
			case 1:
				{
				State = 11819;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_dialogContext : ParserRuleContext {
		public IToken dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public IToken service_broker_guid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Service_nameContext[] service_name() {
			return GetRuleContexts<Service_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Service_nameContext service_name(int i) {
			return GetRuleContext<Service_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_dialog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_dialog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_dialog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_conversation_dialog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_dialogContext begin_conversation_dialog() {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(Context, State);
		EnterRule(_localctx, 1040, RULE_begin_conversation_dialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11822;
			Match(BEGIN);
			State = 11823;
			Match(DIALOG);
			State = 11825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONVERSATION) {
				{
				State = 11824;
				Match(CONVERSATION);
				}
			}

			State = 11827;
			_localctx.dialog_handle = Match(LOCAL_ID);
			State = 11828;
			Match(FROM);
			State = 11829;
			Match(SERVICE);
			State = 11830;
			_localctx.initiator_service_name = service_name();
			State = 11831;
			Match(TO);
			State = 11832;
			Match(SERVICE);
			State = 11833;
			_localctx.target_service_name = service_name();
			State = 11836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 11834;
				Match(COMMA);
				State = 11835;
				_localctx.service_broker_guid = Match(STRING);
				}
			}

			State = 11838;
			Match(ON);
			State = 11839;
			Match(CONTRACT);
			State = 11840;
			contract_name();
			State = 11863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1652,Context) ) {
			case 1:
				{
				State = 11841;
				Match(WITH);
				State = 11848;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1648,Context) ) {
				case 1:
					{
					State = 11842;
					_la = TokenStream.LA(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 11843;
					Match(EQUAL);
					State = 11844;
					Match(LOCAL_ID);
					State = 11846;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 11845;
						Match(COMMA);
						}
					}

					}
					break;
				}
				State = 11856;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1650,Context) ) {
				case 1:
					{
					State = 11850;
					Match(LIFETIME);
					State = 11851;
					Match(EQUAL);
					State = 11852;
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 11854;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 11853;
						Match(COMMA);
						}
					}

					}
					break;
				}
				State = 11861;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1651,Context) ) {
				case 1:
					{
					State = 11858;
					Match(ENCRYPTION);
					State = 11859;
					Match(EQUAL);
					State = 11860;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 11866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1653,Context) ) {
			case 1:
				{
				State = 11865;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contract_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContract_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContract_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContract_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Contract_nameContext contract_name() {
		Contract_nameContext _localctx = new Contract_nameContext(Context, State);
		EnterRule(_localctx, 1042, RULE_contract_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1654,Context) ) {
			case 1:
				{
				State = 11868;
				id_();
				}
				break;
			case 2:
				{
				State = 11869;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_nameContext service_name() {
		Service_nameContext _localctx = new Service_nameContext(Context, State);
		EnterRule(_localctx, 1044, RULE_service_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1655,Context) ) {
			case 1:
				{
				State = 11872;
				id_();
				}
				break;
			case 2:
				{
				State = 11873;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public IToken faliure_code;
		public IToken failure_text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_conversation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnd_conversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnd_conversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public End_conversationContext end_conversation() {
		End_conversationContext _localctx = new End_conversationContext(Context, State);
		EnterRule(_localctx, 1046, RULE_end_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11876;
			Match(END);
			State = 11877;
			Match(CONVERSATION);
			State = 11878;
			_localctx.conversation_handle = Match(LOCAL_ID);
			State = 11880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1656,Context) ) {
			case 1:
				{
				State = 11879;
				Match(SEMI);
				}
				break;
			}
			State = 11894;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1659,Context) ) {
			case 1:
				{
				State = 11882;
				Match(WITH);
				State = 11889;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1657,Context) ) {
				case 1:
					{
					State = 11883;
					Match(ERROR);
					State = 11884;
					Match(EQUAL);
					State = 11885;
					_localctx.faliure_code = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.faliure_code = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 11886;
					Match(DESCRIPTION);
					State = 11887;
					Match(EQUAL);
					State = 11888;
					_localctx.failure_text = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.failure_text = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 11892;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1658,Context) ) {
				case 1:
					{
					State = 11891;
					Match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_conversationContext : ParserRuleContext {
		public TimeContext timeout;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_conversation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_conversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_conversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_conversationContext waitfor_conversation() {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(Context, State);
		EnterRule(_localctx, 1048, RULE_waitfor_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAITFOR) {
				{
				State = 11896;
				Match(WAITFOR);
				}
			}

			State = 11899;
			Match(LR_BRACKET);
			State = 11900;
			get_conversation();
			State = 11901;
			Match(RR_BRACKET);
			State = 11907;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1662,Context) ) {
			case 1:
				{
				State = 11903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 11902;
					Match(COMMA);
					}
				}

				State = 11905;
				Match(TIMEOUT);
				State = 11906;
				_localctx.timeout = time();
				}
				break;
			}
			State = 11910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1663,Context) ) {
			case 1:
				{
				State = 11909;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_conversationContext : ParserRuleContext {
		public IToken conversation_group_id;
		public Queue_idContext queue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Queue_idContext queue_id() {
			return GetRuleContext<Queue_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_conversation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGet_conversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGet_conversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_conversationContext get_conversation() {
		Get_conversationContext _localctx = new Get_conversationContext(Context, State);
		EnterRule(_localctx, 1050, RULE_get_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11912;
			Match(GET);
			State = 11913;
			Match(CONVERSATION);
			State = 11914;
			Match(GROUP);
			State = 11915;
			_localctx.conversation_group_id = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_group_id = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 11916;
			Match(FROM);
			State = 11917;
			_localctx.queue = queue_id();
			State = 11919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1664,Context) ) {
			case 1:
				{
				State = 11918;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_idContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_idContext queue_id() {
		Queue_idContext _localctx = new Queue_idContext(Context, State);
		EnterRule(_localctx, 1052, RULE_queue_id);
		try {
			State = 11928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1665,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 11921;
				_localctx.database_name = id_();
				State = 11922;
				Match(DOT);
				State = 11923;
				_localctx.schema_name = id_();
				State = 11924;
				Match(DOT);
				State = 11925;
				_localctx.name = id_();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11927;
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Send_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public ExpressionContext message_type_name;
		public IToken message_body_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Send_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_send_conversation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSend_conversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSend_conversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSend_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Send_conversationContext send_conversation() {
		Send_conversationContext _localctx = new Send_conversationContext(Context, State);
		EnterRule(_localctx, 1054, RULE_send_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11930;
			Match(SEND);
			State = 11931;
			Match(ON);
			State = 11932;
			Match(CONVERSATION);
			State = 11933;
			_localctx.conversation_handle = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_handle = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 11934;
			Match(MESSAGE);
			State = 11935;
			Match(TYPE);
			State = 11936;
			_localctx.message_type_name = expression(0);
			State = 11940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1666,Context) ) {
			case 1:
				{
				State = 11937;
				Match(LR_BRACKET);
				State = 11938;
				_localctx.message_body_expression = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					_localctx.message_body_expression = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11939;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 11943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1667,Context) ) {
			case 1:
				{
				State = 11942;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public IToken scaled;
		public Id_Context ext_type;
		public IToken scale;
		public IToken prec;
		public IToken seed;
		public IToken inc;
		public IToken double_prec;
		public Id_Context unscaled_type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(TSqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR() { return GetToken(TSqlParser.NVARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_KEYWORD() { return GetToken(TSqlParser.BINARY_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY_KEYWORD() { return GetToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(TSqlParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 1056, RULE_data_type);
		int _la;
		try {
			State = 11975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1670,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11945;
				_localctx.scaled = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY_KEYWORD || _la==VARBINARY_KEYWORD || _la==VARCHAR || _la==NVARCHAR) ) {
					_localctx.scaled = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 11946;
				Match(LR_BRACKET);
				State = 11947;
				Match(MAX);
				State = 11948;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11949;
				_localctx.ext_type = id_();
				State = 11950;
				Match(LR_BRACKET);
				State = 11951;
				_localctx.scale = Match(DECIMAL);
				State = 11952;
				Match(COMMA);
				State = 11953;
				_localctx.prec = Match(DECIMAL);
				State = 11954;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11956;
				_localctx.ext_type = id_();
				State = 11957;
				Match(LR_BRACKET);
				State = 11958;
				_localctx.scale = Match(DECIMAL);
				State = 11959;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11961;
				_localctx.ext_type = id_();
				State = 11962;
				Match(IDENTITY);
				State = 11968;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1668,Context) ) {
				case 1:
					{
					State = 11963;
					Match(LR_BRACKET);
					State = 11964;
					_localctx.seed = Match(DECIMAL);
					State = 11965;
					Match(COMMA);
					State = 11966;
					_localctx.inc = Match(DECIMAL);
					State = 11967;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11970;
				_localctx.double_prec = Match(DOUBLE);
				State = 11972;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1669,Context) ) {
				case 1:
					{
					State = 11971;
					Match(PRECISION);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11974;
				_localctx.unscaled_type = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 1058, RULE_default_value);
		try {
			State = 11980;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11977;
				Match(NULL_);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11978;
				Match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11979;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(TSqlParser.DOLLAR, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 1060, RULE_constant);
		int _la;
		try {
			State = 11997;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1675,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11982;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11983;
				Match(BINARY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 11984;
					sign();
					}
				}

				State = 11987;
				Match(DECIMAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 11988;
					sign();
					}
				}

				State = 11991;
				_la = TokenStream.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11993;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 11992;
					sign();
					}
				}

				State = 11995;
				_localctx.dollar = Match(DOLLAR);
				State = 11996;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 1062, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11999;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_GUID() { return GetToken(TSqlParser.AUDIT_GUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(TSqlParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_OPERATION() { return GetToken(TSqlParser.FAIL_OPERATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILOVER_MODE() { return GetToken(TSqlParser.FAILOVER_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILURE() { return GetToken(TSqlParser.FAILURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEPATH() { return GetToken(TSqlParser.FILEPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(TSqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO_BATCH() { return GetToken(TSqlParser.GO_BATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_MAX_REQUESTS() { return GetToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH() { return GetToken(TSqlParser.HIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORTANCE() { return GetToken(TSqlParser.IMPORTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIATOR() { return GetToken(TSqlParser.INITIATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTENER_URL() { return GetToken(TSqlParser.LISTENER_URL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(TSqlParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW() { return GetToken(TSqlParser.LOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANUAL() { return GetToken(TSqlParser.MANUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_DOP() { return GetToken(TSqlParser.MAX_DOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROLLOVER_FILES() { return GetToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(TSqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_TRUNCATE() { return GetToken(TSqlParser.NO_TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORECOVERY() { return GetToken(TSqlParser.NORECOVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TSqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE_DELAY() { return GetToken(TSqlParser.QUEUE_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MAX_CPU_TIME_SEC() { return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVE_DISK_SPACE() { return GetToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_MANAGER_LOCATION() { return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEDING_MODE() { return GetToken(TSqlParser.SEEDING_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENT() { return GetToken(TSqlParser.SENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDBY() { return GetToken(TSqlParser.STANDBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(TSqlParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_CONNECTIONS() { return GetToken(TSqlParser.ALLOW_CONNECTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOMATIC() { return GetToken(TSqlParser.AUTOMATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVAILABILITY_MODE() { return GetToken(TSqlParser.AVAILABILITY_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(TSqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(TSqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKSIZE() { return GetToken(TSqlParser.BLOCKSIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFERCOUNT() { return GetToken(TSqlParser.BUFFERCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(TSqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_AFTER_ERROR() { return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY_ONLY() { return GetToken(TSqlParser.COPY_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(TSqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SOURCE() { return GetToken(TSqlParser.DATA_SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL() { return GetToken(TSqlParser.DIFFERENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIREDATE() { return GetToken(TSqlParser.EXPIREDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SNAPSHOT() { return GetToken(TSqlParser.FILE_SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(TSqlParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(TSqlParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXTRANSFER() { return GetToken(TSqlParser.MAXTRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIADESCRIPTION() { return GetToken(TSqlParser.MEDIADESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIANAME() { return GetToken(TSqlParser.MEDIANAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIRROR() { return GetToken(TSqlParser.MIRROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOFORMAT() { return GetToken(TSqlParser.NOFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOINIT() { return GetToken(TSqlParser.NOINIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOREWIND() { return GetToken(TSqlParser.NOREWIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOSKIP() { return GetToken(TSqlParser.NOSKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOUNLOAD() { return GetToken(TSqlParser.NOUNLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_CHECKSUM() { return GetToken(TSqlParser.NO_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_COMPRESSION() { return GetToken(TSqlParser.NO_COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_FAILURE() { return GetToken(TSqlParser.ON_FAILURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_NODE() { return GetToken(TSqlParser.PARAM_NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTILE_CONT() { return GetToken(TSqlParser.PERCENTILE_CONT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTILE_DISC() { return GetToken(TSqlParser.PERCENTILE_DISC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(TSqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICATE() { return GetToken(TSqlParser.PREDICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PYTHON() { return GetToken(TSqlParser.PYTHON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R() { return GetToken(TSqlParser.R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE() { return GetToken(TSqlParser.REPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAINDAYS() { return GetToken(TSqlParser.RETAINDAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REWIND() { return GetToken(TSqlParser.REWIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_ROBIN() { return GetToken(TSqlParser.ROUND_ROBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_KEYWORD() { return GetToken(TSqlParser.SKIP_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_ON_ERROR() { return GetToken(TSqlParser.STOP_ON_ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAPE() { return GetToken(TSqlParser.TAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_CAST() { return GetToken(TSqlParser.TRY_CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(TSqlParser.UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URL() { return GetToken(TSqlParser.URL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(TSqlParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(TSqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR() { return GetToken(TSqlParser.NVARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_KEYWORD() { return GetToken(TSqlParser.BINARY_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY_KEYWORD() { return GetToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 1064, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12001;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 144255925564211201L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -72057697117143049L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -2147483649L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -288371113640067073L) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -4503599627378689L) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -2305843009482129409L) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & -49539596974882817L) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & -412342026499L) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & -36028797560094723L) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & 8646840086878453759L) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & 56831L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(Context, State);
		EnterRule(_localctx, 1066, RULE_id_);
		try {
			State = 12007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12003;
				Match(ID);
				}
				break;
			case DOUBLE_QUOTE_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12004;
				Match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12005;
				Match(SQUARE_BRACKET_ID);
				}
				break;
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12006;
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(Context, State);
		EnterRule(_localctx, 1068, RULE_simple_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12009;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_or_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_or_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_or_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_or_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_stringContext id_or_string() {
		Id_or_stringContext _localctx = new Id_or_stringContext(Context, State);
		EnterRule(_localctx, 1070, RULE_id_or_string);
		try {
			State = 12013;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case FILLFACTOR:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISTRIBUTION:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REPLICATE:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROUND_ROBIN:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12011;
				id_();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12012;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 1072, RULE_comparison_operator);
		try {
			State = 12030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1678,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12015;
				Match(EQUAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12016;
				Match(GREATER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12017;
				Match(LESS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12018;
				Match(LESS);
				State = 12019;
				Match(EQUAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12020;
				Match(GREATER);
				State = 12021;
				Match(EQUAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12022;
				Match(LESS);
				State = 12023;
				Match(GREATER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 12024;
				Match(EXCLAMATION);
				State = 12025;
				Match(EQUAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 12026;
				Match(EXCLAMATION);
				State = 12027;
				Match(GREATER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 12028;
				Match(EXCLAMATION);
				State = 12029;
				Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(TSqlParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(TSqlParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(TSqlParser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(TSqlParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(TSqlParser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(TSqlParser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(TSqlParser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(TSqlParser.OR_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 1074, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12032;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 867)) & ~0x3f) == 0 && ((1L << (_la - 867)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(TSqlParser.MODULE, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_size(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(Context, State);
		EnterRule(_localctx, 1076, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12034;
			Match(DECIMAL);
			State = 12036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				State = 12035;
				_la = TokenStream.LA(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46: return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);
		case 394: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 406: return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}
	private bool search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,913,12039,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
		49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
		56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
		63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
		70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
		77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
		84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
		91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
		98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,
		2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,
		2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,
		2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,
		2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,
		2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
		2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
		2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,
		2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,
		2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,
		2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,
		2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,
		2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,
		2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,
		2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,
		2,537,7,537,2,538,7,538,1,0,5,0,1080,8,0,10,0,12,0,1083,9,0,1,0,1,0,1,
		0,5,0,1088,8,0,10,0,12,0,1091,9,0,1,0,1,0,3,0,1095,8,0,1,1,1,1,3,1,1099,
		8,1,1,1,1,1,4,1,1103,8,1,11,1,12,1,1104,3,1,1107,8,1,1,1,5,1,1110,8,1,
		10,1,12,1,1113,9,1,1,1,1,1,5,1,1117,8,1,10,1,12,1,1120,9,1,1,1,3,1,1123,
		8,1,1,2,1,2,1,2,1,2,3,2,1129,8,2,1,3,1,3,3,3,1133,8,3,1,3,1,3,3,3,1137,
		8,3,1,3,1,3,3,3,1141,8,3,1,3,1,3,3,3,1145,8,3,1,3,1,3,3,3,1149,8,3,1,3,
		1,3,3,3,1153,8,3,1,3,1,3,3,3,1157,8,3,1,3,3,3,1160,8,3,1,4,1,4,1,4,1,4,
		1,4,3,4,1167,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1330,8,5,1,6,1,6,1,6,1,6,1,6,3,6,1337,
		8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1351,8,7,1,8,1,
		8,3,8,1355,8,8,1,8,5,8,1358,8,8,10,8,12,8,1361,9,8,1,8,1,8,3,8,1365,8,
		8,1,9,1,9,3,9,1369,8,9,1,10,1,10,3,10,1373,8,10,1,11,1,11,1,11,3,11,1378,
		8,11,1,11,1,11,1,11,3,11,1383,8,11,3,11,1385,8,11,1,12,1,12,3,12,1389,
		8,12,1,12,3,12,1392,8,12,1,13,1,13,1,13,1,13,1,13,3,13,1399,8,13,1,13,
		3,13,1402,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1411,8,14,1,14,
		3,14,1414,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,3,18,1425,
		8,18,1,18,4,18,1428,8,18,11,18,12,18,1429,1,18,1,18,1,18,3,18,1435,8,18,
		1,18,1,18,1,18,3,18,1440,8,18,1,18,5,18,1443,8,18,10,18,12,18,1446,9,18,
		1,18,1,18,1,18,3,18,1451,8,18,1,19,1,19,3,19,1455,8,19,1,19,3,19,1458,
		8,19,1,19,1,19,3,19,1462,8,19,1,19,3,19,1465,8,19,1,19,3,19,1468,8,19,
		1,20,1,20,1,20,1,20,1,20,3,20,1475,8,20,1,20,1,20,3,20,1479,8,20,3,20,
		1481,8,20,1,21,1,21,1,21,3,21,1486,8,21,1,21,1,21,5,21,1490,8,21,10,21,
		12,21,1493,9,21,1,21,3,21,1496,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,5,22,1507,8,22,10,22,12,22,1510,9,22,1,22,1,22,1,22,3,22,1515,
		8,22,1,22,3,22,1518,8,22,1,22,1,22,1,22,1,22,1,22,5,22,1525,8,22,10,22,
		12,22,1528,9,22,3,22,1530,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1551,8,24,
		1,25,1,25,1,25,1,25,1,25,1,25,3,25,1559,8,25,1,25,1,25,1,25,3,25,1564,
		8,25,1,25,3,25,1567,8,25,1,25,1,25,1,25,3,25,1572,8,25,1,25,3,25,1575,
		8,25,1,25,1,25,1,25,3,25,1580,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
		1588,8,26,1,26,1,26,1,26,3,26,1593,8,26,1,26,3,26,1596,8,26,1,26,1,26,
		1,26,3,26,1601,8,26,1,27,1,27,1,27,1,27,3,27,1607,8,27,1,27,1,27,1,27,
		3,27,1612,8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
		1,30,1,30,1,30,1,31,3,31,1629,8,31,1,31,3,31,1632,8,31,1,31,3,31,1635,
		8,31,1,31,3,31,1638,8,31,1,32,1,32,1,32,3,32,1643,8,32,1,33,1,33,1,34,
		1,34,1,34,1,35,1,35,3,35,1652,8,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,
		1,38,1,38,1,39,1,39,1,39,1,39,3,39,1667,8,39,1,40,1,40,1,41,1,41,1,41,
		1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,3,45,1684,8,45,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1695,8,46,1,46,1,46,5,46,
		1699,8,46,10,46,12,46,1702,9,46,1,47,1,47,1,47,1,47,1,48,1,48,1,49,1,49,
		1,50,1,50,1,50,1,50,3,50,1716,8,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,
		1,54,1,54,1,54,1,54,1,54,1,54,3,54,1731,8,54,1,55,1,55,1,56,1,56,1,56,
		1,56,1,56,3,56,1740,8,56,1,56,1,56,3,56,1744,8,56,1,56,4,56,1747,8,56,
		11,56,12,56,1748,1,56,1,56,1,56,1,56,3,56,1755,8,56,1,57,1,57,1,57,1,57,
		3,57,1761,8,57,1,57,3,57,1764,8,57,1,57,4,57,1767,8,57,11,57,12,57,1768,
		1,57,1,57,1,57,3,57,1774,8,57,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1782,
		8,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,3,60,1792,8,60,1,60,1,60,
		1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		1,62,3,62,1811,8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1819,8,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1832,8,63,3,63,
		1834,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1846,
		8,63,3,63,1848,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1855,8,63,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,3,64,1864,8,64,1,65,1,65,1,65,1,65,3,65,1870,
		8,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,3,66,1879,8,66,1,67,1,67,1,68,
		1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,1893,8,70,1,70,1,70,
		1,70,1,70,1,71,1,71,1,71,1,71,3,71,1903,8,71,1,71,1,71,1,71,1,71,1,72,
		1,72,1,72,1,72,3,72,1913,8,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,3,73,1953,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1976,
		8,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,2012,8,77,3,77,2014,8,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,3,77,2032,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,2056,
		8,77,1,77,3,77,2059,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,3,77,2073,8,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,
		1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2105,8,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
		2123,8,81,1,81,3,81,2126,8,81,1,81,1,81,1,81,3,81,2131,8,81,1,81,3,81,
		2134,8,81,1,81,1,81,1,81,3,81,2139,8,81,1,81,3,81,2142,8,81,1,81,1,81,
		1,81,3,81,2147,8,81,1,81,3,81,2150,8,81,1,81,1,81,1,81,3,81,2155,8,81,
		1,81,3,81,2158,8,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2166,8,81,1,81,
		3,81,2169,8,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2177,8,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2190,8,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2201,8,81,1,81,5,81,2204,8,81,
		10,81,12,81,2207,9,81,1,81,3,81,2210,8,81,1,81,1,81,1,81,1,81,3,81,2216,
		8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2239,8,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2251,8,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,3,81,2262,8,81,1,81,5,81,2265,8,81,10,81,12,81,
		2268,9,81,1,81,3,81,2271,8,81,1,81,1,81,1,81,1,81,3,81,2277,8,81,3,81,
		2279,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
		2292,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,4,81,2313,8,81,11,81,12,81,2314,1,81,
		1,81,1,81,1,81,1,81,3,81,2322,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		3,81,2331,8,81,1,81,1,81,1,81,3,81,2336,8,81,1,81,3,81,2339,8,81,1,81,
		1,81,1,81,3,81,2344,8,81,1,81,3,81,2347,8,81,1,81,1,81,1,81,3,81,2352,
		8,81,1,81,4,81,2355,8,81,11,81,12,81,2356,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,3,81,2385,8,81,1,81,1,81,1,81,1,81,1,81,
		1,81,3,81,2393,8,81,1,81,1,81,4,81,2397,8,81,11,81,12,81,2398,1,81,1,81,
		1,81,1,81,1,81,3,81,2406,8,81,3,81,2408,8,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,3,81,2421,8,81,1,81,1,81,1,81,1,81,1,81,
		3,81,2428,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,3,81,2443,8,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,2461,8,84,1,84,3,84,2464,8,84,
		3,84,2466,8,84,1,84,1,84,1,84,3,84,2471,8,84,1,84,1,84,3,84,2475,8,84,
		1,84,3,84,2478,8,84,3,84,2480,8,84,1,84,1,84,1,84,1,84,3,84,2486,8,84,
		1,84,3,84,2489,8,84,3,84,2491,8,84,1,84,1,84,1,84,1,84,3,84,2497,8,84,
		3,84,2499,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2521,8,86,1,86,1,86,
		1,86,1,86,1,86,1,86,3,86,2529,8,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,
		2537,8,86,4,86,2539,8,86,11,86,12,86,2540,1,86,1,86,1,86,1,86,1,86,1,86,
		1,86,3,86,2550,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
		1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2571,8,87,1,87,1,87,
		1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,2584,8,88,1,88,1,88,
		1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,2599,8,88,
		4,88,2601,8,88,11,88,12,88,2602,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,
		1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,
		1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,3,95,2638,8,95,
		1,95,3,95,2641,8,95,1,95,4,95,2644,8,95,11,95,12,95,2645,1,96,1,96,1,96,
		1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,
		1,99,1,99,1,99,1,99,3,99,2669,8,99,1,99,3,99,2672,8,99,1,99,1,99,1,99,
		3,99,2677,8,99,1,99,1,99,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,
		1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,
		1,103,1,103,3,103,2703,8,103,1,104,1,104,1,104,1,104,1,104,1,104,1,105,
		1,105,1,105,1,105,1,105,1,105,3,105,2717,8,105,1,105,1,105,1,105,3,105,
		2722,8,105,1,105,1,105,1,106,1,106,1,106,1,106,3,106,2730,8,106,1,106,
		4,106,2733,8,106,11,106,12,106,2734,1,106,1,106,1,106,1,106,1,106,3,106,
		2742,8,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,
		1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,2763,8,109,
		1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,112,
		1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,
		1,114,1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,3,116,
		2800,8,116,1,116,1,116,1,116,3,116,2805,8,116,1,116,1,116,1,117,1,117,
		1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,119,1,119,1,119,
		1,119,3,119,2824,8,119,1,119,1,119,1,120,1,120,1,120,1,120,1,121,1,121,
		1,121,1,121,3,121,2836,8,121,1,121,3,121,2839,8,121,1,121,1,121,1,121,
		3,121,2844,8,121,1,121,3,121,2847,8,121,1,122,1,122,1,122,1,122,3,122,
		2853,8,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,1,124,1,124,
		1,124,1,124,1,124,3,124,2868,8,124,1,124,1,124,1,124,3,124,2873,8,124,
		1,124,1,124,1,125,1,125,1,125,1,125,3,125,2881,8,125,1,125,3,125,2884,
		8,125,1,125,1,125,1,125,3,125,2889,8,125,1,125,1,125,1,125,3,125,2894,
		8,125,1,125,3,125,2897,8,125,1,126,1,126,1,126,1,126,1,126,1,127,1,127,
		1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,
		1,129,1,130,1,130,3,130,2921,8,130,1,130,1,130,1,130,1,130,1,130,3,130,
		2928,8,130,1,130,1,130,1,130,3,130,2933,8,130,1,130,1,130,1,130,3,130,
		2938,8,130,1,130,1,130,1,130,4,130,2943,8,130,11,130,12,130,2944,1,131,
		1,131,1,131,1,131,1,131,3,131,2952,8,131,1,131,1,131,1,131,1,131,1,132,
		1,132,1,132,1,132,1,132,1,132,1,132,3,132,2965,8,132,1,133,1,133,1,133,
		1,133,3,133,2971,8,133,1,133,1,133,1,133,3,133,2976,8,133,1,133,1,133,
		1,134,1,134,1,134,1,134,3,134,2984,8,134,1,134,1,134,1,135,1,135,1,135,
		1,135,1,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,3000,8,136,
		1,136,1,136,1,137,1,137,1,137,3,137,3007,8,137,1,137,1,137,1,137,3,137,
		3012,8,137,1,137,4,137,3015,8,137,11,137,12,137,3016,1,137,3,137,3020,
		8,137,1,137,1,137,1,137,1,137,3,137,3026,8,137,1,137,1,137,1,137,1,137,
		3,137,3032,8,137,1,138,1,138,1,138,3,138,3037,8,138,1,138,1,138,1,138,
		3,138,3042,8,138,1,138,4,138,3045,8,138,11,138,12,138,3046,1,138,3,138,
		3050,8,138,1,138,1,138,1,138,1,138,3,138,3056,8,138,1,138,1,138,1,138,
		1,138,3,138,3062,8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
		1,139,3,139,3073,8,139,1,139,3,139,3076,8,139,1,140,1,140,1,140,1,140,
		1,140,1,140,1,140,1,140,3,140,3086,8,140,1,140,1,140,1,140,1,140,3,140,
		3092,8,140,4,140,3094,8,140,11,140,12,140,3095,1,140,1,140,3,140,3100,
		8,140,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
		1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
		1,142,1,142,1,142,1,142,3,142,3129,8,142,1,143,1,143,1,143,1,143,1,143,
		1,143,1,143,1,143,1,143,1,143,1,143,3,143,3142,8,143,1,143,1,143,1,143,
		1,143,3,143,3148,8,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
		3,144,3158,8,144,1,144,3,144,3161,8,144,1,145,1,145,1,145,1,145,1,145,
		1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
		1,146,3,146,3181,8,146,1,146,1,146,3,146,3185,8,146,1,146,1,146,3,146,
		3189,8,146,1,146,4,146,3192,8,146,11,146,12,146,3193,1,146,1,146,1,146,
		1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,3209,
		8,147,1,147,1,147,1,147,1,147,1,147,3,147,3216,8,147,1,147,1,147,1,147,
		1,147,1,147,1,147,1,147,3,147,3225,8,147,1,147,1,147,1,147,1,147,5,147,
		3231,8,147,10,147,12,147,3234,9,147,3,147,3236,8,147,1,147,1,147,1,147,
		3,147,3241,8,147,1,147,1,147,1,147,3,147,3246,8,147,1,147,1,147,1,147,
		1,147,4,147,3252,8,147,11,147,12,147,3253,1,147,1,147,4,147,3258,8,147,
		11,147,12,147,3259,1,147,1,147,3,147,3264,8,147,1,147,1,147,5,147,3268,
		8,147,10,147,12,147,3271,9,147,5,147,3273,8,147,10,147,12,147,3276,9,147,
		1,147,3,147,3279,8,147,1,147,1,147,1,147,1,147,1,147,3,147,3286,8,147,
		1,147,1,147,1,147,1,147,5,147,3292,8,147,10,147,12,147,3295,9,147,1,147,
		1,147,1,147,1,147,1,147,3,147,3302,8,147,1,147,1,147,1,147,1,147,1,147,
		1,147,1,147,3,147,3311,8,147,1,147,1,147,1,147,3,147,3316,8,147,1,147,
		1,147,3,147,3320,8,147,1,147,3,147,3323,8,147,4,147,3325,8,147,11,147,
		12,147,3326,1,147,1,147,5,147,3331,8,147,10,147,12,147,3334,9,147,5,147,
		3336,8,147,10,147,12,147,3339,9,147,1,147,1,147,1,147,1,147,1,147,3,147,
		3346,8,147,1,147,1,147,1,147,1,147,5,147,3352,8,147,10,147,12,147,3355,
		9,147,1,147,1,147,1,147,3,147,3360,8,147,1,147,1,147,1,147,1,147,3,147,
		3366,8,147,1,147,3,147,3369,8,147,1,147,1,147,1,147,3,147,3374,8,147,1,
		147,3,147,3377,8,147,1,147,1,147,1,147,1,147,1,147,3,147,3384,8,147,3,
		147,3386,8,147,1,147,3,147,3389,8,147,1,147,1,147,1,147,1,147,3,147,3395,
		8,147,1,147,3,147,3398,8,147,1,147,1,147,1,147,3,147,3403,8,147,1,147,
		3,147,3406,8,147,1,147,1,147,1,147,3,147,3411,8,147,1,147,3,147,3414,8,
		147,1,147,1,147,1,147,3,147,3419,8,147,1,147,3,147,3422,8,147,1,147,1,
		147,1,147,3,147,3427,8,147,1,148,3,148,3430,8,148,1,148,3,148,3433,8,148,
		1,148,3,148,3436,8,148,1,148,1,148,1,148,1,148,1,148,3,148,3443,8,148,
		4,148,3445,8,148,11,148,12,148,3446,1,149,1,149,1,149,1,149,1,149,3,149,
		3454,8,149,1,150,1,150,1,150,1,150,1,150,3,150,3461,8,150,1,150,1,150,
		1,150,1,150,3,150,3467,8,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
		1,150,1,150,1,150,1,150,3,150,3480,8,150,1,150,1,150,3,150,3484,8,150,
		1,150,1,150,1,150,3,150,3489,8,150,1,150,1,150,1,150,1,150,1,150,1,150,
		1,150,1,150,3,150,3499,8,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
		3,150,3508,8,150,1,150,1,150,3,150,3512,8,150,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,3,151,3524,8,151,1,151,1,151,1,151,
		1,151,3,151,3530,8,151,1,151,1,151,1,151,4,151,3535,8,151,11,151,12,151,
		3536,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,3557,8,151,1,151,1,151,
		3,151,3561,8,151,1,152,1,152,1,152,1,152,1,152,1,152,3,152,3569,8,152,
		1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,3578,8,152,1,152,1,152,
		1,152,1,152,3,152,3584,8,152,1,152,1,152,1,152,1,152,3,152,3590,8,152,
		1,152,1,152,1,152,1,152,1,152,1,152,4,152,3598,8,152,11,152,12,152,3599,
		1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,153,3,153,3610,8,153,1,153,
		1,153,3,153,3614,8,153,1,153,3,153,3617,8,153,1,153,1,153,3,153,3621,8,
		153,1,153,1,153,1,153,3,153,3626,8,153,1,153,1,153,1,153,1,153,3,153,3632,
		8,153,1,153,3,153,3635,8,153,1,153,1,153,3,153,3639,8,153,1,153,1,153,
		1,153,1,153,1,153,1,153,4,153,3647,8,153,11,153,12,153,3648,1,153,3,153,
		3652,8,153,1,154,1,154,1,154,1,154,1,154,1,154,3,154,3660,8,154,1,154,
		1,154,1,154,1,154,1,154,1,154,3,154,3668,8,154,1,154,1,154,1,154,1,154,
		1,154,3,154,3675,8,154,1,154,1,154,1,154,1,154,1,154,4,154,3682,8,154,
		11,154,12,154,3683,3,154,3686,8,154,1,154,1,154,1,154,3,154,3691,8,154,
		1,154,1,154,1,154,1,154,3,154,3697,8,154,1,154,4,154,3700,8,154,11,154,
		12,154,3701,3,154,3704,8,154,1,154,3,154,3707,8,154,1,154,1,154,1,154,
		3,154,3712,8,154,1,154,3,154,3715,8,154,1,154,1,154,1,154,3,154,3720,8,
		154,1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,
		1,155,1,155,3,155,3735,8,155,1,155,1,155,1,155,1,155,1,155,3,155,3742,
		8,155,1,155,1,155,1,155,1,155,1,155,4,155,3749,8,155,11,155,12,155,3750,
		3,155,3753,8,155,1,155,1,155,1,155,3,155,3758,8,155,1,155,1,155,1,155,
		1,155,3,155,3764,8,155,1,155,4,155,3767,8,155,11,155,12,155,3768,3,155,
		3771,8,155,1,155,3,155,3774,8,155,1,155,1,155,1,155,3,155,3779,8,155,1,
		155,3,155,3782,8,155,1,155,1,155,1,155,3,155,3787,8,155,1,155,1,155,1,
		156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,3800,8,156,1,
		156,1,156,1,156,3,156,3805,8,156,1,157,1,157,1,157,1,157,1,157,1,157,1,
		157,3,157,3814,8,157,1,157,1,157,1,157,3,157,3819,8,157,1,157,1,157,1,
		157,1,157,3,157,3825,8,157,1,157,1,157,3,157,3829,8,157,1,157,1,157,3,
		157,3833,8,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,
		158,1,158,1,158,1,158,1,158,1,158,3,158,3850,8,158,3,158,3852,8,158,1,
		159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,3862,8,159,1,159,1,
		159,1,159,3,159,3867,8,159,3,159,3869,8,159,1,159,1,159,3,159,3873,8,159,
		1,160,1,160,1,160,1,160,3,160,3879,8,160,1,160,1,160,1,160,1,160,1,160,
		1,160,3,160,3887,8,160,1,160,5,160,3890,8,160,10,160,12,160,3893,9,160,
		3,160,3895,8,160,1,160,1,160,1,160,1,160,5,160,3901,8,160,10,160,12,160,
		3904,9,160,3,160,3906,8,160,1,160,1,160,1,160,3,160,3911,8,160,1,160,1,
		160,1,160,3,160,3916,8,160,1,160,1,160,1,160,3,160,3921,8,160,1,160,1,
		160,1,160,3,160,3926,8,160,1,160,1,160,1,160,3,160,3931,8,160,1,160,1,
		160,1,160,3,160,3936,8,160,1,160,1,160,3,160,3940,8,160,1,160,1,160,1,
		160,3,160,3945,8,160,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,
		161,3,161,3956,8,161,1,161,5,161,3959,8,161,10,161,12,161,3962,9,161,3,
		161,3964,8,161,1,161,3,161,3967,8,161,1,161,1,161,1,161,3,161,3972,8,161,
		1,161,3,161,3975,8,161,1,161,1,161,1,161,3,161,3980,8,161,1,161,3,161,
		3983,8,161,1,161,1,161,1,161,3,161,3988,8,161,1,161,3,161,3991,8,161,1,
		161,1,161,1,161,3,161,3996,8,161,1,161,3,161,3999,8,161,1,161,1,161,1,
		161,3,161,4004,8,161,1,161,3,161,4007,8,161,1,161,1,161,1,161,3,161,4012,
		8,161,1,161,1,161,1,161,1,161,3,161,4018,8,161,1,161,1,161,1,161,3,161,
		4023,8,161,1,161,3,161,4026,8,161,1,161,1,161,1,161,3,161,4031,8,161,1,
		161,1,161,1,161,1,161,1,161,3,161,4038,8,161,3,161,4040,8,161,1,162,1,
		162,1,162,1,162,3,162,4046,8,162,1,162,1,162,1,162,1,162,1,162,1,162,1,
		162,3,162,4055,8,162,1,162,1,162,1,162,3,162,4060,8,162,3,162,4062,8,162,
		1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,4074,
		8,163,1,164,1,164,1,164,1,164,3,164,4080,8,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,5,164,4090,8,164,10,164,12,164,4093,9,164,3,164,
		4095,8,164,1,164,1,164,1,164,3,164,4100,8,164,3,164,4102,8,164,1,165,1,
		165,1,165,1,165,1,165,1,165,1,165,1,165,3,165,4112,8,165,1,165,1,165,1,
		165,3,165,4117,8,165,3,165,4119,8,165,1,165,1,165,3,165,4123,8,165,1,166,
		1,166,1,166,1,166,3,166,4129,8,166,1,166,1,166,1,166,1,166,1,166,1,166,
		1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,4147,
		8,166,3,166,4149,8,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
		1,167,1,168,1,168,1,168,1,168,3,168,4164,8,168,1,168,1,168,1,168,1,168,
		1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
		3,168,4182,8,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,4190,8,168,
		1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,4200,8,169,1,170,
		1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
		1,170,3,170,4216,8,170,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
		1,171,1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,
		4237,8,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,
		4248,8,173,1,173,1,173,1,173,1,173,3,173,4254,8,173,1,174,1,174,1,174,
		1,174,1,174,1,174,1,174,3,174,4263,8,174,1,174,1,174,1,174,1,174,1,174,
		1,174,1,174,3,174,4272,8,174,1,174,1,174,1,174,1,174,3,174,4278,8,174,
		1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,4287,8,175,1,175,1,175,
		1,175,3,175,4292,8,175,1,175,3,175,4295,8,175,1,175,1,175,1,175,3,175,
		4300,8,175,1,175,3,175,4303,8,175,1,175,1,175,1,175,3,175,4308,8,175,1,
		175,3,175,4311,8,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,4319,8,
		175,1,175,1,175,1,175,1,175,3,175,4325,8,175,4,175,4327,8,175,11,175,12,
		175,4328,1,175,1,175,1,175,1,175,1,175,3,175,4336,8,175,1,175,1,175,1,
		175,1,175,3,175,4342,8,175,4,175,4344,8,175,11,175,12,175,4345,1,175,3,
		175,4349,8,175,3,175,4351,8,175,1,175,3,175,4354,8,175,1,175,1,175,1,175,
		3,175,4359,8,175,1,175,3,175,4362,8,175,1,175,1,175,1,175,3,175,4367,8,
		175,1,175,3,175,4370,8,175,1,175,1,175,1,175,3,175,4375,8,175,1,175,3,
		175,4378,8,175,1,175,1,175,1,175,3,175,4383,8,175,1,175,3,175,4386,8,175,
		1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
		1,176,3,176,4401,8,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
		1,176,3,176,4412,8,176,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
		1,177,1,177,3,177,4424,8,177,1,178,1,178,1,178,1,178,1,178,3,178,4431,
		8,178,1,179,1,179,1,179,1,179,1,179,3,179,4438,8,179,1,179,1,179,3,179,
		4442,8,179,1,179,1,179,1,179,3,179,4447,8,179,1,179,3,179,4450,8,179,1,
		179,1,179,1,179,3,179,4455,8,179,1,179,3,179,4458,8,179,1,179,1,179,1,
		179,3,179,4463,8,179,1,179,3,179,4466,8,179,1,179,1,179,1,179,1,179,1,
		179,1,179,1,179,3,179,4475,8,179,1,180,1,180,1,180,1,180,1,180,3,180,4482,
		8,180,1,180,1,180,1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
		1,181,1,181,3,181,4497,8,181,1,181,3,181,4500,8,181,1,181,1,181,1,181,
		3,181,4505,8,181,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
		3,182,4516,8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,4525,
		8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,4536,
		8,182,1,182,1,182,1,182,1,182,5,182,4542,8,182,10,182,12,182,4545,9,182,
		1,183,1,183,1,183,1,183,1,183,3,183,4552,8,183,1,184,1,184,1,184,1,184,
		1,184,1,184,3,184,4560,8,184,1,184,1,184,1,184,3,184,4565,8,184,1,185,
		1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,3,185,4576,8,185,1,185,
		3,185,4579,8,185,1,185,1,185,3,185,4583,8,185,1,186,1,186,1,186,1,186,
		1,186,1,186,3,186,4591,8,186,1,186,1,186,3,186,4595,8,186,1,186,1,186,
		3,186,4599,8,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,4607,8,186,
		1,186,4,186,4610,8,186,11,186,12,186,4611,1,186,1,186,1,186,1,186,1,186,
		1,186,3,186,4620,8,186,1,186,1,186,1,186,3,186,4625,8,186,1,186,1,186,
		5,186,4629,8,186,10,186,12,186,4632,9,186,4,186,4634,8,186,11,186,12,186,
		4635,1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,4645,8,186,1,186,
		3,186,4648,8,186,1,186,1,186,1,186,3,186,4653,8,186,1,187,1,187,1,187,
		1,187,1,187,3,187,4660,8,187,1,187,1,187,1,187,1,187,3,187,4666,8,187,
		3,187,4668,8,187,1,187,1,187,1,187,3,187,4673,8,187,1,187,1,187,1,187,
		1,187,3,187,4679,8,187,1,187,1,187,1,187,1,187,3,187,4685,8,187,1,187,
		1,187,1,187,3,187,4690,8,187,1,187,1,187,1,187,1,187,3,187,4696,8,187,
		1,188,1,188,1,188,1,188,1,188,3,188,4703,8,188,1,188,1,188,1,188,3,188,
		4708,8,188,1,188,1,188,1,188,3,188,4713,8,188,1,188,1,188,1,188,3,188,
		4718,8,188,1,188,3,188,4721,8,188,1,188,1,188,3,188,4725,8,188,1,188,3,
		188,4728,8,188,1,188,1,188,3,188,4732,8,188,1,188,1,188,3,188,4736,8,188,
		1,188,3,188,4739,8,188,1,188,1,188,3,188,4743,8,188,1,188,1,188,1,188,
		3,188,4748,8,188,1,188,1,188,3,188,4752,8,188,1,188,1,188,3,188,4756,8,
		188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,4766,8,189,1,
		189,1,189,1,189,1,189,3,189,4772,8,189,1,189,1,189,1,189,1,189,1,189,3,
		189,4779,8,189,1,189,3,189,4782,8,189,1,189,1,189,1,189,1,189,3,189,4788,
		8,189,1,189,1,189,1,189,1,189,3,189,4794,8,189,1,189,1,189,1,189,5,189,
		4799,8,189,10,189,12,189,4802,9,189,1,189,1,189,1,189,3,189,4807,8,189,
		3,189,4809,8,189,1,189,1,189,1,189,3,189,4814,8,189,1,189,1,189,1,189,
		1,189,3,189,4820,8,189,1,189,1,189,1,189,1,189,3,189,4826,8,189,1,189,
		1,189,1,189,5,189,4831,8,189,10,189,12,189,4834,9,189,1,189,3,189,4837,
		8,189,1,189,1,189,3,189,4841,8,189,1,189,3,189,4844,8,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,4858,
		8,189,1,189,1,189,1,189,3,189,4863,8,189,1,189,1,189,3,189,4867,8,189,
		1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,
		4880,8,189,1,189,3,189,4883,8,189,3,189,4885,8,189,1,189,1,189,1,189,1,
		189,1,189,1,189,3,189,4893,8,189,1,190,1,190,1,190,1,190,1,190,1,190,1,
		190,1,190,3,190,4903,8,190,1,190,1,190,1,190,1,190,3,190,4909,8,190,1,
		190,1,190,1,190,1,190,1,190,3,190,4916,8,190,1,190,3,190,4919,8,190,1,
		190,1,190,1,190,1,190,3,190,4925,8,190,1,190,1,190,1,190,1,190,3,190,4931,
		8,190,1,190,1,190,1,190,5,190,4936,8,190,10,190,12,190,4939,9,190,1,190,
		1,190,1,190,3,190,4944,8,190,3,190,4946,8,190,1,190,1,190,1,190,3,190,
		4951,8,190,1,190,1,190,1,190,1,190,3,190,4957,8,190,1,190,1,190,1,190,
		1,190,3,190,4963,8,190,1,190,1,190,1,190,1,190,3,190,4969,8,190,1,190,
		1,190,1,190,5,190,4974,8,190,10,190,12,190,4977,9,190,1,190,3,190,4980,
		8,190,1,190,1,190,3,190,4984,8,190,1,190,3,190,4987,8,190,1,190,1,190,
		1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,5001,
		8,190,1,190,1,190,1,190,3,190,5006,8,190,1,190,1,190,3,190,5010,8,190,
		1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,
		5023,8,190,1,190,3,190,5026,8,190,3,190,5028,8,190,1,190,1,190,1,190,1,
		190,1,190,1,190,3,190,5036,8,190,1,191,1,191,1,191,1,191,1,191,1,191,1,
		191,1,191,1,191,3,191,5047,8,191,1,191,1,191,1,191,1,191,1,191,5,191,5054,
		8,191,10,191,12,191,5057,9,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,
		5065,8,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,3,192,
		5076,8,192,1,192,1,192,1,192,1,192,1,192,5,192,5083,8,192,10,192,12,192,
		5086,9,192,1,192,1,192,1,192,1,192,1,192,1,192,3,192,5094,8,192,1,193,
		1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,3,193,5106,8,193,
		1,193,1,193,3,193,5110,8,193,1,193,1,193,1,193,4,193,5115,8,193,11,193,
		12,193,5116,3,193,5119,8,193,1,193,1,193,1,193,3,193,5124,8,193,1,193,
		1,193,3,193,5128,8,193,1,193,1,193,1,193,4,193,5133,8,193,11,193,12,193,
		5134,3,193,5137,8,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,
		1,193,1,193,1,193,1,193,3,193,5151,8,193,1,193,1,193,1,193,3,193,5156,
		8,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,
		1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,3,193,5178,8,193,
		1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,
		1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,3,193,5200,8,193,1,193,
		1,193,1,193,3,193,5205,8,193,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,1,194,3,194,5218,8,194,1,195,1,195,1,195,1,195,1,195,
		1,195,3,195,5226,8,195,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,
		1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,3,197,5246,
		8,197,1,197,3,197,5249,8,197,1,197,1,197,5,197,5253,8,197,10,197,12,197,
		5256,9,197,1,198,1,198,1,198,1,198,1,198,3,198,5263,8,198,1,198,1,198,
		1,198,1,198,1,198,3,198,5270,8,198,1,198,1,198,1,198,3,198,5275,8,198,
		1,198,1,198,3,198,5279,8,198,4,198,5281,8,198,11,198,12,198,5282,1,198,
		3,198,5286,8,198,1,199,1,199,1,199,1,199,1,199,3,199,5293,8,199,1,199,
		1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
		1,199,1,199,1,199,3,199,5311,8,199,3,199,5313,8,199,1,200,1,200,1,200,
		1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
		1,200,1,200,1,200,3,200,5333,8,200,1,201,1,201,1,201,1,201,1,201,3,201,
		5340,8,201,1,201,1,201,1,201,1,201,1,201,3,201,5347,8,201,1,201,1,201,
		1,201,3,201,5352,8,201,1,201,1,201,1,201,3,201,5357,8,201,1,201,1,201,
		1,201,1,201,3,201,5363,8,201,1,201,1,201,1,201,3,201,5368,8,201,3,201,
		5370,8,201,1,202,1,202,1,202,1,202,1,202,3,202,5377,8,202,1,202,1,202,
		1,202,1,202,3,202,5383,8,202,1,202,1,202,1,202,1,202,3,202,5389,8,202,
		1,202,3,202,5392,8,202,1,202,1,202,1,202,1,202,3,202,5398,8,202,1,202,
		1,202,1,202,1,202,1,202,1,202,4,202,5406,8,202,11,202,12,202,5407,1,202,
		3,202,5411,8,202,1,202,1,202,1,202,1,202,1,202,3,202,5418,8,202,1,202,
		3,202,5421,8,202,1,202,1,202,1,202,4,202,5426,8,202,11,202,12,202,5427,
		1,203,1,203,1,203,1,203,1,203,1,203,3,203,5436,8,203,1,203,1,203,3,203,
		5440,8,203,1,203,1,203,1,203,1,203,3,203,5446,8,203,1,203,1,203,1,203,
		5,203,5451,8,203,10,203,12,203,5454,9,203,3,203,5456,8,203,1,203,1,203,
		1,203,1,203,1,203,3,203,5463,8,203,1,203,1,203,1,203,1,203,3,203,5469,
		8,203,1,203,1,203,1,203,1,203,1,203,3,203,5476,8,203,1,203,3,203,5479,
		8,203,1,203,1,203,1,203,1,203,3,203,5485,8,203,1,203,1,203,1,203,5,203,
		5490,8,203,10,203,12,203,5493,9,203,3,203,5495,8,203,1,203,1,203,1,203,
		1,203,1,203,1,203,3,203,5503,8,203,1,203,1,203,1,203,1,203,3,203,5509,
		8,203,1,203,1,203,1,203,1,203,1,203,3,203,5516,8,203,1,203,3,203,5519,
		8,203,1,203,1,203,1,203,1,203,3,203,5525,8,203,1,203,1,203,1,203,5,203,
		5530,8,203,10,203,12,203,5533,9,203,1,203,1,203,1,203,1,203,1,203,3,203,
		5540,8,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,5548,8,203,1,203,
		1,203,1,203,1,203,3,203,5554,8,203,1,203,1,203,1,203,5,203,5559,8,203,
		10,203,12,203,5562,9,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,
		5571,8,203,1,203,1,203,1,203,3,203,5576,8,203,1,204,1,204,1,204,1,204,
		1,204,1,204,1,204,1,204,3,204,5586,8,204,1,204,1,204,1,204,1,204,3,204,
		5592,8,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
		3,204,5604,8,204,3,204,5606,8,204,1,205,1,205,1,205,1,205,1,205,3,205,
		5613,8,205,1,205,1,205,1,205,1,205,3,205,5619,8,205,1,205,1,205,1,205,
		1,205,3,205,5625,8,205,1,205,1,205,1,205,1,205,3,205,5631,8,205,1,205,
		1,205,1,205,4,205,5636,8,205,11,205,12,205,5637,1,206,1,206,1,206,1,206,
		1,206,3,206,5645,8,206,1,206,1,206,1,206,1,206,1,206,1,206,3,206,5653,
		8,206,1,206,1,206,1,206,1,206,3,206,5659,8,206,1,206,1,206,1,206,1,206,
		1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,4,206,5673,8,206,11,206,
		12,206,5674,1,206,3,206,5678,8,206,1,206,1,206,1,206,3,206,5683,8,206,
		3,206,5685,8,206,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
		1,207,3,207,5697,8,207,1,207,1,207,1,207,1,207,3,207,5703,8,207,1,207,
		1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,4,207,
		5717,8,207,11,207,12,207,5718,1,207,3,207,5722,8,207,1,207,1,207,1,207,
		3,207,5727,8,207,1,207,3,207,5730,8,207,1,207,1,207,1,207,3,207,5735,8,
		207,3,207,5737,8,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,5746,
		8,208,1,208,1,208,1,208,1,208,1,208,3,208,5753,8,208,1,209,1,209,1,209,
		1,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,5765,8,209,1,209,1,209,
		1,209,1,209,1,209,1,209,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
		3,210,5781,8,210,1,210,1,210,1,210,1,210,1,210,5,210,5788,8,210,10,210,
		12,210,5791,9,210,1,210,1,210,1,211,1,211,1,211,1,211,3,211,5799,8,211,
		1,211,3,211,5802,8,211,1,211,1,211,1,211,3,211,5807,8,211,1,212,1,212,
		1,212,1,212,1,212,3,212,5814,8,212,3,212,5816,8,212,1,212,1,212,1,212,
		1,212,3,212,5822,8,212,3,212,5824,8,212,1,212,1,212,1,212,1,212,1,212,
		1,212,3,212,5832,8,212,3,212,5834,8,212,1,212,1,212,1,212,1,212,3,212,
		5840,8,212,3,212,5842,8,212,1,212,1,212,1,212,1,212,3,212,5848,8,212,3,
		212,5850,8,212,1,212,1,212,1,212,1,212,1,212,3,212,5857,8,212,1,212,3,
		212,5860,8,212,3,212,5862,8,212,1,212,3,212,5865,8,212,1,212,1,212,3,212,
		5869,8,212,3,212,5871,8,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
		3,212,5880,8,212,1,213,1,213,1,213,1,213,3,213,5886,8,213,1,213,1,213,
		3,213,5890,8,213,1,214,1,214,1,214,1,214,1,214,1,214,3,214,5898,8,214,
		1,214,1,214,1,214,1,214,1,214,3,214,5905,8,214,1,214,1,214,1,214,1,214,
		3,214,5911,8,214,3,214,5913,8,214,1,215,1,215,1,215,1,215,1,216,1,216,
		1,216,1,216,1,216,3,216,5924,8,216,1,216,1,216,1,216,3,216,5929,8,216,
		1,216,1,216,1,216,1,216,3,216,5935,8,216,4,216,5937,8,216,11,216,12,216,
		5938,1,216,1,216,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5949,8,217,
		1,218,1,218,1,218,1,218,1,218,1,218,3,218,5957,8,218,1,218,1,218,1,218,
		1,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,5969,8,218,1,219,3,219,
		5972,8,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,5980,8,219,3,219,
		5982,8,219,1,219,3,219,5985,8,219,1,219,1,219,3,219,5989,8,219,1,219,3,
		219,5992,8,219,1,219,1,219,1,219,1,219,1,219,4,219,5999,8,219,11,219,12,
		219,6000,1,219,3,219,6004,8,219,1,219,3,219,6007,8,219,1,219,1,219,1,220,
		1,220,1,220,1,220,3,220,6015,8,220,1,220,1,220,4,220,6019,8,220,11,220,
		12,220,6020,1,220,1,220,1,220,1,220,1,220,3,220,6028,8,220,1,220,1,220,
		3,220,6032,8,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
		3,220,6043,8,220,1,220,1,220,4,220,6047,8,220,11,220,12,220,6048,3,220,
		6051,8,220,1,221,1,221,1,221,1,221,1,221,5,221,6058,8,221,10,221,12,221,
		6061,9,221,1,221,3,221,6064,8,221,1,222,1,222,1,222,1,222,1,222,3,222,
		6071,8,222,1,222,1,222,1,222,3,222,6076,8,222,1,223,3,223,6079,8,223,1,
		223,1,223,1,223,1,223,1,223,1,223,3,223,6087,8,223,1,223,1,223,3,223,6091,
		8,223,1,223,3,223,6094,8,223,1,223,1,223,3,223,6098,8,223,1,223,3,223,
		6101,8,223,1,223,1,223,3,223,6105,8,223,1,223,1,223,1,223,1,223,1,223,
		3,223,6112,8,223,1,223,1,223,3,223,6116,8,223,3,223,6118,8,223,3,223,6120,
		8,223,1,223,3,223,6123,8,223,1,223,3,223,6126,8,223,1,223,3,223,6129,8,
		223,1,224,1,224,1,224,1,224,3,224,6135,8,224,1,225,3,225,6138,8,225,1,
		225,1,225,1,225,1,225,1,225,1,225,3,225,6146,8,225,3,225,6148,8,225,1,
		225,3,225,6151,8,225,1,225,1,225,3,225,6155,8,225,1,225,3,225,6158,8,225,
		1,225,1,225,1,225,1,225,3,225,6164,8,225,1,225,3,225,6167,8,225,1,225,
		1,225,3,225,6171,8,225,1,225,3,225,6174,8,225,1,225,3,225,6177,8,225,1,
		226,1,226,1,226,1,226,1,226,3,226,6184,8,226,1,227,3,227,6187,8,227,1,
		227,1,227,1,227,1,227,1,227,3,227,6194,8,227,1,227,1,227,1,227,1,227,3,
		227,6200,8,227,5,227,6202,8,227,10,227,12,227,6205,9,227,1,227,1,227,1,
		227,1,227,1,227,1,227,1,227,3,227,6214,8,227,1,227,3,227,6217,8,227,1,
		228,3,228,6220,8,228,1,228,1,228,1,229,1,229,3,229,6226,8,229,1,229,3,
		229,6229,8,229,1,229,3,229,6232,8,229,1,229,3,229,6235,8,229,1,230,1,230,
		3,230,6239,8,230,1,231,3,231,6242,8,231,1,231,1,231,1,231,1,231,1,231,
		1,231,3,231,6250,8,231,3,231,6252,8,231,1,231,1,231,3,231,6256,8,231,1,
		231,3,231,6259,8,231,1,231,1,231,1,231,1,231,5,231,6265,8,231,10,231,12,
		231,6268,9,231,1,231,3,231,6271,8,231,1,231,1,231,3,231,6275,8,231,1,231,
		1,231,1,231,1,231,1,231,3,231,6282,8,231,1,231,1,231,3,231,6286,8,231,
		3,231,6288,8,231,3,231,6290,8,231,1,231,3,231,6293,8,231,1,231,3,231,6296,
		8,231,1,231,3,231,6299,8,231,1,232,1,232,1,232,1,232,5,232,6305,8,232,
		10,232,12,232,6308,9,232,1,232,1,232,1,232,3,232,6313,8,232,1,232,1,232,
		1,232,1,232,3,232,6319,8,232,3,232,6321,8,232,1,233,1,233,3,233,6325,8,
		233,1,233,3,233,6328,8,233,1,234,1,234,1,234,1,234,1,234,1,234,3,234,6336,
		8,234,1,234,1,234,3,234,6340,8,234,1,234,1,234,1,234,5,234,6345,8,234,
		10,234,12,234,6348,9,234,3,234,6350,8,234,1,234,1,234,1,234,1,234,1,234,
		5,234,6357,8,234,10,234,12,234,6360,9,234,3,234,6362,8,234,1,234,1,234,
		3,234,6366,8,234,1,234,1,234,1,234,1,234,5,234,6372,8,234,10,234,12,234,
		6375,9,234,3,234,6377,8,234,1,235,1,235,3,235,6381,8,235,1,235,3,235,6384,
		8,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
		1,235,3,235,6398,8,235,1,235,1,235,3,235,6402,8,235,1,235,3,235,6405,8,
		235,1,235,1,235,3,235,6409,8,235,1,235,3,235,6412,8,235,1,236,1,236,1,
		236,1,236,1,236,1,236,1,236,1,236,1,236,3,236,6423,8,236,1,237,1,237,1,
		237,1,237,3,237,6429,8,237,1,237,3,237,6432,8,237,1,238,1,238,1,238,3,
		238,6437,8,238,3,238,6439,8,238,1,238,1,238,1,238,1,238,1,238,1,238,3,
		238,6447,8,238,1,238,1,238,3,238,6451,8,238,1,238,3,238,6454,8,238,1,239,
		1,239,3,239,6458,8,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
		1,239,1,239,3,239,6470,8,239,1,239,3,239,6473,8,239,1,239,1,239,3,239,
		6477,8,239,1,239,3,239,6480,8,239,1,240,1,240,3,240,6484,8,240,1,240,1,
		240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		1,240,3,240,6500,8,240,3,240,6502,8,240,3,240,6504,8,240,1,240,3,240,6507,
		8,240,1,240,3,240,6510,8,240,1,241,1,241,1,241,3,241,6515,8,241,1,241,
		3,241,6518,8,241,1,241,1,241,1,241,1,241,3,241,6524,8,241,1,241,3,241,
		6527,8,241,1,241,1,241,1,241,5,241,6532,8,241,10,241,12,241,6535,9,241,
		1,241,3,241,6538,8,241,3,241,6540,8,241,1,241,1,241,1,241,1,241,5,241,
		6546,8,241,10,241,12,241,6549,9,241,3,241,6551,8,241,1,241,1,241,3,241,
		6555,8,241,1,241,1,241,1,241,5,241,6560,8,241,10,241,12,241,6563,9,241,
		3,241,6565,8,241,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,243,
		1,243,3,243,6577,8,243,1,244,1,244,1,244,3,244,6582,8,244,1,244,3,244,
		6585,8,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,5,244,6595,
		8,244,10,244,12,244,6598,9,244,3,244,6600,8,244,1,244,1,244,1,244,1,244,
		3,244,6606,8,244,1,244,1,244,1,244,5,244,6611,8,244,10,244,12,244,6614,
		9,244,1,244,1,244,3,244,6618,8,244,1,244,1,244,1,244,3,244,6623,8,244,
		1,244,1,244,4,244,6627,8,244,11,244,12,244,6628,1,245,1,245,3,245,6633,
		8,245,1,246,1,246,1,247,1,247,1,247,3,247,6640,8,247,1,247,3,247,6643,
		8,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,6651,8,247,1,247,1,247,
		1,247,1,247,5,247,6657,8,247,10,247,12,247,6660,9,247,3,247,6662,8,247,
		1,247,1,247,1,247,1,247,5,247,6668,8,247,10,247,12,247,6671,9,247,1,247,
		1,247,4,247,6675,8,247,11,247,12,247,6676,1,248,1,248,1,249,1,249,1,249,
		3,249,6684,8,249,1,249,3,249,6687,8,249,1,249,1,249,1,249,1,249,1,249,
		1,249,5,249,6695,8,249,10,249,12,249,6698,9,249,1,249,1,249,1,249,1,249,
		3,249,6704,8,249,1,249,1,249,1,249,3,249,6709,8,249,1,249,3,249,6712,8,
		249,1,250,1,250,1,250,1,250,1,250,1,250,5,250,6720,8,250,10,250,12,250,
		6723,9,250,3,250,6725,8,250,1,250,3,250,6728,8,250,1,250,1,250,1,250,1,
		250,1,250,1,250,1,250,3,250,6737,8,250,3,250,6739,8,250,1,251,1,251,1,
		251,1,251,1,251,1,251,1,251,5,251,6748,8,251,10,251,12,251,6751,9,251,
		3,251,6753,8,251,1,251,3,251,6756,8,251,1,251,1,251,1,251,5,251,6761,8,
		251,10,251,12,251,6764,9,251,1,251,1,251,3,251,6768,8,251,1,251,1,251,
		3,251,6772,8,251,3,251,6774,8,251,1,252,1,252,1,252,1,252,1,252,1,252,
		5,252,6782,8,252,10,252,12,252,6785,9,252,3,252,6787,8,252,1,252,3,252,
		6790,8,252,1,252,1,252,1,252,5,252,6795,8,252,10,252,12,252,6798,9,252,
		1,252,1,252,1,252,3,252,6803,8,252,1,252,1,252,3,252,6807,8,252,1,253,
		1,253,3,253,6811,8,253,1,253,1,253,1,253,3,253,6816,8,253,1,253,1,253,
		3,253,6820,8,253,1,253,1,253,3,253,6824,8,253,1,253,3,253,6827,8,253,1,
		254,1,254,1,254,3,254,6832,8,254,1,255,1,255,1,255,1,255,1,255,1,255,1,
		255,1,255,1,255,1,255,1,255,1,255,3,255,6846,8,255,1,256,1,256,1,256,1,
		256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,3,256,
		6862,8,256,1,256,1,256,3,256,6866,8,256,1,256,1,256,1,256,1,256,3,256,
		6872,8,256,3,256,6874,8,256,1,256,3,256,6877,8,256,1,257,1,257,3,257,6881,
		8,257,1,257,1,257,1,257,3,257,6886,8,257,1,257,1,257,1,257,3,257,6891,
		8,257,1,258,1,258,1,258,1,258,1,258,1,258,3,258,6899,8,258,1,258,5,258,
		6902,8,258,10,258,12,258,6905,9,258,1,258,3,258,6908,8,258,1,258,1,258,
		1,258,3,258,6913,8,258,1,258,5,258,6916,8,258,10,258,12,258,6919,9,258,
		1,258,1,258,1,258,3,258,6924,8,258,1,258,1,258,1,258,3,258,6929,8,258,
		1,258,3,258,6932,8,258,1,259,1,259,1,259,3,259,6937,8,259,1,259,1,259,
		1,259,1,259,3,259,6943,8,259,1,259,1,259,3,259,6947,8,259,1,260,1,260,
		1,260,1,260,1,260,5,260,6954,8,260,10,260,12,260,6957,9,260,1,260,1,260,
		1,260,1,260,1,260,5,260,6964,8,260,10,260,12,260,6967,9,260,3,260,6969,
		8,260,1,261,1,261,1,261,1,261,1,261,1,261,1,261,3,261,6978,8,261,1,261,
		1,261,1,261,1,261,5,261,6984,8,261,10,261,12,261,6987,9,261,3,261,6989,
		8,261,1,261,1,261,1,261,1,261,1,261,3,261,6996,8,261,1,261,3,261,6999,
		8,261,1,262,1,262,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
		1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,5,263,7022,
		8,263,10,263,12,263,7025,9,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
		1,263,3,263,7035,8,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
		1,263,1,263,1,263,3,263,7048,8,263,1,263,1,263,5,263,7052,8,263,10,263,
		12,263,7055,9,263,1,263,1,263,1,263,1,263,1,263,3,263,7062,8,263,1,263,
		1,263,1,263,1,263,1,263,1,263,3,263,7070,8,263,1,263,1,263,1,263,1,263,
		3,263,7076,8,263,1,263,3,263,7079,8,263,1,264,3,264,7082,8,264,1,264,3,
		264,7085,8,264,1,264,1,264,1,264,1,264,3,264,7091,8,264,1,264,1,264,3,
		264,7095,8,264,1,265,1,265,1,265,1,265,1,265,1,265,3,265,7103,8,265,1,
		265,1,265,1,265,1,265,1,265,1,265,1,266,1,266,1,266,1,266,3,266,7115,8,
		266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,3,266,
		7127,8,266,1,266,1,266,3,266,7131,8,266,1,266,3,266,7134,8,266,1,267,1,
		267,1,267,1,267,1,267,5,267,7141,8,267,10,267,12,267,7144,9,267,1,267,
		1,267,1,267,3,267,7149,8,267,1,267,1,267,1,267,1,267,1,267,1,267,5,267,
		7157,8,267,10,267,12,267,7160,9,267,1,267,1,267,1,267,1,267,1,267,1,267,
		3,267,7168,8,267,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,3,268,
		7178,8,268,1,268,1,268,1,268,1,268,3,268,7184,8,268,1,268,1,268,1,268,
		1,268,3,268,7190,8,268,1,268,1,268,1,268,1,268,1,268,3,268,7197,8,268,
		1,268,1,268,1,268,1,268,3,268,7203,8,268,1,268,1,268,3,268,7207,8,268,
		1,268,1,268,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,7218,8,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,3,269,7233,8,269,3,269,7235,8,269,1,270,1,270,1,271,1,271,1,271,
		1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,
		1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,3,271,7262,8,271,1,272,
		1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,3,272,7273,8,272,1,272,
		1,272,1,272,1,272,1,272,1,272,3,272,7281,8,272,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,5,273,7290,8,273,10,273,12,273,7293,9,273,5,273,7295,
		8,273,10,273,12,273,7298,9,273,3,273,7300,8,273,1,274,1,274,1,274,1,274,
		1,274,1,274,3,274,7308,8,274,1,275,1,275,1,275,1,275,1,276,1,276,1,276,
		1,276,3,276,7318,8,276,1,277,1,277,1,277,1,277,1,277,3,277,7325,8,277,
		1,277,1,277,1,277,1,277,1,277,3,277,7332,8,277,3,277,7334,8,277,1,277,
		1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,7346,8,277,
		1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,7357,8,277,
		1,277,1,277,3,277,7361,8,277,1,277,1,277,1,277,3,277,7366,8,277,1,277,
		3,277,7369,8,277,3,277,7371,8,277,1,277,3,277,7374,8,277,1,277,1,277,1,
		277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,7386,8,277,3,277,7388,
		8,277,3,277,7390,8,277,1,277,3,277,7393,8,277,1,277,1,277,1,277,3,277,
		7398,8,277,1,277,3,277,7401,8,277,1,277,1,277,1,277,3,277,7406,8,277,1,
		277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,7416,8,277,1,277,1,
		277,3,277,7420,8,277,1,277,1,277,1,277,3,277,7425,8,277,1,277,3,277,7428,
		8,277,3,277,7430,8,277,1,277,3,277,7433,8,277,1,277,1,277,1,277,1,277,
		1,277,1,277,1,277,1,277,1,277,1,277,3,277,7445,8,277,3,277,7447,8,277,
		3,277,7449,8,277,1,277,3,277,7452,8,277,1,277,1,277,1,277,1,277,3,277,
		7458,8,277,1,278,1,278,1,279,1,279,1,279,1,279,1,279,1,279,3,279,7468,
		8,279,1,280,1,280,1,281,1,281,1,282,1,282,1,283,1,283,1,283,1,283,1,283,
		1,283,1,283,1,283,1,283,1,283,1,283,1,283,3,283,7488,8,283,1,284,1,284,
		1,284,1,284,3,284,7494,8,284,1,285,1,285,1,286,1,286,1,286,1,286,1,286,
		1,287,1,287,1,288,1,288,1,288,1,288,1,289,1,289,1,290,1,290,1,290,1,290,
		1,290,1,290,1,290,1,290,3,290,7519,8,290,3,290,7521,8,290,1,291,1,291,
		1,291,1,292,1,292,1,292,1,293,1,293,1,294,1,294,1,295,1,295,1,296,1,296,
		1,296,1,296,1,297,1,297,1,297,1,297,1,297,1,297,1,297,1,297,3,297,7547,
		8,297,1,297,1,297,1,297,1,297,3,297,7553,8,297,1,297,1,297,1,297,1,297,
		1,297,1,297,1,297,1,297,1,297,3,297,7564,8,297,1,298,1,298,1,298,1,298,
		1,298,1,298,3,298,7572,8,298,1,298,3,298,7575,8,298,1,299,1,299,1,299,
		1,300,1,300,1,300,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
		3,301,7592,8,301,1,302,1,302,1,302,1,302,1,302,1,302,3,302,7600,8,302,
		1,303,1,303,1,303,1,303,1,303,3,303,7607,8,303,1,304,1,304,1,304,1,304,
		1,304,1,304,1,304,1,304,1,304,1,304,1,304,1,304,1,304,1,304,1,304,1,304,
		1,304,1,304,1,304,1,304,1,304,3,304,7630,8,304,1,305,1,305,1,305,1,305,
		1,305,1,306,1,306,1,306,1,306,1,306,1,306,3,306,7643,8,306,1,307,1,307,
		1,307,1,307,3,307,7649,8,307,1,307,1,307,1,307,5,307,7654,8,307,10,307,
		12,307,7657,9,307,1,307,1,307,1,307,5,307,7662,8,307,10,307,12,307,7665,
		9,307,3,307,7667,8,307,1,307,3,307,7670,8,307,1,308,1,308,1,308,1,308,
		1,309,1,309,1,309,3,309,7679,8,309,1,309,1,309,1,309,1,309,1,310,1,310,
		1,310,1,310,3,310,7689,8,310,1,310,1,310,1,310,5,310,7694,8,310,10,310,
		12,310,7697,9,310,1,310,3,310,7700,8,310,1,311,1,311,3,311,7704,8,311,
		1,312,1,312,1,312,1,312,3,312,7710,8,312,1,312,1,312,1,312,5,312,7715,
		8,312,10,312,12,312,7718,9,312,1,312,3,312,7721,8,312,1,313,1,313,1,313,
		1,313,3,313,7727,8,313,1,313,1,313,1,313,5,313,7732,8,313,10,313,12,313,
		7735,9,313,1,313,1,313,1,313,1,313,3,313,7741,8,313,1,313,3,313,7744,8,
		313,1,314,1,314,1,314,1,314,3,314,7750,8,314,1,314,1,314,1,314,5,314,7755,
		8,314,10,314,12,314,7758,9,314,1,314,3,314,7761,8,314,1,315,1,315,1,315,
		3,315,7766,8,315,1,315,1,315,1,315,3,315,7771,8,315,1,315,4,315,7774,8,
		315,11,315,12,315,7775,1,315,1,315,1,316,1,316,1,316,1,316,3,316,7784,
		8,316,1,316,1,316,3,316,7788,8,316,1,317,1,317,1,317,1,317,3,317,7794,
		8,317,1,317,1,317,1,317,5,317,7799,8,317,10,317,12,317,7802,9,317,1,317,
		3,317,7805,8,317,1,318,1,318,1,318,1,318,1,318,1,318,1,318,3,318,7814,
		8,318,1,318,1,318,1,318,1,318,1,318,1,318,3,318,7822,8,318,1,319,1,319,
		1,319,1,319,3,319,7828,8,319,1,319,1,319,1,320,1,320,3,320,7834,8,320,
		1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,322,1,322,1,322,1,322,1,322,
		1,322,1,322,1,322,3,322,7851,8,322,1,322,1,322,3,322,7855,8,322,1,322,
		1,322,1,322,1,323,1,323,1,323,3,323,7863,8,323,1,323,1,323,3,323,7867,
		8,323,1,323,3,323,7870,8,323,1,323,1,323,1,323,1,323,5,323,7876,8,323,
		10,323,12,323,7879,9,323,1,323,3,323,7882,8,323,1,323,1,323,1,323,3,323,
		7887,8,323,1,323,1,323,3,323,7891,8,323,1,323,1,323,1,323,1,323,1,323,
		1,323,5,323,7899,8,323,10,323,12,323,7902,9,323,1,323,1,323,3,323,7906,
		8,323,3,323,7908,8,323,1,324,1,324,1,324,1,324,1,324,3,324,7915,8,324,
		1,325,1,325,3,325,7919,8,325,1,325,1,325,3,325,7923,8,325,1,325,1,325,
		3,325,7927,8,325,1,325,3,325,7930,8,325,1,325,1,325,3,325,7934,8,325,1,
		325,1,325,1,325,1,325,3,325,7940,8,325,1,325,1,325,3,325,7944,8,325,3,
		325,7946,8,325,1,326,1,326,1,326,1,326,1,326,3,326,7953,8,326,1,326,1,
		326,1,326,5,326,7958,8,326,10,326,12,326,7961,9,326,3,326,7963,8,326,1,
		326,3,326,7966,8,326,1,326,1,326,1,326,5,326,7971,8,326,10,326,12,326,
		7974,9,326,1,326,1,326,3,326,7978,8,326,1,326,4,326,7981,8,326,11,326,
		12,326,7982,1,326,1,326,3,326,7987,8,326,1,326,1,326,1,326,1,326,3,326,
		7993,8,326,4,326,7995,8,326,11,326,12,326,7996,3,326,7999,8,326,1,326,
		1,326,1,326,3,326,8004,8,326,1,326,4,326,8007,8,326,11,326,12,326,8008,
		4,326,8011,8,326,11,326,12,326,8012,1,326,1,326,1,326,3,326,8018,8,326,
		1,326,1,326,1,326,1,326,3,326,8024,8,326,4,326,8026,8,326,11,326,12,326,
		8027,4,326,8030,8,326,11,326,12,326,8031,3,326,8034,8,326,1,326,1,326,
		3,326,8038,8,326,1,326,1,326,3,326,8042,8,326,1,326,1,326,3,326,8046,8,
		326,1,326,1,326,3,326,8050,8,326,1,326,1,326,1,326,1,326,3,326,8056,8,
		326,1,326,3,326,8059,8,326,1,326,1,326,1,326,1,326,3,326,8065,8,326,1,
		326,1,326,3,326,8069,8,326,1,326,1,326,3,326,8073,8,326,1,326,1,326,1,
		326,1,326,3,326,8079,8,326,1,326,1,326,1,326,1,326,3,326,8085,8,326,3,
		326,8087,8,326,1,326,3,326,8090,8,326,1,326,1,326,3,326,8094,8,326,1,326,
		1,326,3,326,8098,8,326,1,326,1,326,3,326,8102,8,326,1,326,1,326,1,326,
		1,326,3,326,8108,8,326,1,326,3,326,8111,8,326,1,326,1,326,1,326,1,326,
		3,326,8117,8,326,1,326,1,326,1,326,1,326,3,326,8123,8,326,1,326,3,326,
		8126,8,326,1,326,1,326,1,326,1,326,3,326,8132,8,326,1,326,3,326,8135,8,
		326,1,326,1,326,1,326,1,326,3,326,8141,8,326,1,326,3,326,8144,8,326,1,
		326,1,326,3,326,8148,8,326,1,326,1,326,3,326,8152,8,326,1,326,1,326,3,
		326,8156,8,326,1,326,1,326,1,326,3,326,8161,8,326,1,326,3,326,8164,8,326,
		1,326,1,326,3,326,8168,8,326,1,326,1,326,3,326,8172,8,326,1,326,1,326,
		1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,
		1,326,3,326,8189,8,326,5,326,8191,8,326,10,326,12,326,8194,9,326,3,326,
		8196,8,326,1,327,1,327,1,327,1,327,1,327,3,327,8203,8,327,1,327,4,327,
		8206,8,327,11,327,12,327,8207,1,327,1,327,3,327,8212,8,327,1,327,1,327,
		1,327,1,327,3,327,8218,8,327,4,327,8220,8,327,11,327,12,327,8221,3,327,
		8224,8,327,1,327,1,327,1,327,3,327,8229,8,327,1,327,4,327,8232,8,327,11,
		327,12,327,8233,4,327,8236,8,327,11,327,12,327,8237,1,327,1,327,1,327,
		3,327,8243,8,327,1,327,1,327,1,327,1,327,3,327,8249,8,327,4,327,8251,8,
		327,11,327,12,327,8252,4,327,8255,8,327,11,327,12,327,8256,3,327,8259,
		8,327,1,327,1,327,3,327,8263,8,327,1,327,1,327,3,327,8267,8,327,1,327,
		1,327,3,327,8271,8,327,1,327,1,327,3,327,8275,8,327,1,327,1,327,1,327,
		1,327,3,327,8281,8,327,1,327,3,327,8284,8,327,1,327,1,327,1,327,1,327,
		3,327,8290,8,327,1,327,1,327,3,327,8294,8,327,1,327,1,327,3,327,8298,8,
		327,1,327,1,327,1,327,1,327,3,327,8304,8,327,1,327,1,327,1,327,1,327,3,
		327,8310,8,327,3,327,8312,8,327,1,327,3,327,8315,8,327,1,327,1,327,3,327,
		8319,8,327,1,327,1,327,3,327,8323,8,327,1,327,1,327,3,327,8327,8,327,1,
		327,1,327,1,327,1,327,3,327,8333,8,327,1,327,3,327,8336,8,327,1,327,1,
		327,1,327,1,327,3,327,8342,8,327,1,327,1,327,1,327,1,327,3,327,8348,8,
		327,1,327,3,327,8351,8,327,1,327,1,327,1,327,1,327,3,327,8357,8,327,1,
		327,3,327,8360,8,327,1,327,1,327,1,327,1,327,3,327,8366,8,327,1,327,3,
		327,8369,8,327,1,327,1,327,3,327,8373,8,327,1,327,1,327,3,327,8377,8,327,
		1,327,1,327,3,327,8381,8,327,1,327,1,327,1,327,3,327,8386,8,327,1,327,
		3,327,8389,8,327,1,327,1,327,3,327,8393,8,327,1,327,1,327,3,327,8397,8,
		327,1,327,1,327,1,327,1,327,3,327,8403,8,327,1,327,3,327,8406,8,327,1,
		327,1,327,3,327,8410,8,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,
		327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,3,327,8427,8,327,5,327,8429,
		8,327,10,327,12,327,8432,9,327,3,327,8434,8,327,1,328,1,328,1,328,1,328,
		1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,8448,8,328,1,328,
		1,328,1,328,1,328,3,328,8454,8,328,1,328,1,328,1,328,1,328,1,328,1,328,
		3,328,8462,8,328,1,328,1,328,1,328,1,328,1,328,4,328,8469,8,328,11,328,
		12,328,8470,1,328,3,328,8474,8,328,1,329,1,329,1,329,1,329,1,329,1,329,
		1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,330,1,330,1,330,1,330,1,330,
		1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,331,1,331,1,331,
		1,331,3,331,8507,8,331,1,332,1,332,3,332,8511,8,332,1,332,1,332,3,332,
		8515,8,332,1,333,1,333,1,333,1,333,1,333,3,333,8522,8,333,1,334,1,334,
		1,334,1,334,1,335,1,335,1,335,3,335,8531,8,335,1,336,1,336,1,336,1,336,
		5,336,8537,8,336,10,336,12,336,8540,9,336,3,336,8542,8,336,1,336,3,336,
		8545,8,336,1,337,1,337,3,337,8549,8,337,1,337,1,337,3,337,8553,8,337,1,
		337,3,337,8556,8,337,1,337,1,337,1,337,1,337,5,337,8562,8,337,10,337,12,
		337,8565,9,337,1,337,1,337,3,337,8569,8,337,1,337,1,337,1,337,3,337,8574,
		8,337,1,337,1,337,3,337,8578,8,337,3,337,8580,8,337,1,338,1,338,1,338,
		5,338,8585,8,338,10,338,12,338,8588,9,338,1,338,1,338,1,338,5,338,8593,
		8,338,10,338,12,338,8596,9,338,3,338,8598,8,338,1,339,1,339,1,339,1,339,
		1,340,1,340,1,341,1,341,1,341,3,341,8609,8,341,1,341,1,341,1,341,3,341,
		8614,8,341,1,342,1,342,3,342,8618,8,342,1,342,1,342,1,342,1,342,3,342,
		8624,8,342,3,342,8626,8,342,1,342,1,342,1,342,1,342,1,342,3,342,8633,8,
		342,3,342,8635,8,342,3,342,8637,8,342,1,343,1,343,3,343,8641,8,343,1,343,
		1,343,1,343,3,343,8646,8,343,1,343,1,343,1,343,1,343,1,343,3,343,8653,
		8,343,3,343,8655,8,343,1,343,1,343,1,343,1,343,3,343,8661,8,343,1,343,
		3,343,8664,8,343,1,343,1,343,1,343,1,343,5,343,8670,8,343,10,343,12,343,
		8673,9,343,1,343,1,343,1,343,3,343,8678,8,343,1,343,1,343,3,343,8682,8,
		343,1,343,3,343,8685,8,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,3,
		343,8694,8,343,1,343,3,343,8697,8,343,1,343,1,343,1,343,1,343,3,343,8703,
		8,343,1,344,1,344,1,344,3,344,8708,8,344,1,345,1,345,1,345,1,345,1,345,
		3,345,8715,8,345,1,345,1,345,1,345,3,345,8720,8,345,1,345,1,345,1,345,
		1,345,1,345,1,345,3,345,8728,8,345,1,346,1,346,1,346,3,346,8733,8,346,
		1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,3,346,8745,
		8,346,3,346,8747,8,346,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
		1,347,3,347,8758,8,347,1,348,1,348,1,348,1,348,1,348,3,348,8765,8,348,
		1,348,1,348,1,348,1,348,1,348,1,348,5,348,8773,8,348,10,348,12,348,8776,
		9,348,1,349,1,349,1,349,1,349,1,350,1,350,1,350,1,350,1,350,1,350,1,350,
		1,350,1,350,1,350,1,350,1,350,1,350,1,350,1,350,1,350,3,350,8798,8,350,
		1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,3,351,
		8811,8,351,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
		1,352,1,352,1,352,1,352,3,352,8827,8,352,1,352,1,352,1,352,3,352,8832,
		8,352,1,352,1,352,1,352,1,352,1,352,3,352,8839,8,352,1,352,3,352,8842,
		8,352,4,352,8844,8,352,11,352,12,352,8845,3,352,8848,8,352,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
		1,353,3,353,8865,8,353,1,354,1,354,1,355,1,355,1,355,1,355,1,355,1,355,
		1,355,1,355,1,355,1,355,1,355,3,355,8880,8,355,1,356,1,356,1,356,1,356,
		1,356,1,356,3,356,8888,8,356,1,356,1,356,1,356,1,356,1,356,1,356,1,356,
		3,356,8897,8,356,1,356,1,356,1,356,1,356,1,356,1,356,3,356,8905,8,356,
		1,357,1,357,1,357,1,357,1,357,1,357,3,357,8913,8,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		3,357,8930,8,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,3,357,8943,8,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,3,357,8955,8,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,3,357,8979,8,357,1,357,1,357,1,357,1,357,1,357,
		3,357,8986,8,357,1,357,1,357,3,357,8990,8,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,3,357,9000,8,357,1,357,1,357,3,357,9004,8,357,
		1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,3,357,9021,8,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,1,357,1,357,1,357,3,357,9060,8,357,1,357,1,357,
		1,357,1,357,1,357,3,357,9067,8,357,1,357,1,357,1,357,1,357,1,357,1,357,
		3,357,9075,8,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,3,357,9087,8,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
		3,357,9109,8,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,3,357,9118,
		8,357,3,357,9120,8,357,1,358,1,358,1,358,1,358,3,358,9126,8,358,1,358,
		1,358,1,358,3,358,9131,8,358,1,358,1,358,1,358,1,358,1,358,3,358,9138,
		8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		3,358,9151,8,358,3,358,9153,8,358,3,358,9155,8,358,1,358,3,358,9158,8,
		358,1,358,3,358,9161,8,358,1,359,1,359,1,359,1,359,1,359,3,359,9168,8,
		359,1,359,3,359,9171,8,359,1,359,1,359,1,359,1,359,3,359,9177,8,359,1,
		359,1,359,1,359,3,359,9182,8,359,3,359,9184,8,359,1,359,3,359,9187,8,359,
		1,359,1,359,1,359,1,359,3,359,9193,8,359,1,359,1,359,1,359,1,359,1,359,
		1,359,3,359,9201,8,359,3,359,9203,8,359,1,359,3,359,9206,8,359,1,359,1,
		359,3,359,9210,8,359,1,359,3,359,9213,8,359,1,359,1,359,1,359,1,359,1,
		359,1,359,1,359,1,359,3,359,9223,8,359,1,359,3,359,9226,8,359,1,359,1,
		359,3,359,9230,8,359,1,359,3,359,9233,8,359,1,359,1,359,1,359,1,359,3,
		359,9239,8,359,1,359,3,359,9242,8,359,3,359,9244,8,359,1,360,1,360,3,360,
		9248,8,360,1,361,1,361,3,361,9252,8,361,1,362,1,362,1,362,3,362,9257,8,
		362,1,363,1,363,3,363,9261,8,363,1,364,1,364,1,364,3,364,9266,8,364,1,
		365,1,365,1,365,3,365,9271,8,365,1,366,1,366,3,366,9275,8,366,1,367,1,
		367,1,367,1,367,1,367,1,367,1,367,1,367,3,367,9285,8,367,1,367,3,367,9288,
		8,367,1,367,3,367,9291,8,367,1,368,1,368,1,368,1,368,1,368,1,368,3,368,
		9299,8,368,1,368,1,368,3,368,9303,8,368,1,368,3,368,9306,8,368,1,369,1,
		369,3,369,9310,8,369,1,370,1,370,1,370,3,370,9315,8,370,1,371,1,371,1,
		371,1,371,1,372,1,372,3,372,9323,8,372,1,372,1,372,1,372,3,372,9328,8,
		372,1,373,1,373,1,373,1,373,3,373,9334,8,373,1,373,5,373,9337,8,373,10,
		373,12,373,9340,9,373,1,373,1,373,1,374,1,374,1,374,1,374,3,374,9348,8,
		374,1,374,3,374,9351,8,374,1,374,3,374,9354,8,374,1,374,1,374,1,374,1,
		374,1,374,1,374,1,374,1,374,1,374,3,374,9365,8,374,1,375,1,375,1,375,3,
		375,9370,8,375,1,375,1,375,1,375,1,376,1,376,1,376,1,376,1,377,1,377,3,
		377,9381,8,377,1,377,5,377,9384,8,377,10,377,12,377,9387,9,377,1,378,1,
		378,1,378,3,378,9392,8,378,1,379,1,379,1,379,1,379,1,379,3,379,9399,8,
		379,3,379,9401,8,379,1,379,1,379,3,379,9405,8,379,1,379,3,379,9408,8,379,
		1,379,1,379,3,379,9412,8,379,1,379,1,379,3,379,9416,8,379,1,379,1,379,
		1,379,1,379,1,379,1,379,3,379,9424,8,379,1,379,1,379,1,379,3,379,9429,
		8,379,3,379,9431,8,379,1,379,3,379,9434,8,379,1,379,5,379,9437,8,379,10,
		379,12,379,9440,9,379,1,380,1,380,1,380,1,380,1,380,1,380,3,380,9448,8,
		380,1,381,1,381,3,381,9452,8,381,1,381,1,381,1,381,3,381,9457,8,381,1,
		381,3,381,9460,8,381,1,381,3,381,9463,8,381,1,381,1,381,1,381,1,381,3,
		381,9469,8,381,1,381,1,381,1,381,1,381,1,381,1,381,3,381,9477,8,381,1,
		381,1,381,1,381,1,381,1,381,1,381,3,381,9485,8,381,1,381,3,381,9488,8,
		381,1,381,3,381,9491,8,381,1,382,1,382,3,382,9495,8,382,1,382,1,382,1,
		382,3,382,9500,8,382,1,382,3,382,9503,8,382,1,382,1,382,1,382,1,382,3,
		382,9509,8,382,1,382,1,382,3,382,9513,8,382,1,382,1,382,1,382,1,382,3,
		382,9519,8,382,1,382,1,382,1,382,1,382,1,382,1,382,3,382,9527,8,382,1,
		382,1,382,1,382,1,382,4,382,9533,8,382,11,382,12,382,9534,1,382,1,382,
		1,382,1,382,3,382,9541,8,382,1,382,3,382,9544,8,382,1,382,1,382,1,382,
		1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,3,382,9559,
		8,382,1,382,3,382,9562,8,382,1,382,3,382,9565,8,382,3,382,9567,8,382,1,
		383,1,383,1,383,1,383,1,383,1,383,1,383,1,383,1,383,3,383,9578,8,383,1,
		384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,3,384,9589,8,384,1,
		385,1,385,1,385,1,385,1,385,5,385,9596,8,385,10,385,12,385,9599,9,385,
		1,385,1,385,1,386,1,386,3,386,9605,8,386,1,386,1,386,1,386,1,386,1,386,
		3,386,9612,8,386,1,386,1,386,1,386,1,386,1,386,1,386,1,386,1,386,1,386,
		1,386,1,386,1,386,1,386,1,386,1,386,1,386,3,386,9630,8,386,1,386,1,386,
		1,386,3,386,9635,8,386,5,386,9637,8,386,10,386,12,386,9640,9,386,1,386,
		1,386,3,386,9644,8,386,1,387,1,387,1,387,1,387,1,387,1,387,1,387,1,387,
		3,387,9654,8,387,3,387,9656,8,387,3,387,9658,8,387,1,387,3,387,9661,8,
		387,1,387,3,387,9664,8,387,1,387,1,387,1,387,1,387,1,387,1,387,1,387,1,
		387,1,387,3,387,9675,8,387,3,387,9677,8,387,3,387,9679,8,387,1,387,3,387,
		9682,8,387,1,388,5,388,9685,8,388,10,388,12,388,9688,9,388,1,388,1,388,
		1,388,1,389,1,389,1,389,1,389,1,389,3,389,9698,8,389,1,390,1,390,1,390,
		1,390,1,390,1,390,1,390,3,390,9707,8,390,1,390,3,390,9710,8,390,1,390,
		3,390,9713,8,390,1,390,1,390,1,390,1,390,1,390,5,390,9720,8,390,10,390,
		12,390,9723,9,390,3,390,9725,8,390,1,390,3,390,9728,8,390,1,391,1,391,
		1,391,1,391,1,391,3,391,9735,8,391,1,391,3,391,9738,8,391,1,391,1,391,
		1,391,1,391,1,391,3,391,9745,8,391,1,391,1,391,1,391,1,391,3,391,9751,
		8,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,
		1,391,1,391,3,391,9766,8,391,1,391,3,391,9769,8,391,1,391,1,391,1,391,
		1,391,1,391,3,391,9776,8,391,1,391,1,391,1,391,1,391,5,391,9782,8,391,
		10,391,12,391,9785,9,391,1,391,1,391,1,391,1,391,3,391,9791,8,391,1,392,
		1,392,1,393,1,393,3,393,9797,8,393,1,394,1,394,1,394,1,394,1,394,1,394,
		1,394,1,394,1,394,3,394,9808,8,394,1,394,1,394,1,394,1,394,1,394,1,394,
		1,394,1,394,1,394,1,394,1,394,1,394,3,394,9822,8,394,1,394,1,394,1,394,
		1,394,1,394,5,394,9829,8,394,10,394,12,394,9832,9,394,1,395,1,395,1,395,
		1,395,1,395,1,396,1,396,1,396,1,396,3,396,9843,8,396,1,397,1,397,1,397,
		4,397,9848,8,397,11,397,12,397,9849,1,397,1,397,3,397,9854,8,397,1,397,
		1,397,1,397,1,397,4,397,9860,8,397,11,397,12,397,9861,1,397,1,397,3,397,
		9866,8,397,1,397,1,397,3,397,9870,8,397,1,398,1,398,1,398,1,398,3,398,
		9876,8,398,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,3,399,9886,
		8,399,1,400,1,400,1,400,1,400,1,400,1,400,1,400,1,400,3,400,9896,8,400,
		1,401,1,401,1,402,1,402,1,402,1,402,5,402,9904,8,402,10,402,12,402,9907,
		9,402,1,403,1,403,1,403,1,403,1,403,3,403,9914,8,403,1,403,1,403,1,403,
		1,403,1,403,1,404,1,404,1,404,1,404,1,404,3,404,9926,8,404,1,404,1,404,
		1,404,1,404,3,404,9932,8,404,1,404,1,404,3,404,9936,8,404,1,404,1,404,
		1,404,1,404,1,404,1,404,1,404,1,404,3,404,9946,8,404,1,405,1,405,3,405,
		9950,8,405,1,405,1,405,3,405,9954,8,405,1,405,1,405,1,405,1,405,1,405,
		1,405,1,405,1,405,3,405,9964,8,405,1,406,1,406,5,406,9968,8,406,10,406,
		12,406,9971,9,406,1,406,1,406,1,406,1,406,1,406,3,406,9978,8,406,1,406,
		1,406,1,406,1,406,1,406,1,406,5,406,9986,8,406,10,406,12,406,9989,9,406,
		1,407,1,407,1,407,1,407,1,407,1,407,1,407,1,407,1,407,1,407,1,407,1,407,
		1,407,1,407,1,407,1,407,1,407,1,407,1,407,5,407,10010,8,407,10,407,12,
		407,10013,9,407,1,407,1,407,1,407,1,407,1,407,1,407,1,407,5,407,10022,
		8,407,10,407,12,407,10025,9,407,1,407,1,407,1,407,1,407,3,407,10031,8,
		407,1,407,1,407,1,407,1,407,5,407,10037,8,407,10,407,12,407,10040,9,407,
		1,407,1,407,1,407,1,407,3,407,10046,8,407,1,407,1,407,1,407,1,407,3,407,
		10052,8,407,1,408,1,408,1,408,1,408,1,408,1,408,3,408,10060,8,408,1,408,
		3,408,10063,8,408,3,408,10065,8,408,1,408,1,408,3,408,10069,8,408,1,408,
		5,408,10072,8,408,10,408,12,408,10075,9,408,3,408,10077,8,408,1,409,1,
		409,3,409,10081,8,409,1,409,1,409,3,409,10085,8,409,1,409,1,409,1,409,
		1,409,1,409,3,409,10092,8,409,1,410,1,410,3,410,10096,8,410,1,410,3,410,
		10099,8,410,1,410,1,410,1,410,3,410,10104,8,410,1,410,1,410,3,410,10108,
		8,410,1,410,1,410,3,410,10112,8,410,1,410,1,410,1,410,3,410,10117,8,410,
		1,410,1,410,1,410,5,410,10122,8,410,10,410,12,410,10125,9,410,3,410,10127,
		8,410,1,410,1,410,3,410,10131,8,410,1,411,1,411,1,411,3,411,10136,8,411,
		1,411,1,411,3,411,10140,8,411,1,412,1,412,1,412,1,412,1,412,1,412,1,412,
		3,412,10149,8,412,1,413,1,413,1,413,1,413,1,413,3,413,10156,8,413,1,414,
		1,414,1,414,1,414,1,414,5,414,10163,8,414,10,414,12,414,10166,9,414,1,
		414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,3,414,10177,8,414,
		3,414,10179,8,414,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,3,415,
		10189,8,415,1,415,3,415,10192,8,415,1,415,5,415,10195,8,415,10,415,12,
		415,10198,9,415,1,415,1,415,1,415,1,415,1,415,1,415,3,415,10206,8,415,
		3,415,10208,8,415,3,415,10210,8,415,1,415,1,415,1,415,3,415,10215,8,415,
		3,415,10217,8,415,1,415,1,415,1,415,1,415,5,415,10223,8,415,10,415,12,
		415,10226,9,415,1,415,1,415,3,415,10230,8,415,1,415,1,415,1,415,1,415,
		1,415,1,415,3,415,10238,8,415,1,415,5,415,10241,8,415,10,415,12,415,10244,
		9,415,1,415,1,415,1,415,3,415,10249,8,415,3,415,10251,8,415,1,415,1,415,
		1,415,1,415,1,415,1,415,1,415,1,415,3,415,10261,8,415,3,415,10263,8,415,
		1,415,1,415,3,415,10267,8,415,1,415,1,415,3,415,10271,8,415,3,415,10273,
		8,415,1,416,1,416,1,416,1,416,1,416,1,416,1,416,3,416,10282,8,416,3,416,
		10284,8,416,1,417,1,417,1,417,3,417,10289,8,417,1,418,1,418,1,419,1,419,
		1,419,1,419,1,419,5,419,10298,8,419,10,419,12,419,10301,9,419,1,419,1,
		419,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,
		1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,
		1,420,1,420,1,420,1,420,5,420,10332,8,420,10,420,12,420,10335,9,420,1,
		420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,
		1,420,3,420,10350,8,420,1,421,1,421,1,421,1,421,1,421,3,421,10357,8,421,
		3,421,10359,8,421,1,422,1,422,1,422,5,422,10364,8,422,10,422,12,422,10367,
		9,422,1,423,1,423,1,423,1,423,5,423,10373,8,423,10,423,12,423,10376,9,
		423,1,423,1,423,1,424,1,424,1,424,3,424,10383,8,424,1,424,1,424,1,424,
		1,424,3,424,10389,8,424,1,425,1,425,1,425,1,425,1,425,1,425,3,425,10397,
		8,425,1,425,3,425,10400,8,425,1,426,1,426,1,426,1,426,1,426,3,426,10407,
		8,426,1,426,1,426,1,426,1,426,3,426,10413,8,426,1,426,3,426,10416,8,426,
		3,426,10418,8,426,1,427,1,427,1,427,1,427,1,427,1,427,3,427,10426,8,427,
		3,427,10428,8,427,1,428,1,428,1,428,1,428,1,428,1,428,3,428,10436,8,428,
		1,428,1,428,1,428,1,428,1,428,3,428,10443,8,428,1,428,1,428,1,428,1,428,
		1,428,1,428,3,428,10451,8,428,3,428,10453,8,428,1,429,1,429,1,429,5,429,
		10458,8,429,10,429,12,429,10461,9,429,1,430,1,430,1,430,1,430,1,430,3,
		430,10468,8,430,1,431,1,431,5,431,10472,8,431,10,431,12,431,10475,9,431,
		1,431,1,431,1,431,1,431,5,431,10481,8,431,10,431,12,431,10484,9,431,3,
		431,10486,8,431,1,432,1,432,3,432,10490,8,432,1,432,1,432,3,432,10494,
		8,432,1,432,1,432,3,432,10498,8,432,1,432,1,432,1,432,1,432,1,432,3,432,
		10505,8,432,3,432,10507,8,432,1,432,1,432,3,432,10511,8,432,1,432,1,432,
		1,432,3,432,10516,8,432,3,432,10518,8,432,1,432,1,432,3,432,10522,8,432,
		1,432,1,432,1,432,3,432,10527,8,432,3,432,10529,8,432,1,432,1,432,1,432,
		1,432,1,432,3,432,10536,8,432,3,432,10538,8,432,1,432,1,432,1,432,1,432,
		1,432,3,432,10545,8,432,3,432,10547,8,432,1,433,1,433,1,433,1,433,1,433,
		1,433,1,433,3,433,10556,8,433,1,433,1,433,1,433,1,433,1,433,1,433,3,433,
		10564,8,433,1,433,3,433,10567,8,433,1,434,1,434,1,434,1,434,1,434,3,434,
		10574,8,434,1,434,1,434,1,434,1,434,1,434,1,434,3,434,10582,8,434,1,434,
		3,434,10585,8,434,1,435,1,435,1,435,5,435,10590,8,435,10,435,12,435,10593,
		9,435,1,436,1,436,1,436,3,436,10598,8,436,1,437,1,437,1,437,5,437,10603,
		8,437,10,437,12,437,10606,9,437,1,438,1,438,1,438,3,438,10611,8,438,1,
		439,1,439,3,439,10615,8,439,1,440,1,440,1,440,1,440,1,440,1,440,1,440,
		1,440,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,442,
		1,442,1,442,1,442,1,442,3,442,10640,8,442,1,443,3,443,10643,8,443,1,443,
		1,443,3,443,10647,8,443,3,443,10649,8,443,1,443,3,443,10652,8,443,1,443,
		1,443,1,443,1,443,1,443,1,444,1,444,1,444,1,444,1,445,1,445,1,445,1,445,
		1,446,1,446,1,446,1,446,1,447,1,447,1,447,1,447,1,448,1,448,1,448,1,448,
		1,448,1,448,1,448,1,448,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,
		1,449,1,449,1,450,1,450,1,450,5,450,10696,8,450,10,450,12,450,10699,9,
		450,1,451,1,451,3,451,10703,8,451,1,452,1,452,1,452,1,452,1,452,1,452,
		1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,5,452,10721,
		8,452,10,452,12,452,10724,9,452,1,452,3,452,10727,8,452,1,452,1,452,3,
		452,10731,8,452,1,453,1,453,1,453,1,453,1,454,1,454,1,454,1,454,1,454,
		1,454,5,454,10743,8,454,10,454,12,454,10746,9,454,1,454,1,454,1,454,1,
		454,1,454,1,454,1,454,3,454,10755,8,454,1,455,1,455,1,455,1,455,1,455,
		1,455,1,455,3,455,10764,8,455,1,455,1,455,1,455,1,455,3,455,10770,8,455,
		1,456,1,456,1,456,3,456,10775,8,456,1,456,1,456,1,456,1,456,1,456,1,456,
		1,456,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,5,457,10793,
		8,457,10,457,12,457,10796,9,457,1,457,1,457,1,457,3,457,10801,8,457,1,
		457,1,457,1,457,1,457,1,457,3,457,10808,8,457,1,457,1,457,3,457,10812,
		8,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
		5,457,10825,8,457,10,457,12,457,10828,9,457,1,457,1,457,1,457,3,457,10833,
		8,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
		1,457,1,457,1,457,1,457,1,457,1,457,3,457,10852,8,457,1,458,1,458,1,458,
		1,458,1,458,1,458,1,458,5,458,10861,8,458,10,458,12,458,10864,9,458,1,
		458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,3,458,10876,
		8,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,
		1,458,1,458,5,458,10891,8,458,10,458,12,458,10894,9,458,1,458,1,458,1,
		458,3,458,10899,8,458,1,458,1,458,1,458,1,458,1,458,3,458,10906,8,458,
		1,458,1,458,3,458,10910,8,458,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,3,459,10937,8,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,3,459,10995,8,459,1,459,1,459,3,459,10999,
		8,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,3,459,11056,8,459,3,459,
		11058,8,459,1,460,1,460,1,460,1,460,3,460,11064,8,460,1,461,1,461,1,461,
		1,461,1,461,1,461,1,461,1,461,3,461,11074,8,461,1,461,1,461,1,461,1,462,
		1,462,1,462,1,462,1,462,1,462,1,462,1,463,1,463,1,463,1,463,1,463,1,463,
		1,463,3,463,11093,8,463,1,463,1,463,1,463,1,464,1,464,1,464,1,464,1,464,
		1,465,1,465,1,465,1,465,1,465,1,465,3,465,11109,8,465,1,465,1,465,1,465,
		1,466,1,466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,1,467,1,467,3,467,
		11125,8,467,1,467,1,467,1,467,1,468,1,468,1,468,1,468,1,468,1,469,1,469,
		1,469,1,469,1,469,1,469,3,469,11141,8,469,1,469,1,469,1,469,1,469,1,469,
		1,469,1,470,1,470,1,470,1,470,1,470,1,471,1,471,1,471,1,471,1,471,1,472,
		3,472,11160,8,472,1,472,1,472,1,473,3,473,11165,8,473,1,473,1,473,1,474,
		1,474,3,474,11171,8,474,1,475,3,475,11174,8,475,1,475,1,475,1,475,3,475,
		11179,8,475,1,475,5,475,11182,8,475,10,475,12,475,11185,9,475,1,475,1,
		475,1,476,1,476,1,476,1,476,3,476,11193,8,476,1,476,5,476,11196,8,476,
		10,476,12,476,11199,9,476,1,476,1,476,1,477,3,477,11204,8,477,1,477,1,
		477,1,477,1,477,1,477,5,477,11211,8,477,10,477,12,477,11214,9,477,1,477,
		1,477,1,477,1,477,1,477,5,477,11221,8,477,10,477,12,477,11224,9,477,3,
		477,11226,8,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,
		1,477,5,477,11238,8,477,10,477,12,477,11241,9,477,1,477,1,477,1,477,3,
		477,11246,8,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,3,477,11255,
		8,477,1,478,1,478,3,478,11259,8,478,1,479,1,479,1,479,1,479,5,479,11265,
		8,479,10,479,12,479,11268,9,479,1,479,1,479,1,480,1,480,3,480,11274,8,
		480,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,5,481,11285,
		8,481,10,481,12,481,11288,9,481,1,482,1,482,1,482,5,482,11293,8,482,10,
		482,12,482,11296,9,482,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,
		1,483,1,483,3,483,11308,8,483,1,484,1,484,1,484,1,484,1,484,3,484,11315,
		8,484,1,484,1,484,1,484,1,484,3,484,11321,8,484,1,484,1,484,3,484,11325,
		8,484,1,484,1,484,1,484,1,484,1,484,1,484,1,484,1,484,1,484,1,484,1,484,
		1,484,1,484,1,484,1,484,3,484,11342,8,484,1,485,1,485,1,485,1,485,1,485,
		1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,3,485,11357,8,485,3,485,
		11359,8,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,
		1,485,3,485,11372,8,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,
		1,485,1,485,1,485,1,485,1,485,1,485,3,485,11388,8,485,1,485,1,485,1,485,
		1,485,1,485,1,485,3,485,11396,8,485,1,485,1,485,3,485,11400,8,485,1,486,
		3,486,11403,8,486,1,486,1,486,1,487,1,487,1,487,1,487,1,487,3,487,11412,
		8,487,1,487,3,487,11415,8,487,1,487,3,487,11418,8,487,1,487,1,487,1,488,
		1,488,1,488,1,489,1,489,1,489,1,489,1,489,1,489,3,489,11431,8,489,1,490,
		1,490,3,490,11435,8,490,1,491,1,491,1,491,1,491,1,491,1,491,3,491,11443,
		8,491,1,492,1,492,1,492,1,492,3,492,11449,8,492,1,493,1,493,1,493,1,493,
		5,493,11455,8,493,10,493,12,493,11458,9,493,1,493,1,493,1,493,1,493,3,
		493,11464,8,493,1,493,1,493,1,493,1,493,3,493,11470,8,493,1,493,1,493,
		1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,3,493,
		11485,8,493,1,494,1,494,1,494,1,494,1,494,1,494,1,494,3,494,11494,8,494,
		1,494,1,494,1,495,1,495,3,495,11500,8,495,1,496,1,496,1,496,1,496,3,496,
		11506,8,496,1,496,3,496,11509,8,496,1,496,1,496,3,496,11513,8,496,1,496,
		1,496,1,496,5,496,11518,8,496,10,496,12,496,11521,9,496,1,497,1,497,1,
		497,1,497,1,497,3,497,11528,8,497,1,497,3,497,11531,8,497,1,497,1,497,
		1,497,1,497,3,497,11537,8,497,1,497,1,497,1,497,1,497,3,497,11543,8,497,
		3,497,11545,8,497,1,497,1,497,1,497,1,497,3,497,11551,8,497,1,497,3,497,
		11554,8,497,3,497,11556,8,497,1,497,1,497,1,497,1,497,3,497,11562,8,497,
		3,497,11564,8,497,1,497,1,497,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
		1,498,1,498,1,498,3,498,11578,8,498,1,498,1,498,1,498,1,498,1,498,3,498,
		11585,8,498,1,498,1,498,1,499,1,499,1,499,1,499,1,499,3,499,11594,8,499,
		1,500,1,500,1,500,1,500,1,500,3,500,11601,8,500,1,501,1,501,1,501,1,501,
		1,501,1,501,1,501,1,501,1,501,1,501,1,501,1,501,1,501,1,501,1,501,1,501,
		3,501,11619,8,501,1,501,1,501,1,501,1,501,1,501,3,501,11626,8,501,1,501,
		1,501,1,502,1,502,1,502,3,502,11633,8,502,1,502,1,502,1,502,1,502,1,502,
		3,502,11640,8,502,1,502,1,502,1,502,1,502,3,502,11646,8,502,1,502,1,502,
		1,502,1,502,1,502,3,502,11653,8,502,1,502,3,502,11656,8,502,1,503,1,503,
		1,503,3,503,11661,8,503,1,503,1,503,1,504,1,504,1,504,3,504,11668,8,504,
		1,504,1,504,1,505,3,505,11673,8,505,1,505,1,505,3,505,11677,8,505,1,505,
		1,505,1,505,3,505,11682,8,505,1,506,3,506,11685,8,506,1,506,1,506,3,506,
		11689,8,506,1,506,1,506,3,506,11693,8,506,1,506,1,506,1,506,3,506,11698,
		8,506,1,507,1,507,3,507,11702,8,507,1,508,1,508,1,508,1,508,3,508,11708,
		8,508,1,508,1,508,3,508,11712,8,508,1,508,1,508,3,508,11716,8,508,1,508,
		1,508,1,508,3,508,11721,8,508,1,508,1,508,3,508,11725,8,508,1,508,1,508,
		1,508,3,508,11730,8,508,1,508,1,508,1,508,3,508,11735,8,508,1,509,1,509,
		3,509,11739,8,509,1,509,1,509,1,509,3,509,11744,8,509,5,509,11746,8,509,
		10,509,12,509,11749,9,509,1,510,1,510,1,510,5,510,11754,8,510,10,510,12,
		510,11757,9,510,1,511,3,511,11760,8,511,1,511,5,511,11763,8,511,10,511,
		12,511,11766,9,511,1,511,1,511,1,512,1,512,1,512,5,512,11773,8,512,10,
		512,12,512,11776,9,512,1,513,1,513,3,513,11780,8,513,1,514,1,514,1,515,
		1,515,1,516,3,516,11787,8,516,1,516,1,516,1,517,1,517,1,517,1,517,1,517,
		3,517,11796,8,517,1,517,1,517,3,517,11800,8,517,3,517,11802,8,517,1,518,
		1,518,1,518,1,518,1,518,3,518,11809,8,518,1,519,1,519,1,519,1,519,1,519,
		1,519,1,519,1,519,1,519,1,519,3,519,11821,8,519,1,520,1,520,1,520,3,520,
		11826,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,3,520,
		11837,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,3,520,11847,
		8,520,3,520,11849,8,520,1,520,1,520,1,520,1,520,3,520,11855,8,520,3,520,
		11857,8,520,1,520,1,520,1,520,3,520,11862,8,520,3,520,11864,8,520,1,520,
		3,520,11867,8,520,1,521,1,521,3,521,11871,8,521,1,522,1,522,3,522,11875,
		8,522,1,523,1,523,1,523,1,523,3,523,11881,8,523,1,523,1,523,1,523,1,523,
		1,523,1,523,1,523,3,523,11890,8,523,1,523,3,523,11893,8,523,3,523,11895,
		8,523,1,524,3,524,11898,8,524,1,524,1,524,1,524,1,524,3,524,11904,8,524,
		1,524,1,524,3,524,11908,8,524,1,524,3,524,11911,8,524,1,525,1,525,1,525,
		1,525,1,525,1,525,1,525,3,525,11920,8,525,1,526,1,526,1,526,1,526,1,526,
		1,526,1,526,3,526,11929,8,526,1,527,1,527,1,527,1,527,1,527,1,527,1,527,
		1,527,1,527,1,527,3,527,11941,8,527,1,527,3,527,11944,8,527,1,528,1,528,
		1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
		1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,3,528,11969,8,528,
		1,528,1,528,3,528,11973,8,528,1,528,3,528,11976,8,528,1,529,1,529,1,529,
		3,529,11981,8,529,1,530,1,530,1,530,3,530,11986,8,530,1,530,1,530,3,530,
		11990,8,530,1,530,1,530,3,530,11994,8,530,1,530,1,530,3,530,11998,8,530,
		1,531,1,531,1,532,1,532,1,533,1,533,1,533,1,533,3,533,12008,8,533,1,534,
		1,534,1,535,1,535,3,535,12014,8,535,1,536,1,536,1,536,1,536,1,536,1,536,
		1,536,1,536,1,536,1,536,1,536,1,536,1,536,1,536,1,536,3,536,12031,8,536,
		1,537,1,537,1,538,1,538,3,538,12037,8,538,1,538,0,3,92,788,812,539,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
		246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
		282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
		318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,
		354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
		390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,
		426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,
		462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,
		498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,
		534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,
		570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,
		606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,
		642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,
		678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,
		714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,
		750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,
		786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,
		822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,
		858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,
		894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,928,
		930,932,934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,964,
		966,968,970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,
		1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,
		1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,
		1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,0,155,1,0,856,857,2,
		0,856,856,859,859,2,0,290,290,589,590,2,0,856,857,859,859,3,0,445,445,
		553,553,727,727,3,0,853,853,856,856,859,859,3,0,696,696,799,799,838,838,
		2,0,110,110,112,112,1,0,859,860,1,0,793,797,2,0,269,269,456,456,2,0,151,
		151,450,450,3,0,43,43,151,151,450,450,2,0,313,313,730,730,3,0,43,43,450,
		450,803,803,2,0,77,77,801,801,2,0,43,43,803,803,3,0,128,128,537,538,750,
		750,2,0,580,580,642,642,2,0,397,397,646,646,2,0,3,3,500,500,3,0,3,3,435,
		435,498,498,2,0,4,4,35,35,2,0,2,2,57,57,2,0,316,316,554,554,2,0,301,301,
		310,310,2,0,857,857,859,859,2,0,375,375,412,412,2,0,636,637,756,756,3,
		0,750,750,767,767,769,769,2,0,822,822,825,825,2,0,5,5,120,120,2,0,2,2,
		158,158,2,0,723,723,844,844,1,0,776,777,2,0,857,857,859,860,2,0,747,747,
		837,837,2,0,101,101,815,815,2,0,137,137,301,301,2,0,49,49,79,79,4,0,48,
		48,90,90,153,153,178,178,2,0,333,333,649,649,2,0,90,90,178,178,2,0,48,
		48,178,178,3,0,344,344,412,412,585,585,2,0,607,607,857,857,3,0,33,33,160,
		160,322,322,2,0,47,47,859,859,2,0,47,47,857,857,2,0,390,390,859,859,3,
		0,344,344,375,375,412,412,2,0,71,71,75,75,3,0,356,356,396,396,413,413,
		2,0,97,97,145,145,3,0,6,6,366,366,831,831,2,0,750,750,764,764,3,0,469,
		469,485,485,613,613,1,0,130,131,3,0,48,48,90,90,178,178,2,0,71,71,205,
		205,2,0,459,460,501,501,2,0,124,124,530,530,2,0,3,3,88,88,3,0,24,24,105,
		105,176,176,3,0,313,313,532,532,617,617,3,0,164,164,221,221,301,301,2,
		0,21,21,104,104,3,0,546,546,650,650,750,750,2,0,498,498,500,502,3,0,282,
		282,358,358,421,421,2,0,347,347,390,390,3,0,3,3,859,859,898,899,3,0,103,
		103,716,716,758,758,3,0,303,303,783,783,828,828,2,0,303,303,687,687,3,
		0,3,3,468,468,846,846,2,0,76,76,110,110,3,0,308,308,451,451,454,454,2,
		0,498,498,500,500,3,0,427,427,522,522,558,558,3,0,210,210,303,303,339,
		339,2,0,578,578,787,787,2,0,339,339,557,557,3,0,76,76,242,242,557,557,
		3,0,252,252,593,593,750,750,2,0,421,421,540,540,2,0,69,69,328,328,3,0,
		51,51,830,830,839,839,2,0,664,664,755,755,2,0,713,713,749,749,2,0,752,
		752,811,811,2,0,340,340,748,748,2,0,252,252,754,754,2,0,670,670,827,827,
		2,0,751,751,790,790,2,0,100,100,753,753,2,0,201,203,597,597,2,0,181,181,
		394,394,1,0,459,460,2,0,69,69,860,860,2,0,285,285,313,313,2,0,320,320,
		564,564,5,0,201,203,295,295,297,297,494,496,596,597,2,0,757,757,807,807,
		2,0,219,219,791,791,2,0,43,43,727,727,1,0,170,171,4,0,243,243,462,462,
		546,546,859,859,2,0,24,24,105,105,2,0,262,262,305,305,2,0,7,7,29,29,2,
		0,8,8,50,50,2,0,368,368,547,547,2,0,341,341,534,534,4,0,306,306,327,327,
		380,380,565,565,3,0,457,457,498,498,535,535,2,0,193,193,508,508,4,0,589,
		589,624,624,709,709,775,775,9,0,212,214,217,217,261,261,274,274,438,438,
		449,449,491,491,847,847,900,912,1,0,887,889,3,0,875,875,890,891,893,895,
		1,0,890,891,3,0,3,3,6,6,161,161,2,0,3,3,52,52,2,0,857,857,861,862,2,0,
		527,527,530,530,2,0,334,334,434,434,2,0,628,628,632,632,2,0,221,221,469,
		469,2,0,121,121,354,354,3,0,101,101,260,260,354,354,3,0,101,101,354,354,
		395,395,2,0,292,292,369,369,2,0,107,107,856,857,3,0,76,76,97,97,145,145,
		4,0,101,101,354,354,395,395,509,509,2,0,36,36,122,122,2,0,32,32,74,74,
		2,0,154,154,156,156,3,0,293,293,493,493,528,528,7,0,231,231,400,400,416,
		416,569,570,577,577,614,614,616,616,1,0,265,266,2,0,335,335,383,383,2,
		0,381,381,384,384,2,0,273,273,470,470,1,0,471,472,2,0,492,492,530,530,
		3,0,76,76,110,110,498,498,1,0,780,781,3,0,235,235,615,615,848,849,1,0,
		861,862,2,0,857,857,861,861,37,0,2,2,70,70,117,117,127,127,193,195,197,
		227,230,248,250,256,258,288,290,432,434,443,445,462,464,501,503,541,543,
		574,576,593,595,607,609,629,632,632,634,642,644,649,651,664,667,678,681,
		706,708,721,723,727,729,734,736,760,762,784,786,801,803,807,810,815,817,
		828,830,832,834,842,844,846,848,849,1,0,867,874,5,0,344,344,375,375,412,
		412,585,585,889,889,14072,0,1094,1,0,0,0,2,1122,1,0,0,0,4,1128,1,0,0,0,
		6,1159,1,0,0,0,8,1166,1,0,0,0,10,1329,1,0,0,0,12,1336,1,0,0,0,14,1350,
		1,0,0,0,16,1352,1,0,0,0,18,1366,1,0,0,0,20,1370,1,0,0,0,22,1384,1,0,0,
		0,24,1386,1,0,0,0,26,1393,1,0,0,0,28,1403,1,0,0,0,30,1415,1,0,0,0,32,1417,
		1,0,0,0,34,1419,1,0,0,0,36,1421,1,0,0,0,38,1452,1,0,0,0,40,1469,1,0,0,
		0,42,1482,1,0,0,0,44,1529,1,0,0,0,46,1531,1,0,0,0,48,1550,1,0,0,0,50,1552,
		1,0,0,0,52,1581,1,0,0,0,54,1602,1,0,0,0,56,1615,1,0,0,0,58,1620,1,0,0,
		0,60,1624,1,0,0,0,62,1628,1,0,0,0,64,1639,1,0,0,0,66,1644,1,0,0,0,68,1646,
		1,0,0,0,70,1651,1,0,0,0,72,1653,1,0,0,0,74,1655,1,0,0,0,76,1658,1,0,0,
		0,78,1662,1,0,0,0,80,1668,1,0,0,0,82,1670,1,0,0,0,84,1673,1,0,0,0,86,1675,
		1,0,0,0,88,1678,1,0,0,0,90,1683,1,0,0,0,92,1694,1,0,0,0,94,1703,1,0,0,
		0,96,1707,1,0,0,0,98,1709,1,0,0,0,100,1715,1,0,0,0,102,1717,1,0,0,0,104,
		1719,1,0,0,0,106,1722,1,0,0,0,108,1730,1,0,0,0,110,1732,1,0,0,0,112,1734,
		1,0,0,0,114,1756,1,0,0,0,116,1775,1,0,0,0,118,1783,1,0,0,0,120,1787,1,
		0,0,0,122,1795,1,0,0,0,124,1810,1,0,0,0,126,1812,1,0,0,0,128,1856,1,0,
		0,0,130,1865,1,0,0,0,132,1878,1,0,0,0,134,1880,1,0,0,0,136,1882,1,0,0,
		0,138,1884,1,0,0,0,140,1888,1,0,0,0,142,1898,1,0,0,0,144,1908,1,0,0,0,
		146,1952,1,0,0,0,148,1975,1,0,0,0,150,1977,1,0,0,0,152,1979,1,0,0,0,154,
		2072,1,0,0,0,156,2074,1,0,0,0,158,2079,1,0,0,0,160,2082,1,0,0,0,162,2442,
		1,0,0,0,164,2444,1,0,0,0,166,2446,1,0,0,0,168,2448,1,0,0,0,170,2502,1,
		0,0,0,172,2507,1,0,0,0,174,2551,1,0,0,0,176,2574,1,0,0,0,178,2604,1,0,
		0,0,180,2608,1,0,0,0,182,2614,1,0,0,0,184,2620,1,0,0,0,186,2624,1,0,0,
		0,188,2628,1,0,0,0,190,2633,1,0,0,0,192,2647,1,0,0,0,194,2653,1,0,0,0,
		196,2658,1,0,0,0,198,2664,1,0,0,0,200,2680,1,0,0,0,202,2684,1,0,0,0,204,
		2690,1,0,0,0,206,2696,1,0,0,0,208,2704,1,0,0,0,210,2710,1,0,0,0,212,2725,
		1,0,0,0,214,2743,1,0,0,0,216,2750,1,0,0,0,218,2755,1,0,0,0,220,2766,1,
		0,0,0,222,2771,1,0,0,0,224,2775,1,0,0,0,226,2779,1,0,0,0,228,2784,1,0,
		0,0,230,2789,1,0,0,0,232,2794,1,0,0,0,234,2808,1,0,0,0,236,2814,1,0,0,
		0,238,2819,1,0,0,0,240,2827,1,0,0,0,242,2831,1,0,0,0,244,2848,1,0,0,0,
		246,2856,1,0,0,0,248,2862,1,0,0,0,250,2876,1,0,0,0,252,2898,1,0,0,0,254,
		2903,1,0,0,0,256,2909,1,0,0,0,258,2914,1,0,0,0,260,2918,1,0,0,0,262,2946,
		1,0,0,0,264,2957,1,0,0,0,266,2966,1,0,0,0,268,2979,1,0,0,0,270,2987,1,
		0,0,0,272,2992,1,0,0,0,274,3003,1,0,0,0,276,3033,1,0,0,0,278,3063,1,0,
		0,0,280,3077,1,0,0,0,282,3101,1,0,0,0,284,3117,1,0,0,0,286,3130,1,0,0,
		0,288,3149,1,0,0,0,290,3162,1,0,0,0,292,3171,1,0,0,0,294,3201,1,0,0,0,
		296,3444,1,0,0,0,298,3453,1,0,0,0,300,3511,1,0,0,0,302,3560,1,0,0,0,304,
		3562,1,0,0,0,306,3603,1,0,0,0,308,3653,1,0,0,0,310,3723,1,0,0,0,312,3790,
		1,0,0,0,314,3806,1,0,0,0,316,3834,1,0,0,0,318,3853,1,0,0,0,320,3874,1,
		0,0,0,322,3946,1,0,0,0,324,4041,1,0,0,0,326,4063,1,0,0,0,328,4075,1,0,
		0,0,330,4103,1,0,0,0,332,4124,1,0,0,0,334,4150,1,0,0,0,336,4159,1,0,0,
		0,338,4191,1,0,0,0,340,4201,1,0,0,0,342,4217,1,0,0,0,344,4229,1,0,0,0,
		346,4238,1,0,0,0,348,4255,1,0,0,0,350,4279,1,0,0,0,352,4387,1,0,0,0,354,
		4413,1,0,0,0,356,4425,1,0,0,0,358,4432,1,0,0,0,360,4476,1,0,0,0,362,4487,
		1,0,0,0,364,4506,1,0,0,0,366,4546,1,0,0,0,368,4553,1,0,0,0,370,4566,1,
		0,0,0,372,4584,1,0,0,0,374,4654,1,0,0,0,376,4697,1,0,0,0,378,4757,1,0,
		0,0,380,4894,1,0,0,0,382,5037,1,0,0,0,384,5066,1,0,0,0,386,5095,1,0,0,
		0,388,5206,1,0,0,0,390,5219,1,0,0,0,392,5227,1,0,0,0,394,5235,1,0,0,0,
		396,5257,1,0,0,0,398,5287,1,0,0,0,400,5314,1,0,0,0,402,5334,1,0,0,0,404,
		5371,1,0,0,0,406,5575,1,0,0,0,408,5605,1,0,0,0,410,5607,1,0,0,0,412,5639,
		1,0,0,0,414,5686,1,0,0,0,416,5738,1,0,0,0,418,5754,1,0,0,0,420,5772,1,
		0,0,0,422,5794,1,0,0,0,424,5808,1,0,0,0,426,5881,1,0,0,0,428,5912,1,0,
		0,0,430,5914,1,0,0,0,432,5918,1,0,0,0,434,5948,1,0,0,0,436,5950,1,0,0,
		0,438,5971,1,0,0,0,440,6050,1,0,0,0,442,6063,1,0,0,0,444,6065,1,0,0,0,
		446,6078,1,0,0,0,448,6134,1,0,0,0,450,6137,1,0,0,0,452,6183,1,0,0,0,454,
		6186,1,0,0,0,456,6219,1,0,0,0,458,6223,1,0,0,0,460,6238,1,0,0,0,462,6241,
		1,0,0,0,464,6300,1,0,0,0,466,6324,1,0,0,0,468,6329,1,0,0,0,470,6378,1,
		0,0,0,472,6413,1,0,0,0,474,6424,1,0,0,0,476,6433,1,0,0,0,478,6455,1,0,
		0,0,480,6481,1,0,0,0,482,6517,1,0,0,0,484,6566,1,0,0,0,486,6576,1,0,0,
		0,488,6584,1,0,0,0,490,6632,1,0,0,0,492,6634,1,0,0,0,494,6642,1,0,0,0,
		496,6678,1,0,0,0,498,6686,1,0,0,0,500,6713,1,0,0,0,502,6740,1,0,0,0,504,
		6775,1,0,0,0,506,6808,1,0,0,0,508,6831,1,0,0,0,510,6845,1,0,0,0,512,6847,
		1,0,0,0,514,6878,1,0,0,0,516,6892,1,0,0,0,518,6933,1,0,0,0,520,6948,1,
		0,0,0,522,6970,1,0,0,0,524,7000,1,0,0,0,526,7002,1,0,0,0,528,7084,1,0,
		0,0,530,7096,1,0,0,0,532,7110,1,0,0,0,534,7167,1,0,0,0,536,7169,1,0,0,
		0,538,7234,1,0,0,0,540,7236,1,0,0,0,542,7261,1,0,0,0,544,7280,1,0,0,0,
		546,7282,1,0,0,0,548,7307,1,0,0,0,550,7309,1,0,0,0,552,7317,1,0,0,0,554,
		7319,1,0,0,0,556,7459,1,0,0,0,558,7467,1,0,0,0,560,7469,1,0,0,0,562,7471,
		1,0,0,0,564,7473,1,0,0,0,566,7487,1,0,0,0,568,7493,1,0,0,0,570,7495,1,
		0,0,0,572,7497,1,0,0,0,574,7502,1,0,0,0,576,7504,1,0,0,0,578,7508,1,0,
		0,0,580,7520,1,0,0,0,582,7522,1,0,0,0,584,7525,1,0,0,0,586,7528,1,0,0,
		0,588,7530,1,0,0,0,590,7532,1,0,0,0,592,7534,1,0,0,0,594,7563,1,0,0,0,
		596,7565,1,0,0,0,598,7576,1,0,0,0,600,7579,1,0,0,0,602,7591,1,0,0,0,604,
		7599,1,0,0,0,606,7606,1,0,0,0,608,7629,1,0,0,0,610,7631,1,0,0,0,612,7642,
		1,0,0,0,614,7644,1,0,0,0,616,7671,1,0,0,0,618,7678,1,0,0,0,620,7684,1,
		0,0,0,622,7703,1,0,0,0,624,7705,1,0,0,0,626,7722,1,0,0,0,628,7745,1,0,
		0,0,630,7762,1,0,0,0,632,7779,1,0,0,0,634,7789,1,0,0,0,636,7806,1,0,0,
		0,638,7823,1,0,0,0,640,7833,1,0,0,0,642,7835,1,0,0,0,644,7842,1,0,0,0,
		646,7907,1,0,0,0,648,7914,1,0,0,0,650,7945,1,0,0,0,652,7947,1,0,0,0,654,
		8197,1,0,0,0,656,8435,1,0,0,0,658,8475,1,0,0,0,660,8488,1,0,0,0,662,8502,
		1,0,0,0,664,8510,1,0,0,0,666,8516,1,0,0,0,668,8523,1,0,0,0,670,8527,1,
		0,0,0,672,8532,1,0,0,0,674,8579,1,0,0,0,676,8597,1,0,0,0,678,8599,1,0,
		0,0,680,8603,1,0,0,0,682,8613,1,0,0,0,684,8636,1,0,0,0,686,8702,1,0,0,
		0,688,8707,1,0,0,0,690,8709,1,0,0,0,692,8746,1,0,0,0,694,8748,1,0,0,0,
		696,8764,1,0,0,0,698,8777,1,0,0,0,700,8797,1,0,0,0,702,8810,1,0,0,0,704,
		8847,1,0,0,0,706,8864,1,0,0,0,708,8866,1,0,0,0,710,8879,1,0,0,0,712,8904,
		1,0,0,0,714,9119,1,0,0,0,716,9160,1,0,0,0,718,9243,1,0,0,0,720,9245,1,
		0,0,0,722,9249,1,0,0,0,724,9253,1,0,0,0,726,9258,1,0,0,0,728,9262,1,0,
		0,0,730,9267,1,0,0,0,732,9272,1,0,0,0,734,9276,1,0,0,0,736,9292,1,0,0,
		0,738,9309,1,0,0,0,740,9311,1,0,0,0,742,9316,1,0,0,0,744,9320,1,0,0,0,
		746,9329,1,0,0,0,748,9364,1,0,0,0,750,9366,1,0,0,0,752,9374,1,0,0,0,754,
		9378,1,0,0,0,756,9391,1,0,0,0,758,9393,1,0,0,0,760,9441,1,0,0,0,762,9451,
		1,0,0,0,764,9494,1,0,0,0,766,9568,1,0,0,0,768,9579,1,0,0,0,770,9590,1,
		0,0,0,772,9643,1,0,0,0,774,9645,1,0,0,0,776,9686,1,0,0,0,778,9697,1,0,
		0,0,780,9699,1,0,0,0,782,9790,1,0,0,0,784,9792,1,0,0,0,786,9796,1,0,0,
		0,788,9807,1,0,0,0,790,9833,1,0,0,0,792,9842,1,0,0,0,794,9869,1,0,0,0,
		796,9875,1,0,0,0,798,9885,1,0,0,0,800,9895,1,0,0,0,802,9897,1,0,0,0,804,
		9899,1,0,0,0,806,9908,1,0,0,0,808,9945,1,0,0,0,810,9963,1,0,0,0,812,9965,
		1,0,0,0,814,10051,1,0,0,0,816,10076,1,0,0,0,818,10084,1,0,0,0,820,10093,
		1,0,0,0,822,10132,1,0,0,0,824,10148,1,0,0,0,826,10155,1,0,0,0,828,10157,
		1,0,0,0,830,10272,1,0,0,0,832,10274,1,0,0,0,834,10285,1,0,0,0,836,10290,
		1,0,0,0,838,10292,1,0,0,0,840,10349,1,0,0,0,842,10351,1,0,0,0,844,10360,
		1,0,0,0,846,10368,1,0,0,0,848,10388,1,0,0,0,850,10396,1,0,0,0,852,10417,
		1,0,0,0,854,10427,1,0,0,0,856,10452,1,0,0,0,858,10454,1,0,0,0,860,10467,
		1,0,0,0,862,10485,1,0,0,0,864,10546,1,0,0,0,866,10548,1,0,0,0,868,10568,
		1,0,0,0,870,10586,1,0,0,0,872,10594,1,0,0,0,874,10599,1,0,0,0,876,10607,
		1,0,0,0,878,10614,1,0,0,0,880,10616,1,0,0,0,882,10624,1,0,0,0,884,10639,
		1,0,0,0,886,10648,1,0,0,0,888,10658,1,0,0,0,890,10662,1,0,0,0,892,10666,
		1,0,0,0,894,10670,1,0,0,0,896,10674,1,0,0,0,898,10682,1,0,0,0,900,10692,
		1,0,0,0,902,10700,1,0,0,0,904,10730,1,0,0,0,906,10732,1,0,0,0,908,10754,
		1,0,0,0,910,10769,1,0,0,0,912,10774,1,0,0,0,914,10851,1,0,0,0,916,10909,
		1,0,0,0,918,11057,1,0,0,0,920,11063,1,0,0,0,922,11073,1,0,0,0,924,11078,
		1,0,0,0,926,11092,1,0,0,0,928,11097,1,0,0,0,930,11108,1,0,0,0,932,11113,
		1,0,0,0,934,11124,1,0,0,0,936,11129,1,0,0,0,938,11140,1,0,0,0,940,11148,
		1,0,0,0,942,11153,1,0,0,0,944,11159,1,0,0,0,946,11164,1,0,0,0,948,11168,
		1,0,0,0,950,11173,1,0,0,0,952,11188,1,0,0,0,954,11203,1,0,0,0,956,11258,
		1,0,0,0,958,11260,1,0,0,0,960,11273,1,0,0,0,962,11275,1,0,0,0,964,11289,
		1,0,0,0,966,11307,1,0,0,0,968,11341,1,0,0,0,970,11399,1,0,0,0,972,11402,
		1,0,0,0,974,11406,1,0,0,0,976,11421,1,0,0,0,978,11430,1,0,0,0,980,11434,
		1,0,0,0,982,11442,1,0,0,0,984,11448,1,0,0,0,986,11484,1,0,0,0,988,11486,
		1,0,0,0,990,11499,1,0,0,0,992,11501,1,0,0,0,994,11522,1,0,0,0,996,11584,
		1,0,0,0,998,11593,1,0,0,0,1000,11600,1,0,0,0,1002,11625,1,0,0,0,1004,11655,
		1,0,0,0,1006,11660,1,0,0,0,1008,11667,1,0,0,0,1010,11681,1,0,0,0,1012,
		11697,1,0,0,0,1014,11701,1,0,0,0,1016,11734,1,0,0,0,1018,11736,1,0,0,0,
		1020,11750,1,0,0,0,1022,11764,1,0,0,0,1024,11769,1,0,0,0,1026,11779,1,
		0,0,0,1028,11781,1,0,0,0,1030,11783,1,0,0,0,1032,11786,1,0,0,0,1034,11801,
		1,0,0,0,1036,11808,1,0,0,0,1038,11810,1,0,0,0,1040,11822,1,0,0,0,1042,
		11870,1,0,0,0,1044,11874,1,0,0,0,1046,11876,1,0,0,0,1048,11897,1,0,0,0,
		1050,11912,1,0,0,0,1052,11928,1,0,0,0,1054,11930,1,0,0,0,1056,11975,1,
		0,0,0,1058,11980,1,0,0,0,1060,11997,1,0,0,0,1062,11999,1,0,0,0,1064,12001,
		1,0,0,0,1066,12007,1,0,0,0,1068,12009,1,0,0,0,1070,12013,1,0,0,0,1072,
		12030,1,0,0,0,1074,12032,1,0,0,0,1076,12034,1,0,0,0,1078,1080,3,2,1,0,
		1079,1078,1,0,0,0,1080,1083,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,
		0,1082,1084,1,0,0,0,1083,1081,1,0,0,0,1084,1095,5,0,0,1,1085,1089,3,672,
		336,0,1086,1088,3,720,360,0,1087,1086,1,0,0,0,1088,1091,1,0,0,0,1089,1087,
		1,0,0,0,1089,1090,1,0,0,0,1090,1092,1,0,0,0,1091,1089,1,0,0,0,1092,1093,
		5,0,0,1,1093,1095,1,0,0,0,1094,1081,1,0,0,0,1094,1085,1,0,0,0,1095,1,1,
		0,0,0,1096,1123,3,720,360,0,1097,1099,3,672,336,0,1098,1097,1,0,0,0,1098,
		1099,1,0,0,0,1099,1106,1,0,0,0,1100,1107,3,720,360,0,1101,1103,3,6,3,0,
		1102,1101,1,0,0,0,1103,1104,1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,
		0,1105,1107,1,0,0,0,1106,1100,1,0,0,0,1106,1102,1,0,0,0,1107,1111,1,0,
		0,0,1108,1110,3,722,361,0,1109,1108,1,0,0,0,1110,1113,1,0,0,0,1111,1109,
		1,0,0,0,1111,1112,1,0,0,0,1112,1123,1,0,0,0,1113,1111,1,0,0,0,1114,1118,
		3,4,2,0,1115,1117,3,722,361,0,1116,1115,1,0,0,0,1117,1120,1,0,0,0,1118,
		1116,1,0,0,0,1118,1119,1,0,0,0,1119,1123,1,0,0,0,1120,1118,1,0,0,0,1121,
		1123,3,722,361,0,1122,1096,1,0,0,0,1122,1098,1,0,0,0,1122,1114,1,0,0,0,
		1122,1121,1,0,0,0,1123,3,1,0,0,0,1124,1129,3,498,249,0,1125,1129,3,482,
		241,0,1126,1129,3,486,243,0,1127,1129,3,522,261,0,1128,1124,1,0,0,0,1128,
		1125,1,0,0,0,1128,1126,1,0,0,0,1128,1127,1,0,0,0,1129,5,1,0,0,0,1130,1132,
		3,8,4,0,1131,1133,5,884,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1160,
		1,0,0,0,1134,1136,3,14,7,0,1135,1137,5,884,0,0,1136,1135,1,0,0,0,1136,
		1137,1,0,0,0,1137,1160,1,0,0,0,1138,1140,3,48,24,0,1139,1141,5,884,0,0,
		1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1160,1,0,0,0,1142,1144,3,10,5,
		0,1143,1145,5,884,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1160,1,
		0,0,0,1146,1148,3,734,367,0,1147,1149,5,884,0,0,1148,1147,1,0,0,0,1148,
		1149,1,0,0,0,1149,1160,1,0,0,0,1150,1152,3,736,368,0,1151,1153,5,884,0,
		0,1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,1160,1,0,0,0,1154,1156,3,12,
		6,0,1155,1157,5,884,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1160,
		1,0,0,0,1158,1160,5,884,0,0,1159,1130,1,0,0,0,1159,1134,1,0,0,0,1159,1138,
		1,0,0,0,1159,1142,1,0,0,0,1159,1146,1,0,0,0,1159,1150,1,0,0,0,1159,1154,
		1,0,0,0,1159,1158,1,0,0,0,1160,7,1,0,0,0,1161,1167,3,438,219,0,1162,1167,
		3,446,223,0,1163,1167,3,450,225,0,1164,1167,3,456,228,0,1165,1167,3,462,
		231,0,1166,1161,1,0,0,0,1166,1162,1,0,0,0,1166,1163,1,0,0,0,1166,1164,
		1,0,0,0,1166,1165,1,0,0,0,1167,9,1,0,0,0,1168,1330,3,50,25,0,1169,1330,
		3,58,29,0,1170,1330,3,116,58,0,1171,1330,3,130,65,0,1172,1330,3,142,71,
		0,1173,1330,3,144,72,0,1174,1330,3,140,70,0,1175,1330,3,158,79,0,1176,
		1330,3,172,86,0,1177,1330,3,174,87,0,1178,1330,3,284,142,0,1179,1330,3,
		288,144,0,1180,1330,3,532,266,0,1181,1330,3,354,177,0,1182,1330,3,554,
		277,0,1183,1330,3,294,147,0,1184,1330,3,302,151,0,1185,1330,3,304,152,
		0,1186,1330,3,308,154,0,1187,1330,3,312,156,0,1188,1330,3,316,158,0,1189,
		1330,3,472,236,0,1190,1330,3,324,162,0,1191,1330,3,328,164,0,1192,1330,
		3,320,160,0,1193,1330,3,336,168,0,1194,1330,3,332,166,0,1195,1330,3,340,
		170,0,1196,1330,3,342,171,0,1197,1330,3,344,172,0,1198,1330,3,346,173,
		0,1199,1330,3,352,176,0,1200,1330,3,368,184,0,1201,1330,3,362,181,0,1202,
		1330,3,374,187,0,1203,1330,3,378,189,0,1204,1330,3,382,191,0,1205,1330,
		3,386,193,0,1206,1330,3,388,194,0,1207,1330,3,392,196,0,1208,1330,3,394,
		197,0,1209,1330,3,398,199,0,1210,1330,3,400,200,0,1211,1330,3,526,263,
		0,1212,1330,3,404,202,0,1213,1330,3,410,205,0,1214,1330,3,412,206,0,1215,
		1330,3,52,26,0,1216,1330,3,112,56,0,1217,1330,3,126,63,0,1218,1330,3,176,
		88,0,1219,1330,3,282,141,0,1220,1330,3,286,143,0,1221,1330,3,290,145,0,
		1222,1330,3,468,234,0,1223,1330,3,356,178,0,1224,1330,3,292,146,0,1225,
		1330,3,306,153,0,1226,1330,3,310,155,0,1227,1330,3,314,157,0,1228,1330,
		3,318,159,0,1229,1330,3,470,235,0,1230,1330,3,476,238,0,1231,1330,3,478,
		239,0,1232,1330,3,326,163,0,1233,1330,3,330,165,0,1234,1330,3,322,161,
		0,1235,1330,3,338,169,0,1236,1330,3,334,167,0,1237,1330,3,168,84,0,1238,
		1330,3,348,174,0,1239,1330,3,350,175,0,1240,1330,3,358,179,0,1241,1330,
		3,360,180,0,1242,1330,3,364,182,0,1243,1330,3,366,183,0,1244,1330,3,370,
		185,0,1245,1330,3,372,186,0,1246,1330,3,376,188,0,1247,1330,3,380,190,
		0,1248,1330,3,384,192,0,1249,1330,3,390,195,0,1250,1330,3,396,198,0,1251,
		1330,3,512,256,0,1252,1330,3,402,201,0,1253,1330,3,516,258,0,1254,1330,
		3,636,318,0,1255,1330,3,406,203,0,1256,1330,3,408,204,0,1257,1330,3,414,
		207,0,1258,1330,3,480,240,0,1259,1330,3,416,208,0,1260,1330,3,418,209,
		0,1261,1330,3,420,210,0,1262,1330,3,54,27,0,1263,1330,3,56,28,0,1264,1330,
		3,114,57,0,1265,1330,3,128,64,0,1266,1330,3,156,78,0,1267,1330,3,170,85,
		0,1268,1330,3,178,89,0,1269,1330,3,180,90,0,1270,1330,3,182,91,0,1271,
		1330,3,184,92,0,1272,1330,3,186,93,0,1273,1330,3,188,94,0,1274,1330,3,
		190,95,0,1275,1330,3,192,96,0,1276,1330,3,194,97,0,1277,1330,3,196,98,
		0,1278,1330,3,238,119,0,1279,1330,3,198,99,0,1280,1330,3,200,100,0,1281,
		1330,3,212,106,0,1282,1330,3,214,107,0,1283,1330,3,202,101,0,1284,1330,
		3,204,102,0,1285,1330,3,206,103,0,1286,1330,3,208,104,0,1287,1330,3,210,
		105,0,1288,1330,3,216,108,0,1289,1330,3,218,109,0,1290,1330,3,220,110,
		0,1291,1330,3,628,314,0,1292,1330,3,614,307,0,1293,1330,3,222,111,0,1294,
		1330,3,224,112,0,1295,1330,3,226,113,0,1296,1330,3,228,114,0,1297,1330,
		3,230,115,0,1298,1330,3,620,310,0,1299,1330,3,232,116,0,1300,1330,3,234,
		117,0,1301,1330,3,236,118,0,1302,1330,3,240,120,0,1303,1330,3,242,121,
		0,1304,1330,3,244,122,0,1305,1330,3,246,123,0,1306,1330,3,248,124,0,1307,
		1330,3,250,125,0,1308,1330,3,252,126,0,1309,1330,3,254,127,0,1310,1330,
		3,256,128,0,1311,1330,3,258,129,0,1312,1330,3,260,130,0,1313,1330,3,630,
		315,0,1314,1330,3,262,131,0,1315,1330,3,264,132,0,1316,1330,3,266,133,
		0,1317,1330,3,632,316,0,1318,1330,3,622,311,0,1319,1330,3,638,319,0,1320,
		1330,3,268,134,0,1321,1330,3,634,317,0,1322,1330,3,270,135,0,1323,1330,
		3,272,136,0,1324,1330,3,274,137,0,1325,1330,3,276,138,0,1326,1330,3,278,
		139,0,1327,1330,3,280,140,0,1328,1330,3,514,257,0,1329,1168,1,0,0,0,1329,
		1169,1,0,0,0,1329,1170,1,0,0,0,1329,1171,1,0,0,0,1329,1172,1,0,0,0,1329,
		1173,1,0,0,0,1329,1174,1,0,0,0,1329,1175,1,0,0,0,1329,1176,1,0,0,0,1329,
		1177,1,0,0,0,1329,1178,1,0,0,0,1329,1179,1,0,0,0,1329,1180,1,0,0,0,1329,
		1181,1,0,0,0,1329,1182,1,0,0,0,1329,1183,1,0,0,0,1329,1184,1,0,0,0,1329,
		1185,1,0,0,0,1329,1186,1,0,0,0,1329,1187,1,0,0,0,1329,1188,1,0,0,0,1329,
		1189,1,0,0,0,1329,1190,1,0,0,0,1329,1191,1,0,0,0,1329,1192,1,0,0,0,1329,
		1193,1,0,0,0,1329,1194,1,0,0,0,1329,1195,1,0,0,0,1329,1196,1,0,0,0,1329,
		1197,1,0,0,0,1329,1198,1,0,0,0,1329,1199,1,0,0,0,1329,1200,1,0,0,0,1329,
		1201,1,0,0,0,1329,1202,1,0,0,0,1329,1203,1,0,0,0,1329,1204,1,0,0,0,1329,
		1205,1,0,0,0,1329,1206,1,0,0,0,1329,1207,1,0,0,0,1329,1208,1,0,0,0,1329,
		1209,1,0,0,0,1329,1210,1,0,0,0,1329,1211,1,0,0,0,1329,1212,1,0,0,0,1329,
		1213,1,0,0,0,1329,1214,1,0,0,0,1329,1215,1,0,0,0,1329,1216,1,0,0,0,1329,
		1217,1,0,0,0,1329,1218,1,0,0,0,1329,1219,1,0,0,0,1329,1220,1,0,0,0,1329,
		1221,1,0,0,0,1329,1222,1,0,0,0,1329,1223,1,0,0,0,1329,1224,1,0,0,0,1329,
		1225,1,0,0,0,1329,1226,1,0,0,0,1329,1227,1,0,0,0,1329,1228,1,0,0,0,1329,
		1229,1,0,0,0,1329,1230,1,0,0,0,1329,1231,1,0,0,0,1329,1232,1,0,0,0,1329,
		1233,1,0,0,0,1329,1234,1,0,0,0,1329,1235,1,0,0,0,1329,1236,1,0,0,0,1329,
		1237,1,0,0,0,1329,1238,1,0,0,0,1329,1239,1,0,0,0,1329,1240,1,0,0,0,1329,
		1241,1,0,0,0,1329,1242,1,0,0,0,1329,1243,1,0,0,0,1329,1244,1,0,0,0,1329,
		1245,1,0,0,0,1329,1246,1,0,0,0,1329,1247,1,0,0,0,1329,1248,1,0,0,0,1329,
		1249,1,0,0,0,1329,1250,1,0,0,0,1329,1251,1,0,0,0,1329,1252,1,0,0,0,1329,
		1253,1,0,0,0,1329,1254,1,0,0,0,1329,1255,1,0,0,0,1329,1256,1,0,0,0,1329,
		1257,1,0,0,0,1329,1258,1,0,0,0,1329,1259,1,0,0,0,1329,1260,1,0,0,0,1329,
		1261,1,0,0,0,1329,1262,1,0,0,0,1329,1263,1,0,0,0,1329,1264,1,0,0,0,1329,
		1265,1,0,0,0,1329,1266,1,0,0,0,1329,1267,1,0,0,0,1329,1268,1,0,0,0,1329,
		1269,1,0,0,0,1329,1270,1,0,0,0,1329,1271,1,0,0,0,1329,1272,1,0,0,0,1329,
		1273,1,0,0,0,1329,1274,1,0,0,0,1329,1275,1,0,0,0,1329,1276,1,0,0,0,1329,
		1277,1,0,0,0,1329,1278,1,0,0,0,1329,1279,1,0,0,0,1329,1280,1,0,0,0,1329,
		1281,1,0,0,0,1329,1282,1,0,0,0,1329,1283,1,0,0,0,1329,1284,1,0,0,0,1329,
		1285,1,0,0,0,1329,1286,1,0,0,0,1329,1287,1,0,0,0,1329,1288,1,0,0,0,1329,
		1289,1,0,0,0,1329,1290,1,0,0,0,1329,1291,1,0,0,0,1329,1292,1,0,0,0,1329,
		1293,1,0,0,0,1329,1294,1,0,0,0,1329,1295,1,0,0,0,1329,1296,1,0,0,0,1329,
		1297,1,0,0,0,1329,1298,1,0,0,0,1329,1299,1,0,0,0,1329,1300,1,0,0,0,1329,
		1301,1,0,0,0,1329,1302,1,0,0,0,1329,1303,1,0,0,0,1329,1304,1,0,0,0,1329,
		1305,1,0,0,0,1329,1306,1,0,0,0,1329,1307,1,0,0,0,1329,1308,1,0,0,0,1329,
		1309,1,0,0,0,1329,1310,1,0,0,0,1329,1311,1,0,0,0,1329,1312,1,0,0,0,1329,
		1313,1,0,0,0,1329,1314,1,0,0,0,1329,1315,1,0,0,0,1329,1316,1,0,0,0,1329,
		1317,1,0,0,0,1329,1318,1,0,0,0,1329,1319,1,0,0,0,1329,1320,1,0,0,0,1329,
		1321,1,0,0,0,1329,1322,1,0,0,0,1329,1323,1,0,0,0,1329,1324,1,0,0,0,1329,
		1325,1,0,0,0,1329,1326,1,0,0,0,1329,1327,1,0,0,0,1329,1328,1,0,0,0,1330,
		11,1,0,0,0,1331,1337,3,652,326,0,1332,1337,3,654,327,0,1333,1337,3,656,
		328,0,1334,1337,3,658,329,0,1335,1337,3,660,330,0,1336,1331,1,0,0,0,1336,
		1332,1,0,0,0,1336,1333,1,0,0,0,1336,1334,1,0,0,0,1336,1335,1,0,0,0,1337,
		13,1,0,0,0,1338,1351,3,16,8,0,1339,1351,3,18,9,0,1340,1351,3,20,10,0,1341,
		1351,3,22,11,0,1342,1351,3,26,13,0,1343,1351,3,24,12,0,1344,1351,3,28,
		14,0,1345,1351,3,36,18,0,1346,1351,3,38,19,0,1347,1351,3,40,20,0,1348,
		1351,3,42,21,0,1349,1351,3,44,22,0,1350,1338,1,0,0,0,1350,1339,1,0,0,0,
		1350,1340,1,0,0,0,1350,1341,1,0,0,0,1350,1342,1,0,0,0,1350,1343,1,0,0,
		0,1350,1344,1,0,0,0,1350,1345,1,0,0,0,1350,1346,1,0,0,0,1350,1347,1,0,
		0,0,1350,1348,1,0,0,0,1350,1349,1,0,0,0,1351,15,1,0,0,0,1352,1354,5,13,
		0,0,1353,1355,5,884,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,1359,
		1,0,0,0,1356,1358,3,6,3,0,1357,1356,1,0,0,0,1358,1361,1,0,0,0,1359,1357,
		1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,1361,1359,1,0,0,0,1362,1364,
		5,60,0,0,1363,1365,5,884,0,0,1364,1363,1,0,0,0,1364,1365,1,0,0,0,1365,
		17,1,0,0,0,1366,1368,5,15,0,0,1367,1369,5,884,0,0,1368,1367,1,0,0,0,1368,
		1369,1,0,0,0,1369,19,1,0,0,0,1370,1372,5,33,0,0,1371,1373,5,884,0,0,1372,
		1371,1,0,0,0,1372,1373,1,0,0,0,1373,21,1,0,0,0,1374,1375,5,78,0,0,1375,
		1377,3,1066,533,0,1376,1378,5,884,0,0,1377,1376,1,0,0,0,1377,1378,1,0,
		0,0,1378,1385,1,0,0,0,1379,1380,3,1066,533,0,1380,1382,5,885,0,0,1381,
		1383,5,884,0,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1385,1,0,0,0,1384,
		1374,1,0,0,0,1384,1379,1,0,0,0,1385,23,1,0,0,0,1386,1388,5,142,0,0,1387,
		1389,3,788,394,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,1391,1,0,0,0,
		1390,1392,5,884,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,25,1,0,0,
		0,1393,1394,5,86,0,0,1394,1395,3,812,406,0,1395,1398,3,6,3,0,1396,1397,
		5,59,0,0,1397,1399,3,6,3,0,1398,1396,1,0,0,0,1398,1399,1,0,0,0,1399,1401,
		1,0,0,0,1400,1402,5,884,0,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,27,
		1,0,0,0,1403,1410,5,587,0,0,1404,1405,3,30,15,0,1405,1406,5,883,0,0,1406,
		1407,3,32,16,0,1407,1408,5,883,0,0,1408,1409,3,34,17,0,1409,1411,1,0,0,
		0,1410,1404,1,0,0,0,1410,1411,1,0,0,0,1411,1413,1,0,0,0,1412,1414,5,884,
		0,0,1413,1412,1,0,0,0,1413,1414,1,0,0,0,1414,29,1,0,0,0,1415,1416,7,0,
		0,0,1416,31,1,0,0,0,1417,1418,7,1,0,0,1418,33,1,0,0,0,1419,1420,7,0,0,
		0,1420,35,1,0,0,0,1421,1422,5,13,0,0,1422,1424,5,599,0,0,1423,1425,5,884,
		0,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1427,1,0,0,0,1426,1428,3,
		6,3,0,1427,1426,1,0,0,0,1428,1429,1,0,0,0,1429,1427,1,0,0,0,1429,1430,
		1,0,0,0,1430,1431,1,0,0,0,1431,1432,5,60,0,0,1432,1434,5,599,0,0,1433,
		1435,5,884,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1436,1,0,0,0,1436,
		1437,5,13,0,0,1437,1439,5,248,0,0,1438,1440,5,884,0,0,1439,1438,1,0,0,
		0,1439,1440,1,0,0,0,1440,1444,1,0,0,0,1441,1443,3,6,3,0,1442,1441,1,0,
		0,0,1443,1446,1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,1447,1,
		0,0,0,1446,1444,1,0,0,0,1447,1448,5,60,0,0,1448,1450,5,248,0,0,1449,1451,
		5,884,0,0,1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,37,1,0,0,0,1452,1454,
		5,185,0,0,1453,1455,3,454,227,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,
		1457,1,0,0,0,1456,1458,5,883,0,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,
		1461,1,0,0,0,1459,1460,7,2,0,0,1460,1462,3,460,230,0,1461,1459,1,0,0,0,
		1461,1462,1,0,0,0,1462,1464,1,0,0,0,1463,1465,3,788,394,0,1464,1463,1,
		0,0,0,1464,1465,1,0,0,0,1465,1467,1,0,0,0,1466,1468,5,884,0,0,1467,1466,
		1,0,0,0,1467,1468,1,0,0,0,1468,39,1,0,0,0,1469,1470,5,188,0,0,1470,1480,
		3,812,406,0,1471,1481,3,6,3,0,1472,1474,5,15,0,0,1473,1475,5,884,0,0,1474,
		1473,1,0,0,0,1474,1475,1,0,0,0,1475,1481,1,0,0,0,1476,1478,5,33,0,0,1477,
		1479,5,884,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,0,0,0,1480,
		1471,1,0,0,0,1480,1472,1,0,0,0,1480,1476,1,0,0,0,1481,41,1,0,0,0,1482,
		1485,5,129,0,0,1483,1486,3,788,394,0,1484,1486,5,853,0,0,1485,1483,1,0,
		0,0,1485,1484,1,0,0,0,1486,1491,1,0,0,0,1487,1488,5,883,0,0,1488,1490,
		5,856,0,0,1489,1487,1,0,0,0,1490,1493,1,0,0,0,1491,1489,1,0,0,0,1491,1492,
		1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,0,0,1494,1496,5,884,0,0,1495,1494,
		1,0,0,0,1495,1496,1,0,0,0,1496,43,1,0,0,0,1497,1498,5,133,0,0,1498,1499,
		5,881,0,0,1499,1500,7,3,0,0,1500,1501,5,883,0,0,1501,1502,3,786,393,0,
		1502,1503,5,883,0,0,1503,1508,3,786,393,0,1504,1505,5,883,0,0,1505,1507,
		3,786,393,0,1506,1504,1,0,0,0,1507,1510,1,0,0,0,1508,1506,1,0,0,0,1508,
		1509,1,0,0,0,1509,1511,1,0,0,0,1510,1508,1,0,0,0,1511,1514,5,882,0,0,1512,
		1513,5,189,0,0,1513,1515,7,4,0,0,1514,1512,1,0,0,0,1514,1515,1,0,0,0,1515,
		1517,1,0,0,0,1516,1518,5,884,0,0,1517,1516,1,0,0,0,1517,1518,1,0,0,0,1518,
		1530,1,0,0,0,1519,1520,5,133,0,0,1520,1521,5,857,0,0,1521,1526,7,5,0,0,
		1522,1523,5,883,0,0,1523,1525,7,3,0,0,1524,1522,1,0,0,0,1525,1528,1,0,
		0,0,1526,1524,1,0,0,0,1526,1527,1,0,0,0,1527,1530,1,0,0,0,1528,1526,1,
		0,0,0,1529,1497,1,0,0,0,1529,1519,1,0,0,0,1530,45,1,0,0,0,1531,1532,5,
		884,0,0,1532,47,1,0,0,0,1533,1551,3,646,323,0,1534,1551,3,670,335,0,1535,
		1551,3,650,325,0,1536,1551,3,434,217,0,1537,1551,3,432,216,0,1538,1551,
		3,422,211,0,1539,1551,3,426,213,0,1540,1551,3,662,331,0,1541,1551,3,436,
		218,0,1542,1551,3,686,343,0,1543,1551,3,716,358,0,1544,1551,3,718,359,
		0,1545,1551,3,724,362,0,1546,1551,3,726,363,0,1547,1551,3,728,364,0,1548,
		1551,3,730,365,0,1549,1551,3,732,366,0,1550,1533,1,0,0,0,1550,1534,1,0,
		0,0,1550,1535,1,0,0,0,1550,1536,1,0,0,0,1550,1537,1,0,0,0,1550,1538,1,
		0,0,0,1550,1539,1,0,0,0,1550,1540,1,0,0,0,1550,1541,1,0,0,0,1550,1542,
		1,0,0,0,1550,1543,1,0,0,0,1550,1544,1,0,0,0,1550,1545,1,0,0,0,1550,1546,
		1,0,0,0,1550,1547,1,0,0,0,1550,1548,1,0,0,0,1550,1549,1,0,0,0,1551,49,
		1,0,0,0,1552,1553,5,4,0,0,1553,1554,5,640,0,0,1554,1555,5,791,0,0,1555,
		1556,3,1066,533,0,1556,1563,5,189,0,0,1557,1559,5,883,0,0,1558,1557,1,
		0,0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,1561,5,428,0,0,1561,1562,
		5,863,0,0,1562,1564,3,1066,533,0,1563,1558,1,0,0,0,1563,1564,1,0,0,0,1564,
		1571,1,0,0,0,1565,1567,5,883,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,
		1568,1,0,0,0,1568,1569,5,765,0,0,1569,1570,5,863,0,0,1570,1572,5,859,0,
		0,1571,1566,1,0,0,0,1571,1572,1,0,0,0,1572,1579,1,0,0,0,1573,1575,5,883,
		0,0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,1577,5,
		682,0,0,1577,1578,5,863,0,0,1578,1580,3,1066,533,0,1579,1574,1,0,0,0,1579,
		1580,1,0,0,0,1580,51,1,0,0,0,1581,1582,5,35,0,0,1582,1583,5,640,0,0,1583,
		1584,5,791,0,0,1584,1585,3,1066,533,0,1585,1592,5,189,0,0,1586,1588,5,
		883,0,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1590,
		5,765,0,0,1590,1591,5,863,0,0,1591,1593,5,859,0,0,1592,1587,1,0,0,0,1592,
		1593,1,0,0,0,1593,1600,1,0,0,0,1594,1596,5,883,0,0,1595,1594,1,0,0,0,1595,
		1596,1,0,0,0,1596,1597,1,0,0,0,1597,1598,5,682,0,0,1598,1599,5,863,0,0,
		1599,1601,3,1066,533,0,1600,1595,1,0,0,0,1600,1601,1,0,0,0,1601,53,1,0,
		0,0,1602,1603,5,57,0,0,1603,1606,5,206,0,0,1604,1605,5,86,0,0,1605,1607,
		5,65,0,0,1606,1604,1,0,0,0,1606,1607,1,0,0,0,1607,1611,1,0,0,0,1608,1609,
		3,1066,533,0,1609,1610,5,876,0,0,1610,1612,1,0,0,0,1611,1608,1,0,0,0,1611,
		1612,1,0,0,0,1612,1613,1,0,0,0,1613,1614,3,1066,533,0,1614,55,1,0,0,0,
		1615,1616,5,57,0,0,1616,1617,5,640,0,0,1617,1618,5,791,0,0,1618,1619,3,
		1066,533,0,1619,57,1,0,0,0,1620,1621,3,60,30,0,1621,1622,3,1066,533,0,
		1622,1623,3,62,31,0,1623,59,1,0,0,0,1624,1625,5,4,0,0,1625,1626,5,218,
		0,0,1626,61,1,0,0,0,1627,1629,3,64,32,0,1628,1627,1,0,0,0,1628,1629,1,
		0,0,0,1629,1631,1,0,0,0,1630,1632,3,86,43,0,1631,1630,1,0,0,0,1631,1632,
		1,0,0,0,1632,1634,1,0,0,0,1633,1635,3,68,34,0,1634,1633,1,0,0,0,1634,1635,
		1,0,0,0,1635,1637,1,0,0,0,1636,1638,3,74,37,0,1637,1636,1,0,0,0,1637,1638,
		1,0,0,0,1638,63,1,0,0,0,1639,1642,3,66,33,0,1640,1643,3,90,45,0,1641,1643,
		3,82,41,0,1642,1640,1,0,0,0,1642,1641,1,0,0,0,1643,65,1,0,0,0,1644,1645,
		5,75,0,0,1645,67,1,0,0,0,1646,1647,3,72,36,0,1647,1648,3,70,35,0,1648,
		69,1,0,0,0,1649,1652,5,3,0,0,1650,1652,3,108,54,0,1651,1649,1,0,0,0,1651,
		1650,1,0,0,0,1652,71,1,0,0,0,1653,1654,5,57,0,0,1654,73,1,0,0,0,1655,1656,
		3,76,38,0,1656,1657,3,78,39,0,1657,75,1,0,0,0,1658,1659,5,2,0,0,1659,1660,
		5,69,0,0,1660,1661,5,75,0,0,1661,77,1,0,0,0,1662,1666,3,80,40,0,1663,1664,
		3,84,42,0,1664,1665,3,1066,533,0,1665,1667,1,0,0,0,1666,1663,1,0,0,0,1666,
		1667,1,0,0,0,1667,79,1,0,0,0,1668,1669,5,859,0,0,1669,81,1,0,0,0,1670,
		1671,3,84,42,0,1671,1672,3,1066,533,0,1672,83,1,0,0,0,1673,1674,5,7,0,
		0,1674,85,1,0,0,0,1675,1676,3,88,44,0,1676,1677,3,92,46,0,1677,87,1,0,
		0,0,1678,1679,5,189,0,0,1679,89,1,0,0,0,1680,1684,3,94,47,0,1681,1684,
		3,104,52,0,1682,1684,5,859,0,0,1683,1680,1,0,0,0,1683,1681,1,0,0,0,1683,
		1682,1,0,0,0,1684,91,1,0,0,0,1685,1686,6,46,-1,0,1686,1687,5,766,0,0,1687,
		1688,5,863,0,0,1688,1695,7,6,0,0,1689,1690,5,842,0,0,1690,1691,5,863,0,
		0,1691,1695,7,7,0,0,1692,1693,5,836,0,0,1693,1695,5,276,0,0,1694,1685,
		1,0,0,0,1694,1689,1,0,0,0,1694,1692,1,0,0,0,1695,1700,1,0,0,0,1696,1697,
		10,1,0,0,1697,1699,5,883,0,0,1698,1696,1,0,0,0,1699,1702,1,0,0,0,1700,
		1698,1,0,0,0,1700,1701,1,0,0,0,1701,93,1,0,0,0,1702,1700,1,0,0,0,1703,
		1704,3,98,49,0,1704,1705,3,96,48,0,1705,1706,3,100,50,0,1706,95,1,0,0,
		0,1707,1708,3,1066,533,0,1708,97,1,0,0,0,1709,1710,5,55,0,0,1710,99,1,
		0,0,0,1711,1712,3,102,51,0,1712,1713,3,100,50,0,1713,1716,1,0,0,0,1714,
		1716,3,1066,533,0,1715,1711,1,0,0,0,1715,1714,1,0,0,0,1716,101,1,0,0,0,
		1717,1718,5,11,0,0,1718,103,1,0,0,0,1719,1720,3,106,53,0,1720,1721,3,100,
		50,0,1721,105,1,0,0,0,1722,1723,5,304,0,0,1723,107,1,0,0,0,1724,1725,3,
		110,55,0,1725,1726,3,104,52,0,1726,1727,5,854,0,0,1727,1728,5,883,0,0,
		1728,1731,1,0,0,0,1729,1731,3,104,52,0,1730,1724,1,0,0,0,1730,1729,1,0,
		0,0,1731,109,1,0,0,0,1732,1733,5,854,0,0,1733,111,1,0,0,0,1734,1735,5,
		35,0,0,1735,1736,5,218,0,0,1736,1739,3,1066,533,0,1737,1738,5,9,0,0,1738,
		1740,3,1066,533,0,1739,1737,1,0,0,0,1739,1740,1,0,0,0,1740,1741,1,0,0,
		0,1741,1746,5,75,0,0,1742,1744,5,883,0,0,1743,1742,1,0,0,0,1743,1744,1,
		0,0,0,1744,1745,1,0,0,0,1745,1747,7,8,0,0,1746,1743,1,0,0,0,1747,1748,
		1,0,0,0,1748,1746,1,0,0,0,1748,1749,1,0,0,0,1749,1754,1,0,0,0,1750,1751,
		5,189,0,0,1751,1752,5,766,0,0,1752,1753,5,863,0,0,1753,1755,7,6,0,0,1754,
		1750,1,0,0,0,1754,1755,1,0,0,0,1755,113,1,0,0,0,1756,1757,5,57,0,0,1757,
		1760,5,218,0,0,1758,1759,5,86,0,0,1759,1761,5,65,0,0,1760,1758,1,0,0,0,
		1760,1761,1,0,0,0,1761,1766,1,0,0,0,1762,1764,5,883,0,0,1763,1762,1,0,
		0,0,1763,1764,1,0,0,0,1764,1765,1,0,0,0,1765,1767,3,1066,533,0,1766,1763,
		1,0,0,0,1767,1768,1,0,0,0,1768,1766,1,0,0,0,1768,1769,1,0,0,0,1769,1773,
		1,0,0,0,1770,1771,5,189,0,0,1771,1772,5,435,0,0,1772,1774,5,294,0,0,1773,
		1770,1,0,0,0,1773,1774,1,0,0,0,1774,115,1,0,0,0,1775,1776,3,118,59,0,1776,
		1781,3,1066,533,0,1777,1782,3,120,60,0,1778,1779,5,511,0,0,1779,1780,5,
		481,0,0,1780,1782,5,95,0,0,1781,1777,1,0,0,0,1781,1778,1,0,0,0,1782,117,
		1,0,0,0,1783,1784,5,4,0,0,1784,1785,5,641,0,0,1785,1786,5,95,0,0,1786,
		119,1,0,0,0,1787,1788,3,122,61,0,1788,1791,3,124,62,0,1789,1790,5,883,
		0,0,1790,1792,3,124,62,0,1791,1789,1,0,0,0,1791,1792,1,0,0,0,1792,1793,
		1,0,0,0,1793,1794,5,882,0,0,1794,121,1,0,0,0,1795,1796,5,189,0,0,1796,
		1797,5,481,0,0,1797,1798,5,95,0,0,1798,1799,5,881,0,0,1799,123,1,0,0,0,
		1800,1801,5,285,0,0,1801,1802,5,18,0,0,1802,1803,5,765,0,0,1803,1804,5,
		863,0,0,1804,1811,5,859,0,0,1805,1806,5,313,0,0,1806,1807,5,18,0,0,1807,
		1808,5,765,0,0,1808,1809,5,863,0,0,1809,1811,5,859,0,0,1810,1800,1,0,0,
		0,1810,1805,1,0,0,0,1811,125,1,0,0,0,1812,1813,5,35,0,0,1813,1814,5,641,
		0,0,1814,1815,5,95,0,0,1815,1818,3,1066,533,0,1816,1817,5,9,0,0,1817,1819,
		3,1066,533,0,1818,1816,1,0,0,0,1818,1819,1,0,0,0,1819,1833,1,0,0,0,1820,
		1831,5,75,0,0,1821,1822,5,69,0,0,1822,1823,5,863,0,0,1823,1832,5,859,0,
		0,1824,1825,5,693,0,0,1825,1826,5,863,0,0,1826,1832,5,859,0,0,1827,1828,
		5,218,0,0,1828,1832,3,1066,533,0,1829,1830,5,486,0,0,1830,1832,3,1066,
		533,0,1831,1821,1,0,0,0,1831,1824,1,0,0,0,1831,1827,1,0,0,0,1831,1829,
		1,0,0,0,1832,1834,1,0,0,0,1833,1820,1,0,0,0,1833,1834,1,0,0,0,1834,1847,
		1,0,0,0,1835,1845,5,189,0,0,1836,1837,5,207,0,0,1837,1838,5,863,0,0,1838,
		1846,7,9,0,0,1839,1840,5,487,0,0,1840,1841,5,863,0,0,1841,1846,5,859,0,
		0,1842,1843,5,270,0,0,1843,1844,5,863,0,0,1844,1846,7,10,0,0,1845,1836,
		1,0,0,0,1845,1839,1,0,0,0,1845,1842,1,0,0,0,1846,1848,1,0,0,0,1847,1835,
		1,0,0,0,1847,1848,1,0,0,0,1848,1854,1,0,0,0,1849,1850,5,313,0,0,1850,1851,
		5,18,0,0,1851,1852,5,765,0,0,1852,1853,5,863,0,0,1853,1855,5,859,0,0,1854,
		1849,1,0,0,0,1854,1855,1,0,0,0,1855,127,1,0,0,0,1856,1857,5,57,0,0,1857,
		1858,5,641,0,0,1858,1859,5,95,0,0,1859,1863,3,1066,533,0,1860,1861,5,511,
		0,0,1861,1862,5,486,0,0,1862,1864,5,95,0,0,1863,1860,1,0,0,0,1863,1864,
		1,0,0,0,1864,129,1,0,0,0,1865,1869,3,138,69,0,1866,1867,3,146,73,0,1867,
		1868,3,136,68,0,1868,1870,1,0,0,0,1869,1866,1,0,0,0,1869,1870,1,0,0,0,
		1870,1871,1,0,0,0,1871,1872,3,996,498,0,1872,1873,3,134,67,0,1873,1874,
		3,132,66,0,1874,131,1,0,0,0,1875,1879,3,1066,533,0,1876,1877,5,151,0,0,
		1877,1879,5,462,0,0,1878,1875,1,0,0,0,1878,1876,1,0,0,0,1879,133,1,0,0,
		0,1880,1881,5,168,0,0,1881,135,1,0,0,0,1882,1883,5,886,0,0,1883,137,1,
		0,0,0,1884,1885,5,4,0,0,1885,1886,5,9,0,0,1886,1887,5,112,0,0,1887,139,
		1,0,0,0,1888,1892,3,138,69,0,1889,1890,3,148,74,0,1890,1891,3,136,68,0,
		1891,1893,1,0,0,0,1892,1889,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,
		0,1894,1895,3,996,498,0,1895,1896,3,134,67,0,1896,1897,3,132,66,0,1897,
		141,1,0,0,0,1898,1902,3,138,69,0,1899,1900,3,150,75,0,1900,1901,3,136,
		68,0,1901,1903,1,0,0,0,1902,1899,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,
		0,0,0,1904,1905,3,998,499,0,1905,1906,3,134,67,0,1906,1907,3,132,66,0,
		1907,143,1,0,0,0,1908,1912,3,138,69,0,1909,1910,3,152,76,0,1910,1911,3,
		136,68,0,1911,1913,1,0,0,0,1912,1909,1,0,0,0,1912,1913,1,0,0,0,1913,1914,
		1,0,0,0,1914,1915,3,1000,500,0,1915,1916,3,134,67,0,1916,1917,3,132,66,
		0,1917,145,1,0,0,0,1918,1953,5,450,0,0,1919,1953,5,218,0,0,1920,1921,5,
		641,0,0,1921,1953,5,95,0,0,1922,1923,5,230,0,0,1923,1953,5,80,0,0,1924,
		1953,5,657,0,0,1925,1953,5,671,0,0,1926,1953,5,602,0,0,1927,1953,5,43,
		0,0,1928,1953,5,688,0,0,1929,1930,5,343,0,0,1930,1953,5,247,0,0,1931,1932,
		5,343,0,0,1932,1953,5,571,0,0,1933,1934,5,415,0,0,1934,1953,5,602,0,0,
		1935,1936,5,509,0,0,1936,1937,5,804,0,0,1937,1953,5,238,0,0,1938,1953,
		5,791,0,0,1939,1953,5,526,0,0,1940,1953,5,151,0,0,1941,1942,5,536,0,0,
		1942,1943,5,485,0,0,1943,1953,5,386,0,0,1944,1945,5,803,0,0,1945,1953,
		5,791,0,0,1946,1953,5,804,0,0,1947,1948,5,579,0,0,1948,1953,5,95,0,0,1949,
		1950,5,624,0,0,1950,1951,5,151,0,0,1951,1953,5,255,0,0,1952,1918,1,0,0,
		0,1952,1919,1,0,0,0,1952,1920,1,0,0,0,1952,1922,1,0,0,0,1952,1924,1,0,
		0,0,1952,1925,1,0,0,0,1952,1926,1,0,0,0,1952,1927,1,0,0,0,1952,1928,1,
		0,0,0,1952,1929,1,0,0,0,1952,1931,1,0,0,0,1952,1933,1,0,0,0,1952,1935,
		1,0,0,0,1952,1938,1,0,0,0,1952,1939,1,0,0,0,1952,1940,1,0,0,0,1952,1941,
		1,0,0,0,1952,1944,1,0,0,0,1952,1946,1,0,0,0,1952,1947,1,0,0,0,1952,1949,
		1,0,0,0,1953,147,1,0,0,0,1954,1976,5,450,0,0,1955,1976,5,218,0,0,1956,
		1957,5,641,0,0,1957,1976,5,95,0,0,1958,1976,5,657,0,0,1959,1976,5,602,
		0,0,1960,1976,5,43,0,0,1961,1962,5,343,0,0,1962,1976,5,247,0,0,1963,1964,
		5,343,0,0,1964,1976,5,571,0,0,1965,1976,5,791,0,0,1966,1976,5,151,0,0,
		1967,1968,5,536,0,0,1968,1969,5,485,0,0,1969,1976,5,386,0,0,1970,1971,
		5,579,0,0,1971,1976,5,95,0,0,1972,1973,5,624,0,0,1973,1974,5,151,0,0,1974,
		1976,5,255,0,0,1975,1954,1,0,0,0,1975,1955,1,0,0,0,1975,1956,1,0,0,0,1975,
		1958,1,0,0,0,1975,1959,1,0,0,0,1975,1960,1,0,0,0,1975,1961,1,0,0,0,1975,
		1963,1,0,0,0,1975,1965,1,0,0,0,1975,1966,1,0,0,0,1975,1967,1,0,0,0,1975,
		1970,1,0,0,0,1975,1972,1,0,0,0,1976,149,1,0,0,0,1977,1978,7,11,0,0,1978,
		151,1,0,0,0,1979,1980,7,12,0,0,1980,153,1,0,0,0,1981,1982,5,640,0,0,1982,
		2073,5,791,0,0,1983,2073,5,218,0,0,1984,1985,5,641,0,0,1985,2073,5,95,
		0,0,1986,2073,5,219,0,0,1987,1988,5,230,0,0,1988,2073,5,80,0,0,1989,1990,
		5,240,0,0,1990,2073,5,479,0,0,1991,2073,5,657,0,0,1992,1993,5,27,0,0,1993,
		1994,7,13,0,0,1994,2073,5,95,0,0,1995,2073,5,671,0,0,1996,2073,5,271,0,
		0,1997,1998,5,272,0,0,1998,2073,5,486,0,0,1999,2013,5,43,0,0,2000,2001,
		5,219,0,0,2001,2014,5,814,0,0,2002,2003,5,313,0,0,2003,2014,5,95,0,0,2004,
		2005,5,690,0,0,2005,2014,5,807,0,0,2006,2011,5,533,0,0,2007,2012,5,667,
		0,0,2008,2012,5,271,0,0,2009,2010,5,520,0,0,2010,2012,5,704,0,0,2011,2007,
		1,0,0,0,2011,2008,1,0,0,0,2011,2009,1,0,0,0,2012,2014,1,0,0,0,2013,2000,
		1,0,0,0,2013,2002,1,0,0,0,2013,2004,1,0,0,0,2013,2006,1,0,0,0,2013,2014,
		1,0,0,0,2014,2073,1,0,0,0,2015,2073,5,688,0,0,2016,2017,5,690,0,0,2017,
		2073,5,807,0,0,2018,2019,5,757,0,0,2019,2073,7,14,0,0,2020,2031,5,67,0,
		0,2021,2022,5,276,0,0,2022,2032,5,813,0,0,2023,2024,5,69,0,0,2024,2032,
		5,340,0,0,2025,2032,5,720,0,0,2026,2027,5,520,0,0,2027,2032,5,474,0,0,
		2028,2032,5,164,0,0,2029,2032,5,247,0,0,2030,2032,5,571,0,0,2031,2021,
		1,0,0,0,2031,2023,1,0,0,0,2031,2025,1,0,0,0,2031,2026,1,0,0,0,2031,2028,
		1,0,0,0,2031,2029,1,0,0,0,2031,2030,1,0,0,0,2032,2073,1,0,0,0,2033,2073,
		5,394,0,0,2034,2035,5,730,0,0,2035,2073,5,95,0,0,2036,2037,5,415,0,0,2037,
		2073,5,602,0,0,2038,2073,5,450,0,0,2039,2040,5,466,0,0,2040,2073,7,15,
		0,0,2041,2042,5,509,0,0,2042,2043,5,804,0,0,2043,2073,5,238,0,0,2044,2045,
		5,520,0,0,2045,2073,5,704,0,0,2046,2073,5,791,0,0,2047,2073,5,526,0,0,
		2048,2073,5,151,0,0,2049,2050,5,536,0,0,2050,2051,5,485,0,0,2051,2073,
		5,386,0,0,2052,2058,5,803,0,0,2053,2055,5,219,0,0,2054,2056,5,814,0,0,
		2055,2054,1,0,0,0,2055,2056,1,0,0,0,2056,2059,1,0,0,0,2057,2059,5,791,
		0,0,2058,2053,1,0,0,0,2058,2057,1,0,0,0,2058,2059,1,0,0,0,2059,2073,1,
		0,0,0,2060,2073,5,804,0,0,2061,2062,5,816,0,0,2062,2073,5,394,0,0,2063,
		2064,5,579,0,0,2064,2073,5,95,0,0,2065,2066,5,172,0,0,2066,2073,7,16,0,
		0,2067,2073,5,602,0,0,2068,2073,5,181,0,0,2069,2070,5,624,0,0,2070,2071,
		5,151,0,0,2071,2073,5,255,0,0,2072,1981,1,0,0,0,2072,1983,1,0,0,0,2072,
		1984,1,0,0,0,2072,1986,1,0,0,0,2072,1987,1,0,0,0,2072,1989,1,0,0,0,2072,
		1991,1,0,0,0,2072,1992,1,0,0,0,2072,1995,1,0,0,0,2072,1996,1,0,0,0,2072,
		1997,1,0,0,0,2072,1999,1,0,0,0,2072,2015,1,0,0,0,2072,2016,1,0,0,0,2072,
		2018,1,0,0,0,2072,2020,1,0,0,0,2072,2033,1,0,0,0,2072,2034,1,0,0,0,2072,
		2036,1,0,0,0,2072,2038,1,0,0,0,2072,2039,1,0,0,0,2072,2041,1,0,0,0,2072,
		2044,1,0,0,0,2072,2046,1,0,0,0,2072,2047,1,0,0,0,2072,2048,1,0,0,0,2072,
		2049,1,0,0,0,2072,2052,1,0,0,0,2072,2060,1,0,0,0,2072,2061,1,0,0,0,2072,
		2063,1,0,0,0,2072,2065,1,0,0,0,2072,2067,1,0,0,0,2072,2068,1,0,0,0,2072,
		2069,1,0,0,0,2073,155,1,0,0,0,2074,2075,5,57,0,0,2075,2076,5,230,0,0,2076,
		2077,5,80,0,0,2077,2078,3,1066,533,0,2078,157,1,0,0,0,2079,2080,3,160,
		80,0,2080,2081,3,162,81,0,2081,159,1,0,0,0,2082,2083,5,4,0,0,2083,2084,
		5,230,0,0,2084,2085,5,80,0,0,2085,2086,3,1066,533,0,2086,161,1,0,0,0,2087,
		2088,5,158,0,0,2088,2104,5,881,0,0,2089,2090,5,645,0,0,2090,2091,5,863,
		0,0,2091,2105,7,17,0,0,2092,2093,5,325,0,0,2093,2094,5,863,0,0,2094,2105,
		5,857,0,0,2095,2096,5,355,0,0,2096,2097,5,863,0,0,2097,2105,5,857,0,0,
		2098,2099,5,284,0,0,2099,2100,5,863,0,0,2100,2105,7,7,0,0,2101,2102,5,
		518,0,0,2102,2103,5,863,0,0,2103,2105,5,857,0,0,2104,2089,1,0,0,0,2104,
		2092,1,0,0,0,2104,2095,1,0,0,0,2104,2098,1,0,0,0,2104,2101,1,0,0,0,2105,
		2106,1,0,0,0,2106,2443,5,882,0,0,2107,2108,5,2,0,0,2108,2109,5,43,0,0,
		2109,2443,3,1066,533,0,2110,2111,5,511,0,0,2111,2112,5,43,0,0,2112,2443,
		3,1066,533,0,2113,2114,5,2,0,0,2114,2115,5,514,0,0,2115,2116,5,112,0,0,
		2116,2117,5,859,0,0,2117,2118,5,189,0,0,2118,2122,5,881,0,0,2119,2120,
		5,314,0,0,2120,2121,5,863,0,0,2121,2123,5,859,0,0,2122,2119,1,0,0,0,2122,
		2123,1,0,0,0,2123,2130,1,0,0,0,2124,2126,5,883,0,0,2125,2124,1,0,0,0,2125,
		2126,1,0,0,0,2126,2127,1,0,0,0,2127,2128,5,647,0,0,2128,2129,5,863,0,0,
		2129,2131,7,18,0,0,2130,2125,1,0,0,0,2130,2131,1,0,0,0,2131,2138,1,0,0,
		0,2132,2134,5,883,0,0,2133,2132,1,0,0,0,2133,2134,1,0,0,0,2134,2135,1,
		0,0,0,2135,2136,5,323,0,0,2136,2137,5,863,0,0,2137,2139,7,19,0,0,2138,
		2133,1,0,0,0,2138,2139,1,0,0,0,2139,2146,1,0,0,0,2140,2142,5,883,0,0,2141,
		2140,1,0,0,0,2141,2142,1,0,0,0,2142,2143,1,0,0,0,2143,2144,5,545,0,0,2144,
		2145,5,863,0,0,2145,2147,7,19,0,0,2146,2141,1,0,0,0,2146,2147,1,0,0,0,
		2147,2154,1,0,0,0,2148,2150,5,883,0,0,2149,2148,1,0,0,0,2149,2150,1,0,
		0,0,2150,2151,1,0,0,0,2151,2152,5,232,0,0,2152,2153,5,863,0,0,2153,2155,
		5,857,0,0,2154,2149,1,0,0,0,2154,2155,1,0,0,0,2155,2165,1,0,0,0,2156,2158,
		5,883,0,0,2157,2156,1,0,0,0,2157,2158,1,0,0,0,2158,2159,1,0,0,0,2159,2160,
		5,477,0,0,2160,2161,5,881,0,0,2161,2162,5,635,0,0,2162,2163,5,863,0,0,
		2163,2164,7,20,0,0,2164,2166,5,882,0,0,2165,2157,1,0,0,0,2165,2166,1,0,
		0,0,2166,2176,1,0,0,0,2167,2169,5,883,0,0,2168,2167,1,0,0,0,2168,2169,
		1,0,0,0,2169,2170,1,0,0,0,2170,2171,5,539,0,0,2171,2172,5,881,0,0,2172,
		2173,5,635,0,0,2173,2174,5,863,0,0,2174,2175,5,498,0,0,2175,2177,5,882,
		0,0,2176,2168,1,0,0,0,2176,2177,1,0,0,0,2177,2178,1,0,0,0,2178,2443,5,
		882,0,0,2179,2180,5,539,0,0,2180,2189,5,881,0,0,2181,2182,5,635,0,0,2182,
		2183,5,863,0,0,2183,2190,7,21,0,0,2184,2185,5,499,0,0,2185,2186,5,863,
		0,0,2186,2187,5,881,0,0,2187,2188,5,859,0,0,2188,2190,5,882,0,0,2189,2181,
		1,0,0,0,2189,2184,1,0,0,0,2190,2443,1,0,0,0,2191,2192,5,477,0,0,2192,2215,
		5,881,0,0,2193,2194,5,635,0,0,2194,2195,5,863,0,0,2195,2216,7,21,0,0,2196,
		2197,5,499,0,0,2197,2198,5,863,0,0,2198,2209,5,881,0,0,2199,2201,5,883,
		0,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2202,1,0,0,0,2202,2204,5,
		859,0,0,2203,2200,1,0,0,0,2204,2207,1,0,0,0,2205,2203,1,0,0,0,2205,2206,
		1,0,0,0,2206,2210,1,0,0,0,2207,2205,1,0,0,0,2208,2210,5,750,0,0,2209,2205,
		1,0,0,0,2209,2208,1,0,0,0,2210,2211,1,0,0,0,2211,2216,5,882,0,0,2212,2213,
		5,552,0,0,2213,2214,5,863,0,0,2214,2216,5,857,0,0,2215,2193,1,0,0,0,2215,
		2196,1,0,0,0,2215,2212,1,0,0,0,2216,2443,1,0,0,0,2217,2218,5,425,0,0,2218,
		2219,5,514,0,0,2219,2220,5,112,0,0,2220,2278,5,859,0,0,2221,2222,5,189,
		0,0,2222,2238,5,881,0,0,2223,2224,5,314,0,0,2224,2225,5,863,0,0,2225,2239,
		5,859,0,0,2226,2227,5,647,0,0,2227,2228,5,863,0,0,2228,2239,7,18,0,0,2229,
		2230,5,323,0,0,2230,2231,5,863,0,0,2231,2239,7,19,0,0,2232,2233,5,545,
		0,0,2233,2234,5,863,0,0,2234,2239,7,19,0,0,2235,2236,5,232,0,0,2236,2237,
		5,863,0,0,2237,2239,5,857,0,0,2238,2223,1,0,0,0,2238,2226,1,0,0,0,2238,
		2229,1,0,0,0,2238,2232,1,0,0,0,2238,2235,1,0,0,0,2239,2279,1,0,0,0,2240,
		2241,5,539,0,0,2241,2250,5,881,0,0,2242,2243,5,635,0,0,2243,2244,5,863,
		0,0,2244,2251,7,21,0,0,2245,2246,5,499,0,0,2246,2247,5,863,0,0,2247,2248,
		5,881,0,0,2248,2249,5,859,0,0,2249,2251,5,882,0,0,2250,2242,1,0,0,0,2250,
		2245,1,0,0,0,2251,2279,1,0,0,0,2252,2253,5,477,0,0,2253,2276,5,881,0,0,
		2254,2255,5,635,0,0,2255,2256,5,863,0,0,2256,2277,7,21,0,0,2257,2258,5,
		499,0,0,2258,2259,5,863,0,0,2259,2270,5,881,0,0,2260,2262,5,883,0,0,2261,
		2260,1,0,0,0,2261,2262,1,0,0,0,2262,2263,1,0,0,0,2263,2265,5,859,0,0,2264,
		2261,1,0,0,0,2265,2268,1,0,0,0,2266,2264,1,0,0,0,2266,2267,1,0,0,0,2267,
		2271,1,0,0,0,2268,2266,1,0,0,0,2269,2271,5,750,0,0,2270,2266,1,0,0,0,2270,
		2269,1,0,0,0,2271,2272,1,0,0,0,2272,2277,5,882,0,0,2273,2274,5,552,0,0,
		2274,2275,5,863,0,0,2275,2277,5,857,0,0,2276,2254,1,0,0,0,2276,2257,1,
		0,0,0,2276,2273,1,0,0,0,2277,2279,1,0,0,0,2278,2221,1,0,0,0,2278,2240,
		1,0,0,0,2278,2252,1,0,0,0,2279,2280,1,0,0,0,2280,2443,5,882,0,0,2281,2282,
		5,511,0,0,2282,2283,5,514,0,0,2283,2284,5,112,0,0,2284,2443,5,859,0,0,
		2285,2443,5,94,0,0,2286,2287,5,94,0,0,2287,2288,5,230,0,0,2288,2289,5,
		80,0,0,2289,2312,5,112,0,0,2290,2292,5,883,0,0,2291,2290,1,0,0,0,2291,
		2292,1,0,0,0,2292,2293,1,0,0,0,2293,2294,5,859,0,0,2294,2295,5,189,0,0,
		2295,2296,5,881,0,0,2296,2297,5,388,0,0,2297,2298,5,863,0,0,2298,2299,
		5,859,0,0,2299,2300,5,883,0,0,2300,2301,5,647,0,0,2301,2302,5,863,0,0,
		2302,2303,7,18,0,0,2303,2304,5,883,0,0,2304,2305,5,323,0,0,2305,2306,5,
		863,0,0,2306,2307,5,397,0,0,2307,2308,5,883,0,0,2308,2309,5,545,0,0,2309,
		2310,5,863,0,0,2310,2311,7,19,0,0,2311,2313,5,882,0,0,2312,2291,1,0,0,
		0,2313,2314,1,0,0,0,2314,2312,1,0,0,0,2314,2315,1,0,0,0,2315,2443,1,0,
		0,0,2316,2317,5,425,0,0,2317,2318,5,230,0,0,2318,2319,5,80,0,0,2319,2354,
		5,112,0,0,2320,2322,5,883,0,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,
		2323,1,0,0,0,2323,2324,5,859,0,0,2324,2325,5,189,0,0,2325,2326,5,881,0,
		0,2326,2327,5,388,0,0,2327,2328,5,863,0,0,2328,2335,5,859,0,0,2329,2331,
		5,883,0,0,2330,2329,1,0,0,0,2330,2331,1,0,0,0,2331,2332,1,0,0,0,2332,2333,
		5,647,0,0,2333,2334,5,863,0,0,2334,2336,7,18,0,0,2335,2330,1,0,0,0,2335,
		2336,1,0,0,0,2336,2343,1,0,0,0,2337,2339,5,883,0,0,2338,2337,1,0,0,0,2338,
		2339,1,0,0,0,2339,2340,1,0,0,0,2340,2341,5,323,0,0,2341,2342,5,863,0,0,
		2342,2344,5,397,0,0,2343,2338,1,0,0,0,2343,2344,1,0,0,0,2344,2351,1,0,
		0,0,2345,2347,5,883,0,0,2346,2345,1,0,0,0,2346,2347,1,0,0,0,2347,2348,
		1,0,0,0,2348,2349,5,545,0,0,2349,2350,5,863,0,0,2350,2352,7,19,0,0,2351,
		2346,1,0,0,0,2351,2352,1,0,0,0,2352,2353,1,0,0,0,2353,2355,5,882,0,0,2354,
		2321,1,0,0,0,2355,2356,1,0,0,0,2356,2354,1,0,0,0,2356,2357,1,0,0,0,2357,
		2443,1,0,0,0,2358,2359,5,79,0,0,2359,2360,5,35,0,0,2360,2361,5,6,0,0,2361,
		2443,5,43,0,0,2362,2363,5,49,0,0,2363,2364,5,35,0,0,2364,2365,5,6,0,0,
		2365,2443,5,43,0,0,2366,2443,5,697,0,0,2367,2443,5,338,0,0,2368,2369,5,
		2,0,0,2369,2370,5,387,0,0,2370,2371,5,859,0,0,2371,2407,5,881,0,0,2372,
		2373,5,189,0,0,2373,2374,5,298,0,0,2374,2375,5,112,0,0,2375,2376,5,881,
		0,0,2376,2377,3,164,82,0,2377,2378,3,164,82,0,2378,2379,5,882,0,0,2379,
		2408,1,0,0,0,2380,2381,5,189,0,0,2381,2382,5,371,0,0,2382,2396,5,881,0,
		0,2383,2385,5,883,0,0,2384,2383,1,0,0,0,2384,2385,1,0,0,0,2385,2386,1,
		0,0,0,2386,2392,5,881,0,0,2387,2388,3,164,82,0,2388,2389,5,883,0,0,2389,
		2390,3,164,82,0,2390,2393,1,0,0,0,2391,2393,3,166,83,0,2392,2387,1,0,0,
		0,2392,2391,1,0,0,0,2393,2394,1,0,0,0,2394,2395,5,882,0,0,2395,2397,1,
		0,0,0,2396,2384,1,0,0,0,2397,2398,1,0,0,0,2398,2396,1,0,0,0,2398,2399,
		1,0,0,0,2399,2400,1,0,0,0,2400,2405,5,882,0,0,2401,2402,5,883,0,0,2402,
		2403,5,475,0,0,2403,2404,5,863,0,0,2404,2406,5,857,0,0,2405,2401,1,0,0,
		0,2405,2406,1,0,0,0,2406,2408,1,0,0,0,2407,2372,1,0,0,0,2407,2380,1,0,
		0,0,2408,2409,1,0,0,0,2409,2410,5,882,0,0,2410,2443,1,0,0,0,2411,2412,
		5,425,0,0,2412,2427,5,387,0,0,2413,2414,5,2,0,0,2414,2415,5,371,0,0,2415,
		2420,5,881,0,0,2416,2417,3,164,82,0,2417,2418,3,164,82,0,2418,2421,1,0,
		0,0,2419,2421,3,166,83,0,2420,2416,1,0,0,0,2420,2419,1,0,0,0,2421,2422,
		1,0,0,0,2422,2423,5,882,0,0,2423,2428,1,0,0,0,2424,2425,5,475,0,0,2425,
		2426,5,863,0,0,2426,2428,5,857,0,0,2427,2413,1,0,0,0,2427,2424,1,0,0,0,
		2428,2443,1,0,0,0,2429,2430,5,786,0,0,2430,2431,5,387,0,0,2431,2443,5,
		859,0,0,2432,2433,5,511,0,0,2433,2434,5,387,0,0,2434,2443,5,859,0,0,2435,
		2443,5,451,0,0,2436,2437,5,189,0,0,2437,2438,5,881,0,0,2438,2439,5,686,
		0,0,2439,2440,5,863,0,0,2440,2441,5,768,0,0,2441,2443,5,882,0,0,2442,2087,
		1,0,0,0,2442,2107,1,0,0,0,2442,2110,1,0,0,0,2442,2113,1,0,0,0,2442,2179,
		1,0,0,0,2442,2191,1,0,0,0,2442,2217,1,0,0,0,2442,2281,1,0,0,0,2442,2285,
		1,0,0,0,2442,2286,1,0,0,0,2442,2316,1,0,0,0,2442,2358,1,0,0,0,2442,2362,
		1,0,0,0,2442,2366,1,0,0,0,2442,2367,1,0,0,0,2442,2368,1,0,0,0,2442,2411,
		1,0,0,0,2442,2429,1,0,0,0,2442,2432,1,0,0,0,2442,2435,1,0,0,0,2442,2436,
		1,0,0,0,2443,163,1,0,0,0,2444,2445,5,859,0,0,2445,165,1,0,0,0,2446,2447,
		5,859,0,0,2447,167,1,0,0,0,2448,2449,7,22,0,0,2449,2450,5,240,0,0,2450,
		2451,5,479,0,0,2451,2452,3,1066,533,0,2452,2453,5,71,0,0,2453,2454,5,673,
		0,0,2454,2455,5,158,0,0,2455,2465,5,881,0,0,2456,2457,5,672,0,0,2457,2460,
		5,863,0,0,2458,2461,3,1066,533,0,2459,2461,5,6,0,0,2460,2458,1,0,0,0,2460,
		2459,1,0,0,0,2461,2463,1,0,0,0,2462,2464,5,883,0,0,2463,2462,1,0,0,0,2463,
		2464,1,0,0,0,2464,2466,1,0,0,0,2465,2456,1,0,0,0,2465,2466,1,0,0,0,2466,
		2479,1,0,0,0,2467,2468,5,726,0,0,2468,2474,5,863,0,0,2469,2471,5,56,0,
		0,2470,2469,1,0,0,0,2470,2471,1,0,0,0,2471,2472,1,0,0,0,2472,2475,3,1066,
		533,0,2473,2475,5,6,0,0,2474,2470,1,0,0,0,2474,2473,1,0,0,0,2475,2477,
		1,0,0,0,2476,2478,5,883,0,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,2478,2480,
		1,0,0,0,2479,2467,1,0,0,0,2479,2480,1,0,0,0,2480,2490,1,0,0,0,2481,2482,
		5,510,0,0,2482,2485,5,863,0,0,2483,2486,5,859,0,0,2484,2486,5,6,0,0,2485,
		2483,1,0,0,0,2485,2484,1,0,0,0,2486,2488,1,0,0,0,2487,2489,5,883,0,0,2488,
		2487,1,0,0,0,2488,2489,1,0,0,0,2489,2491,1,0,0,0,2490,2481,1,0,0,0,2490,
		2491,1,0,0,0,2491,2498,1,0,0,0,2492,2493,5,480,0,0,2493,2496,5,863,0,0,
		2494,2497,5,857,0,0,2495,2497,5,47,0,0,2496,2494,1,0,0,0,2496,2495,1,0,
		0,0,2497,2499,1,0,0,0,2498,2492,1,0,0,0,2498,2499,1,0,0,0,2499,2500,1,
		0,0,0,2500,2501,5,882,0,0,2501,169,1,0,0,0,2502,2503,5,57,0,0,2503,2504,
		5,240,0,0,2504,2505,5,479,0,0,2505,2506,3,1066,533,0,2506,171,1,0,0,0,
		2507,2508,5,4,0,0,2508,2509,5,657,0,0,2509,2549,3,1066,533,0,2510,2511,
		5,511,0,0,2511,2550,5,482,0,0,2512,2513,5,189,0,0,2513,2514,5,481,0,0,
		2514,2515,5,95,0,0,2515,2538,5,881,0,0,2516,2517,5,69,0,0,2517,2518,5,
		863,0,0,2518,2520,5,859,0,0,2519,2521,5,883,0,0,2520,2519,1,0,0,0,2520,
		2521,1,0,0,0,2521,2539,1,0,0,0,2522,2523,5,285,0,0,2523,2524,5,18,0,0,
		2524,2525,5,765,0,0,2525,2526,5,863,0,0,2526,2528,5,859,0,0,2527,2529,
		5,883,0,0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,2529,2539,1,0,0,0,2530,2531,
		5,313,0,0,2531,2532,5,18,0,0,2532,2533,5,765,0,0,2533,2534,5,863,0,0,2534,
		2536,5,859,0,0,2535,2537,5,883,0,0,2536,2535,1,0,0,0,2536,2537,1,0,0,0,
		2537,2539,1,0,0,0,2538,2516,1,0,0,0,2538,2522,1,0,0,0,2538,2530,1,0,0,
		0,2539,2540,1,0,0,0,2540,2538,1,0,0,0,2540,2541,1,0,0,0,2541,2542,1,0,
		0,0,2542,2550,5,882,0,0,2543,2544,5,189,0,0,2544,2545,5,199,0,0,2545,2546,
		5,71,0,0,2546,2547,5,233,0,0,2547,2548,5,863,0,0,2548,2550,7,7,0,0,2549,
		2510,1,0,0,0,2549,2512,1,0,0,0,2549,2543,1,0,0,0,2550,173,1,0,0,0,2551,
		2552,5,4,0,0,2552,2553,5,27,0,0,2553,2554,5,313,0,0,2554,2555,5,95,0,0,
		2555,2556,3,1066,533,0,2556,2557,7,23,0,0,2557,2558,5,613,0,0,2558,2559,
		5,881,0,0,2559,2560,5,256,0,0,2560,2561,5,863,0,0,2561,2570,3,1066,533,
		0,2562,2563,5,883,0,0,2563,2564,5,207,0,0,2564,2565,5,863,0,0,2565,2566,
		5,859,0,0,2566,2567,5,883,0,0,2567,2568,5,312,0,0,2568,2569,5,863,0,0,
		2569,2571,5,860,0,0,2570,2562,1,0,0,0,2570,2571,1,0,0,0,2571,2572,1,0,
		0,0,2572,2573,5,882,0,0,2573,175,1,0,0,0,2574,2575,5,35,0,0,2575,2576,
		5,27,0,0,2576,2577,5,313,0,0,2577,2578,5,95,0,0,2578,2579,3,1066,533,0,
		2579,2580,5,189,0,0,2580,2600,5,182,0,0,2581,2583,5,881,0,0,2582,2584,
		5,883,0,0,2583,2582,1,0,0,0,2583,2584,1,0,0,0,2584,2585,1,0,0,0,2585,2586,
		5,256,0,0,2586,2587,5,863,0,0,2587,2588,3,1066,533,0,2588,2589,5,883,0,
		0,2589,2590,5,207,0,0,2590,2591,5,863,0,0,2591,2592,5,859,0,0,2592,2593,
		5,883,0,0,2593,2594,5,312,0,0,2594,2595,5,863,0,0,2595,2596,5,860,0,0,
		2596,2598,5,882,0,0,2597,2599,5,883,0,0,2598,2597,1,0,0,0,2598,2599,1,
		0,0,0,2599,2601,1,0,0,0,2600,2581,1,0,0,0,2601,2602,1,0,0,0,2602,2600,
		1,0,0,0,2602,2603,1,0,0,0,2603,177,1,0,0,0,2604,2605,5,57,0,0,2605,2606,
		5,657,0,0,2606,2607,3,1066,533,0,2607,179,1,0,0,0,2608,2609,5,57,0,0,2609,
		2610,5,27,0,0,2610,2611,5,313,0,0,2611,2612,5,95,0,0,2612,2613,3,1066,
		533,0,2613,181,1,0,0,0,2614,2615,5,57,0,0,2615,2616,5,27,0,0,2616,2617,
		5,730,0,0,2617,2618,5,95,0,0,2618,2619,3,1066,533,0,2619,183,1,0,0,0,2620,
		2621,5,57,0,0,2621,2622,5,671,0,0,2622,2623,3,1066,533,0,2623,185,1,0,
		0,0,2624,2625,5,57,0,0,2625,2626,5,271,0,0,2626,2627,3,1066,533,0,2627,
		187,1,0,0,0,2628,2629,5,57,0,0,2629,2630,5,272,0,0,2630,2631,5,486,0,0,
		2631,2632,3,1066,533,0,2632,189,1,0,0,0,2633,2634,5,57,0,0,2634,2637,5,
		43,0,0,2635,2636,5,86,0,0,2636,2638,5,65,0,0,2637,2635,1,0,0,0,2637,2638,
		1,0,0,0,2638,2643,1,0,0,0,2639,2641,5,883,0,0,2640,2639,1,0,0,0,2640,2641,
		1,0,0,0,2641,2642,1,0,0,0,2642,2644,3,1066,533,0,2643,2640,1,0,0,0,2644,
		2645,1,0,0,0,2645,2643,1,0,0,0,2645,2646,1,0,0,0,2646,191,1,0,0,0,2647,
		2648,5,57,0,0,2648,2649,5,43,0,0,2649,2650,5,219,0,0,2650,2651,5,814,0,
		0,2651,2652,3,1066,533,0,2652,193,1,0,0,0,2653,2654,5,57,0,0,2654,2655,
		5,43,0,0,2655,2656,5,313,0,0,2656,2657,5,95,0,0,2657,195,1,0,0,0,2658,
		2659,5,57,0,0,2659,2660,5,43,0,0,2660,2661,5,533,0,0,2661,2662,5,271,0,
		0,2662,2663,3,1066,533,0,2663,197,1,0,0,0,2664,2665,5,57,0,0,2665,2668,
		5,47,0,0,2666,2667,5,86,0,0,2667,2669,5,65,0,0,2668,2666,1,0,0,0,2668,
		2669,1,0,0,0,2669,2671,1,0,0,0,2670,2672,5,883,0,0,2671,2670,1,0,0,0,2671,
		2672,1,0,0,0,2672,2676,1,0,0,0,2673,2674,3,1066,533,0,2674,2675,5,876,
		0,0,2675,2677,1,0,0,0,2676,2673,1,0,0,0,2676,2677,1,0,0,0,2677,2678,1,
		0,0,0,2678,2679,3,1066,533,0,2679,199,1,0,0,0,2680,2681,5,57,0,0,2681,
		2682,5,688,0,0,2682,2683,3,1066,533,0,2683,201,1,0,0,0,2684,2685,5,57,
		0,0,2685,2686,5,67,0,0,2686,2687,5,276,0,0,2687,2688,5,813,0,0,2688,2689,
		3,1066,533,0,2689,203,1,0,0,0,2690,2691,5,57,0,0,2691,2692,5,67,0,0,2692,
		2693,5,69,0,0,2693,2694,5,340,0,0,2694,2695,3,1066,533,0,2695,205,1,0,
		0,0,2696,2697,5,57,0,0,2697,2698,5,67,0,0,2698,2699,5,720,0,0,2699,2702,
		3,1066,533,0,2700,2701,5,9,0,0,2701,2703,3,1066,533,0,2702,2700,1,0,0,
		0,2702,2703,1,0,0,0,2703,207,1,0,0,0,2704,2705,5,57,0,0,2705,2706,5,67,
		0,0,2706,2707,5,520,0,0,2707,2708,5,474,0,0,2708,2709,3,1066,533,0,2709,
		209,1,0,0,0,2710,2711,5,57,0,0,2711,2712,5,67,0,0,2712,2716,5,164,0,0,
		2713,2714,3,1066,533,0,2714,2715,5,876,0,0,2715,2717,1,0,0,0,2716,2713,
		1,0,0,0,2716,2717,1,0,0,0,2717,2721,1,0,0,0,2718,2719,3,1066,533,0,2719,
		2720,5,876,0,0,2720,2722,1,0,0,0,2721,2718,1,0,0,0,2721,2722,1,0,0,0,2722,
		2723,1,0,0,0,2723,2724,3,1066,533,0,2724,211,1,0,0,0,2725,2726,5,57,0,
		0,2726,2727,5,690,0,0,2727,2732,5,757,0,0,2728,2730,5,883,0,0,2729,2728,
		1,0,0,0,2729,2730,1,0,0,0,2730,2731,1,0,0,0,2731,2733,3,1066,533,0,2732,
		2729,1,0,0,0,2733,2734,1,0,0,0,2734,2732,1,0,0,0,2734,2735,1,0,0,0,2735,
		2736,1,0,0,0,2736,2741,5,112,0,0,2737,2742,5,803,0,0,2738,2742,5,43,0,
		0,2739,2740,5,489,0,0,2740,2742,3,1066,533,0,2741,2737,1,0,0,0,2741,2738,
		1,0,0,0,2741,2739,1,0,0,0,2742,213,1,0,0,0,2743,2744,5,57,0,0,2744,2745,
		5,690,0,0,2745,2746,5,807,0,0,2746,2747,3,1066,533,0,2747,2748,5,112,0,
		0,2748,2749,5,803,0,0,2749,215,1,0,0,0,2750,2751,5,57,0,0,2751,2752,5,
		343,0,0,2752,2753,5,247,0,0,2753,2754,3,1066,533,0,2754,217,1,0,0,0,2755,
		2756,5,57,0,0,2756,2757,5,343,0,0,2757,2758,5,88,0,0,2758,2762,5,112,0,
		0,2759,2760,3,1066,533,0,2760,2761,5,876,0,0,2761,2763,1,0,0,0,2762,2759,
		1,0,0,0,2762,2763,1,0,0,0,2763,2764,1,0,0,0,2764,2765,3,1066,533,0,2765,
		219,1,0,0,0,2766,2767,5,57,0,0,2767,2768,5,343,0,0,2768,2769,5,571,0,0,
		2769,2770,3,1066,533,0,2770,221,1,0,0,0,2771,2772,5,57,0,0,2772,2773,5,
		394,0,0,2773,2774,3,1066,533,0,2774,223,1,0,0,0,2775,2776,5,57,0,0,2776,
		2777,5,730,0,0,2777,2778,5,95,0,0,2778,225,1,0,0,0,2779,2780,5,57,0,0,
		2780,2781,5,415,0,0,2781,2782,5,602,0,0,2782,2783,3,1066,533,0,2783,227,
		1,0,0,0,2784,2785,5,57,0,0,2785,2786,5,466,0,0,2786,2787,5,77,0,0,2787,
		2788,3,1066,533,0,2788,229,1,0,0,0,2789,2790,5,57,0,0,2790,2791,5,466,
		0,0,2791,2792,5,801,0,0,2792,2793,3,1066,533,0,2793,231,1,0,0,0,2794,2795,
		5,57,0,0,2795,2799,5,489,0,0,2796,2797,3,1066,533,0,2797,2798,5,876,0,
		0,2798,2800,1,0,0,0,2799,2796,1,0,0,0,2799,2800,1,0,0,0,2800,2804,1,0,
		0,0,2801,2802,3,1066,533,0,2802,2803,5,876,0,0,2803,2805,1,0,0,0,2804,
		2801,1,0,0,0,2804,2805,1,0,0,0,2805,2806,1,0,0,0,2806,2807,3,1066,533,
		0,2807,233,1,0,0,0,2808,2809,5,57,0,0,2809,2810,5,509,0,0,2810,2811,5,
		804,0,0,2811,2812,5,238,0,0,2812,2813,3,1066,533,0,2813,235,1,0,0,0,2814,
		2815,5,57,0,0,2815,2816,5,520,0,0,2816,2817,5,474,0,0,2817,2818,3,1066,
		533,0,2818,237,1,0,0,0,2819,2820,5,57,0,0,2820,2823,5,791,0,0,2821,2822,
		5,86,0,0,2822,2824,5,65,0,0,2823,2821,1,0,0,0,2823,2824,1,0,0,0,2824,2825,
		1,0,0,0,2825,2826,3,1066,533,0,2826,239,1,0,0,0,2827,2828,5,57,0,0,2828,
		2829,5,526,0,0,2829,2830,3,1066,533,0,2830,241,1,0,0,0,2831,2832,5,57,
		0,0,2832,2835,5,149,0,0,2833,2834,5,86,0,0,2834,2836,5,65,0,0,2835,2833,
		1,0,0,0,2835,2836,1,0,0,0,2836,2846,1,0,0,0,2837,2839,5,883,0,0,2838,2837,
		1,0,0,0,2838,2839,1,0,0,0,2839,2843,1,0,0,0,2840,2841,3,1066,533,0,2841,
		2842,5,876,0,0,2842,2844,1,0,0,0,2843,2840,1,0,0,0,2843,2844,1,0,0,0,2844,
		2845,1,0,0,0,2845,2847,3,1066,533,0,2846,2838,1,0,0,0,2846,2847,1,0,0,
		0,2847,243,1,0,0,0,2848,2849,5,57,0,0,2849,2852,5,151,0,0,2850,2851,5,
		86,0,0,2851,2853,5,65,0,0,2852,2850,1,0,0,0,2852,2853,1,0,0,0,2853,2854,
		1,0,0,0,2854,2855,3,1066,533,0,2855,245,1,0,0,0,2856,2857,5,57,0,0,2857,
		2858,5,536,0,0,2858,2859,5,485,0,0,2859,2860,5,386,0,0,2860,2861,3,1066,
		533,0,2861,247,1,0,0,0,2862,2863,5,57,0,0,2863,2864,5,543,0,0,2864,2867,
		5,772,0,0,2865,2866,5,86,0,0,2866,2868,5,65,0,0,2867,2865,1,0,0,0,2867,
		2868,1,0,0,0,2868,2872,1,0,0,0,2869,2870,3,1066,533,0,2870,2871,5,876,
		0,0,2871,2873,1,0,0,0,2872,2869,1,0,0,0,2872,2873,1,0,0,0,2873,2874,1,
		0,0,0,2874,2875,3,1066,533,0,2875,249,1,0,0,0,2876,2877,5,57,0,0,2877,
		2880,5,550,0,0,2878,2879,5,86,0,0,2879,2881,5,65,0,0,2880,2878,1,0,0,0,
		2880,2881,1,0,0,0,2881,2896,1,0,0,0,2882,2884,5,883,0,0,2883,2882,1,0,
		0,0,2883,2884,1,0,0,0,2884,2888,1,0,0,0,2885,2886,3,1066,533,0,2886,2887,
		5,876,0,0,2887,2889,1,0,0,0,2888,2885,1,0,0,0,2888,2889,1,0,0,0,2889,2893,
		1,0,0,0,2890,2891,3,1066,533,0,2891,2892,5,876,0,0,2892,2894,1,0,0,0,2893,
		2890,1,0,0,0,2893,2894,1,0,0,0,2894,2895,1,0,0,0,2895,2897,3,1066,533,
		0,2896,2883,1,0,0,0,2896,2897,1,0,0,0,2897,251,1,0,0,0,2898,2899,5,57,
		0,0,2899,2900,5,803,0,0,2900,2901,5,219,0,0,2901,2902,3,1066,533,0,2902,
		253,1,0,0,0,2903,2904,5,57,0,0,2904,2905,5,803,0,0,2905,2906,5,219,0,0,
		2906,2907,5,814,0,0,2907,2908,3,1066,533,0,2908,255,1,0,0,0,2909,2910,
		5,57,0,0,2910,2911,5,803,0,0,2911,2912,5,791,0,0,2912,2913,3,1066,533,
		0,2913,257,1,0,0,0,2914,2915,5,57,0,0,2915,2916,5,804,0,0,2916,2917,3,
		1066,533,0,2917,259,1,0,0,0,2918,2920,5,57,0,0,2919,2921,5,267,0,0,2920,
		2919,1,0,0,0,2920,2921,1,0,0,0,2921,2922,1,0,0,0,2922,2923,5,556,0,0,2923,
		2927,5,75,0,0,2924,2925,3,1066,533,0,2925,2926,5,876,0,0,2926,2928,1,0,
		0,0,2927,2924,1,0,0,0,2927,2928,1,0,0,0,2928,2929,1,0,0,0,2929,2930,3,
		1066,533,0,2930,2942,5,18,0,0,2931,2933,5,883,0,0,2932,2931,1,0,0,0,2932,
		2933,1,0,0,0,2933,2934,1,0,0,0,2934,2935,5,657,0,0,2935,2943,3,1066,533,
		0,2936,2938,5,883,0,0,2937,2936,1,0,0,0,2937,2938,1,0,0,0,2938,2939,1,
		0,0,0,2939,2940,5,641,0,0,2940,2941,5,95,0,0,2941,2943,3,1066,533,0,2942,
		2932,1,0,0,0,2942,2937,1,0,0,0,2943,2944,1,0,0,0,2944,2942,1,0,0,0,2944,
		2945,1,0,0,0,2945,261,1,0,0,0,2946,2947,5,57,0,0,2947,2951,5,162,0,0,2948,
		2949,3,1066,533,0,2949,2950,5,876,0,0,2950,2952,1,0,0,0,2951,2948,1,0,
		0,0,2951,2952,1,0,0,0,2952,2953,1,0,0,0,2953,2954,3,1066,533,0,2954,2955,
		5,876,0,0,2955,2956,3,1066,533,0,2956,263,1,0,0,0,2957,2958,5,57,0,0,2958,
		2959,5,579,0,0,2959,2960,5,95,0,0,2960,2964,3,1066,533,0,2961,2962,5,511,
		0,0,2962,2963,5,486,0,0,2963,2965,5,95,0,0,2964,2961,1,0,0,0,2964,2965,
		1,0,0,0,2965,265,1,0,0,0,2966,2967,5,57,0,0,2967,2970,5,581,0,0,2968,2969,
		5,86,0,0,2969,2971,5,65,0,0,2970,2968,1,0,0,0,2970,2971,1,0,0,0,2971,2975,
		1,0,0,0,2972,2973,3,1066,533,0,2973,2974,5,876,0,0,2974,2976,1,0,0,0,2975,
		2972,1,0,0,0,2975,2976,1,0,0,0,2976,2977,1,0,0,0,2977,2978,3,1066,533,
		0,2978,267,1,0,0,0,2979,2980,5,57,0,0,2980,2983,5,181,0,0,2981,2982,5,
		86,0,0,2982,2984,5,65,0,0,2983,2981,1,0,0,0,2983,2984,1,0,0,0,2984,2985,
		1,0,0,0,2985,2986,3,1066,533,0,2986,269,1,0,0,0,2987,2988,5,57,0,0,2988,
		2989,5,623,0,0,2989,2990,5,80,0,0,2990,2991,3,1066,533,0,2991,271,1,0,
		0,0,2992,2993,5,57,0,0,2993,2994,5,624,0,0,2994,2995,5,151,0,0,2995,2999,
		5,255,0,0,2996,2997,3,1066,533,0,2997,2998,5,876,0,0,2998,3000,1,0,0,0,
		2999,2996,1,0,0,0,2999,3000,1,0,0,0,3000,3001,1,0,0,0,3001,3002,3,1066,
		533,0,3002,273,1,0,0,0,3003,3004,5,301,0,0,3004,3019,5,172,0,0,3005,3007,
		5,883,0,0,3006,3005,1,0,0,0,3006,3007,1,0,0,0,3007,3011,1,0,0,0,3008,3009,
		3,1066,533,0,3009,3010,5,876,0,0,3010,3012,1,0,0,0,3011,3008,1,0,0,0,3011,
		3012,1,0,0,0,3012,3013,1,0,0,0,3013,3015,3,1066,533,0,3014,3006,1,0,0,
		0,3015,3016,1,0,0,0,3016,3014,1,0,0,0,3016,3017,1,0,0,0,3017,3020,1,0,
		0,0,3018,3020,5,3,0,0,3019,3014,1,0,0,0,3019,3018,1,0,0,0,3020,3021,1,
		0,0,0,3021,3031,5,112,0,0,3022,3023,3,1066,533,0,3023,3024,5,876,0,0,3024,
		3026,1,0,0,0,3025,3022,1,0,0,0,3025,3026,1,0,0,0,3026,3027,1,0,0,0,3027,
		3032,3,1066,533,0,3028,3032,5,43,0,0,3029,3030,5,3,0,0,3030,3032,5,803,
		0,0,3031,3025,1,0,0,0,3031,3028,1,0,0,0,3031,3029,1,0,0,0,3032,275,1,0,
		0,0,3033,3034,5,310,0,0,3034,3049,5,172,0,0,3035,3037,5,883,0,0,3036,3035,
		1,0,0,0,3036,3037,1,0,0,0,3037,3041,1,0,0,0,3038,3039,3,1066,533,0,3039,
		3040,5,876,0,0,3040,3042,1,0,0,0,3041,3038,1,0,0,0,3041,3042,1,0,0,0,3042,
		3043,1,0,0,0,3043,3045,3,1066,533,0,3044,3036,1,0,0,0,3045,3046,1,0,0,
		0,3046,3044,1,0,0,0,3046,3047,1,0,0,0,3047,3050,1,0,0,0,3048,3050,5,3,
		0,0,3049,3044,1,0,0,0,3049,3048,1,0,0,0,3050,3051,1,0,0,0,3051,3061,5,
		112,0,0,3052,3053,3,1066,533,0,3053,3054,5,876,0,0,3054,3056,1,0,0,0,3055,
		3052,1,0,0,0,3055,3056,1,0,0,0,3056,3057,1,0,0,0,3057,3062,3,1066,533,
		0,3058,3062,5,43,0,0,3059,3060,5,3,0,0,3060,3062,5,803,0,0,3061,3055,1,
		0,0,0,3061,3058,1,0,0,0,3061,3059,1,0,0,0,3062,277,1,0,0,0,3063,3064,5,
		392,0,0,3064,3065,5,164,0,0,3065,3066,3,1004,502,0,3066,3067,5,87,0,0,
		3067,3068,7,24,0,0,3068,3072,5,424,0,0,3069,3070,5,619,0,0,3070,3073,5,
		857,0,0,3071,3073,5,445,0,0,3072,3069,1,0,0,0,3072,3071,1,0,0,0,3072,3073,
		1,0,0,0,3073,3075,1,0,0,0,3074,3076,5,884,0,0,3075,3074,1,0,0,0,3075,3076,
		1,0,0,0,3076,279,1,0,0,0,3077,3078,5,173,0,0,3078,3079,5,164,0,0,3079,
		3099,3,1004,502,0,3080,3081,5,189,0,0,3081,3082,5,881,0,0,3082,3083,5,
		467,0,0,3083,3093,5,881,0,0,3084,3086,5,883,0,0,3085,3084,1,0,0,0,3085,
		3086,1,0,0,0,3086,3091,1,0,0,0,3087,3092,5,857,0,0,3088,3089,5,857,0,0,
		3089,3090,5,168,0,0,3090,3092,5,857,0,0,3091,3087,1,0,0,0,3091,3088,1,
		0,0,0,3092,3094,1,0,0,0,3093,3085,1,0,0,0,3094,3095,1,0,0,0,3095,3093,
		1,0,0,0,3095,3096,1,0,0,0,3096,3097,1,0,0,0,3097,3098,5,882,0,0,3098,3100,
		5,882,0,0,3099,3080,1,0,0,0,3099,3100,1,0,0,0,3100,281,1,0,0,0,3101,3102,
		5,35,0,0,3102,3103,5,27,0,0,3103,3104,5,730,0,0,3104,3105,5,95,0,0,3105,
		3106,3,1066,533,0,3106,3107,5,189,0,0,3107,3108,5,881,0,0,3108,3109,5,
		718,0,0,3109,3110,5,863,0,0,3110,3111,5,859,0,0,3111,3112,5,883,0,0,3112,
		3113,5,717,0,0,3113,3114,5,863,0,0,3114,3115,5,859,0,0,3115,3116,5,882,
		0,0,3116,283,1,0,0,0,3117,3118,5,4,0,0,3118,3119,5,271,0,0,3119,3120,3,
		1066,533,0,3120,3121,5,189,0,0,3121,3122,5,83,0,0,3122,3123,5,863,0,0,
		3123,3128,5,859,0,0,3124,3125,5,883,0,0,3125,3126,5,541,0,0,3126,3127,
		5,863,0,0,3127,3129,5,859,0,0,3128,3124,1,0,0,0,3128,3129,1,0,0,0,3129,
		285,1,0,0,0,3130,3131,5,35,0,0,3131,3132,5,271,0,0,3132,3133,3,1066,533,
		0,3133,3134,5,189,0,0,3134,3135,5,83,0,0,3135,3136,5,863,0,0,3136,3141,
		5,859,0,0,3137,3138,5,883,0,0,3138,3139,5,541,0,0,3139,3140,5,863,0,0,
		3140,3142,5,859,0,0,3141,3137,1,0,0,0,3141,3142,1,0,0,0,3142,3147,1,0,
		0,0,3143,3144,5,71,0,0,3144,3145,5,272,0,0,3145,3146,5,486,0,0,3146,3148,
		3,1066,533,0,3147,3143,1,0,0,0,3147,3148,1,0,0,0,3148,287,1,0,0,0,3149,
		3150,5,4,0,0,3150,3151,5,272,0,0,3151,3152,5,486,0,0,3152,3157,3,1066,
		533,0,3153,3154,5,75,0,0,3154,3155,5,69,0,0,3155,3156,5,863,0,0,3156,3158,
		5,859,0,0,3157,3153,1,0,0,0,3157,3158,1,0,0,0,3158,3160,1,0,0,0,3159,3161,
		7,25,0,0,3160,3159,1,0,0,0,3160,3161,1,0,0,0,3161,289,1,0,0,0,3162,3163,
		5,35,0,0,3163,3164,5,272,0,0,3164,3165,5,486,0,0,3165,3166,3,1066,533,
		0,3166,3167,5,75,0,0,3167,3168,5,69,0,0,3168,3169,5,863,0,0,3169,3170,
		5,859,0,0,3170,291,1,0,0,0,3171,3172,5,35,0,0,3172,3173,5,690,0,0,3173,
		3174,5,757,0,0,3174,3175,3,1066,533,0,3175,3180,5,112,0,0,3176,3181,5,
		803,0,0,3177,3181,5,43,0,0,3178,3179,5,489,0,0,3179,3181,3,1066,533,0,
		3180,3176,1,0,0,0,3180,3177,1,0,0,0,3180,3178,1,0,0,0,3181,3184,1,0,0,
		0,3182,3183,5,189,0,0,3183,3185,5,699,0,0,3184,3182,1,0,0,0,3184,3185,
		1,0,0,0,3185,3186,1,0,0,0,3186,3191,5,71,0,0,3187,3189,5,883,0,0,3188,
		3187,1,0,0,0,3188,3189,1,0,0,0,3189,3190,1,0,0,0,3190,3192,3,1066,533,
		0,3191,3188,1,0,0,0,3192,3193,1,0,0,0,3193,3191,1,0,0,0,3193,3194,1,0,
		0,0,3194,3195,1,0,0,0,3195,3196,5,168,0,0,3196,3197,5,804,0,0,3197,3198,
		5,859,0,0,3198,3199,5,883,0,0,3199,3200,5,859,0,0,3200,293,1,0,0,0,3201,
		3202,7,22,0,0,3202,3203,5,690,0,0,3203,3204,5,807,0,0,3204,3205,3,1066,
		533,0,3205,3206,5,112,0,0,3206,3274,5,803,0,0,3207,3209,5,883,0,0,3208,
		3207,1,0,0,0,3208,3209,1,0,0,0,3209,3210,1,0,0,0,3210,3211,5,2,0,0,3211,
		3215,5,690,0,0,3212,3213,3,1066,533,0,3213,3214,5,876,0,0,3214,3216,1,
		0,0,0,3215,3212,1,0,0,0,3215,3216,1,0,0,0,3216,3217,1,0,0,0,3217,3218,
		3,1066,533,0,3218,3219,5,876,0,0,3219,3220,3,1066,533,0,3220,3269,1,0,
		0,0,3221,3235,5,881,0,0,3222,3232,5,158,0,0,3223,3225,5,883,0,0,3224,3223,
		1,0,0,0,3224,3225,1,0,0,0,3225,3226,1,0,0,0,3226,3227,3,1066,533,0,3227,
		3228,5,863,0,0,3228,3229,7,26,0,0,3229,3231,1,0,0,0,3230,3224,1,0,0,0,
		3231,3234,1,0,0,0,3232,3230,1,0,0,0,3232,3233,1,0,0,0,3233,3236,1,0,0,
		0,3234,3232,1,0,0,0,3235,3222,1,0,0,0,3235,3236,1,0,0,0,3236,3257,1,0,
		0,0,3237,3238,5,197,0,0,3238,3251,5,881,0,0,3239,3241,5,883,0,0,3240,3239,
		1,0,0,0,3240,3241,1,0,0,0,3241,3245,1,0,0,0,3242,3243,3,1066,533,0,3243,
		3244,5,876,0,0,3244,3246,1,0,0,0,3245,3242,1,0,0,0,3245,3246,1,0,0,0,3246,
		3247,1,0,0,0,3247,3248,3,1066,533,0,3248,3249,5,876,0,0,3249,3250,3,1066,
		533,0,3250,3252,1,0,0,0,3251,3240,1,0,0,0,3252,3253,1,0,0,0,3253,3251,
		1,0,0,0,3253,3254,1,0,0,0,3254,3255,1,0,0,0,3255,3256,5,882,0,0,3256,3258,
		1,0,0,0,3257,3237,1,0,0,0,3258,3259,1,0,0,0,3259,3257,1,0,0,0,3259,3260,
		1,0,0,0,3260,3263,1,0,0,0,3261,3262,5,187,0,0,3262,3264,3,296,148,0,3263,
		3261,1,0,0,0,3263,3264,1,0,0,0,3264,3265,1,0,0,0,3265,3266,5,882,0,0,3266,
		3268,1,0,0,0,3267,3221,1,0,0,0,3268,3271,1,0,0,0,3269,3267,1,0,0,0,3269,
		3270,1,0,0,0,3270,3273,1,0,0,0,3271,3269,1,0,0,0,3272,3208,1,0,0,0,3273,
		3276,1,0,0,0,3274,3272,1,0,0,0,3274,3275,1,0,0,0,3275,3293,1,0,0,0,3276,
		3274,1,0,0,0,3277,3279,5,883,0,0,3278,3277,1,0,0,0,3278,3279,1,0,0,0,3279,
		3280,1,0,0,0,3280,3281,5,57,0,0,3281,3285,5,690,0,0,3282,3283,3,1066,533,
		0,3283,3284,5,876,0,0,3284,3286,1,0,0,0,3285,3282,1,0,0,0,3285,3286,1,
		0,0,0,3286,3287,1,0,0,0,3287,3288,3,1066,533,0,3288,3289,5,876,0,0,3289,
		3290,3,1066,533,0,3290,3292,1,0,0,0,3291,3278,1,0,0,0,3292,3295,1,0,0,
		0,3293,3291,1,0,0,0,3293,3294,1,0,0,0,3294,3337,1,0,0,0,3295,3293,1,0,
		0,0,3296,3297,5,2,0,0,3297,3301,5,831,0,0,3298,3299,3,1066,533,0,3299,
		3300,5,876,0,0,3300,3302,1,0,0,0,3301,3298,1,0,0,0,3301,3302,1,0,0,0,3302,
		3303,1,0,0,0,3303,3304,3,1066,533,0,3304,3305,5,876,0,0,3305,3306,3,1066,
		533,0,3306,3332,1,0,0,0,3307,3308,5,881,0,0,3308,3324,5,158,0,0,3309,3311,
		5,883,0,0,3310,3309,1,0,0,0,3310,3311,1,0,0,0,3311,3312,1,0,0,0,3312,3313,
		3,1066,533,0,3313,3322,5,863,0,0,3314,3316,5,881,0,0,3315,3314,1,0,0,0,
		3315,3316,1,0,0,0,3316,3317,1,0,0,0,3317,3319,5,857,0,0,3318,3320,5,882,
		0,0,3319,3318,1,0,0,0,3319,3320,1,0,0,0,3320,3323,1,0,0,0,3321,3323,5,
		859,0,0,3322,3315,1,0,0,0,3322,3321,1,0,0,0,3323,3325,1,0,0,0,3324,3310,
		1,0,0,0,3325,3326,1,0,0,0,3326,3324,1,0,0,0,3326,3327,1,0,0,0,3327,3328,
		1,0,0,0,3328,3329,5,882,0,0,3329,3331,1,0,0,0,3330,3307,1,0,0,0,3331,3334,
		1,0,0,0,3332,3330,1,0,0,0,3332,3333,1,0,0,0,3333,3336,1,0,0,0,3334,3332,
		1,0,0,0,3335,3296,1,0,0,0,3336,3339,1,0,0,0,3337,3335,1,0,0,0,3337,3338,
		1,0,0,0,3338,3353,1,0,0,0,3339,3337,1,0,0,0,3340,3341,5,57,0,0,3341,3345,
		5,831,0,0,3342,3343,3,1066,533,0,3343,3344,5,876,0,0,3344,3346,1,0,0,0,
		3345,3342,1,0,0,0,3345,3346,1,0,0,0,3346,3347,1,0,0,0,3347,3348,3,1066,
		533,0,3348,3349,5,876,0,0,3349,3350,3,1066,533,0,3350,3352,1,0,0,0,3351,
		3340,1,0,0,0,3352,3355,1,0,0,0,3353,3351,1,0,0,0,3353,3354,1,0,0,0,3354,
		3421,1,0,0,0,3355,3353,1,0,0,0,3356,3357,5,189,0,0,3357,3365,5,881,0,0,
		3358,3360,5,883,0,0,3359,3358,1,0,0,0,3359,3360,1,0,0,0,3360,3361,1,0,
		0,0,3361,3362,5,731,0,0,3362,3363,5,863,0,0,3363,3364,5,857,0,0,3364,3366,
		7,27,0,0,3365,3359,1,0,0,0,3365,3366,1,0,0,0,3366,3373,1,0,0,0,3367,3369,
		5,883,0,0,3368,3367,1,0,0,0,3368,3369,1,0,0,0,3369,3370,1,0,0,0,3370,3371,
		5,692,0,0,3371,3372,5,863,0,0,3372,3374,7,28,0,0,3373,3368,1,0,0,0,3373,
		3374,1,0,0,0,3374,3385,1,0,0,0,3375,3377,5,883,0,0,3376,3375,1,0,0,0,3376,
		3377,1,0,0,0,3377,3378,1,0,0,0,3378,3379,5,734,0,0,3379,3383,5,863,0,0,
		3380,3381,5,857,0,0,3381,3384,5,540,0,0,3382,3384,5,712,0,0,3383,3380,
		1,0,0,0,3383,3382,1,0,0,0,3384,3386,1,0,0,0,3385,3376,1,0,0,0,3385,3386,
		1,0,0,0,3386,3394,1,0,0,0,3387,3389,5,883,0,0,3388,3387,1,0,0,0,3388,3389,
		1,0,0,0,3389,3390,1,0,0,0,3390,3391,5,736,0,0,3391,3392,5,863,0,0,3392,
		3393,5,857,0,0,3393,3395,7,27,0,0,3394,3388,1,0,0,0,3394,3395,1,0,0,0,
		3395,3402,1,0,0,0,3396,3398,5,883,0,0,3397,3396,1,0,0,0,3397,3398,1,0,
		0,0,3398,3399,1,0,0,0,3399,3400,5,742,0,0,3400,3401,5,863,0,0,3401,3403,
		7,29,0,0,3402,3397,1,0,0,0,3402,3403,1,0,0,0,3403,3410,1,0,0,0,3404,3406,
		5,883,0,0,3405,3404,1,0,0,0,3405,3406,1,0,0,0,3406,3407,1,0,0,0,3407,3408,
		5,834,0,0,3408,3409,5,863,0,0,3409,3411,7,7,0,0,3410,3405,1,0,0,0,3410,
		3411,1,0,0,0,3411,3418,1,0,0,0,3412,3414,5,883,0,0,3413,3412,1,0,0,0,3413,
		3414,1,0,0,0,3414,3415,1,0,0,0,3415,3416,5,824,0,0,3416,3417,5,863,0,0,
		3417,3419,7,7,0,0,3418,3413,1,0,0,0,3418,3419,1,0,0,0,3419,3420,1,0,0,
		0,3420,3422,5,882,0,0,3421,3356,1,0,0,0,3421,3422,1,0,0,0,3422,3426,1,
		0,0,0,3423,3424,5,820,0,0,3424,3425,5,863,0,0,3425,3427,7,30,0,0,3426,
		3423,1,0,0,0,3426,3427,1,0,0,0,3427,295,1,0,0,0,3428,3430,5,883,0,0,3429,
		3428,1,0,0,0,3429,3430,1,0,0,0,3430,3432,1,0,0,0,3431,3433,7,31,0,0,3432,
		3431,1,0,0,0,3432,3433,1,0,0,0,3433,3435,1,0,0,0,3434,3436,5,106,0,0,3435,
		3434,1,0,0,0,3435,3436,1,0,0,0,3436,3442,1,0,0,0,3437,3443,3,298,149,0,
		3438,3439,5,881,0,0,3439,3440,3,296,148,0,3440,3441,5,882,0,0,3441,3443,
		1,0,0,0,3442,3437,1,0,0,0,3442,3438,1,0,0,0,3443,3445,1,0,0,0,3444,3429,
		1,0,0,0,3445,3446,1,0,0,0,3446,3444,1,0,0,0,3446,3447,1,0,0,0,3447,297,
		1,0,0,0,3448,3454,3,300,150,0,3449,3450,5,881,0,0,3450,3451,3,296,148,
		0,3451,3452,5,882,0,0,3452,3454,1,0,0,0,3453,3448,1,0,0,0,3453,3449,1,
		0,0,0,3454,299,1,0,0,0,3455,3484,3,1066,533,0,3456,3467,3,1066,533,0,3457,
		3458,3,1066,533,0,3458,3459,5,876,0,0,3459,3461,1,0,0,0,3460,3457,1,0,
		0,0,3460,3461,1,0,0,0,3461,3462,1,0,0,0,3462,3463,3,1066,533,0,3463,3464,
		5,876,0,0,3464,3465,3,1066,533,0,3465,3467,1,0,0,0,3466,3456,1,0,0,0,3466,
		3460,1,0,0,0,3467,3479,1,0,0,0,3468,3480,5,863,0,0,3469,3470,5,865,0,0,
		3470,3480,5,864,0,0,3471,3472,5,866,0,0,3472,3480,5,863,0,0,3473,3480,
		5,864,0,0,3474,3475,5,864,0,0,3475,3480,5,863,0,0,3476,3480,5,865,0,0,
		3477,3478,5,865,0,0,3478,3480,5,863,0,0,3479,3468,1,0,0,0,3479,3469,1,
		0,0,0,3479,3471,1,0,0,0,3479,3473,1,0,0,0,3479,3474,1,0,0,0,3479,3476,
		1,0,0,0,3479,3477,1,0,0,0,3480,3481,1,0,0,0,3481,3482,7,26,0,0,3482,3484,
		1,0,0,0,3483,3455,1,0,0,0,3483,3466,1,0,0,0,3484,3512,1,0,0,0,3485,3486,
		3,1066,533,0,3486,3487,5,876,0,0,3487,3489,1,0,0,0,3488,3485,1,0,0,0,3488,
		3489,1,0,0,0,3489,3490,1,0,0,0,3490,3491,3,1066,533,0,3491,3492,5,876,
		0,0,3492,3493,3,1066,533,0,3493,3507,5,881,0,0,3494,3508,3,1066,533,0,
		3495,3496,3,1066,533,0,3496,3497,5,876,0,0,3497,3499,1,0,0,0,3498,3495,
		1,0,0,0,3498,3499,1,0,0,0,3499,3500,1,0,0,0,3500,3501,3,1066,533,0,3501,
		3502,5,876,0,0,3502,3503,3,1066,533,0,3503,3504,1,0,0,0,3504,3505,5,883,
		0,0,3505,3506,7,26,0,0,3506,3508,1,0,0,0,3507,3494,1,0,0,0,3507,3498,1,
		0,0,0,3508,3509,1,0,0,0,3509,3510,5,882,0,0,3510,3512,1,0,0,0,3511,3483,
		1,0,0,0,3511,3488,1,0,0,0,3512,301,1,0,0,0,3513,3514,5,4,0,0,3514,3515,
		5,67,0,0,3515,3516,5,276,0,0,3516,3517,5,813,0,0,3517,3518,3,1066,533,
		0,3518,3534,5,158,0,0,3519,3520,5,391,0,0,3520,3521,5,863,0,0,3521,3523,
		5,859,0,0,3522,3524,5,883,0,0,3523,3522,1,0,0,0,3523,3524,1,0,0,0,3524,
		3535,1,0,0,0,3525,3526,5,521,0,0,3526,3527,5,863,0,0,3527,3529,5,859,0,
		0,3528,3530,5,883,0,0,3529,3528,1,0,0,0,3529,3530,1,0,0,0,3530,3535,1,
		0,0,0,3531,3532,5,271,0,0,3532,3533,5,863,0,0,3533,3535,3,1066,533,0,3534,
		3519,1,0,0,0,3534,3525,1,0,0,0,3534,3531,1,0,0,0,3535,3536,1,0,0,0,3536,
		3534,1,0,0,0,3536,3537,1,0,0,0,3537,3561,1,0,0,0,3538,3539,5,4,0,0,3539,
		3540,5,67,0,0,3540,3541,5,276,0,0,3541,3542,5,813,0,0,3542,3543,3,1066,
		533,0,3543,3544,5,189,0,0,3544,3545,5,881,0,0,3545,3546,5,602,0,0,3546,
		3547,5,863,0,0,3547,3548,5,239,0,0,3548,3549,5,883,0,0,3549,3550,5,391,
		0,0,3550,3551,5,863,0,0,3551,3556,5,859,0,0,3552,3553,5,883,0,0,3553,3554,
		5,271,0,0,3554,3555,5,863,0,0,3555,3557,3,1066,533,0,3556,3552,1,0,0,0,
		3556,3557,1,0,0,0,3557,3558,1,0,0,0,3558,3559,5,882,0,0,3559,3561,1,0,
		0,0,3560,3513,1,0,0,0,3560,3538,1,0,0,0,3561,303,1,0,0,0,3562,3563,5,4,
		0,0,3563,3564,5,67,0,0,3564,3565,5,720,0,0,3565,3568,3,1066,533,0,3566,
		3567,5,9,0,0,3567,3569,3,1066,533,0,3568,3566,1,0,0,0,3568,3569,1,0,0,
		0,3569,3570,1,0,0,0,3570,3571,7,32,0,0,3571,3572,5,881,0,0,3572,3573,5,
		262,0,0,3573,3577,5,863,0,0,3574,3578,5,859,0,0,3575,3578,5,860,0,0,3576,
		3578,5,750,0,0,3577,3574,1,0,0,0,3577,3575,1,0,0,0,3577,3576,1,0,0,0,3578,
		3579,1,0,0,0,3579,3580,5,883,0,0,3580,3581,5,771,0,0,3581,3583,5,863,0,
		0,3582,3584,7,33,0,0,3583,3582,1,0,0,0,3583,3584,1,0,0,0,3584,3585,1,0,
		0,0,3585,3586,5,882,0,0,3586,3587,1,0,0,0,3587,3597,5,189,0,0,3588,3590,
		5,883,0,0,3589,3588,1,0,0,0,3589,3590,1,0,0,0,3590,3591,1,0,0,0,3591,3592,
		5,719,0,0,3592,3593,5,863,0,0,3593,3598,7,34,0,0,3594,3595,5,677,0,0,3595,
		3596,5,863,0,0,3596,3598,3,1066,533,0,3597,3589,1,0,0,0,3597,3594,1,0,
		0,0,3598,3599,1,0,0,0,3599,3597,1,0,0,0,3599,3600,1,0,0,0,3600,3601,1,
		0,0,0,3601,3602,5,882,0,0,3602,305,1,0,0,0,3603,3604,5,35,0,0,3604,3605,
		5,67,0,0,3605,3606,5,720,0,0,3606,3609,3,1066,533,0,3607,3608,5,9,0,0,
		3608,3610,3,1066,533,0,3609,3607,1,0,0,0,3609,3610,1,0,0,0,3610,3611,1,
		0,0,0,3611,3613,5,75,0,0,3612,3614,5,883,0,0,3613,3612,1,0,0,0,3613,3614,
		1,0,0,0,3614,3616,1,0,0,0,3615,3617,5,881,0,0,3616,3615,1,0,0,0,3616,3617,
		1,0,0,0,3617,3620,1,0,0,0,3618,3619,5,262,0,0,3619,3621,5,863,0,0,3620,
		3618,1,0,0,0,3620,3621,1,0,0,0,3621,3625,1,0,0,0,3622,3626,5,859,0,0,3623,
		3626,5,860,0,0,3624,3626,5,750,0,0,3625,3622,1,0,0,0,3625,3623,1,0,0,0,
		3625,3624,1,0,0,0,3626,3634,1,0,0,0,3627,3628,5,883,0,0,3628,3629,5,771,
		0,0,3629,3631,5,863,0,0,3630,3632,7,33,0,0,3631,3630,1,0,0,0,3631,3632,
		1,0,0,0,3632,3633,1,0,0,0,3633,3635,5,882,0,0,3634,3627,1,0,0,0,3634,3635,
		1,0,0,0,3635,3651,1,0,0,0,3636,3646,5,189,0,0,3637,3639,5,883,0,0,3638,
		3637,1,0,0,0,3638,3639,1,0,0,0,3639,3640,1,0,0,0,3640,3641,5,719,0,0,3641,
		3642,5,863,0,0,3642,3647,7,34,0,0,3643,3644,5,677,0,0,3644,3645,5,863,
		0,0,3645,3647,3,1066,533,0,3646,3638,1,0,0,0,3646,3643,1,0,0,0,3647,3648,
		1,0,0,0,3648,3646,1,0,0,0,3648,3649,1,0,0,0,3649,3650,1,0,0,0,3650,3652,
		5,882,0,0,3651,3636,1,0,0,0,3651,3652,1,0,0,0,3652,307,1,0,0,0,3653,3654,
		5,4,0,0,3654,3655,5,67,0,0,3655,3656,5,520,0,0,3656,3659,5,474,0,0,3657,
		3660,3,1066,533,0,3658,3660,5,286,0,0,3659,3657,1,0,0,0,3659,3658,1,0,
		0,0,3660,3661,1,0,0,0,3661,3662,5,189,0,0,3662,3663,5,881,0,0,3663,3664,
		5,401,0,0,3664,3665,5,863,0,0,3665,3703,5,857,0,0,3666,3668,5,883,0,0,
		3667,3666,1,0,0,0,3667,3668,1,0,0,0,3668,3669,1,0,0,0,3669,3670,5,204,
		0,0,3670,3671,5,268,0,0,3671,3685,5,863,0,0,3672,3686,5,221,0,0,3673,3675,
		5,883,0,0,3674,3673,1,0,0,0,3674,3675,1,0,0,0,3675,3676,1,0,0,0,3676,3677,
		5,857,0,0,3677,3678,5,168,0,0,3678,3682,5,857,0,0,3679,3680,5,883,0,0,
		3680,3682,5,857,0,0,3681,3674,1,0,0,0,3681,3679,1,0,0,0,3682,3683,1,0,
		0,0,3683,3681,1,0,0,0,3683,3684,1,0,0,0,3684,3686,1,0,0,0,3685,3672,1,
		0,0,0,3685,3681,1,0,0,0,3686,3704,1,0,0,0,3687,3688,5,447,0,0,3688,3699,
		5,863,0,0,3689,3691,5,883,0,0,3690,3689,1,0,0,0,3690,3691,1,0,0,0,3691,
		3692,1,0,0,0,3692,3693,5,857,0,0,3693,3694,5,168,0,0,3694,3700,5,857,0,
		0,3695,3697,5,883,0,0,3696,3695,1,0,0,0,3696,3697,1,0,0,0,3697,3698,1,
		0,0,0,3698,3700,5,857,0,0,3699,3690,1,0,0,0,3699,3696,1,0,0,0,3700,3701,
		1,0,0,0,3701,3699,1,0,0,0,3701,3702,1,0,0,0,3702,3704,1,0,0,0,3703,3667,
		1,0,0,0,3703,3687,1,0,0,0,3704,3711,1,0,0,0,3705,3707,5,883,0,0,3706,3705,
		1,0,0,0,3706,3707,1,0,0,0,3707,3708,1,0,0,0,3708,3709,5,405,0,0,3709,3710,
		5,863,0,0,3710,3712,5,857,0,0,3711,3706,1,0,0,0,3711,3712,1,0,0,0,3712,
		3719,1,0,0,0,3713,3715,5,883,0,0,3714,3713,1,0,0,0,3714,3715,1,0,0,0,3715,
		3716,1,0,0,0,3716,3717,5,406,0,0,3717,3718,5,863,0,0,3718,3720,5,857,0,
		0,3719,3714,1,0,0,0,3719,3720,1,0,0,0,3720,3721,1,0,0,0,3721,3722,5,882,
		0,0,3722,309,1,0,0,0,3723,3724,5,35,0,0,3724,3725,5,67,0,0,3725,3726,5,
		520,0,0,3726,3727,5,474,0,0,3727,3728,3,1066,533,0,3728,3729,5,189,0,0,
		3729,3730,5,881,0,0,3730,3731,5,401,0,0,3731,3732,5,863,0,0,3732,3770,
		5,857,0,0,3733,3735,5,883,0,0,3734,3733,1,0,0,0,3734,3735,1,0,0,0,3735,
		3736,1,0,0,0,3736,3737,5,204,0,0,3737,3738,5,268,0,0,3738,3752,5,863,0,
		0,3739,3753,5,221,0,0,3740,3742,5,883,0,0,3741,3740,1,0,0,0,3741,3742,
		1,0,0,0,3742,3743,1,0,0,0,3743,3744,5,857,0,0,3744,3745,5,168,0,0,3745,
		3749,5,857,0,0,3746,3747,5,883,0,0,3747,3749,5,857,0,0,3748,3741,1,0,0,
		0,3748,3746,1,0,0,0,3749,3750,1,0,0,0,3750,3748,1,0,0,0,3750,3751,1,0,
		0,0,3751,3753,1,0,0,0,3752,3739,1,0,0,0,3752,3748,1,0,0,0,3753,3771,1,
		0,0,0,3754,3755,5,447,0,0,3755,3766,5,863,0,0,3756,3758,5,883,0,0,3757,
		3756,1,0,0,0,3757,3758,1,0,0,0,3758,3759,1,0,0,0,3759,3760,5,857,0,0,3760,
		3761,5,168,0,0,3761,3767,5,857,0,0,3762,3764,5,883,0,0,3763,3762,1,0,0,
		0,3763,3764,1,0,0,0,3764,3765,1,0,0,0,3765,3767,5,857,0,0,3766,3757,1,
		0,0,0,3766,3763,1,0,0,0,3767,3768,1,0,0,0,3768,3766,1,0,0,0,3768,3769,
		1,0,0,0,3769,3771,1,0,0,0,3770,3734,1,0,0,0,3770,3754,1,0,0,0,3771,3778,
		1,0,0,0,3772,3774,5,883,0,0,3773,3772,1,0,0,0,3773,3774,1,0,0,0,3774,3775,
		1,0,0,0,3775,3776,5,405,0,0,3776,3777,5,863,0,0,3777,3779,5,857,0,0,3778,
		3773,1,0,0,0,3778,3779,1,0,0,0,3779,3786,1,0,0,0,3780,3782,5,883,0,0,3781,
		3780,1,0,0,0,3781,3782,1,0,0,0,3782,3783,1,0,0,0,3783,3784,5,406,0,0,3784,
		3785,5,863,0,0,3785,3787,5,857,0,0,3786,3781,1,0,0,0,3786,3787,1,0,0,0,
		3787,3788,1,0,0,0,3788,3789,5,882,0,0,3789,311,1,0,0,0,3790,3791,5,4,0,
		0,3791,3792,5,343,0,0,3792,3793,5,247,0,0,3793,3804,3,1066,533,0,3794,
		3799,5,503,0,0,3795,3796,5,189,0,0,3796,3797,5,195,0,0,3797,3798,5,863,
		0,0,3798,3800,7,7,0,0,3799,3795,1,0,0,0,3799,3800,1,0,0,0,3800,3805,1,
		0,0,0,3801,3805,5,512,0,0,3802,3803,5,7,0,0,3803,3805,5,47,0,0,3804,3794,
		1,0,0,0,3804,3801,1,0,0,0,3804,3802,1,0,0,0,3805,313,1,0,0,0,3806,3807,
		5,35,0,0,3807,3808,5,343,0,0,3808,3809,5,247,0,0,3809,3813,3,1066,533,
		0,3810,3811,5,112,0,0,3811,3812,5,328,0,0,3812,3814,3,1066,533,0,3813,
		3810,1,0,0,0,3813,3814,1,0,0,0,3814,3818,1,0,0,0,3815,3816,5,87,0,0,3816,
		3817,5,469,0,0,3817,3819,5,859,0,0,3818,3815,1,0,0,0,3818,3819,1,0,0,0,
		3819,3824,1,0,0,0,3820,3821,5,189,0,0,3821,3822,5,195,0,0,3822,3823,5,
		863,0,0,3823,3825,7,7,0,0,3824,3820,1,0,0,0,3824,3825,1,0,0,0,3825,3828,
		1,0,0,0,3826,3827,5,7,0,0,3827,3829,5,47,0,0,3828,3826,1,0,0,0,3828,3829,
		1,0,0,0,3829,3832,1,0,0,0,3830,3831,5,9,0,0,3831,3833,3,1066,533,0,3832,
		3830,1,0,0,0,3832,3833,1,0,0,0,3833,315,1,0,0,0,3834,3835,5,4,0,0,3835,
		3836,5,343,0,0,3836,3837,5,571,0,0,3837,3851,3,1066,533,0,3838,3839,5,
		2,0,0,3839,3840,5,859,0,0,3840,3841,5,719,0,0,3841,3852,7,35,0,0,3842,
		3849,5,57,0,0,3843,3844,5,859,0,0,3844,3845,5,719,0,0,3845,3850,7,35,0,
		0,3846,3847,5,3,0,0,3847,3850,7,35,0,0,3848,3850,5,3,0,0,3849,3843,1,0,
		0,0,3849,3846,1,0,0,0,3849,3848,1,0,0,0,3850,3852,1,0,0,0,3851,3838,1,
		0,0,0,3851,3842,1,0,0,0,3852,317,1,0,0,0,3853,3854,5,35,0,0,3854,3855,
		5,343,0,0,3855,3856,5,571,0,0,3856,3868,3,1066,533,0,3857,3866,5,75,0,
		0,3858,3859,3,1066,533,0,3859,3860,5,876,0,0,3860,3862,1,0,0,0,3861,3858,
		1,0,0,0,3861,3862,1,0,0,0,3862,3863,1,0,0,0,3863,3867,3,1066,533,0,3864,
		3865,5,582,0,0,3865,3867,5,571,0,0,3866,3861,1,0,0,0,3866,3864,1,0,0,0,
		3867,3869,1,0,0,0,3868,3857,1,0,0,0,3868,3869,1,0,0,0,3869,3872,1,0,0,
		0,3870,3871,5,9,0,0,3871,3873,3,1066,533,0,3872,3870,1,0,0,0,3872,3873,
		1,0,0,0,3873,319,1,0,0,0,3874,3875,5,4,0,0,3875,3876,5,394,0,0,3876,3944,
		3,1066,533,0,3877,3879,7,25,0,0,3878,3877,1,0,0,0,3878,3879,1,0,0,0,3879,
		3945,1,0,0,0,3880,3894,5,189,0,0,3881,3882,5,765,0,0,3882,3886,5,863,0,
		0,3883,3887,5,859,0,0,3884,3885,5,860,0,0,3885,3887,5,705,0,0,3886,3883,
		1,0,0,0,3886,3884,1,0,0,0,3887,3891,1,0,0,0,3888,3890,7,36,0,0,3889,3888,
		1,0,0,0,3890,3893,1,0,0,0,3891,3889,1,0,0,0,3891,3892,1,0,0,0,3892,3895,
		1,0,0,0,3893,3891,1,0,0,0,3894,3881,1,0,0,0,3894,3895,1,0,0,0,3895,3905,
		1,0,0,0,3896,3897,5,759,0,0,3897,3898,5,863,0,0,3898,3902,5,859,0,0,3899,
		3901,7,36,0,0,3900,3899,1,0,0,0,3901,3904,1,0,0,0,3902,3900,1,0,0,0,3902,
		3903,1,0,0,0,3903,3906,1,0,0,0,3904,3902,1,0,0,0,3905,3896,1,0,0,0,3905,
		3906,1,0,0,0,3906,3910,1,0,0,0,3907,3908,5,681,0,0,3908,3909,5,863,0,0,
		3909,3911,3,1066,533,0,3910,3907,1,0,0,0,3910,3911,1,0,0,0,3911,3915,1,
		0,0,0,3912,3913,5,288,0,0,3913,3914,5,863,0,0,3914,3916,3,1066,533,0,3915,
		3912,1,0,0,0,3915,3916,1,0,0,0,3916,3920,1,0,0,0,3917,3918,5,428,0,0,3918,
		3919,5,863,0,0,3919,3921,3,1066,533,0,3920,3917,1,0,0,0,3920,3921,1,0,
		0,0,3921,3925,1,0,0,0,3922,3923,5,660,0,0,3923,3924,5,863,0,0,3924,3926,
		7,7,0,0,3925,3922,1,0,0,0,3925,3926,1,0,0,0,3926,3930,1,0,0,0,3927,3928,
		5,661,0,0,3928,3929,5,863,0,0,3929,3931,7,7,0,0,3930,3927,1,0,0,0,3930,
		3931,1,0,0,0,3931,3935,1,0,0,0,3932,3933,5,271,0,0,3933,3934,5,863,0,0,
		3934,3936,3,1066,533,0,3935,3932,1,0,0,0,3935,3936,1,0,0,0,3936,3939,1,
		0,0,0,3937,3938,5,435,0,0,3938,3940,5,271,0,0,3939,3937,1,0,0,0,3939,3940,
		1,0,0,0,3940,3945,1,0,0,0,3941,3942,7,23,0,0,3942,3943,5,271,0,0,3943,
		3945,3,1066,533,0,3944,3878,1,0,0,0,3944,3880,1,0,0,0,3944,3941,1,0,0,
		0,3945,321,1,0,0,0,3946,3947,5,35,0,0,3947,3948,5,394,0,0,3948,4039,3,
		1066,533,0,3949,3963,5,189,0,0,3950,3951,5,765,0,0,3951,3955,5,863,0,0,
		3952,3956,5,859,0,0,3953,3954,5,860,0,0,3954,3956,5,705,0,0,3955,3952,
		1,0,0,0,3955,3953,1,0,0,0,3956,3960,1,0,0,0,3957,3959,7,36,0,0,3958,3957,
		1,0,0,0,3959,3962,1,0,0,0,3960,3958,1,0,0,0,3960,3961,1,0,0,0,3961,3964,
		1,0,0,0,3962,3960,1,0,0,0,3963,3950,1,0,0,0,3963,3964,1,0,0,0,3964,3971,
		1,0,0,0,3965,3967,5,883,0,0,3966,3965,1,0,0,0,3966,3967,1,0,0,0,3967,3968,
		1,0,0,0,3968,3969,5,810,0,0,3969,3970,5,863,0,0,3970,3972,5,860,0,0,3971,
		3966,1,0,0,0,3971,3972,1,0,0,0,3972,3979,1,0,0,0,3973,3975,5,883,0,0,3974,
		3973,1,0,0,0,3974,3975,1,0,0,0,3975,3976,1,0,0,0,3976,3977,5,681,0,0,3977,
		3978,5,863,0,0,3978,3980,3,1066,533,0,3979,3974,1,0,0,0,3979,3980,1,0,
		0,0,3980,3987,1,0,0,0,3981,3983,5,883,0,0,3982,3981,1,0,0,0,3982,3983,
		1,0,0,0,3983,3984,1,0,0,0,3984,3985,5,288,0,0,3985,3986,5,863,0,0,3986,
		3988,3,1066,533,0,3987,3982,1,0,0,0,3987,3988,1,0,0,0,3988,3995,1,0,0,
		0,3989,3991,5,883,0,0,3990,3989,1,0,0,0,3990,3991,1,0,0,0,3991,3992,1,
		0,0,0,3992,3993,5,661,0,0,3993,3994,5,863,0,0,3994,3996,7,7,0,0,3995,3990,
		1,0,0,0,3995,3996,1,0,0,0,3996,4003,1,0,0,0,3997,3999,5,883,0,0,3998,3997,
		1,0,0,0,3998,3999,1,0,0,0,3999,4000,1,0,0,0,4000,4001,5,660,0,0,4001,4002,
		5,863,0,0,4002,4004,7,7,0,0,4003,3998,1,0,0,0,4003,4004,1,0,0,0,4004,4011,
		1,0,0,0,4005,4007,5,883,0,0,4006,4005,1,0,0,0,4006,4007,1,0,0,0,4007,4008,
		1,0,0,0,4008,4009,5,271,0,0,4009,4010,5,863,0,0,4010,4012,3,1066,533,0,
		4011,4006,1,0,0,0,4011,4012,1,0,0,0,4012,4040,1,0,0,0,4013,4037,5,75,0,
		0,4014,4015,5,844,0,0,4015,4022,5,189,0,0,4016,4018,5,883,0,0,4017,4016,
		1,0,0,0,4017,4018,1,0,0,0,4018,4019,1,0,0,0,4019,4020,5,681,0,0,4020,4021,
		5,863,0,0,4021,4023,3,1066,533,0,4022,4017,1,0,0,0,4022,4023,1,0,0,0,4023,
		4030,1,0,0,0,4024,4026,5,883,0,0,4025,4024,1,0,0,0,4025,4026,1,0,0,0,4026,
		4027,1,0,0,0,4027,4028,5,288,0,0,4028,4029,5,863,0,0,4029,4031,5,859,0,
		0,4030,4025,1,0,0,0,4030,4031,1,0,0,0,4031,4038,1,0,0,0,4032,4033,5,657,
		0,0,4033,4038,3,1066,533,0,4034,4035,5,641,0,0,4035,4036,5,95,0,0,4036,
		4038,3,1066,533,0,4037,4014,1,0,0,0,4037,4032,1,0,0,0,4037,4034,1,0,0,
		0,4038,4040,1,0,0,0,4039,3949,1,0,0,0,4039,4013,1,0,0,0,4040,323,1,0,0,
		0,4041,4042,5,4,0,0,4042,4043,5,394,0,0,4043,4061,3,1066,533,0,4044,4046,
		7,25,0,0,4045,4044,1,0,0,0,4045,4046,1,0,0,0,4046,4062,1,0,0,0,4047,4059,
		5,189,0,0,4048,4049,5,765,0,0,4049,4050,5,863,0,0,4050,4054,5,859,0,0,
		4051,4052,5,759,0,0,4052,4053,5,863,0,0,4053,4055,5,859,0,0,4054,4051,
		1,0,0,0,4054,4055,1,0,0,0,4055,4060,1,0,0,0,4056,4057,5,428,0,0,4057,4058,
		5,863,0,0,4058,4060,3,1066,533,0,4059,4048,1,0,0,0,4059,4056,1,0,0,0,4060,
		4062,1,0,0,0,4061,4045,1,0,0,0,4061,4047,1,0,0,0,4062,325,1,0,0,0,4063,
		4064,5,35,0,0,4064,4065,5,394,0,0,4065,4066,3,1066,533,0,4066,4067,5,189,
		0,0,4067,4068,5,765,0,0,4068,4069,5,863,0,0,4069,4073,5,859,0,0,4070,4071,
		5,810,0,0,4071,4072,5,863,0,0,4072,4074,5,860,0,0,4073,4070,1,0,0,0,4073,
		4074,1,0,0,0,4074,327,1,0,0,0,4075,4076,5,4,0,0,4076,4077,5,394,0,0,4077,
		4101,3,1066,533,0,4078,4080,7,25,0,0,4079,4078,1,0,0,0,4079,4080,1,0,0,
		0,4080,4102,1,0,0,0,4081,4099,5,189,0,0,4082,4083,5,765,0,0,4083,4084,
		5,863,0,0,4084,4094,5,859,0,0,4085,4086,5,759,0,0,4086,4087,5,863,0,0,
		4087,4091,5,859,0,0,4088,4090,7,36,0,0,4089,4088,1,0,0,0,4090,4093,1,0,
		0,0,4091,4089,1,0,0,0,4091,4092,1,0,0,0,4092,4095,1,0,0,0,4093,4091,1,
		0,0,0,4094,4085,1,0,0,0,4094,4095,1,0,0,0,4095,4100,1,0,0,0,4096,4097,
		5,428,0,0,4097,4098,5,863,0,0,4098,4100,3,1066,533,0,4099,4082,1,0,0,0,
		4099,4096,1,0,0,0,4100,4102,1,0,0,0,4101,4079,1,0,0,0,4101,4081,1,0,0,
		0,4102,329,1,0,0,0,4103,4104,5,35,0,0,4104,4105,5,394,0,0,4105,4122,3,
		1066,533,0,4106,4107,5,189,0,0,4107,4108,5,765,0,0,4108,4109,5,863,0,0,
		4109,4111,5,859,0,0,4110,4112,5,747,0,0,4111,4110,1,0,0,0,4111,4112,1,
		0,0,0,4112,4118,1,0,0,0,4113,4114,5,660,0,0,4114,4116,5,863,0,0,4115,4117,
		7,7,0,0,4116,4115,1,0,0,0,4116,4117,1,0,0,0,4117,4119,1,0,0,0,4118,4113,
		1,0,0,0,4118,4119,1,0,0,0,4119,4123,1,0,0,0,4120,4121,5,75,0,0,4121,4123,
		5,844,0,0,4122,4106,1,0,0,0,4122,4120,1,0,0,0,4123,331,1,0,0,0,4124,4125,
		5,4,0,0,4125,4126,5,730,0,0,4126,4148,5,95,0,0,4127,4129,5,337,0,0,4128,
		4127,1,0,0,0,4128,4129,1,0,0,0,4129,4130,1,0,0,0,4130,4131,5,779,0,0,4131,
		4132,5,189,0,0,4132,4133,5,313,0,0,4133,4134,5,18,0,0,4134,4135,5,765,
		0,0,4135,4136,5,863,0,0,4136,4149,5,859,0,0,4137,4138,7,23,0,0,4138,4139,
		5,313,0,0,4139,4146,5,18,0,0,4140,4141,5,804,0,0,4141,4142,5,730,0,0,4142,
		4147,5,95,0,0,4143,4144,5,765,0,0,4144,4145,5,863,0,0,4145,4147,5,859,
		0,0,4146,4140,1,0,0,0,4146,4143,1,0,0,0,4147,4149,1,0,0,0,4148,4128,1,
		0,0,0,4148,4137,1,0,0,0,4149,333,1,0,0,0,4150,4151,5,35,0,0,4151,4152,
		5,730,0,0,4152,4153,5,95,0,0,4153,4154,5,313,0,0,4154,4155,5,18,0,0,4155,
		4156,5,765,0,0,4156,4157,5,863,0,0,4157,4158,5,859,0,0,4158,335,1,0,0,
		0,4159,4160,5,4,0,0,4160,4161,5,730,0,0,4161,4189,5,95,0,0,4162,4164,5,
		337,0,0,4163,4162,1,0,0,0,4163,4164,1,0,0,0,4164,4165,1,0,0,0,4165,4166,
		5,779,0,0,4166,4167,5,189,0,0,4167,4168,5,313,0,0,4168,4169,5,18,0,0,4169,
		4170,5,765,0,0,4170,4171,5,863,0,0,4171,4190,5,859,0,0,4172,4173,5,2,0,
		0,4173,4174,5,313,0,0,4174,4181,5,18,0,0,4175,4176,5,804,0,0,4176,4177,
		5,730,0,0,4177,4182,5,95,0,0,4178,4179,5,765,0,0,4179,4180,5,863,0,0,4180,
		4182,5,859,0,0,4181,4175,1,0,0,0,4181,4178,1,0,0,0,4182,4190,1,0,0,0,4183,
		4184,5,57,0,0,4184,4185,5,313,0,0,4185,4186,5,18,0,0,4186,4187,5,765,0,
		0,4187,4188,5,863,0,0,4188,4190,5,859,0,0,4189,4163,1,0,0,0,4189,4172,
		1,0,0,0,4189,4183,1,0,0,0,4190,337,1,0,0,0,4191,4192,5,35,0,0,4192,4193,
		5,730,0,0,4193,4199,5,95,0,0,4194,4195,5,313,0,0,4195,4196,5,18,0,0,4196,
		4197,5,765,0,0,4197,4198,5,863,0,0,4198,4200,5,859,0,0,4199,4194,1,0,0,
		0,4199,4200,1,0,0,0,4200,339,1,0,0,0,4201,4202,5,4,0,0,4202,4203,5,415,
		0,0,4203,4204,5,602,0,0,4204,4205,3,1066,533,0,4205,4206,5,612,0,0,4206,
		4215,5,863,0,0,4207,4216,5,750,0,0,4208,4216,5,309,0,0,4209,4216,5,620,
		0,0,4210,4211,5,611,0,0,4211,4212,5,189,0,0,4212,4213,5,151,0,0,4213,4214,
		5,255,0,0,4214,4216,3,1066,533,0,4215,4207,1,0,0,0,4215,4208,1,0,0,0,4215,
		4209,1,0,0,0,4215,4210,1,0,0,0,4216,341,1,0,0,0,4217,4218,5,4,0,0,4218,
		4219,5,466,0,0,4219,4220,5,77,0,0,4220,4221,3,1066,533,0,4221,4222,5,881,
		0,0,4222,4223,5,882,0,0,4223,4224,7,37,0,0,4224,4225,5,492,0,0,4225,4226,
		5,881,0,0,4226,4227,5,857,0,0,4227,4228,5,882,0,0,4228,343,1,0,0,0,4229,
		4230,5,4,0,0,4230,4231,5,466,0,0,4231,4232,5,801,0,0,4232,4233,3,1066,
		533,0,4233,4234,5,434,0,0,4234,4236,5,840,0,0,4235,4237,3,1066,533,0,4236,
		4235,1,0,0,0,4236,4237,1,0,0,0,4237,345,1,0,0,0,4238,4239,5,4,0,0,4239,
		4240,5,509,0,0,4240,4241,5,804,0,0,4241,4242,5,238,0,0,4242,4243,3,1066,
		533,0,4243,4247,5,189,0,0,4244,4245,5,181,0,0,4245,4246,5,863,0,0,4246,
		4248,3,1066,533,0,4247,4244,1,0,0,0,4247,4248,1,0,0,0,4248,4253,1,0,0,
		0,4249,4250,5,883,0,0,4250,4251,5,638,0,0,4251,4252,5,863,0,0,4252,4254,
		7,7,0,0,4253,4249,1,0,0,0,4253,4254,1,0,0,0,4254,347,1,0,0,0,4255,4256,
		5,35,0,0,4256,4257,5,509,0,0,4257,4258,5,804,0,0,4258,4259,5,238,0,0,4259,
		4262,3,1066,533,0,4260,4261,5,9,0,0,4261,4263,3,1066,533,0,4262,4260,1,
		0,0,0,4262,4263,1,0,0,0,4263,4264,1,0,0,0,4264,4265,5,168,0,0,4265,4266,
		5,804,0,0,4266,4267,5,859,0,0,4267,4271,5,189,0,0,4268,4269,5,181,0,0,
		4269,4270,5,863,0,0,4270,4272,3,1066,533,0,4271,4268,1,0,0,0,4271,4272,
		1,0,0,0,4272,4277,1,0,0,0,4273,4274,5,883,0,0,4274,4275,5,638,0,0,4275,
		4276,5,863,0,0,4276,4278,7,7,0,0,4277,4273,1,0,0,0,4277,4278,1,0,0,0,4278,
		349,1,0,0,0,4279,4280,5,35,0,0,4280,4281,5,520,0,0,4281,4282,5,474,0,0,
		4282,4385,3,1066,533,0,4283,4284,5,189,0,0,4284,4291,5,881,0,0,4285,4287,
		5,883,0,0,4286,4285,1,0,0,0,4286,4287,1,0,0,0,4287,4288,1,0,0,0,4288,4289,
		5,418,0,0,4289,4290,5,863,0,0,4290,4292,5,857,0,0,4291,4286,1,0,0,0,4291,
		4292,1,0,0,0,4292,4299,1,0,0,0,4293,4295,5,883,0,0,4294,4293,1,0,0,0,4294,
		4295,1,0,0,0,4295,4296,1,0,0,0,4296,4297,5,401,0,0,4297,4298,5,863,0,0,
		4298,4300,5,857,0,0,4299,4294,1,0,0,0,4299,4300,1,0,0,0,4300,4307,1,0,
		0,0,4301,4303,5,883,0,0,4302,4301,1,0,0,0,4302,4303,1,0,0,0,4303,4304,
		1,0,0,0,4304,4305,5,244,0,0,4305,4306,5,863,0,0,4306,4308,5,857,0,0,4307,
		4302,1,0,0,0,4307,4308,1,0,0,0,4308,4350,1,0,0,0,4309,4311,5,883,0,0,4310,
		4309,1,0,0,0,4310,4311,1,0,0,0,4311,4312,1,0,0,0,4312,4313,5,204,0,0,4313,
		4314,5,800,0,0,4314,4348,5,863,0,0,4315,4349,5,221,0,0,4316,4326,5,881,
		0,0,4317,4319,5,883,0,0,4318,4317,1,0,0,0,4318,4319,1,0,0,0,4319,4324,
		1,0,0,0,4320,4325,5,857,0,0,4321,4322,5,857,0,0,4322,4323,5,168,0,0,4323,
		4325,5,857,0,0,4324,4320,1,0,0,0,4324,4321,1,0,0,0,4325,4327,1,0,0,0,4326,
		4318,1,0,0,0,4327,4328,1,0,0,0,4328,4326,1,0,0,0,4328,4329,1,0,0,0,4329,
		4330,1,0,0,0,4330,4349,5,882,0,0,4331,4332,5,447,0,0,4332,4333,5,863,0,
		0,4333,4343,5,881,0,0,4334,4336,5,883,0,0,4335,4334,1,0,0,0,4335,4336,
		1,0,0,0,4336,4341,1,0,0,0,4337,4342,5,857,0,0,4338,4339,5,857,0,0,4339,
		4340,5,168,0,0,4340,4342,5,857,0,0,4341,4337,1,0,0,0,4341,4338,1,0,0,0,
		4342,4344,1,0,0,0,4343,4335,1,0,0,0,4344,4345,1,0,0,0,4345,4343,1,0,0,
		0,4345,4346,1,0,0,0,4346,4347,1,0,0,0,4347,4349,5,882,0,0,4348,4315,1,
		0,0,0,4348,4316,1,0,0,0,4348,4331,1,0,0,0,4349,4351,1,0,0,0,4350,4310,
		1,0,0,0,4350,4351,1,0,0,0,4351,4358,1,0,0,0,4352,4354,5,883,0,0,4353,4352,
		1,0,0,0,4353,4354,1,0,0,0,4354,4355,1,0,0,0,4355,4356,5,420,0,0,4356,4357,
		5,863,0,0,4357,4359,5,857,0,0,4358,4353,1,0,0,0,4358,4359,1,0,0,0,4359,
		4366,1,0,0,0,4360,4362,5,883,0,0,4361,4360,1,0,0,0,4361,4362,1,0,0,0,4362,
		4363,1,0,0,0,4363,4364,5,405,0,0,4364,4365,5,863,0,0,4365,4367,5,857,0,
		0,4366,4361,1,0,0,0,4366,4367,1,0,0,0,4367,4374,1,0,0,0,4368,4370,5,883,
		0,0,4369,4368,1,0,0,0,4369,4370,1,0,0,0,4370,4371,1,0,0,0,4371,4372,5,
		419,0,0,4372,4373,5,863,0,0,4373,4375,5,857,0,0,4374,4369,1,0,0,0,4374,
		4375,1,0,0,0,4375,4382,1,0,0,0,4376,4378,5,883,0,0,4377,4376,1,0,0,0,4377,
		4378,1,0,0,0,4378,4379,1,0,0,0,4379,4380,5,404,0,0,4380,4381,5,863,0,0,
		4381,4383,5,857,0,0,4382,4377,1,0,0,0,4382,4383,1,0,0,0,4383,4384,1,0,
		0,0,4384,4386,5,882,0,0,4385,4283,1,0,0,0,4385,4386,1,0,0,0,4386,351,1,
		0,0,0,4387,4388,5,4,0,0,4388,4389,5,520,0,0,4389,4411,5,704,0,0,4390,4412,
		7,38,0,0,4391,4392,5,189,0,0,4392,4393,5,881,0,0,4393,4394,5,662,0,0,4394,
		4400,5,863,0,0,4395,4396,3,1066,533,0,4396,4397,5,876,0,0,4397,4398,3,
		1066,533,0,4398,4401,1,0,0,0,4399,4401,5,107,0,0,4400,4395,1,0,0,0,4400,
		4399,1,0,0,0,4401,4402,1,0,0,0,4402,4412,5,882,0,0,4403,4404,5,784,0,0,
		4404,4412,5,162,0,0,4405,4406,5,189,0,0,4406,4407,5,881,0,0,4407,4408,
		5,738,0,0,4408,4409,5,863,0,0,4409,4410,5,857,0,0,4410,4412,5,882,0,0,
		4411,4390,1,0,0,0,4411,4391,1,0,0,0,4411,4403,1,0,0,0,4411,4405,1,0,0,
		0,4412,353,1,0,0,0,4413,4414,5,4,0,0,4414,4415,5,791,0,0,4415,4423,3,1066,
		533,0,4416,4417,7,23,0,0,4417,4418,5,741,0,0,4418,4424,3,1066,533,0,4419,
		4420,5,189,0,0,4420,4421,5,428,0,0,4421,4422,5,863,0,0,4422,4424,3,1066,
		533,0,4423,4416,1,0,0,0,4423,4419,1,0,0,0,4424,355,1,0,0,0,4425,4426,5,
		35,0,0,4426,4427,5,791,0,0,4427,4430,3,1066,533,0,4428,4429,5,9,0,0,4429,
		4431,3,1066,533,0,4430,4428,1,0,0,0,4430,4431,1,0,0,0,4431,357,1,0,0,0,
		4432,4433,5,35,0,0,4433,4434,5,526,0,0,4434,4437,3,1066,533,0,4435,4436,
		5,9,0,0,4436,4438,3,1066,533,0,4437,4435,1,0,0,0,4437,4438,1,0,0,0,4438,
		4439,1,0,0,0,4439,4446,5,189,0,0,4440,4442,5,883,0,0,4441,4440,1,0,0,0,
		4441,4442,1,0,0,0,4442,4443,1,0,0,0,4443,4444,5,806,0,0,4444,4445,5,863,
		0,0,4445,4447,5,859,0,0,4446,4441,1,0,0,0,4446,4447,1,0,0,0,4447,4454,
		1,0,0,0,4448,4450,5,883,0,0,4449,4448,1,0,0,0,4449,4450,1,0,0,0,4450,4451,
		1,0,0,0,4451,4452,5,241,0,0,4452,4453,5,863,0,0,4453,4455,5,859,0,0,4454,
		4449,1,0,0,0,4454,4455,1,0,0,0,4455,4462,1,0,0,0,4456,4458,5,883,0,0,4457,
		4456,1,0,0,0,4457,4458,1,0,0,0,4458,4459,1,0,0,0,4459,4460,5,721,0,0,4460,
		4461,5,863,0,0,4461,4463,5,857,0,0,4462,4457,1,0,0,0,4462,4463,1,0,0,0,
		4463,4465,1,0,0,0,4464,4466,5,883,0,0,4465,4464,1,0,0,0,4465,4466,1,0,
		0,0,4466,4467,1,0,0,0,4467,4468,5,200,0,0,4468,4469,5,863,0,0,4469,4474,
		5,859,0,0,4470,4471,5,883,0,0,4471,4472,5,422,0,0,4472,4473,5,863,0,0,
		4473,4475,5,859,0,0,4474,4470,1,0,0,0,4474,4475,1,0,0,0,4475,359,1,0,0,
		0,4476,4477,5,35,0,0,4477,4481,5,149,0,0,4478,4479,3,1066,533,0,4479,4480,
		5,876,0,0,4480,4482,1,0,0,0,4481,4478,1,0,0,0,4481,4482,1,0,0,0,4482,4483,
		1,0,0,0,4483,4484,3,1066,533,0,4484,4485,5,7,0,0,4485,4486,3,812,406,0,
		4486,361,1,0,0,0,4487,4488,5,4,0,0,4488,4489,5,151,0,0,4489,4490,3,1066,
		533,0,4490,4499,5,835,0,0,4491,4497,5,450,0,0,4492,4497,5,602,0,0,4493,
		4494,5,624,0,0,4494,4495,5,151,0,0,4495,4497,5,255,0,0,4496,4491,1,0,0,
		0,4496,4492,1,0,0,0,4496,4493,1,0,0,0,4497,4498,1,0,0,0,4498,4500,5,886,
		0,0,4499,4496,1,0,0,0,4499,4500,1,0,0,0,4500,4501,1,0,0,0,4501,4504,3,
		1066,533,0,4502,4503,5,876,0,0,4503,4505,3,1066,533,0,4504,4502,1,0,0,
		0,4504,4505,1,0,0,0,4505,363,1,0,0,0,4506,4507,5,35,0,0,4507,4515,5,151,
		0,0,4508,4516,3,1066,533,0,4509,4510,5,9,0,0,4510,4516,3,1066,533,0,4511,
		4512,3,1066,533,0,4512,4513,5,9,0,0,4513,4514,3,1066,533,0,4514,4516,1,
		0,0,0,4515,4508,1,0,0,0,4515,4509,1,0,0,0,4515,4511,1,0,0,0,4516,4543,
		1,0,0,0,4517,4542,3,516,258,0,4518,4542,3,522,261,0,4519,4520,7,39,0,0,
		4520,4521,7,40,0,0,4521,4524,5,112,0,0,4522,4523,5,151,0,0,4523,4525,5,
		886,0,0,4524,4522,1,0,0,0,4524,4525,1,0,0,0,4525,4526,1,0,0,0,4526,4527,
		3,1066,533,0,4527,4528,5,168,0,0,4528,4529,3,1066,533,0,4529,4542,1,0,
		0,0,4530,4531,5,144,0,0,4531,4532,7,40,0,0,4532,4535,5,112,0,0,4533,4534,
		5,151,0,0,4534,4536,5,886,0,0,4535,4533,1,0,0,0,4535,4536,1,0,0,0,4536,
		4537,1,0,0,0,4537,4538,3,1066,533,0,4538,4539,5,75,0,0,4539,4540,3,1066,
		533,0,4540,4542,1,0,0,0,4541,4517,1,0,0,0,4541,4518,1,0,0,0,4541,4519,
		1,0,0,0,4541,4530,1,0,0,0,4542,4545,1,0,0,0,4543,4541,1,0,0,0,4543,4544,
		1,0,0,0,4544,365,1,0,0,0,4545,4543,1,0,0,0,4546,4547,5,35,0,0,4547,4548,
		5,151,0,0,4548,4551,3,1066,533,0,4549,4550,5,9,0,0,4550,4552,3,1066,533,
		0,4551,4549,1,0,0,0,4551,4552,1,0,0,0,4552,367,1,0,0,0,4553,4554,5,4,0,
		0,4554,4555,5,151,0,0,4555,4556,3,1066,533,0,4556,4559,5,835,0,0,4557,
		4558,5,450,0,0,4558,4560,5,886,0,0,4559,4557,1,0,0,0,4559,4560,1,0,0,0,
		4560,4561,1,0,0,0,4561,4564,3,1066,533,0,4562,4563,5,876,0,0,4563,4565,
		5,858,0,0,4564,4562,1,0,0,0,4564,4565,1,0,0,0,4565,369,1,0,0,0,4566,4567,
		5,35,0,0,4567,4568,5,536,0,0,4568,4569,5,485,0,0,4569,4570,5,386,0,0,4570,
		4578,3,1066,533,0,4571,4575,5,75,0,0,4572,4573,3,1066,533,0,4573,4574,
		5,876,0,0,4574,4576,1,0,0,0,4575,4572,1,0,0,0,4575,4576,1,0,0,0,4576,4577,
		1,0,0,0,4577,4579,3,1066,533,0,4578,4571,1,0,0,0,4578,4579,1,0,0,0,4579,
		4582,1,0,0,0,4580,4581,5,9,0,0,4581,4583,3,1066,533,0,4582,4580,1,0,0,
		0,4582,4583,1,0,0,0,4583,371,1,0,0,0,4584,4585,5,35,0,0,4585,4586,5,543,
		0,0,4586,4590,5,772,0,0,4587,4588,3,1066,533,0,4588,4589,5,876,0,0,4589,
		4591,1,0,0,0,4590,4587,1,0,0,0,4590,4591,1,0,0,0,4591,4592,1,0,0,0,4592,
		4633,3,1066,533,0,4593,4595,5,883,0,0,4594,4593,1,0,0,0,4594,4595,1,0,
		0,0,4595,4596,1,0,0,0,4596,4598,5,2,0,0,4597,4599,7,41,0,0,4598,4597,1,
		0,0,0,4598,4599,1,0,0,0,4599,4600,1,0,0,0,4600,4601,5,773,0,0,4601,4602,
		3,1066,533,0,4602,4603,5,876,0,0,4603,4604,3,1066,533,0,4604,4609,5,881,
		0,0,4605,4607,5,883,0,0,4606,4605,1,0,0,0,4606,4607,1,0,0,0,4607,4608,
		1,0,0,0,4608,4610,3,1066,533,0,4609,4606,1,0,0,0,4610,4611,1,0,0,0,4611,
		4609,1,0,0,0,4611,4612,1,0,0,0,4612,4613,1,0,0,0,4613,4614,5,882,0,0,4614,
		4615,5,112,0,0,4615,4616,3,1066,533,0,4616,4617,5,876,0,0,4617,4630,3,
		1066,533,0,4618,4620,5,883,0,0,4619,4618,1,0,0,0,4619,4620,1,0,0,0,4620,
		4621,1,0,0,0,4621,4622,5,205,0,0,4622,4629,7,42,0,0,4623,4625,5,883,0,
		0,4624,4623,1,0,0,0,4624,4625,1,0,0,0,4625,4626,1,0,0,0,4626,4627,5,648,
		0,0,4627,4629,7,43,0,0,4628,4619,1,0,0,0,4628,4624,1,0,0,0,4629,4632,1,
		0,0,0,4630,4628,1,0,0,0,4630,4631,1,0,0,0,4631,4634,1,0,0,0,4632,4630,
		1,0,0,0,4633,4594,1,0,0,0,4634,4635,1,0,0,0,4635,4633,1,0,0,0,4635,4636,
		1,0,0,0,4636,4647,1,0,0,0,4637,4638,5,189,0,0,4638,4639,5,881,0,0,4639,
		4640,5,820,0,0,4640,4641,5,863,0,0,4641,4644,7,7,0,0,4642,4643,5,532,0,
		0,4643,4645,7,7,0,0,4644,4642,1,0,0,0,4644,4645,1,0,0,0,4645,4646,1,0,
		0,0,4646,4648,5,882,0,0,4647,4637,1,0,0,0,4647,4648,1,0,0,0,4648,4652,
		1,0,0,0,4649,4650,5,106,0,0,4650,4651,5,71,0,0,4651,4653,5,139,0,0,4652,
		4649,1,0,0,0,4652,4653,1,0,0,0,4653,373,1,0,0,0,4654,4655,5,4,0,0,4655,
		4659,5,550,0,0,4656,4657,3,1066,533,0,4657,4658,5,876,0,0,4658,4660,1,
		0,0,0,4659,4656,1,0,0,0,4659,4660,1,0,0,0,4660,4661,1,0,0,0,4661,4667,
		3,1066,533,0,4662,4665,5,786,0,0,4663,4664,5,189,0,0,4664,4666,5,857,0,
		0,4665,4663,1,0,0,0,4665,4666,1,0,0,0,4666,4668,1,0,0,0,4667,4662,1,0,
		0,0,4667,4668,1,0,0,0,4668,4672,1,0,0,0,4669,4670,5,711,0,0,4670,4671,
		5,18,0,0,4671,4673,5,857,0,0,4672,4669,1,0,0,0,4672,4673,1,0,0,0,4673,
		4678,1,0,0,0,4674,4675,5,745,0,0,4675,4679,5,857,0,0,4676,4677,5,435,0,
		0,4677,4679,5,745,0,0,4678,4674,1,0,0,0,4678,4676,1,0,0,0,4678,4679,1,
		0,0,0,4679,4684,1,0,0,0,4680,4681,5,733,0,0,4681,4685,5,857,0,0,4682,4683,
		5,435,0,0,4683,4685,5,733,0,0,4684,4680,1,0,0,0,4684,4682,1,0,0,0,4684,
		4685,1,0,0,0,4685,4689,1,0,0,0,4686,4690,5,675,0,0,4687,4688,5,435,0,0,
		4688,4690,5,675,0,0,4689,4686,1,0,0,0,4689,4687,1,0,0,0,4689,4690,1,0,
		0,0,4690,4695,1,0,0,0,4691,4692,5,655,0,0,4692,4696,5,857,0,0,4693,4694,
		5,435,0,0,4694,4696,5,655,0,0,4695,4691,1,0,0,0,4695,4693,1,0,0,0,4695,
		4696,1,0,0,0,4696,375,1,0,0,0,4697,4698,5,35,0,0,4698,4702,5,550,0,0,4699,
		4700,3,1066,533,0,4700,4701,5,876,0,0,4701,4703,1,0,0,0,4702,4699,1,0,
		0,0,4702,4703,1,0,0,0,4703,4704,1,0,0,0,4704,4707,3,1066,533,0,4705,4706,
		5,7,0,0,4706,4708,3,1056,528,0,4707,4705,1,0,0,0,4707,4708,1,0,0,0,4708,
		4712,1,0,0,0,4709,4710,5,822,0,0,4710,4711,5,189,0,0,4711,4713,5,857,0,
		0,4712,4709,1,0,0,0,4712,4713,1,0,0,0,4713,4720,1,0,0,0,4714,4715,5,711,
		0,0,4715,4717,5,18,0,0,4716,4718,5,891,0,0,4717,4716,1,0,0,0,4717,4718,
		1,0,0,0,4718,4719,1,0,0,0,4719,4721,5,857,0,0,4720,4714,1,0,0,0,4720,4721,
		1,0,0,0,4721,4731,1,0,0,0,4722,4727,5,745,0,0,4723,4725,5,891,0,0,4724,
		4723,1,0,0,0,4724,4725,1,0,0,0,4725,4726,1,0,0,0,4726,4728,5,857,0,0,4727,
		4724,1,0,0,0,4727,4728,1,0,0,0,4728,4732,1,0,0,0,4729,4730,5,435,0,0,4730,
		4732,5,745,0,0,4731,4722,1,0,0,0,4731,4729,1,0,0,0,4731,4732,1,0,0,0,4732,
		4742,1,0,0,0,4733,4738,5,733,0,0,4734,4736,5,891,0,0,4735,4734,1,0,0,0,
		4735,4736,1,0,0,0,4736,4737,1,0,0,0,4737,4739,5,857,0,0,4738,4735,1,0,
		0,0,4738,4739,1,0,0,0,4739,4743,1,0,0,0,4740,4741,5,435,0,0,4741,4743,
		5,733,0,0,4742,4733,1,0,0,0,4742,4740,1,0,0,0,4742,4743,1,0,0,0,4743,4747,
		1,0,0,0,4744,4748,5,675,0,0,4745,4746,5,435,0,0,4746,4748,5,675,0,0,4747,
		4744,1,0,0,0,4747,4745,1,0,0,0,4747,4748,1,0,0,0,4748,4755,1,0,0,0,4749,
		4751,5,655,0,0,4750,4752,5,857,0,0,4751,4750,1,0,0,0,4751,4752,1,0,0,0,
		4752,4756,1,0,0,0,4753,4754,5,435,0,0,4754,4756,5,655,0,0,4755,4749,1,
		0,0,0,4755,4753,1,0,0,0,4755,4756,1,0,0,0,4756,377,1,0,0,0,4757,4758,5,
		4,0,0,4758,4759,5,803,0,0,4759,4760,5,219,0,0,4760,4892,3,1066,533,0,4761,
		4806,5,168,0,0,4762,4763,5,69,0,0,4763,4800,5,881,0,0,4764,4766,5,883,
		0,0,4765,4764,1,0,0,0,4765,4766,1,0,0,0,4766,4767,1,0,0,0,4767,4768,5,
		331,0,0,4768,4769,5,863,0,0,4769,4799,5,859,0,0,4770,4772,5,883,0,0,4771,
		4770,1,0,0,0,4771,4772,1,0,0,0,4772,4773,1,0,0,0,4773,4774,5,411,0,0,4774,
		4778,5,863,0,0,4775,4776,5,857,0,0,4776,4779,7,44,0,0,4777,4779,5,607,
		0,0,4778,4775,1,0,0,0,4778,4777,1,0,0,0,4779,4799,1,0,0,0,4780,4782,5,
		883,0,0,4781,4780,1,0,0,0,4781,4782,1,0,0,0,4782,4783,1,0,0,0,4783,4784,
		5,408,0,0,4784,4785,5,863,0,0,4785,4799,7,45,0,0,4786,4788,5,883,0,0,4787,
		4786,1,0,0,0,4787,4788,1,0,0,0,4788,4789,1,0,0,0,4789,4790,5,403,0,0,4790,
		4791,5,863,0,0,4791,4799,5,857,0,0,4792,4794,5,883,0,0,4793,4792,1,0,0,
		0,4793,4794,1,0,0,0,4794,4795,1,0,0,0,4795,4796,5,519,0,0,4796,4797,5,
		863,0,0,4797,4799,7,7,0,0,4798,4765,1,0,0,0,4798,4771,1,0,0,0,4798,4781,
		1,0,0,0,4798,4787,1,0,0,0,4798,4793,1,0,0,0,4799,4802,1,0,0,0,4800,4798,
		1,0,0,0,4800,4801,1,0,0,0,4801,4803,1,0,0,0,4802,4800,1,0,0,0,4803,4807,
		5,882,0,0,4804,4807,5,215,0,0,4805,4807,5,544,0,0,4806,4762,1,0,0,0,4806,
		4804,1,0,0,0,4806,4805,1,0,0,0,4807,4809,1,0,0,0,4808,4761,1,0,0,0,4808,
		4809,1,0,0,0,4809,4836,1,0,0,0,4810,4811,5,189,0,0,4811,4832,5,881,0,0,
		4812,4814,5,883,0,0,4813,4812,1,0,0,0,4813,4814,1,0,0,0,4814,4815,1,0,
		0,0,4815,4816,5,490,0,0,4816,4817,5,863,0,0,4817,4831,5,857,0,0,4818,4820,
		5,883,0,0,4819,4818,1,0,0,0,4819,4820,1,0,0,0,4820,4821,1,0,0,0,4821,4822,
		5,760,0,0,4822,4823,5,863,0,0,4823,4831,7,46,0,0,4824,4826,5,883,0,0,4825,
		4824,1,0,0,0,4825,4826,1,0,0,0,4826,4827,1,0,0,0,4827,4828,5,820,0,0,4828,
		4829,5,863,0,0,4829,4831,7,7,0,0,4830,4813,1,0,0,0,4830,4819,1,0,0,0,4830,
		4825,1,0,0,0,4831,4834,1,0,0,0,4832,4830,1,0,0,0,4832,4833,1,0,0,0,4833,
		4835,1,0,0,0,4834,4832,1,0,0,0,4835,4837,5,882,0,0,4836,4810,1,0,0,0,4836,
		4837,1,0,0,0,4837,4884,1,0,0,0,4838,4882,5,187,0,0,4839,4841,5,883,0,0,
		4840,4839,1,0,0,0,4840,4841,1,0,0,0,4841,4843,1,0,0,0,4842,4844,5,106,
		0,0,4843,4842,1,0,0,0,4843,4844,1,0,0,0,4844,4845,1,0,0,0,4845,4857,3,
		1066,533,0,4846,4858,5,863,0,0,4847,4848,5,865,0,0,4848,4858,5,864,0,0,
		4849,4850,5,866,0,0,4850,4858,5,863,0,0,4851,4858,5,864,0,0,4852,4853,
		5,864,0,0,4853,4858,5,863,0,0,4854,4858,5,865,0,0,4855,4856,5,865,0,0,
		4856,4858,5,863,0,0,4857,4846,1,0,0,0,4857,4847,1,0,0,0,4857,4849,1,0,
		0,0,4857,4851,1,0,0,0,4857,4852,1,0,0,0,4857,4854,1,0,0,0,4857,4855,1,
		0,0,0,4858,4859,1,0,0,0,4859,4860,7,26,0,0,4860,4883,1,0,0,0,4861,4863,
		5,883,0,0,4862,4861,1,0,0,0,4862,4863,1,0,0,0,4863,4864,1,0,0,0,4864,4866,
		7,31,0,0,4865,4867,5,106,0,0,4866,4865,1,0,0,0,4866,4867,1,0,0,0,4867,
		4879,1,0,0,0,4868,4880,5,863,0,0,4869,4870,5,865,0,0,4870,4880,5,864,0,
		0,4871,4872,5,866,0,0,4872,4880,5,863,0,0,4873,4880,5,864,0,0,4874,4875,
		5,864,0,0,4875,4880,5,863,0,0,4876,4880,5,865,0,0,4877,4878,5,865,0,0,
		4878,4880,5,863,0,0,4879,4868,1,0,0,0,4879,4869,1,0,0,0,4879,4871,1,0,
		0,0,4879,4873,1,0,0,0,4879,4874,1,0,0,0,4879,4876,1,0,0,0,4879,4877,1,
		0,0,0,4880,4881,1,0,0,0,4881,4883,7,26,0,0,4882,4840,1,0,0,0,4882,4862,
		1,0,0,0,4883,4885,1,0,0,0,4884,4838,1,0,0,0,4884,4885,1,0,0,0,4885,4893,
		1,0,0,0,4886,4887,5,511,0,0,4887,4893,5,187,0,0,4888,4889,5,425,0,0,4889,
		4890,5,428,0,0,4890,4891,5,863,0,0,4891,4893,3,1066,533,0,4892,4808,1,
		0,0,0,4892,4886,1,0,0,0,4892,4888,1,0,0,0,4893,379,1,0,0,0,4894,4895,5,
		35,0,0,4895,4896,5,803,0,0,4896,4897,5,219,0,0,4897,5035,3,1066,533,0,
		4898,4943,5,168,0,0,4899,4900,5,69,0,0,4900,4937,5,881,0,0,4901,4903,5,
		883,0,0,4902,4901,1,0,0,0,4902,4903,1,0,0,0,4903,4904,1,0,0,0,4904,4905,
		5,331,0,0,4905,4906,5,863,0,0,4906,4936,5,859,0,0,4907,4909,5,883,0,0,
		4908,4907,1,0,0,0,4908,4909,1,0,0,0,4909,4910,1,0,0,0,4910,4911,5,411,
		0,0,4911,4915,5,863,0,0,4912,4913,5,857,0,0,4913,4916,7,44,0,0,4914,4916,
		5,607,0,0,4915,4912,1,0,0,0,4915,4914,1,0,0,0,4916,4936,1,0,0,0,4917,4919,
		5,883,0,0,4918,4917,1,0,0,0,4918,4919,1,0,0,0,4919,4920,1,0,0,0,4920,4921,
		5,408,0,0,4921,4922,5,863,0,0,4922,4936,7,45,0,0,4923,4925,5,883,0,0,4924,
		4923,1,0,0,0,4924,4925,1,0,0,0,4925,4926,1,0,0,0,4926,4927,5,403,0,0,4927,
		4928,5,863,0,0,4928,4936,5,857,0,0,4929,4931,5,883,0,0,4930,4929,1,0,0,
		0,4930,4931,1,0,0,0,4931,4932,1,0,0,0,4932,4933,5,519,0,0,4933,4934,5,
		863,0,0,4934,4936,7,7,0,0,4935,4902,1,0,0,0,4935,4908,1,0,0,0,4935,4918,
		1,0,0,0,4935,4924,1,0,0,0,4935,4930,1,0,0,0,4936,4939,1,0,0,0,4937,4935,
		1,0,0,0,4937,4938,1,0,0,0,4938,4940,1,0,0,0,4939,4937,1,0,0,0,4940,4944,
		5,882,0,0,4941,4944,5,215,0,0,4942,4944,5,544,0,0,4943,4899,1,0,0,0,4943,
		4941,1,0,0,0,4943,4942,1,0,0,0,4944,4946,1,0,0,0,4945,4898,1,0,0,0,4945,
		4946,1,0,0,0,4946,4979,1,0,0,0,4947,4948,5,189,0,0,4948,4975,5,881,0,0,
		4949,4951,5,883,0,0,4950,4949,1,0,0,0,4950,4951,1,0,0,0,4951,4952,1,0,
		0,0,4952,4953,5,490,0,0,4953,4954,5,863,0,0,4954,4974,5,857,0,0,4955,4957,
		5,883,0,0,4956,4955,1,0,0,0,4956,4957,1,0,0,0,4957,4958,1,0,0,0,4958,4959,
		5,760,0,0,4959,4960,5,863,0,0,4960,4974,7,46,0,0,4961,4963,5,883,0,0,4962,
		4961,1,0,0,0,4962,4963,1,0,0,0,4963,4964,1,0,0,0,4964,4965,5,820,0,0,4965,
		4966,5,863,0,0,4966,4974,7,7,0,0,4967,4969,5,883,0,0,4968,4967,1,0,0,0,
		4968,4969,1,0,0,0,4969,4970,1,0,0,0,4970,4971,5,220,0,0,4971,4972,5,863,
		0,0,4972,4974,3,1066,533,0,4973,4950,1,0,0,0,4973,4956,1,0,0,0,4973,4962,
		1,0,0,0,4973,4968,1,0,0,0,4974,4977,1,0,0,0,4975,4973,1,0,0,0,4975,4976,
		1,0,0,0,4976,4978,1,0,0,0,4977,4975,1,0,0,0,4978,4980,5,882,0,0,4979,4947,
		1,0,0,0,4979,4980,1,0,0,0,4980,5027,1,0,0,0,4981,5025,5,187,0,0,4982,4984,
		5,883,0,0,4983,4982,1,0,0,0,4983,4984,1,0,0,0,4984,4986,1,0,0,0,4985,4987,
		5,106,0,0,4986,4985,1,0,0,0,4986,4987,1,0,0,0,4987,4988,1,0,0,0,4988,5000,
		3,1066,533,0,4989,5001,5,863,0,0,4990,4991,5,865,0,0,4991,5001,5,864,0,
		0,4992,4993,5,866,0,0,4993,5001,5,863,0,0,4994,5001,5,864,0,0,4995,4996,
		5,864,0,0,4996,5001,5,863,0,0,4997,5001,5,865,0,0,4998,4999,5,865,0,0,
		4999,5001,5,863,0,0,5000,4989,1,0,0,0,5000,4990,1,0,0,0,5000,4992,1,0,
		0,0,5000,4994,1,0,0,0,5000,4995,1,0,0,0,5000,4997,1,0,0,0,5000,4998,1,
		0,0,0,5001,5002,1,0,0,0,5002,5003,7,26,0,0,5003,5026,1,0,0,0,5004,5006,
		5,883,0,0,5005,5004,1,0,0,0,5005,5006,1,0,0,0,5006,5007,1,0,0,0,5007,5009,
		7,31,0,0,5008,5010,5,106,0,0,5009,5008,1,0,0,0,5009,5010,1,0,0,0,5010,
		5022,1,0,0,0,5011,5023,5,863,0,0,5012,5013,5,865,0,0,5013,5023,5,864,0,
		0,5014,5015,5,866,0,0,5015,5023,5,863,0,0,5016,5023,5,864,0,0,5017,5018,
		5,864,0,0,5018,5023,5,863,0,0,5019,5023,5,865,0,0,5020,5021,5,865,0,0,
		5021,5023,5,863,0,0,5022,5011,1,0,0,0,5022,5012,1,0,0,0,5022,5014,1,0,
		0,0,5022,5016,1,0,0,0,5022,5017,1,0,0,0,5022,5019,1,0,0,0,5022,5020,1,
		0,0,0,5023,5024,1,0,0,0,5024,5026,7,26,0,0,5025,4983,1,0,0,0,5025,5005,
		1,0,0,0,5026,5028,1,0,0,0,5027,4981,1,0,0,0,5027,5028,1,0,0,0,5028,5036,
		1,0,0,0,5029,5030,5,511,0,0,5030,5036,5,187,0,0,5031,5032,5,425,0,0,5032,
		5033,5,428,0,0,5033,5034,5,863,0,0,5034,5036,3,1066,533,0,5035,4945,1,
		0,0,0,5035,5029,1,0,0,0,5035,5031,1,0,0,0,5036,381,1,0,0,0,5037,5038,5,
		4,0,0,5038,5039,5,803,0,0,5039,5040,5,219,0,0,5040,5041,5,814,0,0,5041,
		5046,3,1066,533,0,5042,5043,5,71,0,0,5043,5044,5,803,0,0,5044,5045,5,219,
		0,0,5045,5047,3,1066,533,0,5046,5042,1,0,0,0,5046,5047,1,0,0,0,5047,5055,
		1,0,0,0,5048,5049,7,23,0,0,5049,5050,5,881,0,0,5050,5051,3,1066,533,0,
		5051,5052,5,882,0,0,5052,5054,1,0,0,0,5053,5048,1,0,0,0,5054,5057,1,0,
		0,0,5055,5053,1,0,0,0,5055,5056,1,0,0,0,5056,5064,1,0,0,0,5057,5055,1,
		0,0,0,5058,5059,5,189,0,0,5059,5060,5,881,0,0,5060,5061,5,820,0,0,5061,
		5062,5,863,0,0,5062,5063,7,7,0,0,5063,5065,5,882,0,0,5064,5058,1,0,0,0,
		5064,5065,1,0,0,0,5065,383,1,0,0,0,5066,5067,5,35,0,0,5067,5068,5,803,
		0,0,5068,5069,5,219,0,0,5069,5070,5,814,0,0,5070,5075,3,1066,533,0,5071,
		5072,5,71,0,0,5072,5073,5,803,0,0,5073,5074,5,219,0,0,5074,5076,3,1066,
		533,0,5075,5071,1,0,0,0,5075,5076,1,0,0,0,5076,5084,1,0,0,0,5077,5078,
		5,2,0,0,5078,5079,5,881,0,0,5079,5080,3,1066,533,0,5080,5081,5,882,0,0,
		5081,5083,1,0,0,0,5082,5077,1,0,0,0,5083,5086,1,0,0,0,5084,5082,1,0,0,
		0,5084,5085,1,0,0,0,5085,5093,1,0,0,0,5086,5084,1,0,0,0,5087,5088,5,189,
		0,0,5088,5089,5,881,0,0,5089,5090,5,820,0,0,5090,5091,5,863,0,0,5091,5092,
		7,7,0,0,5092,5094,5,882,0,0,5093,5087,1,0,0,0,5093,5094,1,0,0,0,5094,385,
		1,0,0,0,5095,5096,5,4,0,0,5096,5097,5,803,0,0,5097,5098,5,667,0,0,5098,
		5204,5,158,0,0,5099,5100,5,774,0,0,5100,5136,5,204,0,0,5101,5102,5,268,
		0,0,5102,5118,5,863,0,0,5103,5119,5,221,0,0,5104,5106,5,883,0,0,5105,5104,
		1,0,0,0,5105,5106,1,0,0,0,5106,5107,1,0,0,0,5107,5115,5,857,0,0,5108,5110,
		5,883,0,0,5109,5108,1,0,0,0,5109,5110,1,0,0,0,5110,5111,1,0,0,0,5111,5112,
		5,857,0,0,5112,5113,5,168,0,0,5113,5115,5,857,0,0,5114,5105,1,0,0,0,5114,
		5109,1,0,0,0,5115,5116,1,0,0,0,5116,5114,1,0,0,0,5116,5117,1,0,0,0,5117,
		5119,1,0,0,0,5118,5103,1,0,0,0,5118,5114,1,0,0,0,5119,5137,1,0,0,0,5120,
		5121,5,447,0,0,5121,5132,5,863,0,0,5122,5124,5,883,0,0,5123,5122,1,0,0,
		0,5123,5124,1,0,0,0,5124,5125,1,0,0,0,5125,5133,5,857,0,0,5126,5128,5,
		883,0,0,5127,5126,1,0,0,0,5127,5128,1,0,0,0,5128,5129,1,0,0,0,5129,5130,
		5,857,0,0,5130,5131,5,168,0,0,5131,5133,5,857,0,0,5132,5123,1,0,0,0,5132,
		5127,1,0,0,0,5133,5134,1,0,0,0,5134,5132,1,0,0,0,5134,5135,1,0,0,0,5135,
		5137,1,0,0,0,5136,5101,1,0,0,0,5136,5120,1,0,0,0,5137,5205,1,0,0,0,5138,
		5139,5,683,0,0,5139,5155,5,727,0,0,5140,5156,5,112,0,0,5141,5156,5,110,
		0,0,5142,5143,5,469,0,0,5143,5144,5,863,0,0,5144,5156,7,47,0,0,5145,5146,
		5,737,0,0,5146,5150,5,863,0,0,5147,5148,5,857,0,0,5148,5151,5,412,0,0,
		5149,5151,5,47,0,0,5150,5147,1,0,0,0,5150,5149,1,0,0,0,5151,5156,1,0,0,
		0,5152,5153,5,403,0,0,5153,5154,5,863,0,0,5154,5156,7,48,0,0,5155,5140,
		1,0,0,0,5155,5141,1,0,0,0,5155,5142,1,0,0,0,5155,5145,1,0,0,0,5155,5152,
		1,0,0,0,5156,5205,1,0,0,0,5157,5158,5,697,0,0,5158,5159,5,663,0,0,5159,
		5177,5,485,0,0,5160,5161,5,841,0,0,5161,5162,5,863,0,0,5162,5178,7,47,
		0,0,5163,5164,5,817,0,0,5164,5165,5,863,0,0,5165,5178,7,47,0,0,5166,5167,
		5,818,0,0,5167,5168,5,863,0,0,5168,5178,7,47,0,0,5169,5170,5,819,0,0,5170,
		5178,7,47,0,0,5171,5172,5,698,0,0,5172,5173,5,863,0,0,5173,5178,7,47,0,
		0,5174,5175,5,706,0,0,5175,5176,5,863,0,0,5176,5178,7,48,0,0,5177,5160,
		1,0,0,0,5177,5163,1,0,0,0,5177,5166,1,0,0,0,5177,5169,1,0,0,0,5177,5171,
		1,0,0,0,5177,5174,1,0,0,0,5178,5205,1,0,0,0,5179,5180,5,353,0,0,5180,5181,
		5,663,0,0,5181,5182,5,669,0,0,5182,5183,5,863,0,0,5183,5205,7,49,0,0,5184,
		5185,5,653,0,0,5185,5186,5,474,0,0,5186,5199,5,695,0,0,5187,5188,5,112,
		0,0,5188,5189,5,881,0,0,5189,5190,5,330,0,0,5190,5191,5,863,0,0,5191,5192,
		5,859,0,0,5192,5193,5,883,0,0,5193,5194,5,559,0,0,5194,5195,5,863,0,0,
		5195,5196,5,857,0,0,5196,5197,7,50,0,0,5197,5200,5,882,0,0,5198,5200,5,
		110,0,0,5199,5187,1,0,0,0,5199,5198,1,0,0,0,5200,5205,1,0,0,0,5201,5202,
		5,158,0,0,5202,5203,5,812,0,0,5203,5205,7,7,0,0,5204,5099,1,0,0,0,5204,
		5138,1,0,0,0,5204,5157,1,0,0,0,5204,5179,1,0,0,0,5204,5184,1,0,0,0,5204,
		5201,1,0,0,0,5205,387,1,0,0,0,5206,5207,5,4,0,0,5207,5208,5,803,0,0,5208,
		5209,5,791,0,0,5209,5217,3,1066,533,0,5210,5211,7,23,0,0,5211,5212,5,741,
		0,0,5212,5218,3,1066,533,0,5213,5214,5,189,0,0,5214,5215,5,428,0,0,5215,
		5216,5,863,0,0,5216,5218,3,1066,533,0,5217,5210,1,0,0,0,5217,5213,1,0,
		0,0,5218,389,1,0,0,0,5219,5220,5,35,0,0,5220,5221,5,803,0,0,5221,5222,
		5,791,0,0,5222,5225,3,1066,533,0,5223,5224,5,9,0,0,5224,5226,3,1066,533,
		0,5225,5223,1,0,0,0,5225,5226,1,0,0,0,5226,391,1,0,0,0,5227,5228,5,4,0,
		0,5228,5229,5,803,0,0,5229,5230,5,791,0,0,5230,5231,3,1066,533,0,5231,
		5232,7,23,0,0,5232,5233,5,741,0,0,5233,5234,3,1066,533,0,5234,393,1,0,
		0,0,5235,5236,5,4,0,0,5236,5237,5,804,0,0,5237,5245,3,1066,533,0,5238,
		5239,5,112,0,0,5239,5240,5,489,0,0,5240,5241,3,1066,533,0,5241,5242,5,
		876,0,0,5242,5243,1,0,0,0,5243,5244,3,1066,533,0,5244,5246,1,0,0,0,5245,
		5238,1,0,0,0,5245,5246,1,0,0,0,5246,5254,1,0,0,0,5247,5249,5,883,0,0,5248,
		5247,1,0,0,0,5248,5249,1,0,0,0,5249,5250,1,0,0,0,5250,5251,7,23,0,0,5251,
		5253,3,1066,533,0,5252,5248,1,0,0,0,5253,5256,1,0,0,0,5254,5252,1,0,0,
		0,5254,5255,1,0,0,0,5255,395,1,0,0,0,5256,5254,1,0,0,0,5257,5258,5,35,
		0,0,5258,5259,5,804,0,0,5259,5262,3,1066,533,0,5260,5261,5,9,0,0,5261,
		5263,3,1066,533,0,5262,5260,1,0,0,0,5262,5263,1,0,0,0,5263,5264,1,0,0,
		0,5264,5265,5,112,0,0,5265,5269,5,489,0,0,5266,5267,3,1066,533,0,5267,
		5268,5,876,0,0,5268,5270,1,0,0,0,5269,5266,1,0,0,0,5269,5270,1,0,0,0,5270,
		5271,1,0,0,0,5271,5285,3,1066,533,0,5272,5280,5,881,0,0,5273,5275,5,883,
		0,0,5274,5273,1,0,0,0,5274,5275,1,0,0,0,5275,5278,1,0,0,0,5276,5279,3,
		1066,533,0,5277,5279,5,47,0,0,5278,5276,1,0,0,0,5278,5277,1,0,0,0,5279,
		5281,1,0,0,0,5280,5274,1,0,0,0,5281,5282,1,0,0,0,5282,5280,1,0,0,0,5282,
		5283,1,0,0,0,5283,5284,1,0,0,0,5284,5286,5,882,0,0,5285,5272,1,0,0,0,5285,
		5286,1,0,0,0,5286,397,1,0,0,0,5287,5288,5,4,0,0,5288,5289,5,804,0,0,5289,
		5290,5,730,0,0,5290,5312,5,95,0,0,5291,5293,5,337,0,0,5292,5291,1,0,0,
		0,5292,5293,1,0,0,0,5293,5294,1,0,0,0,5294,5313,5,779,0,0,5295,5310,5,
		189,0,0,5296,5297,5,453,0,0,5297,5298,5,863,0,0,5298,5299,5,859,0,0,5299,
		5300,5,883,0,0,5300,5301,5,759,0,0,5301,5302,5,863,0,0,5302,5311,5,859,
		0,0,5303,5304,5,430,0,0,5304,5305,5,863,0,0,5305,5306,5,859,0,0,5306,5307,
		5,883,0,0,5307,5308,5,432,0,0,5308,5309,5,863,0,0,5309,5311,5,859,0,0,
		5310,5296,1,0,0,0,5310,5303,1,0,0,0,5310,5311,1,0,0,0,5311,5313,1,0,0,
		0,5312,5292,1,0,0,0,5312,5295,1,0,0,0,5313,399,1,0,0,0,5314,5315,5,4,0,
		0,5315,5316,5,579,0,0,5316,5317,5,95,0,0,5317,5318,3,1066,533,0,5318,5319,
		7,23,0,0,5319,5320,5,313,0,0,5320,5332,5,18,0,0,5321,5322,5,657,0,0,5322,
		5333,3,1066,533,0,5323,5324,5,765,0,0,5324,5325,5,863,0,0,5325,5333,5,
		859,0,0,5326,5327,5,579,0,0,5327,5328,5,95,0,0,5328,5333,3,1066,533,0,
		5329,5330,5,641,0,0,5330,5331,5,95,0,0,5331,5333,3,1066,533,0,5332,5321,
		1,0,0,0,5332,5323,1,0,0,0,5332,5326,1,0,0,0,5332,5329,1,0,0,0,5333,401,
		1,0,0,0,5334,5335,5,35,0,0,5335,5339,5,581,0,0,5336,5337,3,1066,533,0,
		5337,5338,5,876,0,0,5338,5340,1,0,0,0,5339,5336,1,0,0,0,5339,5340,1,0,
		0,0,5340,5341,1,0,0,0,5341,5342,3,1066,533,0,5342,5369,5,71,0,0,5343,5344,
		3,1066,533,0,5344,5345,5,876,0,0,5345,5347,1,0,0,0,5346,5343,1,0,0,0,5346,
		5347,1,0,0,0,5347,5351,1,0,0,0,5348,5349,3,1066,533,0,5349,5350,5,876,
		0,0,5350,5352,1,0,0,0,5351,5348,1,0,0,0,5351,5352,1,0,0,0,5352,5356,1,
		0,0,0,5353,5354,3,1066,533,0,5354,5355,5,876,0,0,5355,5357,1,0,0,0,5356,
		5353,1,0,0,0,5356,5357,1,0,0,0,5357,5358,1,0,0,0,5358,5370,3,1066,533,
		0,5359,5360,3,1066,533,0,5360,5361,5,876,0,0,5361,5363,1,0,0,0,5362,5359,
		1,0,0,0,5362,5363,1,0,0,0,5363,5367,1,0,0,0,5364,5365,3,1066,533,0,5365,
		5366,5,876,0,0,5366,5368,1,0,0,0,5367,5364,1,0,0,0,5367,5368,1,0,0,0,5368,
		5370,1,0,0,0,5369,5346,1,0,0,0,5369,5362,1,0,0,0,5370,403,1,0,0,0,5371,
		5372,5,4,0,0,5372,5373,5,181,0,0,5373,5374,3,1066,533,0,5374,5425,5,189,
		0,0,5375,5377,5,883,0,0,5376,5375,1,0,0,0,5376,5377,1,0,0,0,5377,5378,
		1,0,0,0,5378,5379,5,428,0,0,5379,5380,5,863,0,0,5380,5426,3,1066,533,0,
		5381,5383,5,883,0,0,5382,5381,1,0,0,0,5382,5383,1,0,0,0,5383,5384,1,0,
		0,0,5384,5385,5,682,0,0,5385,5388,5,863,0,0,5386,5389,3,1066,533,0,5387,
		5389,5,107,0,0,5388,5386,1,0,0,0,5388,5387,1,0,0,0,5389,5426,1,0,0,0,5390,
		5392,5,883,0,0,5391,5390,1,0,0,0,5391,5392,1,0,0,0,5392,5393,1,0,0,0,5393,
		5394,5,394,0,0,5394,5395,5,863,0,0,5395,5426,3,1066,533,0,5396,5398,5,
		883,0,0,5397,5396,1,0,0,0,5397,5398,1,0,0,0,5398,5399,1,0,0,0,5399,5400,
		5,765,0,0,5400,5401,5,863,0,0,5401,5405,5,859,0,0,5402,5403,5,759,0,0,
		5403,5404,5,863,0,0,5404,5406,5,859,0,0,5405,5402,1,0,0,0,5406,5407,1,
		0,0,0,5407,5405,1,0,0,0,5407,5408,1,0,0,0,5408,5426,1,0,0,0,5409,5411,
		5,883,0,0,5410,5409,1,0,0,0,5410,5411,1,0,0,0,5411,5412,1,0,0,0,5412,5413,
		5,288,0,0,5413,5417,5,863,0,0,5414,5418,5,750,0,0,5415,5418,5,857,0,0,
		5416,5418,3,1066,533,0,5417,5414,1,0,0,0,5417,5415,1,0,0,0,5417,5416,1,
		0,0,0,5418,5426,1,0,0,0,5419,5421,5,883,0,0,5420,5419,1,0,0,0,5420,5421,
		1,0,0,0,5421,5422,1,0,0,0,5422,5423,5,208,0,0,5423,5424,5,863,0,0,5424,
		5426,7,7,0,0,5425,5376,1,0,0,0,5425,5382,1,0,0,0,5425,5391,1,0,0,0,5425,
		5397,1,0,0,0,5425,5410,1,0,0,0,5425,5420,1,0,0,0,5426,5427,1,0,0,0,5427,
		5425,1,0,0,0,5427,5428,1,0,0,0,5428,405,1,0,0,0,5429,5430,5,35,0,0,5430,
		5431,5,181,0,0,5431,5435,3,1066,533,0,5432,5433,7,51,0,0,5433,5434,5,394,
		0,0,5434,5436,3,1066,533,0,5435,5432,1,0,0,0,5435,5436,1,0,0,0,5436,5455,
		1,0,0,0,5437,5452,5,189,0,0,5438,5440,5,883,0,0,5439,5438,1,0,0,0,5439,
		5440,1,0,0,0,5440,5441,1,0,0,0,5441,5442,5,682,0,0,5442,5443,5,863,0,0,
		5443,5451,3,1066,533,0,5444,5446,5,883,0,0,5445,5444,1,0,0,0,5445,5446,
		1,0,0,0,5446,5447,1,0,0,0,5447,5448,5,208,0,0,5448,5449,5,863,0,0,5449,
		5451,7,7,0,0,5450,5439,1,0,0,0,5450,5445,1,0,0,0,5451,5454,1,0,0,0,5452,
		5450,1,0,0,0,5452,5453,1,0,0,0,5453,5456,1,0,0,0,5454,5452,1,0,0,0,5455,
		5437,1,0,0,0,5455,5456,1,0,0,0,5456,5576,1,0,0,0,5457,5458,5,35,0,0,5458,
		5539,5,181,0,0,5459,5494,3,1066,533,0,5460,5491,5,189,0,0,5461,5463,5,
		883,0,0,5462,5461,1,0,0,0,5462,5463,1,0,0,0,5463,5464,1,0,0,0,5464,5465,
		5,682,0,0,5465,5466,5,863,0,0,5466,5490,3,1066,533,0,5467,5469,5,883,0,
		0,5468,5467,1,0,0,0,5468,5469,1,0,0,0,5469,5470,1,0,0,0,5470,5471,5,288,
		0,0,5471,5475,5,863,0,0,5472,5476,5,750,0,0,5473,5476,5,857,0,0,5474,5476,
		3,1066,533,0,5475,5472,1,0,0,0,5475,5473,1,0,0,0,5475,5474,1,0,0,0,5476,
		5490,1,0,0,0,5477,5479,5,883,0,0,5478,5477,1,0,0,0,5478,5479,1,0,0,0,5479,
		5480,1,0,0,0,5480,5481,5,810,0,0,5481,5482,5,863,0,0,5482,5490,5,860,0,
		0,5483,5485,5,883,0,0,5484,5483,1,0,0,0,5484,5485,1,0,0,0,5485,5486,1,
		0,0,0,5486,5487,5,208,0,0,5487,5488,5,863,0,0,5488,5490,7,7,0,0,5489,5462,
		1,0,0,0,5489,5468,1,0,0,0,5489,5478,1,0,0,0,5489,5484,1,0,0,0,5490,5493,
		1,0,0,0,5491,5489,1,0,0,0,5491,5492,1,0,0,0,5492,5495,1,0,0,0,5493,5491,
		1,0,0,0,5494,5460,1,0,0,0,5494,5495,1,0,0,0,5495,5540,1,0,0,0,5496,5497,
		3,1066,533,0,5497,5498,5,189,0,0,5498,5499,5,765,0,0,5499,5500,5,863,0,
		0,5500,5531,5,859,0,0,5501,5503,5,883,0,0,5502,5501,1,0,0,0,5502,5503,
		1,0,0,0,5503,5504,1,0,0,0,5504,5505,5,682,0,0,5505,5506,5,863,0,0,5506,
		5530,3,1066,533,0,5507,5509,5,883,0,0,5508,5507,1,0,0,0,5508,5509,1,0,
		0,0,5509,5510,1,0,0,0,5510,5511,5,288,0,0,5511,5515,5,863,0,0,5512,5516,
		5,750,0,0,5513,5516,5,857,0,0,5514,5516,3,1066,533,0,5515,5512,1,0,0,0,
		5515,5513,1,0,0,0,5515,5514,1,0,0,0,5516,5530,1,0,0,0,5517,5519,5,883,
		0,0,5518,5517,1,0,0,0,5518,5519,1,0,0,0,5519,5520,1,0,0,0,5520,5521,5,
		810,0,0,5521,5522,5,863,0,0,5522,5530,5,860,0,0,5523,5525,5,883,0,0,5524,
		5523,1,0,0,0,5524,5525,1,0,0,0,5525,5526,1,0,0,0,5526,5527,5,208,0,0,5527,
		5528,5,863,0,0,5528,5530,7,7,0,0,5529,5502,1,0,0,0,5529,5508,1,0,0,0,5529,
		5518,1,0,0,0,5529,5524,1,0,0,0,5530,5533,1,0,0,0,5531,5529,1,0,0,0,5531,
		5532,1,0,0,0,5532,5540,1,0,0,0,5533,5531,1,0,0,0,5534,5535,3,1066,533,
		0,5535,5536,5,75,0,0,5536,5537,5,67,0,0,5537,5538,5,486,0,0,5538,5540,
		1,0,0,0,5539,5459,1,0,0,0,5539,5496,1,0,0,0,5539,5534,1,0,0,0,5540,5576,
		1,0,0,0,5541,5542,5,35,0,0,5542,5543,5,181,0,0,5543,5570,3,1066,533,0,
		5544,5545,5,845,0,0,5545,5560,5,394,0,0,5546,5548,5,883,0,0,5547,5546,
		1,0,0,0,5547,5548,1,0,0,0,5548,5549,1,0,0,0,5549,5550,5,682,0,0,5550,5551,
		5,863,0,0,5551,5559,3,1066,533,0,5552,5554,5,883,0,0,5553,5552,1,0,0,0,
		5553,5554,1,0,0,0,5554,5555,1,0,0,0,5555,5556,5,208,0,0,5556,5557,5,863,
		0,0,5557,5559,7,7,0,0,5558,5547,1,0,0,0,5558,5553,1,0,0,0,5559,5562,1,
		0,0,0,5560,5558,1,0,0,0,5560,5561,1,0,0,0,5561,5571,1,0,0,0,5562,5560,
		1,0,0,0,5563,5564,7,51,0,0,5564,5565,5,657,0,0,5565,5571,3,1066,533,0,
		5566,5567,7,51,0,0,5567,5568,5,641,0,0,5568,5569,5,95,0,0,5569,5571,3,
		1066,533,0,5570,5544,1,0,0,0,5570,5563,1,0,0,0,5570,5566,1,0,0,0,5571,
		5576,1,0,0,0,5572,5573,5,35,0,0,5573,5574,5,181,0,0,5574,5576,3,1066,533,
		0,5575,5429,1,0,0,0,5575,5457,1,0,0,0,5575,5541,1,0,0,0,5575,5572,1,0,
		0,0,5576,407,1,0,0,0,5577,5578,5,35,0,0,5578,5579,5,181,0,0,5579,5585,
		3,1066,533,0,5580,5581,7,51,0,0,5581,5582,5,394,0,0,5582,5586,3,1066,533,
		0,5583,5584,5,845,0,0,5584,5586,5,394,0,0,5585,5580,1,0,0,0,5585,5583,
		1,0,0,0,5585,5586,1,0,0,0,5586,5591,1,0,0,0,5587,5588,5,189,0,0,5588,5589,
		5,682,0,0,5589,5590,5,863,0,0,5590,5592,3,1066,533,0,5591,5587,1,0,0,0,
		5591,5592,1,0,0,0,5592,5606,1,0,0,0,5593,5594,5,35,0,0,5594,5595,5,181,
		0,0,5595,5596,3,1066,533,0,5596,5597,5,75,0,0,5597,5598,5,67,0,0,5598,
		5603,5,486,0,0,5599,5600,5,189,0,0,5600,5601,5,682,0,0,5601,5602,5,863,
		0,0,5602,5604,3,1066,533,0,5603,5599,1,0,0,0,5603,5604,1,0,0,0,5604,5606,
		1,0,0,0,5605,5577,1,0,0,0,5605,5593,1,0,0,0,5606,409,1,0,0,0,5607,5608,
		5,4,0,0,5608,5609,5,181,0,0,5609,5610,3,1066,533,0,5610,5635,5,189,0,0,
		5611,5613,5,883,0,0,5612,5611,1,0,0,0,5612,5613,1,0,0,0,5613,5614,1,0,
		0,0,5614,5615,5,428,0,0,5615,5616,5,863,0,0,5616,5636,3,1066,533,0,5617,
		5619,5,883,0,0,5618,5617,1,0,0,0,5618,5619,1,0,0,0,5619,5620,1,0,0,0,5620,
		5621,5,682,0,0,5621,5622,5,863,0,0,5622,5636,3,1066,533,0,5623,5625,5,
		883,0,0,5624,5623,1,0,0,0,5624,5625,1,0,0,0,5625,5626,1,0,0,0,5626,5627,
		5,394,0,0,5627,5628,5,863,0,0,5628,5636,3,1066,533,0,5629,5631,5,883,0,
		0,5630,5629,1,0,0,0,5630,5631,1,0,0,0,5631,5632,1,0,0,0,5632,5633,5,208,
		0,0,5633,5634,5,863,0,0,5634,5636,7,7,0,0,5635,5612,1,0,0,0,5635,5618,
		1,0,0,0,5635,5624,1,0,0,0,5635,5630,1,0,0,0,5636,5637,1,0,0,0,5637,5635,
		1,0,0,0,5637,5638,1,0,0,0,5638,411,1,0,0,0,5639,5640,5,4,0,0,5640,5641,
		5,623,0,0,5641,5644,5,80,0,0,5642,5645,3,1066,533,0,5643,5645,5,286,0,
		0,5644,5642,1,0,0,0,5644,5643,1,0,0,0,5645,5677,1,0,0,0,5646,5647,5,189,
		0,0,5647,5672,5,881,0,0,5648,5649,5,363,0,0,5649,5650,5,863,0,0,5650,5673,
		7,52,0,0,5651,5653,5,883,0,0,5652,5651,1,0,0,0,5652,5653,1,0,0,0,5653,
		5654,1,0,0,0,5654,5655,5,516,0,0,5655,5656,5,863,0,0,5656,5673,5,857,0,
		0,5657,5659,5,883,0,0,5658,5657,1,0,0,0,5658,5659,1,0,0,0,5659,5660,1,
		0,0,0,5660,5661,5,515,0,0,5661,5662,5,863,0,0,5662,5673,5,857,0,0,5663,
		5664,5,517,0,0,5664,5665,5,863,0,0,5665,5673,5,857,0,0,5666,5667,5,402,
		0,0,5667,5668,5,863,0,0,5668,5673,5,857,0,0,5669,5670,5,350,0,0,5670,5671,
		5,863,0,0,5671,5673,5,857,0,0,5672,5648,1,0,0,0,5672,5652,1,0,0,0,5672,
		5658,1,0,0,0,5672,5663,1,0,0,0,5672,5666,1,0,0,0,5672,5669,1,0,0,0,5673,
		5674,1,0,0,0,5674,5672,1,0,0,0,5674,5675,1,0,0,0,5675,5676,1,0,0,0,5676,
		5678,5,882,0,0,5677,5646,1,0,0,0,5677,5678,1,0,0,0,5678,5684,1,0,0,0,5679,
		5682,5,610,0,0,5680,5683,3,1066,533,0,5681,5683,5,286,0,0,5682,5680,1,
		0,0,0,5682,5681,1,0,0,0,5683,5685,1,0,0,0,5684,5679,1,0,0,0,5684,5685,
		1,0,0,0,5685,413,1,0,0,0,5686,5687,5,35,0,0,5687,5688,5,623,0,0,5688,5689,
		5,80,0,0,5689,5721,3,1066,533,0,5690,5691,5,189,0,0,5691,5716,5,881,0,
		0,5692,5693,5,363,0,0,5693,5694,5,863,0,0,5694,5717,7,52,0,0,5695,5697,
		5,883,0,0,5696,5695,1,0,0,0,5696,5697,1,0,0,0,5697,5698,1,0,0,0,5698,5699,
		5,516,0,0,5699,5700,5,863,0,0,5700,5717,5,857,0,0,5701,5703,5,883,0,0,
		5702,5701,1,0,0,0,5702,5703,1,0,0,0,5703,5704,1,0,0,0,5704,5705,5,515,
		0,0,5705,5706,5,863,0,0,5706,5717,5,857,0,0,5707,5708,5,517,0,0,5708,5709,
		5,863,0,0,5709,5717,5,857,0,0,5710,5711,5,402,0,0,5711,5712,5,863,0,0,
		5712,5717,5,857,0,0,5713,5714,5,350,0,0,5714,5715,5,863,0,0,5715,5717,
		5,857,0,0,5716,5692,1,0,0,0,5716,5696,1,0,0,0,5716,5702,1,0,0,0,5716,5707,
		1,0,0,0,5716,5710,1,0,0,0,5716,5713,1,0,0,0,5717,5718,1,0,0,0,5718,5716,
		1,0,0,0,5718,5719,1,0,0,0,5719,5720,1,0,0,0,5720,5722,5,882,0,0,5721,5690,
		1,0,0,0,5721,5722,1,0,0,0,5722,5736,1,0,0,0,5723,5726,5,610,0,0,5724,5727,
		3,1066,533,0,5725,5727,5,286,0,0,5726,5724,1,0,0,0,5726,5725,1,0,0,0,5726,
		5727,1,0,0,0,5727,5734,1,0,0,0,5728,5730,5,883,0,0,5729,5728,1,0,0,0,5729,
		5730,1,0,0,0,5730,5731,1,0,0,0,5731,5732,5,67,0,0,5732,5735,3,1066,533,
		0,5733,5735,5,286,0,0,5734,5729,1,0,0,0,5734,5733,1,0,0,0,5734,5735,1,
		0,0,0,5735,5737,1,0,0,0,5736,5723,1,0,0,0,5736,5737,1,0,0,0,5737,415,1,
		0,0,0,5738,5739,5,35,0,0,5739,5740,5,624,0,0,5740,5741,5,151,0,0,5741,
		5745,5,255,0,0,5742,5743,3,1066,533,0,5743,5744,5,876,0,0,5744,5746,1,
		0,0,0,5745,5742,1,0,0,0,5745,5746,1,0,0,0,5746,5747,1,0,0,0,5747,5748,
		3,1066,533,0,5748,5752,5,7,0,0,5749,5753,5,859,0,0,5750,5753,3,1066,533,
		0,5751,5753,5,856,0,0,5752,5749,1,0,0,0,5752,5750,1,0,0,0,5752,5751,1,
		0,0,0,5753,417,1,0,0,0,5754,5755,5,35,0,0,5755,5756,5,466,0,0,5756,5757,
		5,77,0,0,5757,5758,3,1066,533,0,5758,5759,5,881,0,0,5759,5760,3,1056,528,
		0,5760,5761,5,882,0,0,5761,5762,5,7,0,0,5762,5764,5,492,0,0,5763,5765,
		7,53,0,0,5764,5763,1,0,0,0,5764,5765,1,0,0,0,5765,5766,1,0,0,0,5766,5767,
		5,71,0,0,5767,5768,5,182,0,0,5768,5769,5,881,0,0,5769,5770,3,964,482,0,
		5770,5771,5,882,0,0,5771,419,1,0,0,0,5772,5773,5,35,0,0,5773,5774,5,466,
		0,0,5774,5775,5,801,0,0,5775,5776,3,1066,533,0,5776,5777,5,7,0,0,5777,
		5778,5,466,0,0,5778,5780,3,1066,533,0,5779,5781,5,3,0,0,5780,5779,1,0,
		0,0,5780,5781,1,0,0,0,5781,5782,1,0,0,0,5782,5783,5,168,0,0,5783,5784,
		5,881,0,0,5784,5789,3,1066,533,0,5785,5786,5,883,0,0,5786,5788,3,1066,
		533,0,5787,5785,1,0,0,0,5788,5791,1,0,0,0,5789,5787,1,0,0,0,5789,5790,
		1,0,0,0,5790,5792,1,0,0,0,5791,5789,1,0,0,0,5792,5793,5,882,0,0,5793,421,
		1,0,0,0,5794,5795,5,35,0,0,5795,5798,5,489,0,0,5796,5799,3,1002,501,0,
		5797,5799,3,1066,533,0,5798,5796,1,0,0,0,5798,5797,1,0,0,0,5799,5801,1,
		0,0,0,5800,5802,3,424,212,0,5801,5800,1,0,0,0,5801,5802,1,0,0,0,5802,5806,
		1,0,0,0,5803,5804,5,112,0,0,5804,5807,3,1066,533,0,5805,5807,5,47,0,0,
		5806,5803,1,0,0,0,5806,5805,1,0,0,0,5806,5807,1,0,0,0,5807,423,1,0,0,0,
		5808,5815,5,189,0,0,5809,5810,5,567,0,0,5810,5811,5,863,0,0,5811,5813,
		7,7,0,0,5812,5814,5,883,0,0,5813,5812,1,0,0,0,5813,5814,1,0,0,0,5814,5816,
		1,0,0,0,5815,5809,1,0,0,0,5815,5816,1,0,0,0,5816,5823,1,0,0,0,5817,5818,
		5,523,0,0,5818,5819,5,863,0,0,5819,5821,7,7,0,0,5820,5822,5,883,0,0,5821,
		5820,1,0,0,0,5821,5822,1,0,0,0,5822,5824,1,0,0,0,5823,5817,1,0,0,0,5823,
		5824,1,0,0,0,5824,5870,1,0,0,0,5825,5826,5,198,0,0,5826,5864,5,881,0,0,
		5827,5828,5,567,0,0,5828,5829,5,863,0,0,5829,5831,7,7,0,0,5830,5832,5,
		883,0,0,5831,5830,1,0,0,0,5831,5832,1,0,0,0,5832,5834,1,0,0,0,5833,5827,
		1,0,0,0,5833,5834,1,0,0,0,5834,5841,1,0,0,0,5835,5836,5,484,0,0,5836,5837,
		5,863,0,0,5837,5839,3,1010,505,0,5838,5840,5,883,0,0,5839,5838,1,0,0,0,
		5839,5840,1,0,0,0,5840,5842,1,0,0,0,5841,5835,1,0,0,0,5841,5842,1,0,0,
		0,5842,5849,1,0,0,0,5843,5844,5,407,0,0,5844,5845,5,863,0,0,5845,5847,
		5,857,0,0,5846,5848,5,883,0,0,5847,5846,1,0,0,0,5847,5848,1,0,0,0,5848,
		5850,1,0,0,0,5849,5843,1,0,0,0,5849,5850,1,0,0,0,5850,5861,1,0,0,0,5851,
		5852,5,64,0,0,5852,5856,5,7,0,0,5853,5857,5,546,0,0,5854,5857,5,859,0,
		0,5855,5857,5,462,0,0,5856,5853,1,0,0,0,5856,5854,1,0,0,0,5856,5855,1,
		0,0,0,5857,5859,1,0,0,0,5858,5860,5,883,0,0,5859,5858,1,0,0,0,5859,5860,
		1,0,0,0,5860,5862,1,0,0,0,5861,5851,1,0,0,0,5861,5862,1,0,0,0,5862,5865,
		1,0,0,0,5863,5865,5,57,0,0,5864,5833,1,0,0,0,5864,5863,1,0,0,0,5865,5866,
		1,0,0,0,5866,5868,5,882,0,0,5867,5869,5,883,0,0,5868,5867,1,0,0,0,5868,
		5869,1,0,0,0,5869,5871,1,0,0,0,5870,5825,1,0,0,0,5870,5871,1,0,0,0,5871,
		5879,1,0,0,0,5872,5873,5,473,0,0,5873,5874,5,881,0,0,5874,5875,5,567,0,
		0,5875,5876,5,863,0,0,5876,5877,7,7,0,0,5877,5878,1,0,0,0,5878,5880,5,
		882,0,0,5879,5872,1,0,0,0,5879,5880,1,0,0,0,5880,425,1,0,0,0,5881,5882,
		5,4,0,0,5882,5885,5,489,0,0,5883,5886,3,1002,501,0,5884,5886,3,1066,533,
		0,5885,5883,1,0,0,0,5885,5884,1,0,0,0,5886,5889,1,0,0,0,5887,5890,3,424,
		212,0,5888,5890,3,428,214,0,5889,5887,1,0,0,0,5889,5888,1,0,0,0,5890,427,
		1,0,0,0,5891,5897,5,503,0,0,5892,5893,5,189,0,0,5893,5894,5,881,0,0,5894,
		5895,3,430,215,0,5895,5896,5,882,0,0,5896,5898,1,0,0,0,5897,5892,1,0,0,
		0,5897,5898,1,0,0,0,5898,5913,1,0,0,0,5899,5904,5,512,0,0,5900,5901,5,
		189,0,0,5901,5902,5,389,0,0,5902,5903,5,863,0,0,5903,5905,7,7,0,0,5904,
		5900,1,0,0,0,5904,5905,1,0,0,0,5905,5913,1,0,0,0,5906,5907,5,426,0,0,5907,
		5910,5,168,0,0,5908,5911,3,1066,533,0,5909,5911,5,47,0,0,5910,5908,1,0,
		0,0,5910,5909,1,0,0,0,5911,5913,1,0,0,0,5912,5891,1,0,0,0,5912,5899,1,
		0,0,0,5912,5906,1,0,0,0,5913,429,1,0,0,0,5914,5915,5,409,0,0,5915,5916,
		5,863,0,0,5916,5917,5,857,0,0,5917,431,1,0,0,0,5918,5919,5,35,0,0,5919,
		5920,5,671,0,0,5920,5923,3,1042,521,0,5921,5922,5,9,0,0,5922,5924,3,1066,
		533,0,5923,5921,1,0,0,0,5923,5924,1,0,0,0,5924,5925,1,0,0,0,5925,5936,
		5,881,0,0,5926,5929,3,1066,533,0,5927,5929,5,47,0,0,5928,5926,1,0,0,0,
		5928,5927,1,0,0,0,5929,5930,1,0,0,0,5930,5931,5,549,0,0,5931,5932,5,18,
		0,0,5932,5934,7,54,0,0,5933,5935,5,883,0,0,5934,5933,1,0,0,0,5934,5935,
		1,0,0,0,5935,5937,1,0,0,0,5936,5928,1,0,0,0,5937,5938,1,0,0,0,5938,5936,
		1,0,0,0,5938,5939,1,0,0,0,5939,5940,1,0,0,0,5940,5941,5,882,0,0,5941,433,
		1,0,0,0,5942,5949,3,1038,519,0,5943,5949,3,1040,520,0,5944,5949,3,1046,
		523,0,5945,5949,3,1050,525,0,5946,5949,3,1054,527,0,5947,5949,3,1048,524,
		0,5948,5942,1,0,0,0,5948,5943,1,0,0,0,5948,5944,1,0,0,0,5948,5945,1,0,
		0,0,5948,5946,1,0,0,0,5948,5947,1,0,0,0,5949,435,1,0,0,0,5950,5951,5,35,
		0,0,5951,5952,5,415,0,0,5952,5953,5,602,0,0,5953,5956,3,1066,533,0,5954,
		5955,5,9,0,0,5955,5957,3,1066,533,0,5956,5954,1,0,0,0,5956,5957,1,0,0,
		0,5957,5958,1,0,0,0,5958,5959,5,612,0,0,5959,5968,5,863,0,0,5960,5969,
		5,750,0,0,5961,5969,5,309,0,0,5962,5969,5,620,0,0,5963,5964,5,611,0,0,
		5964,5965,5,189,0,0,5965,5966,5,151,0,0,5966,5967,5,255,0,0,5967,5969,
		3,1066,533,0,5968,5960,1,0,0,0,5968,5961,1,0,0,0,5968,5962,1,0,0,0,5968,
		5963,1,0,0,0,5969,437,1,0,0,0,5970,5972,3,804,402,0,5971,5970,1,0,0,0,
		5971,5972,1,0,0,0,5972,5973,1,0,0,0,5973,5981,5,101,0,0,5974,5975,5,169,
		0,0,5975,5976,5,881,0,0,5976,5977,3,788,394,0,5977,5979,5,882,0,0,5978,
		5980,5,124,0,0,5979,5978,1,0,0,0,5979,5980,1,0,0,0,5980,5982,1,0,0,0,5981,
		5974,1,0,0,0,5981,5982,1,0,0,0,5982,5984,1,0,0,0,5983,5985,5,92,0,0,5984,
		5983,1,0,0,0,5984,5985,1,0,0,0,5985,5986,1,0,0,0,5986,5988,3,1014,507,
		0,5987,5989,3,952,476,0,5988,5987,1,0,0,0,5988,5989,1,0,0,0,5989,5991,
		1,0,0,0,5990,5992,3,946,473,0,5991,5990,1,0,0,0,5991,5992,1,0,0,0,5992,
		5993,1,0,0,0,5993,5994,5,610,0,0,5994,5995,3,858,429,0,5995,5996,5,112,
		0,0,5996,5998,3,812,406,0,5997,5999,3,440,220,0,5998,5997,1,0,0,0,5999,
		6000,1,0,0,0,6000,5998,1,0,0,0,6000,6001,1,0,0,0,6001,6003,1,0,0,0,6002,
		6004,3,464,232,0,6003,6002,1,0,0,0,6003,6004,1,0,0,0,6004,6006,1,0,0,0,
		6005,6007,3,838,419,0,6006,6005,1,0,0,0,6006,6007,1,0,0,0,6007,6008,1,
		0,0,0,6008,6009,5,884,0,0,6009,439,1,0,0,0,6010,6011,5,186,0,0,6011,6014,
		5,729,0,0,6012,6013,5,5,0,0,6013,6015,3,812,406,0,6014,6012,1,0,0,0,6014,
		6015,1,0,0,0,6015,6016,1,0,0,0,6016,6017,5,167,0,0,6017,6019,3,442,221,
		0,6018,6010,1,0,0,0,6019,6020,1,0,0,0,6020,6018,1,0,0,0,6020,6021,1,0,
		0,0,6021,6051,1,0,0,0,6022,6023,5,186,0,0,6023,6024,5,106,0,0,6024,6027,
		5,729,0,0,6025,6026,5,18,0,0,6026,6028,5,831,0,0,6027,6025,1,0,0,0,6027,
		6028,1,0,0,0,6028,6031,1,0,0,0,6029,6030,5,5,0,0,6030,6032,3,812,406,0,
		6031,6029,1,0,0,0,6031,6032,1,0,0,0,6032,6033,1,0,0,0,6033,6034,5,167,
		0,0,6034,6051,3,444,222,0,6035,6036,5,186,0,0,6036,6037,5,106,0,0,6037,
		6038,5,729,0,0,6038,6039,5,18,0,0,6039,6042,5,813,0,0,6040,6041,5,5,0,
		0,6041,6043,3,812,406,0,6042,6040,1,0,0,0,6042,6043,1,0,0,0,6043,6044,
		1,0,0,0,6044,6045,5,167,0,0,6045,6047,3,442,221,0,6046,6035,1,0,0,0,6047,
		6048,1,0,0,0,6048,6046,1,0,0,0,6048,6049,1,0,0,0,6049,6051,1,0,0,0,6050,
		6018,1,0,0,0,6050,6022,1,0,0,0,6050,6046,1,0,0,0,6051,441,1,0,0,0,6052,
		6053,5,178,0,0,6053,6054,5,158,0,0,6054,6059,3,810,405,0,6055,6056,5,883,
		0,0,6056,6058,3,810,405,0,6057,6055,1,0,0,0,6058,6061,1,0,0,0,6059,6057,
		1,0,0,0,6059,6060,1,0,0,0,6060,6064,1,0,0,0,6061,6059,1,0,0,0,6062,6064,
		5,48,0,0,6063,6052,1,0,0,0,6063,6062,1,0,0,0,6064,443,1,0,0,0,6065,6070,
		5,90,0,0,6066,6067,5,881,0,0,6067,6068,3,1024,512,0,6068,6069,5,882,0,
		0,6069,6071,1,0,0,0,6070,6066,1,0,0,0,6070,6071,1,0,0,0,6071,6075,1,0,
		0,0,6072,6076,3,962,481,0,6073,6074,5,47,0,0,6074,6076,5,182,0,0,6075,
		6072,1,0,0,0,6075,6073,1,0,0,0,6076,445,1,0,0,0,6077,6079,3,804,402,0,
		6078,6077,1,0,0,0,6078,6079,1,0,0,0,6079,6080,1,0,0,0,6080,6090,5,48,0,
		0,6081,6082,5,169,0,0,6082,6083,5,881,0,0,6083,6084,3,788,394,0,6084,6086,
		5,882,0,0,6085,6087,5,124,0,0,6086,6085,1,0,0,0,6086,6087,1,0,0,0,6087,
		6091,1,0,0,0,6088,6089,5,169,0,0,6089,6091,5,857,0,0,6090,6081,1,0,0,0,
		6090,6088,1,0,0,0,6090,6091,1,0,0,0,6091,6093,1,0,0,0,6092,6094,5,75,0,
		0,6093,6092,1,0,0,0,6093,6094,1,0,0,0,6094,6095,1,0,0,0,6095,6097,3,448,
		224,0,6096,6098,3,952,476,0,6097,6096,1,0,0,0,6097,6098,1,0,0,0,6098,6100,
		1,0,0,0,6099,6101,3,464,232,0,6100,6099,1,0,0,0,6100,6101,1,0,0,0,6101,
		6104,1,0,0,0,6102,6103,5,75,0,0,6103,6105,3,858,429,0,6104,6102,1,0,0,
		0,6104,6105,1,0,0,0,6105,6119,1,0,0,0,6106,6117,5,187,0,0,6107,6118,3,
		812,406,0,6108,6109,5,37,0,0,6109,6115,5,109,0,0,6110,6112,5,347,0,0,6111,
		6110,1,0,0,0,6111,6112,1,0,0,0,6112,6113,1,0,0,0,6113,6116,3,1026,513,
		0,6114,6116,5,856,0,0,6115,6111,1,0,0,0,6115,6114,1,0,0,0,6116,6118,1,
		0,0,0,6117,6107,1,0,0,0,6117,6108,1,0,0,0,6118,6120,1,0,0,0,6119,6106,
		1,0,0,0,6119,6120,1,0,0,0,6120,6122,1,0,0,0,6121,6123,3,830,415,0,6122,
		6121,1,0,0,0,6122,6123,1,0,0,0,6123,6125,1,0,0,0,6124,6126,3,838,419,0,
		6125,6124,1,0,0,0,6125,6126,1,0,0,0,6126,6128,1,0,0,0,6127,6129,5,884,
		0,0,6128,6127,1,0,0,0,6128,6129,1,0,0,0,6129,447,1,0,0,0,6130,6135,3,1014,
		507,0,6131,6135,3,948,474,0,6132,6135,3,640,320,0,6133,6135,5,856,0,0,
		6134,6130,1,0,0,0,6134,6131,1,0,0,0,6134,6132,1,0,0,0,6134,6133,1,0,0,
		0,6135,449,1,0,0,0,6136,6138,3,804,402,0,6137,6136,1,0,0,0,6137,6138,1,
		0,0,0,6138,6139,1,0,0,0,6139,6147,5,90,0,0,6140,6141,5,169,0,0,6141,6142,
		5,881,0,0,6142,6143,3,788,394,0,6143,6145,5,882,0,0,6144,6146,5,124,0,
		0,6145,6144,1,0,0,0,6145,6146,1,0,0,0,6146,6148,1,0,0,0,6147,6140,1,0,
		0,0,6147,6148,1,0,0,0,6148,6150,1,0,0,0,6149,6151,5,92,0,0,6150,6149,1,
		0,0,0,6150,6151,1,0,0,0,6151,6154,1,0,0,0,6152,6155,3,1014,507,0,6153,
		6155,3,640,320,0,6154,6152,1,0,0,0,6154,6153,1,0,0,0,6155,6157,1,0,0,0,
		6156,6158,3,952,476,0,6157,6156,1,0,0,0,6157,6158,1,0,0,0,6158,6163,1,
		0,0,0,6159,6160,5,881,0,0,6160,6161,3,1020,510,0,6161,6162,5,882,0,0,6162,
		6164,1,0,0,0,6163,6159,1,0,0,0,6163,6164,1,0,0,0,6164,6166,1,0,0,0,6165,
		6167,3,464,232,0,6166,6165,1,0,0,0,6166,6167,1,0,0,0,6167,6168,1,0,0,0,
		6168,6170,3,452,226,0,6169,6171,3,830,415,0,6170,6169,1,0,0,0,6170,6171,
		1,0,0,0,6171,6173,1,0,0,0,6172,6174,3,838,419,0,6173,6172,1,0,0,0,6173,
		6174,1,0,0,0,6174,6176,1,0,0,0,6175,6177,5,884,0,0,6176,6175,1,0,0,0,6176,
		6177,1,0,0,0,6177,451,1,0,0,0,6178,6184,3,962,481,0,6179,6184,3,908,454,
		0,6180,6184,3,670,335,0,6181,6182,5,47,0,0,6182,6184,5,182,0,0,6183,6178,
		1,0,0,0,6183,6179,1,0,0,0,6183,6180,1,0,0,0,6183,6181,1,0,0,0,6184,453,
		1,0,0,0,6185,6187,5,881,0,0,6186,6185,1,0,0,0,6186,6187,1,0,0,0,6187,6188,
		1,0,0,0,6188,6193,5,504,0,0,6189,6194,5,3,0,0,6190,6194,5,52,0,0,6191,
		6194,3,822,411,0,6192,6194,5,887,0,0,6193,6189,1,0,0,0,6193,6190,1,0,0,
		0,6193,6191,1,0,0,0,6193,6192,1,0,0,0,6194,6203,1,0,0,0,6195,6196,5,856,
		0,0,6196,6197,5,863,0,0,6197,6199,3,788,394,0,6198,6200,5,883,0,0,6199,
		6198,1,0,0,0,6199,6200,1,0,0,0,6200,6202,1,0,0,0,6201,6195,1,0,0,0,6202,
		6205,1,0,0,0,6203,6201,1,0,0,0,6203,6204,1,0,0,0,6204,6206,1,0,0,0,6205,
		6203,1,0,0,0,6206,6207,5,75,0,0,6207,6213,3,1002,501,0,6208,6209,5,92,
		0,0,6209,6210,3,1066,533,0,6210,6211,5,187,0,0,6211,6212,3,812,406,0,6212,
		6214,1,0,0,0,6213,6208,1,0,0,0,6213,6214,1,0,0,0,6214,6216,1,0,0,0,6215,
		6217,5,882,0,0,6216,6215,1,0,0,0,6216,6217,1,0,0,0,6217,455,1,0,0,0,6218,
		6220,3,804,402,0,6219,6218,1,0,0,0,6219,6220,1,0,0,0,6220,6221,1,0,0,0,
		6221,6222,3,458,229,0,6222,457,1,0,0,0,6223,6225,3,816,408,0,6224,6226,
		3,828,414,0,6225,6224,1,0,0,0,6225,6226,1,0,0,0,6226,6228,1,0,0,0,6227,
		6229,3,830,415,0,6228,6227,1,0,0,0,6228,6229,1,0,0,0,6229,6231,1,0,0,0,
		6230,6232,3,838,419,0,6231,6230,1,0,0,0,6231,6232,1,0,0,0,6232,6234,1,
		0,0,0,6233,6235,5,884,0,0,6234,6233,1,0,0,0,6234,6235,1,0,0,0,6235,459,
		1,0,0,0,6236,6239,5,856,0,0,6237,6239,3,1060,530,0,6238,6236,1,0,0,0,6238,
		6237,1,0,0,0,6239,461,1,0,0,0,6240,6242,3,804,402,0,6241,6240,1,0,0,0,
		6241,6242,1,0,0,0,6242,6243,1,0,0,0,6243,6251,5,178,0,0,6244,6245,5,169,
		0,0,6245,6246,5,881,0,0,6246,6247,3,788,394,0,6247,6249,5,882,0,0,6248,
		6250,5,124,0,0,6249,6248,1,0,0,0,6249,6250,1,0,0,0,6250,6252,1,0,0,0,6251,
		6244,1,0,0,0,6251,6252,1,0,0,0,6252,6255,1,0,0,0,6253,6256,3,1014,507,
		0,6254,6256,3,640,320,0,6255,6253,1,0,0,0,6255,6254,1,0,0,0,6256,6258,
		1,0,0,0,6257,6259,3,950,475,0,6258,6257,1,0,0,0,6258,6259,1,0,0,0,6259,
		6260,1,0,0,0,6260,6261,5,158,0,0,6261,6266,3,808,404,0,6262,6263,5,883,
		0,0,6263,6265,3,808,404,0,6264,6262,1,0,0,0,6265,6268,1,0,0,0,6266,6264,
		1,0,0,0,6266,6267,1,0,0,0,6267,6270,1,0,0,0,6268,6266,1,0,0,0,6269,6271,
		3,464,232,0,6270,6269,1,0,0,0,6270,6271,1,0,0,0,6271,6274,1,0,0,0,6272,
		6273,5,75,0,0,6273,6275,3,858,429,0,6274,6272,1,0,0,0,6274,6275,1,0,0,
		0,6275,6289,1,0,0,0,6276,6287,5,187,0,0,6277,6288,3,812,406,0,6278,6279,
		5,37,0,0,6279,6285,5,109,0,0,6280,6282,5,347,0,0,6281,6280,1,0,0,0,6281,
		6282,1,0,0,0,6282,6283,1,0,0,0,6283,6286,3,1026,513,0,6284,6286,5,856,
		0,0,6285,6281,1,0,0,0,6285,6284,1,0,0,0,6286,6288,1,0,0,0,6287,6277,1,
		0,0,0,6287,6278,1,0,0,0,6288,6290,1,0,0,0,6289,6276,1,0,0,0,6289,6290,
		1,0,0,0,6290,6292,1,0,0,0,6291,6293,3,830,415,0,6292,6291,1,0,0,0,6292,
		6293,1,0,0,0,6293,6295,1,0,0,0,6294,6296,3,838,419,0,6295,6294,1,0,0,0,
		6295,6296,1,0,0,0,6296,6298,1,0,0,0,6297,6299,5,884,0,0,6298,6297,1,0,
		0,0,6298,6299,1,0,0,0,6299,463,1,0,0,0,6300,6301,5,460,0,0,6301,6306,3,
		466,233,0,6302,6303,5,883,0,0,6303,6305,3,466,233,0,6304,6302,1,0,0,0,
		6305,6308,1,0,0,0,6306,6304,1,0,0,0,6306,6307,1,0,0,0,6307,6320,1,0,0,
		0,6308,6306,1,0,0,0,6309,6312,5,92,0,0,6310,6313,5,856,0,0,6311,6313,3,
		1004,502,0,6312,6310,1,0,0,0,6312,6311,1,0,0,0,6313,6318,1,0,0,0,6314,
		6315,5,881,0,0,6315,6316,3,1024,512,0,6316,6317,5,882,0,0,6317,6319,1,
		0,0,0,6318,6314,1,0,0,0,6318,6319,1,0,0,0,6319,6321,1,0,0,0,6320,6309,
		1,0,0,0,6320,6321,1,0,0,0,6321,465,1,0,0,0,6322,6325,3,788,394,0,6323,
		6325,3,848,424,0,6324,6322,1,0,0,0,6324,6323,1,0,0,0,6325,6327,1,0,0,0,
		6326,6328,3,944,472,0,6327,6326,1,0,0,0,6327,6328,1,0,0,0,6328,467,1,0,
		0,0,6329,6330,5,35,0,0,6330,6331,5,43,0,0,6331,6335,3,1066,533,0,6332,
		6333,5,668,0,0,6333,6334,5,863,0,0,6334,6336,7,55,0,0,6335,6332,1,0,0,
		0,6335,6336,1,0,0,0,6336,6349,1,0,0,0,6337,6339,5,112,0,0,6338,6340,5,
		128,0,0,6339,6338,1,0,0,0,6339,6340,1,0,0,0,6340,6341,1,0,0,0,6341,6346,
		3,990,495,0,6342,6343,5,883,0,0,6343,6345,3,990,495,0,6344,6342,1,0,0,
		0,6345,6348,1,0,0,0,6346,6344,1,0,0,0,6346,6347,1,0,0,0,6347,6350,1,0,
		0,0,6348,6346,1,0,0,0,6349,6337,1,0,0,0,6349,6350,1,0,0,0,6350,6361,1,
		0,0,0,6351,6352,5,727,0,0,6352,6353,5,112,0,0,6353,6358,3,990,495,0,6354,
		6355,5,883,0,0,6355,6357,3,990,495,0,6356,6354,1,0,0,0,6357,6360,1,0,0,
		0,6358,6356,1,0,0,0,6358,6359,1,0,0,0,6359,6362,1,0,0,0,6360,6358,1,0,
		0,0,6361,6351,1,0,0,0,6361,6362,1,0,0,0,6362,6365,1,0,0,0,6363,6364,5,
		26,0,0,6364,6366,3,1066,533,0,6365,6363,1,0,0,0,6365,6366,1,0,0,0,6366,
		6376,1,0,0,0,6367,6368,5,189,0,0,6368,6373,3,986,493,0,6369,6370,5,883,
		0,0,6370,6372,3,986,493,0,6371,6369,1,0,0,0,6372,6375,1,0,0,0,6373,6371,
		1,0,0,0,6373,6374,1,0,0,0,6374,6377,1,0,0,0,6375,6373,1,0,0,0,6376,6367,
		1,0,0,0,6376,6377,1,0,0,0,6377,469,1,0,0,0,6378,6380,5,35,0,0,6379,6381,
		5,176,0,0,6380,6379,1,0,0,0,6380,6381,1,0,0,0,6381,6383,1,0,0,0,6382,6384,
		3,1030,515,0,6383,6382,1,0,0,0,6383,6384,1,0,0,0,6384,6385,1,0,0,0,6385,
		6386,5,88,0,0,6386,6387,3,1066,533,0,6387,6388,5,112,0,0,6388,6389,3,1004,
		502,0,6389,6390,5,881,0,0,6390,6391,3,1018,509,0,6391,6397,5,882,0,0,6392,
		6393,5,710,0,0,6393,6394,5,881,0,0,6394,6395,3,1024,512,0,6395,6396,5,
		882,0,0,6396,6398,1,0,0,0,6397,6392,1,0,0,0,6397,6398,1,0,0,0,6398,6401,
		1,0,0,0,6399,6400,5,187,0,0,6400,6402,3,812,406,0,6401,6399,1,0,0,0,6401,
		6402,1,0,0,0,6402,6404,1,0,0,0,6403,6405,3,770,385,0,6404,6403,1,0,0,0,
		6404,6405,1,0,0,0,6405,6408,1,0,0,0,6406,6407,5,112,0,0,6407,6409,3,1066,
		533,0,6408,6406,1,0,0,0,6408,6409,1,0,0,0,6409,6411,1,0,0,0,6410,6412,
		5,884,0,0,6411,6410,1,0,0,0,6411,6412,1,0,0,0,6412,471,1,0,0,0,6413,6414,
		5,4,0,0,6414,6415,5,88,0,0,6415,6416,3,1066,533,0,6416,6417,5,112,0,0,
		6417,6422,3,1004,502,0,6418,6423,5,301,0,0,6419,6423,5,896,0,0,6420,6423,
		5,897,0,0,6421,6423,3,474,237,0,6422,6418,1,0,0,0,6422,6419,1,0,0,0,6422,
		6420,1,0,0,0,6422,6421,1,0,0,0,6423,473,1,0,0,0,6424,6428,5,503,0,0,6425,
		6426,5,466,0,0,6426,6427,5,863,0,0,6427,6429,5,3,0,0,6428,6425,1,0,0,0,
		6428,6429,1,0,0,0,6429,6431,1,0,0,0,6430,6432,3,770,385,0,6431,6430,1,
		0,0,0,6431,6432,1,0,0,0,6432,475,1,0,0,0,6433,6438,5,35,0,0,6434,6439,
		5,24,0,0,6435,6437,5,105,0,0,6436,6435,1,0,0,0,6436,6437,1,0,0,0,6437,
		6439,1,0,0,0,6438,6434,1,0,0,0,6438,6436,1,0,0,0,6439,6440,1,0,0,0,6440,
		6441,5,257,0,0,6441,6442,5,88,0,0,6442,6443,3,1066,533,0,6443,6444,5,112,
		0,0,6444,6446,3,1004,502,0,6445,6447,3,770,385,0,6446,6445,1,0,0,0,6446,
		6447,1,0,0,0,6447,6450,1,0,0,0,6448,6449,5,112,0,0,6449,6451,3,1066,533,
		0,6450,6448,1,0,0,0,6450,6451,1,0,0,0,6451,6453,1,0,0,0,6452,6454,5,884,
		0,0,6453,6452,1,0,0,0,6453,6454,1,0,0,0,6454,477,1,0,0,0,6455,6457,5,35,
		0,0,6456,6458,5,105,0,0,6457,6456,1,0,0,0,6457,6458,1,0,0,0,6458,6459,
		1,0,0,0,6459,6460,5,257,0,0,6460,6461,5,88,0,0,6461,6462,3,1066,533,0,
		6462,6463,5,112,0,0,6463,6464,3,1004,502,0,6464,6465,5,881,0,0,6465,6466,
		3,1018,509,0,6466,6469,5,882,0,0,6467,6468,5,187,0,0,6468,6470,3,812,406,
		0,6469,6467,1,0,0,0,6469,6470,1,0,0,0,6470,6472,1,0,0,0,6471,6473,3,770,
		385,0,6472,6471,1,0,0,0,6472,6473,1,0,0,0,6473,6476,1,0,0,0,6474,6475,
		5,112,0,0,6475,6477,3,1066,533,0,6476,6474,1,0,0,0,6476,6477,1,0,0,0,6477,
		6479,1,0,0,0,6478,6480,5,884,0,0,6479,6478,1,0,0,0,6479,6480,1,0,0,0,6480,
		479,1,0,0,0,6481,6483,5,35,0,0,6482,6484,5,128,0,0,6483,6482,1,0,0,0,6483,
		6484,1,0,0,0,6484,6485,1,0,0,0,6485,6486,5,624,0,0,6486,6487,5,88,0,0,
		6487,6488,3,1066,533,0,6488,6489,5,112,0,0,6489,6490,3,1004,502,0,6490,
		6491,5,881,0,0,6491,6492,3,1066,533,0,6492,6503,5,882,0,0,6493,6494,5,
		610,0,0,6494,6495,5,624,0,0,6495,6496,5,88,0,0,6496,6501,3,1066,533,0,
		6497,6499,5,71,0,0,6498,6500,7,56,0,0,6499,6498,1,0,0,0,6499,6500,1,0,
		0,0,6500,6502,1,0,0,0,6501,6497,1,0,0,0,6501,6502,1,0,0,0,6502,6504,1,
		0,0,0,6503,6493,1,0,0,0,6503,6504,1,0,0,0,6504,6506,1,0,0,0,6505,6507,
		3,770,385,0,6506,6505,1,0,0,0,6506,6507,1,0,0,0,6507,6509,1,0,0,0,6508,
		6510,5,884,0,0,6509,6508,1,0,0,0,6509,6510,1,0,0,0,6510,481,1,0,0,0,6511,
		6514,5,35,0,0,6512,6513,5,120,0,0,6513,6515,5,4,0,0,6514,6512,1,0,0,0,
		6514,6515,1,0,0,0,6515,6518,1,0,0,0,6516,6518,5,4,0,0,6517,6511,1,0,0,
		0,6517,6516,1,0,0,0,6518,6519,1,0,0,0,6519,6520,7,57,0,0,6520,6523,3,1008,
		504,0,6521,6522,5,884,0,0,6522,6524,5,857,0,0,6523,6521,1,0,0,0,6523,6524,
		1,0,0,0,6524,6539,1,0,0,0,6525,6527,5,881,0,0,6526,6525,1,0,0,0,6526,6527,
		1,0,0,0,6527,6528,1,0,0,0,6528,6533,3,506,253,0,6529,6530,5,883,0,0,6530,
		6532,3,506,253,0,6531,6529,1,0,0,0,6532,6535,1,0,0,0,6533,6531,1,0,0,0,
		6533,6534,1,0,0,0,6534,6537,1,0,0,0,6535,6533,1,0,0,0,6536,6538,5,882,
		0,0,6537,6536,1,0,0,0,6537,6538,1,0,0,0,6538,6540,1,0,0,0,6539,6526,1,
		0,0,0,6539,6540,1,0,0,0,6540,6550,1,0,0,0,6541,6542,5,189,0,0,6542,6547,
		3,508,254,0,6543,6544,5,883,0,0,6544,6546,3,508,254,0,6545,6543,1,0,0,
		0,6546,6549,1,0,0,0,6547,6545,1,0,0,0,6547,6548,1,0,0,0,6548,6551,1,0,
		0,0,6549,6547,1,0,0,0,6550,6541,1,0,0,0,6550,6551,1,0,0,0,6551,6554,1,
		0,0,0,6552,6553,5,71,0,0,6553,6555,5,139,0,0,6554,6552,1,0,0,0,6554,6555,
		1,0,0,0,6555,6556,1,0,0,0,6556,6564,5,7,0,0,6557,6565,3,484,242,0,6558,
		6560,3,6,3,0,6559,6558,1,0,0,0,6560,6563,1,0,0,0,6561,6559,1,0,0,0,6561,
		6562,1,0,0,0,6562,6565,1,0,0,0,6563,6561,1,0,0,0,6564,6557,1,0,0,0,6564,
		6561,1,0,0,0,6565,483,1,0,0,0,6566,6567,5,67,0,0,6567,6568,5,428,0,0,6568,
		6569,3,1066,533,0,6569,6570,5,876,0,0,6570,6571,3,1066,533,0,6571,6572,
		5,876,0,0,6572,6573,3,1066,533,0,6573,485,1,0,0,0,6574,6577,3,488,244,
		0,6575,6577,3,494,247,0,6576,6574,1,0,0,0,6576,6575,1,0,0,0,6577,487,1,
		0,0,0,6578,6581,5,35,0,0,6579,6580,5,120,0,0,6580,6582,5,4,0,0,6581,6579,
		1,0,0,0,6581,6582,1,0,0,0,6582,6585,1,0,0,0,6583,6585,5,4,0,0,6584,6578,
		1,0,0,0,6584,6583,1,0,0,0,6585,6586,1,0,0,0,6586,6587,5,172,0,0,6587,6588,
		3,1006,503,0,6588,6589,5,112,0,0,6589,6599,3,1004,502,0,6590,6591,5,189,
		0,0,6591,6596,3,490,245,0,6592,6593,5,883,0,0,6593,6595,3,490,245,0,6594,
		6592,1,0,0,0,6595,6598,1,0,0,0,6596,6594,1,0,0,0,6596,6597,1,0,0,0,6597,
		6600,1,0,0,0,6598,6596,1,0,0,0,6599,6590,1,0,0,0,6599,6600,1,0,0,0,6600,
		6605,1,0,0,0,6601,6606,5,71,0,0,6602,6606,5,205,0,0,6603,6604,5,714,0,
		0,6604,6606,5,109,0,0,6605,6601,1,0,0,0,6605,6602,1,0,0,0,6605,6603,1,
		0,0,0,6606,6607,1,0,0,0,6607,6612,3,492,246,0,6608,6609,5,883,0,0,6609,
		6611,3,492,246,0,6610,6608,1,0,0,0,6611,6614,1,0,0,0,6612,6610,1,0,0,0,
		6612,6613,1,0,0,0,6613,6617,1,0,0,0,6614,6612,1,0,0,0,6615,6616,5,189,
		0,0,6616,6618,5,639,0,0,6617,6615,1,0,0,0,6617,6618,1,0,0,0,6618,6622,
		1,0,0,0,6619,6620,5,106,0,0,6620,6621,5,71,0,0,6621,6623,5,139,0,0,6622,
		6619,1,0,0,0,6622,6623,1,0,0,0,6623,6624,1,0,0,0,6624,6626,5,7,0,0,6625,
		6627,3,6,3,0,6626,6625,1,0,0,0,6627,6628,1,0,0,0,6628,6626,1,0,0,0,6628,
		6629,1,0,0,0,6629,489,1,0,0,0,6630,6633,5,313,0,0,6631,6633,3,742,371,
		0,6632,6630,1,0,0,0,6632,6631,1,0,0,0,6633,491,1,0,0,0,6634,6635,7,58,
		0,0,6635,493,1,0,0,0,6636,6639,5,35,0,0,6637,6638,5,120,0,0,6638,6640,
		5,4,0,0,6639,6637,1,0,0,0,6639,6640,1,0,0,0,6640,6643,1,0,0,0,6641,6643,
		5,4,0,0,6642,6636,1,0,0,0,6642,6641,1,0,0,0,6643,6644,1,0,0,0,6644,6645,
		5,172,0,0,6645,6646,3,1006,503,0,6646,6650,5,112,0,0,6647,6648,5,3,0,0,
		6648,6651,5,803,0,0,6649,6651,5,43,0,0,6650,6647,1,0,0,0,6650,6649,1,0,
		0,0,6651,6661,1,0,0,0,6652,6653,5,189,0,0,6653,6658,3,490,245,0,6654,6655,
		5,883,0,0,6655,6657,3,490,245,0,6656,6654,1,0,0,0,6657,6660,1,0,0,0,6658,
		6656,1,0,0,0,6658,6659,1,0,0,0,6659,6662,1,0,0,0,6660,6658,1,0,0,0,6661,
		6652,1,0,0,0,6661,6662,1,0,0,0,6662,6663,1,0,0,0,6663,6664,7,59,0,0,6664,
		6669,3,496,248,0,6665,6666,5,883,0,0,6666,6668,3,496,248,0,6667,6665,1,
		0,0,0,6668,6671,1,0,0,0,6669,6667,1,0,0,0,6669,6670,1,0,0,0,6670,6672,
		1,0,0,0,6671,6669,1,0,0,0,6672,6674,5,7,0,0,6673,6675,3,6,3,0,6674,6673,
		1,0,0,0,6675,6676,1,0,0,0,6676,6674,1,0,0,0,6676,6677,1,0,0,0,6677,495,
		1,0,0,0,6678,6679,3,1068,534,0,6679,497,1,0,0,0,6680,6683,5,35,0,0,6681,
		6682,5,120,0,0,6682,6684,5,4,0,0,6683,6681,1,0,0,0,6683,6684,1,0,0,0,6684,
		6687,1,0,0,0,6685,6687,5,4,0,0,6686,6680,1,0,0,0,6686,6685,1,0,0,0,6687,
		6688,1,0,0,0,6688,6689,5,77,0,0,6689,6703,3,1008,504,0,6690,6691,5,881,
		0,0,6691,6696,3,506,253,0,6692,6693,5,883,0,0,6693,6695,3,506,253,0,6694,
		6692,1,0,0,0,6695,6698,1,0,0,0,6696,6694,1,0,0,0,6696,6697,1,0,0,0,6697,
		6699,1,0,0,0,6698,6696,1,0,0,0,6699,6700,5,882,0,0,6700,6704,1,0,0,0,6701,
		6702,5,881,0,0,6702,6704,5,882,0,0,6703,6690,1,0,0,0,6703,6701,1,0,0,0,
		6704,6708,1,0,0,0,6705,6709,3,500,250,0,6706,6709,3,502,251,0,6707,6709,
		3,504,252,0,6708,6705,1,0,0,0,6708,6706,1,0,0,0,6708,6707,1,0,0,0,6709,
		6711,1,0,0,0,6710,6712,5,884,0,0,6711,6710,1,0,0,0,6711,6712,1,0,0,0,6712,
		499,1,0,0,0,6713,6714,5,789,0,0,6714,6724,5,164,0,0,6715,6716,5,189,0,
		0,6716,6721,3,510,255,0,6717,6718,5,883,0,0,6718,6720,3,510,255,0,6719,
		6717,1,0,0,0,6720,6723,1,0,0,0,6721,6719,1,0,0,0,6721,6722,1,0,0,0,6722,
		6725,1,0,0,0,6723,6721,1,0,0,0,6724,6715,1,0,0,0,6724,6725,1,0,0,0,6725,
		6727,1,0,0,0,6726,6728,5,7,0,0,6727,6726,1,0,0,0,6727,6728,1,0,0,0,6728,
		6738,1,0,0,0,6729,6739,3,484,242,0,6730,6736,5,142,0,0,6731,6732,5,881,
		0,0,6732,6733,3,456,228,0,6733,6734,5,882,0,0,6734,6737,1,0,0,0,6735,6737,
		3,456,228,0,6736,6731,1,0,0,0,6736,6735,1,0,0,0,6737,6739,1,0,0,0,6738,
		6729,1,0,0,0,6738,6730,1,0,0,0,6739,501,1,0,0,0,6740,6741,5,789,0,0,6741,
		6742,5,856,0,0,6742,6752,3,746,373,0,6743,6744,5,189,0,0,6744,6749,3,510,
		255,0,6745,6746,5,883,0,0,6746,6748,3,510,255,0,6747,6745,1,0,0,0,6748,
		6751,1,0,0,0,6749,6747,1,0,0,0,6749,6750,1,0,0,0,6750,6753,1,0,0,0,6751,
		6749,1,0,0,0,6752,6743,1,0,0,0,6752,6753,1,0,0,0,6753,6755,1,0,0,0,6754,
		6756,5,7,0,0,6755,6754,1,0,0,0,6755,6756,1,0,0,0,6756,6773,1,0,0,0,6757,
		6774,3,484,242,0,6758,6762,5,13,0,0,6759,6761,3,6,3,0,6760,6759,1,0,0,
		0,6761,6764,1,0,0,0,6762,6760,1,0,0,0,6762,6763,1,0,0,0,6763,6765,1,0,
		0,0,6764,6762,1,0,0,0,6765,6767,5,142,0,0,6766,6768,5,884,0,0,6767,6766,
		1,0,0,0,6767,6768,1,0,0,0,6768,6769,1,0,0,0,6769,6771,5,60,0,0,6770,6772,
		5,884,0,0,6771,6770,1,0,0,0,6771,6772,1,0,0,0,6772,6774,1,0,0,0,6773,6757,
		1,0,0,0,6773,6758,1,0,0,0,6774,503,1,0,0,0,6775,6776,5,789,0,0,6776,6786,
		3,1056,528,0,6777,6778,5,189,0,0,6778,6783,3,510,255,0,6779,6780,5,883,
		0,0,6780,6782,3,510,255,0,6781,6779,1,0,0,0,6782,6785,1,0,0,0,6783,6781,
		1,0,0,0,6783,6784,1,0,0,0,6784,6787,1,0,0,0,6785,6783,1,0,0,0,6786,6777,
		1,0,0,0,6786,6787,1,0,0,0,6787,6789,1,0,0,0,6788,6790,5,7,0,0,6789,6788,
		1,0,0,0,6789,6790,1,0,0,0,6790,6806,1,0,0,0,6791,6807,3,484,242,0,6792,
		6796,5,13,0,0,6793,6795,3,6,3,0,6794,6793,1,0,0,0,6795,6798,1,0,0,0,6796,
		6794,1,0,0,0,6796,6797,1,0,0,0,6797,6799,1,0,0,0,6798,6796,1,0,0,0,6799,
		6800,5,142,0,0,6800,6802,3,788,394,0,6801,6803,5,884,0,0,6802,6801,1,0,
		0,0,6802,6803,1,0,0,0,6803,6804,1,0,0,0,6804,6805,5,60,0,0,6805,6807,1,
		0,0,0,6806,6791,1,0,0,0,6806,6792,1,0,0,0,6807,505,1,0,0,0,6808,6810,5,
		856,0,0,6809,6811,5,7,0,0,6810,6809,1,0,0,0,6810,6811,1,0,0,0,6811,6815,
		1,0,0,0,6812,6813,3,1066,533,0,6813,6814,5,876,0,0,6814,6816,1,0,0,0,6815,
		6812,1,0,0,0,6815,6816,1,0,0,0,6816,6817,1,0,0,0,6817,6819,3,1056,528,
		0,6818,6820,5,183,0,0,6819,6818,1,0,0,0,6819,6820,1,0,0,0,6820,6823,1,
		0,0,0,6821,6822,5,863,0,0,6822,6824,3,1058,529,0,6823,6821,1,0,0,0,6823,
		6824,1,0,0,0,6824,6826,1,0,0,0,6825,6827,7,60,0,0,6826,6825,1,0,0,0,6826,
		6827,1,0,0,0,6827,507,1,0,0,0,6828,6832,5,313,0,0,6829,6832,5,505,0,0,
		6830,6832,3,742,371,0,6831,6828,1,0,0,0,6831,6829,1,0,0,0,6831,6830,1,
		0,0,0,6832,509,1,0,0,0,6833,6846,5,313,0,0,6834,6846,5,532,0,0,6835,6836,
		5,789,0,0,6836,6837,5,107,0,0,6837,6838,5,112,0,0,6838,6839,5,107,0,0,
		6839,6846,5,367,0,0,6840,6841,5,656,0,0,6841,6842,5,112,0,0,6842,6843,
		5,107,0,0,6843,6846,5,367,0,0,6844,6846,3,742,371,0,6845,6833,1,0,0,0,
		6845,6834,1,0,0,0,6845,6835,1,0,0,0,6845,6840,1,0,0,0,6845,6844,1,0,0,
		0,6846,511,1,0,0,0,6847,6848,5,35,0,0,6848,6849,5,162,0,0,6849,6850,3,
		1066,533,0,6850,6851,5,112,0,0,6851,6852,3,1004,502,0,6852,6853,5,881,
		0,0,6853,6854,3,1024,512,0,6854,6873,5,882,0,0,6855,6861,5,189,0,0,6856,
		6862,5,342,0,0,6857,6858,5,531,0,0,6858,6859,5,857,0,0,6859,6862,7,61,
		0,0,6860,6862,5,566,0,0,6861,6856,1,0,0,0,6861,6857,1,0,0,0,6861,6860,
		1,0,0,0,6862,6865,1,0,0,0,6863,6864,5,883,0,0,6864,6866,5,442,0,0,6865,
		6863,1,0,0,0,6865,6866,1,0,0,0,6866,6871,1,0,0,0,6867,6868,5,883,0,0,6868,
		6869,5,365,0,0,6869,6870,5,863,0,0,6870,6872,3,1028,514,0,6871,6867,1,
		0,0,0,6871,6872,1,0,0,0,6872,6874,1,0,0,0,6873,6855,1,0,0,0,6873,6874,
		1,0,0,0,6874,6876,1,0,0,0,6875,6877,5,884,0,0,6876,6875,1,0,0,0,6876,6877,
		1,0,0,0,6877,513,1,0,0,0,6878,6880,5,178,0,0,6879,6881,7,62,0,0,6880,6879,
		1,0,0,0,6880,6881,1,0,0,0,6881,6882,1,0,0,0,6882,6883,5,162,0,0,6883,6885,
		3,1002,501,0,6884,6886,3,1066,533,0,6885,6884,1,0,0,0,6885,6886,1,0,0,
		0,6886,6890,1,0,0,0,6887,6888,5,610,0,0,6888,6889,5,857,0,0,6889,6891,
		5,182,0,0,6890,6887,1,0,0,0,6890,6891,1,0,0,0,6891,515,1,0,0,0,6892,6893,
		5,35,0,0,6893,6894,5,164,0,0,6894,6895,3,1004,502,0,6895,6896,5,881,0,
		0,6896,6903,3,754,377,0,6897,6899,5,883,0,0,6898,6897,1,0,0,0,6898,6899,
		1,0,0,0,6899,6900,1,0,0,0,6900,6902,3,518,259,0,6901,6898,1,0,0,0,6902,
		6905,1,0,0,0,6903,6901,1,0,0,0,6903,6904,1,0,0,0,6904,6907,1,0,0,0,6905,
		6903,1,0,0,0,6906,6908,5,883,0,0,6907,6906,1,0,0,0,6907,6908,1,0,0,0,6908,
		6909,1,0,0,0,6909,6912,5,882,0,0,6910,6911,5,392,0,0,6911,6913,3,1068,
		534,0,6912,6910,1,0,0,0,6912,6913,1,0,0,0,6913,6917,1,0,0,0,6914,6916,
		3,520,260,0,6915,6914,1,0,0,0,6916,6919,1,0,0,0,6917,6915,1,0,0,0,6917,
		6918,1,0,0,0,6918,6923,1,0,0,0,6919,6917,1,0,0,0,6920,6921,5,112,0,0,6921,
		6924,3,1066,533,0,6922,6924,5,47,0,0,6923,6920,1,0,0,0,6923,6922,1,0,0,
		0,6923,6924,1,0,0,0,6924,6928,1,0,0,0,6925,6926,5,586,0,0,6926,6929,3,
		1066,533,0,6927,6929,5,47,0,0,6928,6925,1,0,0,0,6928,6927,1,0,0,0,6928,
		6929,1,0,0,0,6929,6931,1,0,0,0,6930,6932,5,884,0,0,6931,6930,1,0,0,0,6931,
		6932,1,0,0,0,6932,517,1,0,0,0,6933,6934,5,88,0,0,6934,6936,3,1066,533,
		0,6935,6937,7,63,0,0,6936,6935,1,0,0,0,6936,6937,1,0,0,0,6937,6938,1,0,
		0,0,6938,6939,5,881,0,0,6939,6940,3,1018,509,0,6940,6942,5,882,0,0,6941,
		6943,3,770,385,0,6942,6941,1,0,0,0,6942,6943,1,0,0,0,6943,6946,1,0,0,0,
		6944,6945,5,112,0,0,6945,6947,3,1066,533,0,6946,6944,1,0,0,0,6946,6947,
		1,0,0,0,6947,519,1,0,0,0,6948,6968,5,189,0,0,6949,6950,5,881,0,0,6950,
		6955,3,772,386,0,6951,6952,5,883,0,0,6952,6954,3,772,386,0,6953,6951,1,
		0,0,0,6954,6957,1,0,0,0,6955,6953,1,0,0,0,6955,6956,1,0,0,0,6956,6958,
		1,0,0,0,6957,6955,1,0,0,0,6958,6959,5,882,0,0,6959,6969,1,0,0,0,6960,6965,
		3,772,386,0,6961,6962,5,883,0,0,6962,6964,3,772,386,0,6963,6961,1,0,0,
		0,6964,6967,1,0,0,0,6965,6963,1,0,0,0,6965,6966,1,0,0,0,6966,6969,1,0,
		0,0,6967,6965,1,0,0,0,6968,6949,1,0,0,0,6968,6960,1,0,0,0,6969,521,1,0,
		0,0,6970,6971,5,35,0,0,6971,6972,5,184,0,0,6972,6977,3,1006,503,0,6973,
		6974,5,881,0,0,6974,6975,3,1024,512,0,6975,6976,5,882,0,0,6976,6978,1,
		0,0,0,6977,6973,1,0,0,0,6977,6978,1,0,0,0,6978,6988,1,0,0,0,6979,6980,
		5,189,0,0,6980,6985,3,524,262,0,6981,6982,5,883,0,0,6982,6984,3,524,262,
		0,6983,6981,1,0,0,0,6984,6987,1,0,0,0,6985,6983,1,0,0,0,6985,6986,1,0,
		0,0,6986,6989,1,0,0,0,6987,6985,1,0,0,0,6988,6979,1,0,0,0,6988,6989,1,
		0,0,0,6989,6990,1,0,0,0,6990,6991,5,7,0,0,6991,6995,3,456,228,0,6992,6993,
		5,189,0,0,6993,6994,5,21,0,0,6994,6996,5,119,0,0,6995,6992,1,0,0,0,6995,
		6996,1,0,0,0,6996,6998,1,0,0,0,6997,6999,5,884,0,0,6998,6997,1,0,0,0,6998,
		6999,1,0,0,0,6999,523,1,0,0,0,7000,7001,7,64,0,0,7001,525,1,0,0,0,7002,
		7003,5,4,0,0,7003,7004,5,164,0,0,7004,7075,3,1004,502,0,7005,7006,5,158,
		0,0,7006,7007,5,881,0,0,7007,7008,5,393,0,0,7008,7009,5,863,0,0,7009,7010,
		7,65,0,0,7010,7076,5,882,0,0,7011,7012,5,2,0,0,7012,7076,3,754,377,0,7013,
		7014,5,4,0,0,7014,7015,5,27,0,0,7015,7076,3,758,379,0,7016,7017,5,57,0,
		0,7017,7018,5,27,0,0,7018,7023,3,1066,533,0,7019,7020,5,883,0,0,7020,7022,
		3,1066,533,0,7021,7019,1,0,0,0,7022,7025,1,0,0,0,7023,7021,1,0,0,0,7023,
		7024,1,0,0,0,7024,7076,1,0,0,0,7025,7023,1,0,0,0,7026,7027,5,57,0,0,7027,
		7028,5,30,0,0,7028,7076,3,1066,533,0,7029,7030,5,189,0,0,7030,7031,7,66,
		0,0,7031,7034,5,2,0,0,7032,7033,5,30,0,0,7033,7035,3,1066,533,0,7034,7032,
		1,0,0,0,7034,7035,1,0,0,0,7035,7061,1,0,0,0,7036,7037,5,72,0,0,7037,7038,
		5,95,0,0,7038,7039,5,881,0,0,7039,7040,3,1024,512,0,7040,7041,5,882,0,
		0,7041,7042,5,138,0,0,7042,7047,3,1004,502,0,7043,7044,5,881,0,0,7044,
		7045,3,1024,512,0,7045,7046,5,882,0,0,7046,7048,1,0,0,0,7047,7043,1,0,
		0,0,7047,7048,1,0,0,0,7048,7053,1,0,0,0,7049,7052,3,766,383,0,7050,7052,
		3,768,384,0,7051,7049,1,0,0,0,7051,7050,1,0,0,0,7052,7055,1,0,0,0,7053,
		7051,1,0,0,0,7053,7054,1,0,0,0,7054,7062,1,0,0,0,7055,7053,1,0,0,0,7056,
		7057,5,21,0,0,7057,7058,5,881,0,0,7058,7059,3,812,406,0,7059,7060,5,882,
		0,0,7060,7062,1,0,0,0,7061,7036,1,0,0,0,7061,7056,1,0,0,0,7062,7076,1,
		0,0,0,7063,7064,7,66,0,0,7064,7065,5,30,0,0,7065,7076,3,1066,533,0,7066,
		7067,7,25,0,0,7067,7069,5,172,0,0,7068,7070,3,1066,533,0,7069,7068,1,0,
		0,0,7069,7070,1,0,0,0,7070,7076,1,0,0,0,7071,7072,5,503,0,0,7072,7076,
		3,520,260,0,7073,7074,5,829,0,0,7074,7076,3,528,264,0,7075,7005,1,0,0,
		0,7075,7011,1,0,0,0,7075,7013,1,0,0,0,7075,7016,1,0,0,0,7075,7026,1,0,
		0,0,7075,7029,1,0,0,0,7075,7063,1,0,0,0,7075,7066,1,0,0,0,7075,7071,1,
		0,0,0,7075,7073,1,0,0,0,7076,7078,1,0,0,0,7077,7079,5,884,0,0,7078,7077,
		1,0,0,0,7078,7079,1,0,0,0,7079,527,1,0,0,0,7080,7082,5,466,0,0,7081,7080,
		1,0,0,0,7081,7082,1,0,0,0,7082,7083,1,0,0,0,7083,7085,3,788,394,0,7084,
		7081,1,0,0,0,7084,7085,1,0,0,0,7085,7086,1,0,0,0,7086,7087,5,168,0,0,7087,
		7090,3,1004,502,0,7088,7089,5,466,0,0,7089,7091,3,788,394,0,7090,7088,
		1,0,0,0,7090,7091,1,0,0,0,7091,7094,1,0,0,0,7092,7093,5,189,0,0,7093,7095,
		3,530,265,0,7094,7092,1,0,0,0,7094,7095,1,0,0,0,7095,529,1,0,0,0,7096,
		7097,5,843,0,0,7097,7098,5,881,0,0,7098,7099,5,735,0,0,7099,7100,5,863,
		0,0,7100,7102,3,460,230,0,7101,7103,5,421,0,0,7102,7101,1,0,0,0,7102,7103,
		1,0,0,0,7103,7104,1,0,0,0,7104,7105,5,883,0,0,7105,7106,5,631,0,0,7106,
		7107,5,863,0,0,7107,7108,7,67,0,0,7108,7109,5,882,0,0,7109,531,1,0,0,0,
		7110,7111,5,4,0,0,7111,7114,5,43,0,0,7112,7115,3,1066,533,0,7113,7115,
		5,37,0,0,7114,7112,1,0,0,0,7114,7113,1,0,0,0,7115,7130,1,0,0,0,7116,7117,
		5,425,0,0,7117,7118,5,428,0,0,7118,7119,5,863,0,0,7119,7131,3,1066,533,
		0,7120,7121,5,26,0,0,7121,7131,3,1066,533,0,7122,7123,5,158,0,0,7123,7126,
		3,542,271,0,7124,7125,5,189,0,0,7125,7127,3,612,306,0,7126,7124,1,0,0,
		0,7126,7127,1,0,0,0,7127,7131,1,0,0,0,7128,7131,3,534,267,0,7129,7131,
		3,538,269,0,7130,7116,1,0,0,0,7130,7120,1,0,0,0,7130,7122,1,0,0,0,7130,
		7128,1,0,0,0,7130,7129,1,0,0,0,7131,7133,1,0,0,0,7132,7134,5,884,0,0,7133,
		7132,1,0,0,0,7133,7134,1,0,0,0,7134,533,1,0,0,0,7135,7136,5,2,0,0,7136,
		7137,5,69,0,0,7137,7142,3,536,268,0,7138,7139,5,883,0,0,7139,7141,3,536,
		268,0,7140,7138,1,0,0,0,7141,7144,1,0,0,0,7142,7140,1,0,0,0,7142,7143,
		1,0,0,0,7143,7148,1,0,0,0,7144,7142,1,0,0,0,7145,7146,5,168,0,0,7146,7147,
		5,328,0,0,7147,7149,3,1066,533,0,7148,7145,1,0,0,0,7148,7149,1,0,0,0,7149,
		7168,1,0,0,0,7150,7151,5,2,0,0,7151,7152,5,727,0,0,7152,7153,5,69,0,0,
		7153,7158,3,536,268,0,7154,7155,5,883,0,0,7155,7157,3,536,268,0,7156,7154,
		1,0,0,0,7157,7160,1,0,0,0,7158,7156,1,0,0,0,7158,7159,1,0,0,0,7159,7168,
		1,0,0,0,7160,7158,1,0,0,0,7161,7162,5,511,0,0,7162,7163,5,69,0,0,7163,
		7168,3,1066,533,0,7164,7165,5,425,0,0,7165,7166,5,69,0,0,7166,7168,3,536,
		268,0,7167,7135,1,0,0,0,7167,7150,1,0,0,0,7167,7161,1,0,0,0,7167,7164,
		1,0,0,0,7168,535,1,0,0,0,7169,7170,5,881,0,0,7170,7171,5,428,0,0,7171,
		7172,5,863,0,0,7172,7177,3,1070,535,0,7173,7174,5,883,0,0,7174,7175,5,
		433,0,0,7175,7176,5,863,0,0,7176,7178,3,1070,535,0,7177,7173,1,0,0,0,7177,
		7178,1,0,0,0,7178,7183,1,0,0,0,7179,7180,5,883,0,0,7180,7181,5,330,0,0,
		7181,7182,5,863,0,0,7182,7184,5,859,0,0,7183,7179,1,0,0,0,7183,7184,1,
		0,0,0,7184,7189,1,0,0,0,7185,7186,5,883,0,0,7186,7187,5,559,0,0,7187,7188,
		5,863,0,0,7188,7190,3,1076,538,0,7189,7185,1,0,0,0,7189,7190,1,0,0,0,7190,
		7196,1,0,0,0,7191,7192,5,883,0,0,7192,7193,5,411,0,0,7193,7194,5,863,0,
		0,7194,7197,3,1076,538,0,7195,7197,5,607,0,0,7196,7191,1,0,0,0,7196,7195,
		1,0,0,0,7196,7197,1,0,0,0,7197,7202,1,0,0,0,7198,7199,5,883,0,0,7199,7200,
		5,329,0,0,7200,7201,5,863,0,0,7201,7203,3,1076,538,0,7202,7198,1,0,0,0,
		7202,7203,1,0,0,0,7203,7206,1,0,0,0,7204,7205,5,883,0,0,7205,7207,5,451,
		0,0,7206,7204,1,0,0,0,7206,7207,1,0,0,0,7207,7208,1,0,0,0,7208,7209,5,
		882,0,0,7209,537,1,0,0,0,7210,7211,5,2,0,0,7211,7212,5,328,0,0,7212,7217,
		3,1066,533,0,7213,7214,5,31,0,0,7214,7218,5,332,0,0,7215,7216,5,31,0,0,
		7216,7218,5,414,0,0,7217,7213,1,0,0,0,7217,7215,1,0,0,0,7217,7218,1,0,
		0,0,7218,7235,1,0,0,0,7219,7220,5,511,0,0,7220,7221,5,328,0,0,7221,7235,
		3,1066,533,0,7222,7223,5,425,0,0,7223,7224,5,328,0,0,7224,7232,3,1066,
		533,0,7225,7233,3,540,270,0,7226,7233,5,47,0,0,7227,7228,5,428,0,0,7228,
		7229,5,863,0,0,7229,7233,3,1066,533,0,7230,7233,5,229,0,0,7231,7233,5,
		228,0,0,7232,7225,1,0,0,0,7232,7226,1,0,0,0,7232,7227,1,0,0,0,7232,7230,
		1,0,0,0,7232,7231,1,0,0,0,7233,7235,1,0,0,0,7234,7210,1,0,0,0,7234,7219,
		1,0,0,0,7234,7222,1,0,0,0,7235,539,1,0,0,0,7236,7237,7,68,0,0,7237,541,
		1,0,0,0,7238,7262,3,544,272,0,7239,7262,3,546,273,0,7240,7262,3,550,275,
		0,7241,7262,3,552,276,0,7242,7262,3,556,278,0,7243,7262,3,582,291,0,7244,
		7262,3,584,292,0,7245,7262,3,586,293,0,7246,7262,3,588,294,0,7247,7262,
		3,590,295,0,7248,7262,3,592,296,0,7249,7262,3,594,297,0,7250,7251,5,332,
		0,0,7251,7262,3,988,494,0,7252,7262,3,596,298,0,7253,7262,3,598,299,0,
		7254,7262,3,600,300,0,7255,7262,3,602,301,0,7256,7262,3,604,302,0,7257,
		7262,3,606,303,0,7258,7262,3,608,304,0,7259,7262,3,610,305,0,7260,7262,
		3,612,306,0,7261,7238,1,0,0,0,7261,7239,1,0,0,0,7261,7240,1,0,0,0,7261,
		7241,1,0,0,0,7261,7242,1,0,0,0,7261,7243,1,0,0,0,7261,7244,1,0,0,0,7261,
		7245,1,0,0,0,7261,7246,1,0,0,0,7261,7247,1,0,0,0,7261,7248,1,0,0,0,7261,
		7249,1,0,0,0,7261,7250,1,0,0,0,7261,7252,1,0,0,0,7261,7253,1,0,0,0,7261,
		7254,1,0,0,0,7261,7255,1,0,0,0,7261,7256,1,0,0,0,7261,7257,1,0,0,0,7261,
		7258,1,0,0,0,7261,7259,1,0,0,0,7261,7260,1,0,0,0,7262,543,1,0,0,0,7263,
		7264,5,223,0,0,7264,7281,3,1028,514,0,7265,7266,5,224,0,0,7266,7281,5,
		110,0,0,7267,7272,5,112,0,0,7268,7269,5,365,0,0,7269,7270,5,863,0,0,7270,
		7273,5,112,0,0,7271,7273,5,110,0,0,7272,7268,1,0,0,0,7272,7271,1,0,0,0,
		7273,7281,1,0,0,0,7274,7275,5,225,0,0,7275,7281,3,1028,514,0,7276,7277,
		5,226,0,0,7277,7281,3,1028,514,0,7278,7279,5,227,0,0,7279,7281,7,7,0,0,
		7280,7263,1,0,0,0,7280,7265,1,0,0,0,7280,7267,1,0,0,0,7280,7274,1,0,0,
		0,7280,7276,1,0,0,0,7280,7278,1,0,0,0,7281,545,1,0,0,0,7282,7283,5,251,
		0,0,7283,7299,5,863,0,0,7284,7300,5,110,0,0,7285,7296,5,112,0,0,7286,7291,
		3,548,274,0,7287,7288,5,883,0,0,7288,7290,3,548,274,0,7289,7287,1,0,0,
		0,7290,7293,1,0,0,0,7291,7289,1,0,0,0,7291,7292,1,0,0,0,7292,7295,1,0,
		0,0,7293,7291,1,0,0,0,7294,7286,1,0,0,0,7295,7298,1,0,0,0,7296,7294,1,
		0,0,0,7296,7297,1,0,0,0,7297,7300,1,0,0,0,7298,7296,1,0,0,0,7299,7284,
		1,0,0,0,7299,7285,1,0,0,0,7300,547,1,0,0,0,7301,7302,5,222,0,0,7302,7303,
		5,863,0,0,7303,7308,3,1028,514,0,7304,7305,5,250,0,0,7305,7306,5,863,0,
		0,7306,7308,7,69,0,0,7307,7301,1,0,0,0,7307,7304,1,0,0,0,7308,549,1,0,
		0,0,7309,7310,5,668,0,0,7310,7311,5,863,0,0,7311,7312,7,55,0,0,7312,551,
		1,0,0,0,7313,7314,5,274,0,0,7314,7318,3,1028,514,0,7315,7316,5,275,0,0,
		7316,7318,7,70,0,0,7317,7313,1,0,0,0,7317,7315,1,0,0,0,7318,553,1,0,0,
		0,7319,7320,5,4,0,0,7320,7321,5,688,0,0,7321,7324,3,1066,533,0,7322,7323,
		5,9,0,0,7323,7325,3,1066,533,0,7324,7322,1,0,0,0,7324,7325,1,0,0,0,7325,
		7333,1,0,0,0,7326,7327,5,820,0,0,7327,7331,5,863,0,0,7328,7332,5,823,0,
		0,7329,7332,5,826,0,0,7330,7332,5,303,0,0,7331,7328,1,0,0,0,7331,7329,
		1,0,0,0,7331,7330,1,0,0,0,7332,7334,1,0,0,0,7333,7326,1,0,0,0,7333,7334,
		1,0,0,0,7334,7335,1,0,0,0,7335,7336,5,7,0,0,7336,7337,5,832,0,0,7337,7338,
		5,881,0,0,7338,7339,5,725,0,0,7339,7340,5,863,0,0,7340,7345,5,857,0,0,
		7341,7342,5,883,0,0,7342,7343,5,724,0,0,7343,7344,5,863,0,0,7344,7346,
		7,71,0,0,7345,7341,1,0,0,0,7345,7346,1,0,0,0,7346,7347,1,0,0,0,7347,7457,
		5,882,0,0,7348,7458,5,600,0,0,7349,7350,5,71,0,0,7350,7351,5,805,0,0,7351,
		7352,5,881,0,0,7352,7353,5,644,0,0,7353,7370,5,863,0,0,7354,7356,5,844,
		0,0,7355,7357,7,72,0,0,7356,7355,1,0,0,0,7356,7357,1,0,0,0,7357,7360,1,
		0,0,0,7358,7359,5,657,0,0,7359,7361,3,1066,533,0,7360,7358,1,0,0,0,7360,
		7361,1,0,0,0,7361,7371,1,0,0,0,7362,7363,5,657,0,0,7363,7365,3,1066,533,
		0,7364,7366,5,844,0,0,7365,7364,1,0,0,0,7365,7366,1,0,0,0,7366,7368,1,
		0,0,0,7367,7369,7,72,0,0,7368,7367,1,0,0,0,7368,7369,1,0,0,0,7369,7371,
		1,0,0,0,7370,7354,1,0,0,0,7370,7362,1,0,0,0,7371,7389,1,0,0,0,7372,7374,
		5,883,0,0,7373,7372,1,0,0,0,7373,7374,1,0,0,0,7374,7375,1,0,0,0,7375,7376,
		5,313,0,0,7376,7377,5,863,0,0,7377,7387,7,73,0,0,7378,7385,5,207,0,0,7379,
		7386,5,634,0,0,7380,7386,5,495,0,0,7381,7382,5,634,0,0,7382,7386,5,495,
		0,0,7383,7384,5,495,0,0,7384,7386,5,634,0,0,7385,7379,1,0,0,0,7385,7380,
		1,0,0,0,7385,7381,1,0,0,0,7385,7383,1,0,0,0,7386,7388,1,0,0,0,7387,7378,
		1,0,0,0,7387,7388,1,0,0,0,7388,7390,1,0,0,0,7389,7373,1,0,0,0,7389,7390,
		1,0,0,0,7390,7397,1,0,0,0,7391,7393,5,883,0,0,7392,7391,1,0,0,0,7392,7393,
		1,0,0,0,7393,7394,1,0,0,0,7394,7395,5,743,0,0,7395,7396,5,863,0,0,7396,
		7398,7,74,0,0,7397,7392,1,0,0,0,7397,7398,1,0,0,0,7398,7405,1,0,0,0,7399,
		7401,5,883,0,0,7400,7399,1,0,0,0,7400,7401,1,0,0,0,7401,7402,1,0,0,0,7402,
		7403,5,744,0,0,7403,7404,5,863,0,0,7404,7406,5,857,0,0,7405,7400,1,0,0,
		0,7405,7406,1,0,0,0,7406,7407,1,0,0,0,7407,7458,5,882,0,0,7408,7409,5,
		71,0,0,7409,7410,5,678,0,0,7410,7411,5,881,0,0,7411,7412,5,644,0,0,7412,
		7429,5,863,0,0,7413,7415,5,844,0,0,7414,7416,7,72,0,0,7415,7414,1,0,0,
		0,7415,7416,1,0,0,0,7416,7419,1,0,0,0,7417,7418,5,657,0,0,7418,7420,3,
		1066,533,0,7419,7417,1,0,0,0,7419,7420,1,0,0,0,7420,7430,1,0,0,0,7421,
		7422,5,657,0,0,7422,7424,3,1066,533,0,7423,7425,5,844,0,0,7424,7423,1,
		0,0,0,7424,7425,1,0,0,0,7425,7427,1,0,0,0,7426,7428,7,72,0,0,7427,7426,
		1,0,0,0,7427,7428,1,0,0,0,7428,7430,1,0,0,0,7429,7413,1,0,0,0,7429,7421,
		1,0,0,0,7430,7448,1,0,0,0,7431,7433,5,883,0,0,7432,7431,1,0,0,0,7432,7433,
		1,0,0,0,7433,7434,1,0,0,0,7434,7435,5,313,0,0,7435,7436,5,863,0,0,7436,
		7446,7,73,0,0,7437,7444,5,207,0,0,7438,7445,5,634,0,0,7439,7445,5,495,
		0,0,7440,7441,5,634,0,0,7441,7445,5,495,0,0,7442,7443,5,495,0,0,7443,7445,
		5,634,0,0,7444,7438,1,0,0,0,7444,7439,1,0,0,0,7444,7440,1,0,0,0,7444,7442,
		1,0,0,0,7445,7447,1,0,0,0,7446,7437,1,0,0,0,7446,7447,1,0,0,0,7447,7449,
		1,0,0,0,7448,7432,1,0,0,0,7448,7449,1,0,0,0,7449,7451,1,0,0,0,7450,7452,
		5,883,0,0,7451,7450,1,0,0,0,7451,7452,1,0,0,0,7452,7453,1,0,0,0,7453,7454,
		5,791,0,0,7454,7455,5,863,0,0,7455,7456,7,75,0,0,7456,7458,5,882,0,0,7457,
		7348,1,0,0,0,7457,7349,1,0,0,0,7457,7408,1,0,0,0,7458,555,1,0,0,0,7459,
		7460,3,558,279,0,7460,557,1,0,0,0,7461,7462,3,560,280,0,7462,7463,3,566,
		283,0,7463,7468,1,0,0,0,7464,7465,3,562,281,0,7465,7466,3,568,284,0,7466,
		7468,1,0,0,0,7467,7461,1,0,0,0,7467,7464,1,0,0,0,7468,559,1,0,0,0,7469,
		7470,5,468,0,0,7470,561,1,0,0,0,7471,7472,5,846,0,0,7472,563,1,0,0,0,7473,
		7474,5,863,0,0,7474,565,1,0,0,0,7475,7476,3,564,282,0,7476,7477,3,572,
		286,0,7477,7488,1,0,0,0,7478,7488,5,697,0,0,7479,7488,5,702,0,0,7480,7488,
		5,110,0,0,7481,7488,5,787,0,0,7482,7483,5,798,0,0,7483,7488,7,76,0,0,7484,
		7488,5,578,0,0,7485,7486,5,590,0,0,7486,7488,5,857,0,0,7487,7475,1,0,0,
		0,7487,7478,1,0,0,0,7487,7479,1,0,0,0,7487,7480,1,0,0,0,7487,7481,1,0,
		0,0,7487,7482,1,0,0,0,7487,7484,1,0,0,0,7487,7485,1,0,0,0,7488,567,1,0,
		0,0,7489,7490,3,564,282,0,7490,7491,3,570,285,0,7491,7494,1,0,0,0,7492,
		7494,5,110,0,0,7493,7489,1,0,0,0,7493,7492,1,0,0,0,7494,569,1,0,0,0,7495,
		7496,3,572,286,0,7496,571,1,0,0,0,7497,7498,3,576,288,0,7498,7499,3,580,
		290,0,7499,7500,3,574,287,0,7500,7501,3,578,289,0,7501,573,1,0,0,0,7502,
		7503,5,885,0,0,7503,575,1,0,0,0,7504,7505,5,832,0,0,7505,7506,5,885,0,
		0,7506,7507,5,56,0,0,7507,577,1,0,0,0,7508,7509,5,857,0,0,7509,579,1,0,
		0,0,7510,7511,3,1066,533,0,7511,7512,5,876,0,0,7512,7513,3,580,290,0,7513,
		7521,1,0,0,0,7514,7515,3,1066,533,0,7515,7516,5,876,0,0,7516,7519,1,0,
		0,0,7517,7519,3,1066,533,0,7518,7514,1,0,0,0,7518,7517,1,0,0,0,7519,7521,
		1,0,0,0,7520,7510,1,0,0,0,7520,7518,1,0,0,0,7521,581,1,0,0,0,7522,7523,
		5,277,0,0,7523,7524,3,1028,514,0,7524,583,1,0,0,0,7525,7526,5,313,0,0,
		7526,7527,3,1028,514,0,7527,585,1,0,0,0,7528,7529,7,77,0,0,7529,587,1,
		0,0,0,7530,7531,7,78,0,0,7531,589,1,0,0,0,7532,7533,7,79,0,0,7533,591,
		1,0,0,0,7534,7535,5,291,0,0,7535,7536,5,863,0,0,7536,7537,7,80,0,0,7537,
		593,1,0,0,0,7538,7539,5,283,0,0,7539,7564,3,1028,514,0,7540,7541,5,598,
		0,0,7541,7564,3,1028,514,0,7542,7543,5,288,0,0,7543,7546,5,863,0,0,7544,
		7547,3,1066,533,0,7545,7547,5,859,0,0,7546,7544,1,0,0,0,7546,7545,1,0,
		0,0,7547,7564,1,0,0,0,7548,7549,5,287,0,0,7549,7552,5,863,0,0,7550,7553,
		3,1066,533,0,7551,7553,5,859,0,0,7552,7550,1,0,0,0,7552,7551,1,0,0,0,7553,
		7564,1,0,0,0,7554,7555,5,429,0,0,7555,7556,5,863,0,0,7556,7564,7,7,0,0,
		7557,7558,5,595,0,0,7558,7559,5,863,0,0,7559,7564,7,7,0,0,7560,7561,5,
		601,0,0,7561,7562,5,863,0,0,7562,7564,5,857,0,0,7563,7538,1,0,0,0,7563,
		7540,1,0,0,0,7563,7542,1,0,0,0,7563,7548,1,0,0,0,7563,7554,1,0,0,0,7563,
		7557,1,0,0,0,7563,7560,1,0,0,0,7564,595,1,0,0,0,7565,7574,5,353,0,0,7566,
		7567,5,230,0,0,7567,7568,5,80,0,0,7568,7569,5,863,0,0,7569,7572,3,1066,
		533,0,7570,7572,5,110,0,0,7571,7566,1,0,0,0,7571,7570,1,0,0,0,7572,7575,
		1,0,0,0,7573,7575,7,81,0,0,7574,7571,1,0,0,0,7574,7573,1,0,0,0,7575,597,
		1,0,0,0,7576,7577,5,423,0,0,7577,7578,7,7,0,0,7578,599,1,0,0,0,7579,7580,
		5,465,0,0,7580,7581,7,82,0,0,7581,601,1,0,0,0,7582,7583,5,506,0,0,7583,
		7592,7,83,0,0,7584,7585,5,593,0,0,7585,7592,3,1028,514,0,7586,7587,5,10,
		0,0,7587,7588,5,863,0,0,7588,7592,3,1028,514,0,7589,7590,5,464,0,0,7590,
		7592,7,84,0,0,7591,7582,1,0,0,0,7591,7584,1,0,0,0,7591,7586,1,0,0,0,7591,
		7589,1,0,0,0,7592,603,1,0,0,0,7593,7600,5,311,0,0,7594,7600,5,302,0,0,
		7595,7600,5,431,0,0,7596,7600,5,315,0,0,7597,7598,5,357,0,0,7598,7600,
		3,1028,514,0,7599,7593,1,0,0,0,7599,7594,1,0,0,0,7599,7595,1,0,0,0,7599,
		7596,1,0,0,0,7599,7597,1,0,0,0,7600,605,1,0,0,0,7601,7602,5,209,0,0,7602,
		7607,3,1028,514,0,7603,7604,5,497,0,0,7604,7607,7,7,0,0,7605,7607,7,7,
		0,0,7606,7601,1,0,0,0,7606,7603,1,0,0,0,7606,7605,1,0,0,0,7607,607,1,0,
		0,0,7608,7609,5,211,0,0,7609,7630,3,1028,514,0,7610,7611,5,212,0,0,7611,
		7630,3,1028,514,0,7612,7613,5,213,0,0,7613,7630,3,1028,514,0,7614,7615,
		5,214,0,0,7615,7630,3,1028,514,0,7616,7617,5,217,0,0,7617,7630,3,1028,
		514,0,7618,7619,5,259,0,0,7619,7620,5,863,0,0,7620,7630,5,857,0,0,7621,
		7622,5,261,0,0,7622,7630,3,1028,514,0,7623,7624,5,449,0,0,7624,7630,3,
		1028,514,0,7625,7626,5,491,0,0,7626,7630,3,1028,514,0,7627,7628,5,507,
		0,0,7628,7630,3,1028,514,0,7629,7608,1,0,0,0,7629,7610,1,0,0,0,7629,7612,
		1,0,0,0,7629,7614,1,0,0,0,7629,7616,1,0,0,0,7629,7618,1,0,0,0,7629,7621,
		1,0,0,0,7629,7623,1,0,0,0,7629,7625,1,0,0,0,7629,7627,1,0,0,0,7630,609,
		1,0,0,0,7631,7632,5,584,0,0,7632,7633,5,863,0,0,7633,7634,5,857,0,0,7634,
		7635,7,85,0,0,7635,611,1,0,0,0,7636,7637,5,146,0,0,7637,7638,5,205,0,0,
		7638,7643,5,857,0,0,7639,7640,5,146,0,0,7640,7643,5,361,0,0,7641,7643,
		5,437,0,0,7642,7636,1,0,0,0,7642,7639,1,0,0,0,7642,7641,1,0,0,0,7643,613,
		1,0,0,0,7644,7645,5,57,0,0,7645,7648,5,88,0,0,7646,7647,5,86,0,0,7647,
		7649,5,65,0,0,7648,7646,1,0,0,0,7648,7649,1,0,0,0,7649,7666,1,0,0,0,7650,
		7655,3,616,308,0,7651,7652,5,883,0,0,7652,7654,3,616,308,0,7653,7651,1,
		0,0,0,7654,7657,1,0,0,0,7655,7653,1,0,0,0,7655,7656,1,0,0,0,7656,7667,
		1,0,0,0,7657,7655,1,0,0,0,7658,7663,3,618,309,0,7659,7660,5,883,0,0,7660,
		7662,3,618,309,0,7661,7659,1,0,0,0,7662,7665,1,0,0,0,7663,7661,1,0,0,0,
		7663,7664,1,0,0,0,7664,7667,1,0,0,0,7665,7663,1,0,0,0,7666,7650,1,0,0,
		0,7666,7658,1,0,0,0,7667,7669,1,0,0,0,7668,7670,5,884,0,0,7669,7668,1,
		0,0,0,7669,7670,1,0,0,0,7670,615,1,0,0,0,7671,7672,3,1066,533,0,7672,7673,
		5,112,0,0,7673,7674,3,1002,501,0,7674,617,1,0,0,0,7675,7676,3,1066,533,
		0,7676,7677,5,876,0,0,7677,7679,1,0,0,0,7678,7675,1,0,0,0,7678,7679,1,
		0,0,0,7679,7680,1,0,0,0,7680,7681,3,1066,533,0,7681,7682,5,876,0,0,7682,
		7683,3,1066,533,0,7683,619,1,0,0,0,7684,7685,5,57,0,0,7685,7688,7,57,0,
		0,7686,7687,5,86,0,0,7687,7689,5,65,0,0,7688,7686,1,0,0,0,7688,7689,1,
		0,0,0,7689,7690,1,0,0,0,7690,7695,3,1008,504,0,7691,7692,5,883,0,0,7692,
		7694,3,1008,504,0,7693,7691,1,0,0,0,7694,7697,1,0,0,0,7695,7693,1,0,0,
		0,7695,7696,1,0,0,0,7696,7699,1,0,0,0,7697,7695,1,0,0,0,7698,7700,5,884,
		0,0,7699,7698,1,0,0,0,7699,7700,1,0,0,0,7700,621,1,0,0,0,7701,7704,3,624,
		312,0,7702,7704,3,626,313,0,7703,7701,1,0,0,0,7703,7702,1,0,0,0,7704,623,
		1,0,0,0,7705,7706,5,57,0,0,7706,7709,5,172,0,0,7707,7708,5,86,0,0,7708,
		7710,5,65,0,0,7709,7707,1,0,0,0,7709,7710,1,0,0,0,7710,7711,1,0,0,0,7711,
		7716,3,1006,503,0,7712,7713,5,883,0,0,7713,7715,3,1006,503,0,7714,7712,
		1,0,0,0,7715,7718,1,0,0,0,7716,7714,1,0,0,0,7716,7717,1,0,0,0,7717,7720,
		1,0,0,0,7718,7716,1,0,0,0,7719,7721,5,884,0,0,7720,7719,1,0,0,0,7720,7721,
		1,0,0,0,7721,625,1,0,0,0,7722,7723,5,57,0,0,7723,7726,5,172,0,0,7724,7725,
		5,86,0,0,7725,7727,5,65,0,0,7726,7724,1,0,0,0,7726,7727,1,0,0,0,7727,7728,
		1,0,0,0,7728,7733,3,1006,503,0,7729,7730,5,883,0,0,7730,7732,3,1006,503,
		0,7731,7729,1,0,0,0,7732,7735,1,0,0,0,7733,7731,1,0,0,0,7733,7734,1,0,
		0,0,7734,7736,1,0,0,0,7735,7733,1,0,0,0,7736,7740,5,112,0,0,7737,7741,
		5,43,0,0,7738,7739,5,3,0,0,7739,7741,5,803,0,0,7740,7737,1,0,0,0,7740,
		7738,1,0,0,0,7741,7743,1,0,0,0,7742,7744,5,884,0,0,7743,7742,1,0,0,0,7743,
		7744,1,0,0,0,7744,627,1,0,0,0,7745,7746,5,57,0,0,7746,7749,5,77,0,0,7747,
		7748,5,86,0,0,7748,7750,5,65,0,0,7749,7747,1,0,0,0,7749,7750,1,0,0,0,7750,
		7751,1,0,0,0,7751,7756,3,1008,504,0,7752,7753,5,883,0,0,7753,7755,3,1008,
		504,0,7754,7752,1,0,0,0,7755,7758,1,0,0,0,7756,7754,1,0,0,0,7756,7757,
		1,0,0,0,7757,7760,1,0,0,0,7758,7756,1,0,0,0,7759,7761,5,884,0,0,7760,7759,
		1,0,0,0,7760,7761,1,0,0,0,7761,629,1,0,0,0,7762,7763,5,57,0,0,7763,7773,
		5,162,0,0,7764,7766,5,883,0,0,7765,7764,1,0,0,0,7765,7766,1,0,0,0,7766,
		7770,1,0,0,0,7767,7768,3,1004,502,0,7768,7769,5,876,0,0,7769,7771,1,0,
		0,0,7770,7767,1,0,0,0,7770,7771,1,0,0,0,7771,7772,1,0,0,0,7772,7774,3,
		1066,533,0,7773,7765,1,0,0,0,7774,7775,1,0,0,0,7775,7773,1,0,0,0,7775,
		7776,1,0,0,0,7776,7777,1,0,0,0,7777,7778,5,884,0,0,7778,631,1,0,0,0,7779,
		7780,5,57,0,0,7780,7783,5,164,0,0,7781,7782,5,86,0,0,7782,7784,5,65,0,
		0,7783,7781,1,0,0,0,7783,7784,1,0,0,0,7784,7785,1,0,0,0,7785,7787,3,1004,
		502,0,7786,7788,5,884,0,0,7787,7786,1,0,0,0,7787,7788,1,0,0,0,7788,633,
		1,0,0,0,7789,7790,5,57,0,0,7790,7793,5,184,0,0,7791,7792,5,86,0,0,7792,
		7794,5,65,0,0,7793,7791,1,0,0,0,7793,7794,1,0,0,0,7794,7795,1,0,0,0,7795,
		7800,3,1006,503,0,7796,7797,5,883,0,0,7797,7799,3,1006,503,0,7798,7796,
		1,0,0,0,7799,7802,1,0,0,0,7800,7798,1,0,0,0,7800,7801,1,0,0,0,7801,7804,
		1,0,0,0,7802,7800,1,0,0,0,7803,7805,5,884,0,0,7804,7803,1,0,0,0,7804,7805,
		1,0,0,0,7805,635,1,0,0,0,7806,7807,5,35,0,0,7807,7808,5,602,0,0,7808,7813,
		3,1006,503,0,7809,7810,5,75,0,0,7810,7811,3,1056,528,0,7811,7812,3,1058,
		529,0,7812,7814,1,0,0,0,7813,7809,1,0,0,0,7813,7814,1,0,0,0,7814,7821,
		1,0,0,0,7815,7816,5,7,0,0,7816,7817,5,164,0,0,7817,7818,5,881,0,0,7818,
		7819,3,754,377,0,7819,7820,5,882,0,0,7820,7822,1,0,0,0,7821,7815,1,0,0,
		0,7821,7822,1,0,0,0,7822,637,1,0,0,0,7823,7824,5,57,0,0,7824,7827,5,602,
		0,0,7825,7826,5,86,0,0,7826,7828,5,65,0,0,7827,7825,1,0,0,0,7827,7828,
		1,0,0,0,7828,7829,1,0,0,0,7829,7830,3,1006,503,0,7830,639,1,0,0,0,7831,
		7834,3,642,321,0,7832,7834,3,644,322,0,7833,7831,1,0,0,0,7833,7832,1,0,
		0,0,7834,641,1,0,0,0,7835,7836,5,115,0,0,7836,7837,5,881,0,0,7837,7838,
		3,1066,533,0,7838,7839,5,883,0,0,7839,7840,5,859,0,0,7840,7841,5,882,0,
		0,7841,643,1,0,0,0,7842,7843,5,114,0,0,7843,7844,5,881,0,0,7844,7845,5,
		859,0,0,7845,7846,5,883,0,0,7846,7847,5,859,0,0,7847,7848,5,882,0,0,7848,
		7850,5,876,0,0,7849,7851,3,1066,533,0,7850,7849,1,0,0,0,7850,7851,1,0,
		0,0,7851,7852,1,0,0,0,7852,7854,5,876,0,0,7853,7855,3,1066,533,0,7854,
		7853,1,0,0,0,7854,7855,1,0,0,0,7855,7856,1,0,0,0,7856,7857,5,876,0,0,7857,
		7858,3,1066,533,0,7858,645,1,0,0,0,7859,7860,5,46,0,0,7860,7862,5,856,
		0,0,7861,7863,5,7,0,0,7862,7861,1,0,0,0,7862,7863,1,0,0,0,7863,7866,1,
		0,0,0,7864,7867,3,746,373,0,7865,7867,3,1004,502,0,7866,7864,1,0,0,0,7866,
		7865,1,0,0,0,7867,7869,1,0,0,0,7868,7870,5,884,0,0,7869,7868,1,0,0,0,7869,
		7870,1,0,0,0,7870,7908,1,0,0,0,7871,7872,5,46,0,0,7872,7877,3,744,372,
		0,7873,7874,5,883,0,0,7874,7876,3,744,372,0,7875,7873,1,0,0,0,7876,7879,
		1,0,0,0,7877,7875,1,0,0,0,7877,7878,1,0,0,0,7878,7881,1,0,0,0,7879,7877,
		1,0,0,0,7880,7882,5,884,0,0,7881,7880,1,0,0,0,7881,7882,1,0,0,0,7882,7908,
		1,0,0,0,7883,7884,5,46,0,0,7884,7886,5,856,0,0,7885,7887,5,7,0,0,7886,
		7885,1,0,0,0,7886,7887,1,0,0,0,7887,7888,1,0,0,0,7888,7890,3,750,375,0,
		7889,7891,5,884,0,0,7890,7889,1,0,0,0,7890,7891,1,0,0,0,7891,7908,1,0,
		0,0,7892,7893,5,189,0,0,7893,7894,5,626,0,0,7894,7895,5,881,0,0,7895,7900,
		3,648,324,0,7896,7897,5,883,0,0,7897,7899,3,648,324,0,7898,7896,1,0,0,
		0,7899,7902,1,0,0,0,7900,7898,1,0,0,0,7900,7901,1,0,0,0,7901,7903,1,0,
		0,0,7902,7900,1,0,0,0,7903,7905,5,882,0,0,7904,7906,5,884,0,0,7905,7904,
		1,0,0,0,7905,7906,1,0,0,0,7906,7908,1,0,0,0,7907,7859,1,0,0,0,7907,7871,
		1,0,0,0,7907,7883,1,0,0,0,7907,7892,1,0,0,0,7908,647,1,0,0,0,7909,7910,
		5,859,0,0,7910,7911,5,7,0,0,7911,7915,3,1066,533,0,7912,7913,5,47,0,0,
		7913,7915,5,859,0,0,7914,7909,1,0,0,0,7914,7912,1,0,0,0,7915,649,1,0,0,
		0,7916,7918,5,23,0,0,7917,7919,5,347,0,0,7918,7917,1,0,0,0,7918,7919,1,
		0,0,0,7919,7920,1,0,0,0,7920,7922,3,1026,513,0,7921,7923,5,884,0,0,7922,
		7921,1,0,0,0,7922,7923,1,0,0,0,7923,7946,1,0,0,0,7924,7926,5,45,0,0,7925,
		7927,5,347,0,0,7926,7925,1,0,0,0,7926,7927,1,0,0,0,7927,7929,1,0,0,0,7928,
		7930,5,42,0,0,7929,7928,1,0,0,0,7929,7930,1,0,0,0,7930,7931,1,0,0,0,7931,
		7933,3,1026,513,0,7932,7934,5,884,0,0,7933,7932,1,0,0,0,7933,7934,1,0,
		0,0,7934,7946,1,0,0,0,7935,7946,3,774,387,0,7936,7946,3,780,390,0,7937,
		7939,5,113,0,0,7938,7940,5,347,0,0,7939,7938,1,0,0,0,7939,7940,1,0,0,0,
		7940,7941,1,0,0,0,7941,7943,3,1026,513,0,7942,7944,5,884,0,0,7943,7942,
		1,0,0,0,7943,7944,1,0,0,0,7944,7946,1,0,0,0,7945,7916,1,0,0,0,7945,7924,
		1,0,0,0,7945,7935,1,0,0,0,7945,7936,1,0,0,0,7945,7937,1,0,0,0,7946,651,
		1,0,0,0,7947,7948,5,12,0,0,7948,7949,5,43,0,0,7949,7962,3,1066,533,0,7950,
		7959,5,778,0,0,7951,7953,5,883,0,0,7952,7951,1,0,0,0,7952,7953,1,0,0,0,
		7953,7954,1,0,0,0,7954,7955,7,86,0,0,7955,7956,5,863,0,0,7956,7958,5,859,
		0,0,7957,7952,1,0,0,0,7958,7961,1,0,0,0,7959,7957,1,0,0,0,7959,7960,1,
		0,0,0,7960,7963,1,0,0,0,7961,7959,1,0,0,0,7962,7950,1,0,0,0,7962,7963,
		1,0,0,0,7963,7972,1,0,0,0,7964,7966,5,883,0,0,7965,7964,1,0,0,0,7965,7966,
		1,0,0,0,7966,7967,1,0,0,0,7967,7968,7,86,0,0,7968,7969,5,863,0,0,7969,
		7971,5,859,0,0,7970,7965,1,0,0,0,7971,7974,1,0,0,0,7972,7970,1,0,0,0,7972,
		7973,1,0,0,0,7973,7998,1,0,0,0,7974,7972,1,0,0,0,7975,7980,5,168,0,0,7976,
		7978,5,883,0,0,7977,7976,1,0,0,0,7977,7978,1,0,0,0,7978,7979,1,0,0,0,7979,
		7981,3,1066,533,0,7980,7977,1,0,0,0,7981,7982,1,0,0,0,7982,7980,1,0,0,
		0,7982,7983,1,0,0,0,7983,7999,1,0,0,0,7984,7994,5,168,0,0,7985,7987,5,
		883,0,0,7986,7985,1,0,0,0,7986,7987,1,0,0,0,7987,7988,1,0,0,0,7988,7989,
		7,87,0,0,7989,7992,5,863,0,0,7990,7993,5,859,0,0,7991,7993,3,1066,533,
		0,7992,7990,1,0,0,0,7992,7991,1,0,0,0,7993,7995,1,0,0,0,7994,7986,1,0,
		0,0,7995,7996,1,0,0,0,7996,7994,1,0,0,0,7996,7997,1,0,0,0,7997,7999,1,
		0,0,0,7998,7975,1,0,0,0,7998,7984,1,0,0,0,7999,8033,1,0,0,0,8000,8001,
		5,746,0,0,8001,8006,5,168,0,0,8002,8004,5,883,0,0,8003,8002,1,0,0,0,8003,
		8004,1,0,0,0,8004,8005,1,0,0,0,8005,8007,3,1066,533,0,8006,8003,1,0,0,
		0,8007,8008,1,0,0,0,8008,8006,1,0,0,0,8008,8009,1,0,0,0,8009,8011,1,0,
		0,0,8010,8000,1,0,0,0,8011,8012,1,0,0,0,8012,8010,1,0,0,0,8012,8013,1,
		0,0,0,8013,8034,1,0,0,0,8014,8015,5,746,0,0,8015,8025,5,168,0,0,8016,8018,
		5,883,0,0,8017,8016,1,0,0,0,8017,8018,1,0,0,0,8018,8019,1,0,0,0,8019,8020,
		7,87,0,0,8020,8023,5,863,0,0,8021,8024,5,859,0,0,8022,8024,3,1066,533,
		0,8023,8021,1,0,0,0,8023,8022,1,0,0,0,8024,8026,1,0,0,0,8025,8017,1,0,
		0,0,8026,8027,1,0,0,0,8027,8025,1,0,0,0,8027,8028,1,0,0,0,8028,8030,1,
		0,0,0,8029,8014,1,0,0,0,8030,8031,1,0,0,0,8031,8029,1,0,0,0,8031,8032,
		1,0,0,0,8032,8034,1,0,0,0,8033,8010,1,0,0,0,8033,8029,1,0,0,0,8033,8034,
		1,0,0,0,8034,8195,1,0,0,0,8035,8192,5,189,0,0,8036,8038,5,883,0,0,8037,
		8036,1,0,0,0,8037,8038,1,0,0,0,8038,8039,1,0,0,0,8039,8191,5,684,0,0,8040,
		8042,5,883,0,0,8041,8040,1,0,0,0,8041,8042,1,0,0,0,8042,8043,1,0,0,0,8043,
		8191,5,674,0,0,8044,8046,5,883,0,0,8045,8044,1,0,0,0,8045,8046,1,0,0,0,
		8046,8047,1,0,0,0,8047,8191,7,88,0,0,8048,8050,5,883,0,0,8049,8048,1,0,
		0,0,8049,8050,1,0,0,0,8050,8051,1,0,0,0,8051,8052,5,296,0,0,8052,8055,
		5,863,0,0,8053,8056,5,859,0,0,8054,8056,3,1066,533,0,8055,8053,1,0,0,0,
		8055,8054,1,0,0,0,8056,8191,1,0,0,0,8057,8059,5,883,0,0,8058,8057,1,0,
		0,0,8058,8059,1,0,0,0,8059,8060,1,0,0,0,8060,8061,5,428,0,0,8061,8062,
		5,863,0,0,8062,8191,3,1066,533,0,8063,8065,5,883,0,0,8064,8063,1,0,0,0,
		8064,8065,1,0,0,0,8065,8066,1,0,0,0,8066,8191,5,271,0,0,8067,8069,5,883,
		0,0,8068,8067,1,0,0,0,8068,8069,1,0,0,0,8069,8070,1,0,0,0,8070,8191,5,
		700,0,0,8071,8073,5,883,0,0,8072,8071,1,0,0,0,8072,8073,1,0,0,0,8073,8086,
		1,0,0,0,8074,8075,5,694,0,0,8075,8078,5,863,0,0,8076,8079,5,859,0,0,8077,
		8079,3,1066,533,0,8078,8076,1,0,0,0,8078,8077,1,0,0,0,8079,8087,1,0,0,
		0,8080,8081,5,788,0,0,8081,8084,5,863,0,0,8082,8085,5,857,0,0,8083,8085,
		3,1066,533,0,8084,8082,1,0,0,0,8084,8083,1,0,0,0,8085,8087,1,0,0,0,8086,
		8074,1,0,0,0,8086,8080,1,0,0,0,8087,8191,1,0,0,0,8088,8090,5,883,0,0,8089,
		8088,1,0,0,0,8089,8090,1,0,0,0,8090,8091,1,0,0,0,8091,8191,7,89,0,0,8092,
		8094,5,883,0,0,8093,8092,1,0,0,0,8093,8094,1,0,0,0,8094,8095,1,0,0,0,8095,
		8191,7,90,0,0,8096,8098,5,883,0,0,8097,8096,1,0,0,0,8097,8098,1,0,0,0,
		8098,8099,1,0,0,0,8099,8191,7,91,0,0,8100,8102,5,883,0,0,8101,8100,1,0,
		0,0,8101,8102,1,0,0,0,8102,8103,1,0,0,0,8103,8104,5,739,0,0,8104,8107,
		5,863,0,0,8105,8108,5,859,0,0,8106,8108,3,1066,533,0,8107,8105,1,0,0,0,
		8107,8106,1,0,0,0,8108,8191,1,0,0,0,8109,8111,5,883,0,0,8110,8109,1,0,
		0,0,8110,8111,1,0,0,0,8111,8112,1,0,0,0,8112,8113,5,740,0,0,8113,8114,
		5,863,0,0,8114,8191,5,859,0,0,8115,8117,5,883,0,0,8116,8115,1,0,0,0,8116,
		8117,1,0,0,0,8117,8118,1,0,0,0,8118,8119,5,651,0,0,8119,8122,5,863,0,0,
		8120,8123,5,857,0,0,8121,8123,3,1066,533,0,8122,8120,1,0,0,0,8122,8121,
		1,0,0,0,8123,8191,1,0,0,0,8124,8126,5,883,0,0,8125,8124,1,0,0,0,8125,8126,
		1,0,0,0,8126,8127,1,0,0,0,8127,8128,5,654,0,0,8128,8131,5,863,0,0,8129,
		8132,5,857,0,0,8130,8132,3,1066,533,0,8131,8129,1,0,0,0,8131,8130,1,0,
		0,0,8132,8191,1,0,0,0,8133,8135,5,883,0,0,8134,8133,1,0,0,0,8134,8135,
		1,0,0,0,8135,8136,1,0,0,0,8136,8137,5,732,0,0,8137,8140,5,863,0,0,8138,
		8141,5,857,0,0,8139,8141,3,1066,533,0,8140,8138,1,0,0,0,8140,8139,1,0,
		0,0,8141,8191,1,0,0,0,8142,8144,5,883,0,0,8143,8142,1,0,0,0,8143,8144,
		1,0,0,0,8144,8145,1,0,0,0,8145,8191,7,92,0,0,8146,8148,5,883,0,0,8147,
		8146,1,0,0,0,8147,8148,1,0,0,0,8148,8149,1,0,0,0,8149,8191,7,93,0,0,8150,
		8152,5,883,0,0,8151,8150,1,0,0,0,8151,8152,1,0,0,0,8152,8153,1,0,0,0,8153,
		8191,5,786,0,0,8154,8156,5,883,0,0,8155,8154,1,0,0,0,8155,8156,1,0,0,0,
		8156,8157,1,0,0,0,8157,8160,5,821,0,0,8158,8159,5,863,0,0,8159,8161,5,
		857,0,0,8160,8158,1,0,0,0,8160,8161,1,0,0,0,8161,8191,1,0,0,0,8162,8164,
		5,883,0,0,8163,8162,1,0,0,0,8163,8164,1,0,0,0,8164,8165,1,0,0,0,8165,8191,
		7,94,0,0,8166,8168,5,883,0,0,8167,8166,1,0,0,0,8167,8168,1,0,0,0,8168,
		8169,1,0,0,0,8169,8191,7,95,0,0,8170,8172,5,883,0,0,8171,8170,1,0,0,0,
		8171,8172,1,0,0,0,8172,8173,1,0,0,0,8173,8174,5,313,0,0,8174,8175,5,881,
		0,0,8175,8176,5,207,0,0,8176,8177,5,863,0,0,8177,8178,7,96,0,0,8178,8179,
		5,883,0,0,8179,8180,5,803,0,0,8180,8181,5,657,0,0,8181,8188,5,863,0,0,
		8182,8189,3,1066,533,0,8183,8184,5,803,0,0,8184,8185,5,641,0,0,8185,8186,
		5,95,0,0,8186,8187,5,863,0,0,8187,8189,3,1066,533,0,8188,8182,1,0,0,0,
		8188,8183,1,0,0,0,8189,8191,1,0,0,0,8190,8037,1,0,0,0,8190,8041,1,0,0,
		0,8190,8045,1,0,0,0,8190,8049,1,0,0,0,8190,8058,1,0,0,0,8190,8064,1,0,
		0,0,8190,8068,1,0,0,0,8190,8072,1,0,0,0,8190,8089,1,0,0,0,8190,8093,1,
		0,0,0,8190,8097,1,0,0,0,8190,8101,1,0,0,0,8190,8110,1,0,0,0,8190,8116,
		1,0,0,0,8190,8125,1,0,0,0,8190,8134,1,0,0,0,8190,8143,1,0,0,0,8190,8147,
		1,0,0,0,8190,8151,1,0,0,0,8190,8155,1,0,0,0,8190,8163,1,0,0,0,8190,8167,
		1,0,0,0,8190,8171,1,0,0,0,8191,8194,1,0,0,0,8192,8190,1,0,0,0,8192,8193,
		1,0,0,0,8193,8196,1,0,0,0,8194,8192,1,0,0,0,8195,8035,1,0,0,0,8195,8196,
		1,0,0,0,8196,653,1,0,0,0,8197,8198,5,12,0,0,8198,8199,5,727,0,0,8199,8223,
		3,1066,533,0,8200,8205,5,168,0,0,8201,8203,5,883,0,0,8202,8201,1,0,0,0,
		8202,8203,1,0,0,0,8203,8204,1,0,0,0,8204,8206,3,1066,533,0,8205,8202,1,
		0,0,0,8206,8207,1,0,0,0,8207,8205,1,0,0,0,8207,8208,1,0,0,0,8208,8224,
		1,0,0,0,8209,8219,5,168,0,0,8210,8212,5,883,0,0,8211,8210,1,0,0,0,8211,
		8212,1,0,0,0,8212,8213,1,0,0,0,8213,8214,7,87,0,0,8214,8217,5,863,0,0,
		8215,8218,5,859,0,0,8216,8218,3,1066,533,0,8217,8215,1,0,0,0,8217,8216,
		1,0,0,0,8218,8220,1,0,0,0,8219,8211,1,0,0,0,8220,8221,1,0,0,0,8221,8219,
		1,0,0,0,8221,8222,1,0,0,0,8222,8224,1,0,0,0,8223,8200,1,0,0,0,8223,8209,
		1,0,0,0,8224,8258,1,0,0,0,8225,8226,5,746,0,0,8226,8231,5,168,0,0,8227,
		8229,5,883,0,0,8228,8227,1,0,0,0,8228,8229,1,0,0,0,8229,8230,1,0,0,0,8230,
		8232,3,1066,533,0,8231,8228,1,0,0,0,8232,8233,1,0,0,0,8233,8231,1,0,0,
		0,8233,8234,1,0,0,0,8234,8236,1,0,0,0,8235,8225,1,0,0,0,8236,8237,1,0,
		0,0,8237,8235,1,0,0,0,8237,8238,1,0,0,0,8238,8259,1,0,0,0,8239,8240,5,
		746,0,0,8240,8250,5,168,0,0,8241,8243,5,883,0,0,8242,8241,1,0,0,0,8242,
		8243,1,0,0,0,8243,8244,1,0,0,0,8244,8245,7,87,0,0,8245,8248,5,863,0,0,
		8246,8249,5,859,0,0,8247,8249,3,1066,533,0,8248,8246,1,0,0,0,8248,8247,
		1,0,0,0,8249,8251,1,0,0,0,8250,8242,1,0,0,0,8251,8252,1,0,0,0,8252,8250,
		1,0,0,0,8252,8253,1,0,0,0,8253,8255,1,0,0,0,8254,8239,1,0,0,0,8255,8256,
		1,0,0,0,8256,8254,1,0,0,0,8256,8257,1,0,0,0,8257,8259,1,0,0,0,8258,8235,
		1,0,0,0,8258,8254,1,0,0,0,8258,8259,1,0,0,0,8259,8433,1,0,0,0,8260,8430,
		5,189,0,0,8261,8263,5,883,0,0,8262,8261,1,0,0,0,8262,8263,1,0,0,0,8263,
		8264,1,0,0,0,8264,8429,5,684,0,0,8265,8267,5,883,0,0,8266,8265,1,0,0,0,
		8266,8267,1,0,0,0,8267,8268,1,0,0,0,8268,8429,5,674,0,0,8269,8271,5,883,
		0,0,8270,8269,1,0,0,0,8270,8271,1,0,0,0,8271,8272,1,0,0,0,8272,8429,7,
		88,0,0,8273,8275,5,883,0,0,8274,8273,1,0,0,0,8274,8275,1,0,0,0,8275,8276,
		1,0,0,0,8276,8277,5,296,0,0,8277,8280,5,863,0,0,8278,8281,5,859,0,0,8279,
		8281,3,1066,533,0,8280,8278,1,0,0,0,8280,8279,1,0,0,0,8281,8429,1,0,0,
		0,8282,8284,5,883,0,0,8283,8282,1,0,0,0,8283,8284,1,0,0,0,8284,8285,1,
		0,0,0,8285,8286,5,428,0,0,8286,8287,5,863,0,0,8287,8429,3,1066,533,0,8288,
		8290,5,883,0,0,8289,8288,1,0,0,0,8289,8290,1,0,0,0,8290,8291,1,0,0,0,8291,
		8429,5,271,0,0,8292,8294,5,883,0,0,8293,8292,1,0,0,0,8293,8294,1,0,0,0,
		8294,8295,1,0,0,0,8295,8429,5,700,0,0,8296,8298,5,883,0,0,8297,8296,1,
		0,0,0,8297,8298,1,0,0,0,8298,8311,1,0,0,0,8299,8300,5,694,0,0,8300,8303,
		5,863,0,0,8301,8304,5,859,0,0,8302,8304,3,1066,533,0,8303,8301,1,0,0,0,
		8303,8302,1,0,0,0,8304,8312,1,0,0,0,8305,8306,5,788,0,0,8306,8309,5,863,
		0,0,8307,8310,5,857,0,0,8308,8310,3,1066,533,0,8309,8307,1,0,0,0,8309,
		8308,1,0,0,0,8310,8312,1,0,0,0,8311,8299,1,0,0,0,8311,8305,1,0,0,0,8312,
		8429,1,0,0,0,8313,8315,5,883,0,0,8314,8313,1,0,0,0,8314,8315,1,0,0,0,8315,
		8316,1,0,0,0,8316,8429,7,89,0,0,8317,8319,5,883,0,0,8318,8317,1,0,0,0,
		8318,8319,1,0,0,0,8319,8320,1,0,0,0,8320,8429,7,90,0,0,8321,8323,5,883,
		0,0,8322,8321,1,0,0,0,8322,8323,1,0,0,0,8323,8324,1,0,0,0,8324,8429,7,
		91,0,0,8325,8327,5,883,0,0,8326,8325,1,0,0,0,8326,8327,1,0,0,0,8327,8328,
		1,0,0,0,8328,8329,5,739,0,0,8329,8332,5,863,0,0,8330,8333,5,859,0,0,8331,
		8333,3,1066,533,0,8332,8330,1,0,0,0,8332,8331,1,0,0,0,8333,8429,1,0,0,
		0,8334,8336,5,883,0,0,8335,8334,1,0,0,0,8335,8336,1,0,0,0,8336,8337,1,
		0,0,0,8337,8338,5,740,0,0,8338,8339,5,863,0,0,8339,8429,5,859,0,0,8340,
		8342,5,883,0,0,8341,8340,1,0,0,0,8341,8342,1,0,0,0,8342,8343,1,0,0,0,8343,
		8344,5,651,0,0,8344,8347,5,863,0,0,8345,8348,5,857,0,0,8346,8348,3,1066,
		533,0,8347,8345,1,0,0,0,8347,8346,1,0,0,0,8348,8429,1,0,0,0,8349,8351,
		5,883,0,0,8350,8349,1,0,0,0,8350,8351,1,0,0,0,8351,8352,1,0,0,0,8352,8353,
		5,654,0,0,8353,8356,5,863,0,0,8354,8357,5,857,0,0,8355,8357,3,1066,533,
		0,8356,8354,1,0,0,0,8356,8355,1,0,0,0,8357,8429,1,0,0,0,8358,8360,5,883,
		0,0,8359,8358,1,0,0,0,8359,8360,1,0,0,0,8360,8361,1,0,0,0,8361,8362,5,
		732,0,0,8362,8365,5,863,0,0,8363,8366,5,857,0,0,8364,8366,3,1066,533,0,
		8365,8363,1,0,0,0,8365,8364,1,0,0,0,8366,8429,1,0,0,0,8367,8369,5,883,
		0,0,8368,8367,1,0,0,0,8368,8369,1,0,0,0,8369,8370,1,0,0,0,8370,8429,7,
		92,0,0,8371,8373,5,883,0,0,8372,8371,1,0,0,0,8372,8373,1,0,0,0,8373,8374,
		1,0,0,0,8374,8429,7,93,0,0,8375,8377,5,883,0,0,8376,8375,1,0,0,0,8376,
		8377,1,0,0,0,8377,8378,1,0,0,0,8378,8429,5,786,0,0,8379,8381,5,883,0,0,
		8380,8379,1,0,0,0,8380,8381,1,0,0,0,8381,8382,1,0,0,0,8382,8385,5,821,
		0,0,8383,8384,5,863,0,0,8384,8386,5,857,0,0,8385,8383,1,0,0,0,8385,8386,
		1,0,0,0,8386,8429,1,0,0,0,8387,8389,5,883,0,0,8388,8387,1,0,0,0,8388,8389,
		1,0,0,0,8389,8390,1,0,0,0,8390,8429,7,94,0,0,8391,8393,5,883,0,0,8392,
		8391,1,0,0,0,8392,8393,1,0,0,0,8393,8394,1,0,0,0,8394,8429,7,95,0,0,8395,
		8397,5,883,0,0,8396,8395,1,0,0,0,8396,8397,1,0,0,0,8397,8402,1,0,0,0,8398,
		8403,5,443,0,0,8399,8400,5,563,0,0,8400,8401,5,863,0,0,8401,8403,5,859,
		0,0,8402,8398,1,0,0,0,8402,8399,1,0,0,0,8403,8429,1,0,0,0,8404,8406,5,
		883,0,0,8405,8404,1,0,0,0,8405,8406,1,0,0,0,8406,8407,1,0,0,0,8407,8429,
		5,436,0,0,8408,8410,5,883,0,0,8409,8408,1,0,0,0,8409,8410,1,0,0,0,8410,
		8411,1,0,0,0,8411,8412,5,313,0,0,8412,8413,5,881,0,0,8413,8414,5,207,0,
		0,8414,8415,5,863,0,0,8415,8416,7,96,0,0,8416,8417,5,883,0,0,8417,8418,
		5,803,0,0,8418,8419,5,657,0,0,8419,8426,5,863,0,0,8420,8427,3,1066,533,
		0,8421,8422,5,803,0,0,8422,8423,5,641,0,0,8423,8424,5,95,0,0,8424,8425,
		5,863,0,0,8425,8427,3,1066,533,0,8426,8420,1,0,0,0,8426,8421,1,0,0,0,8427,
		8429,1,0,0,0,8428,8262,1,0,0,0,8428,8266,1,0,0,0,8428,8270,1,0,0,0,8428,
		8274,1,0,0,0,8428,8283,1,0,0,0,8428,8289,1,0,0,0,8428,8293,1,0,0,0,8428,
		8297,1,0,0,0,8428,8314,1,0,0,0,8428,8318,1,0,0,0,8428,8322,1,0,0,0,8428,
		8326,1,0,0,0,8428,8335,1,0,0,0,8428,8341,1,0,0,0,8428,8350,1,0,0,0,8428,
		8359,1,0,0,0,8428,8368,1,0,0,0,8428,8372,1,0,0,0,8428,8376,1,0,0,0,8428,
		8380,1,0,0,0,8428,8388,1,0,0,0,8428,8392,1,0,0,0,8428,8396,1,0,0,0,8428,
		8405,1,0,0,0,8428,8409,1,0,0,0,8429,8432,1,0,0,0,8430,8428,1,0,0,0,8430,
		8431,1,0,0,0,8431,8434,1,0,0,0,8432,8430,1,0,0,0,8433,8260,1,0,0,0,8433,
		8434,1,0,0,0,8434,655,1,0,0,0,8435,8436,5,12,0,0,8436,8437,5,657,0,0,8437,
		8438,3,1066,533,0,8438,8439,5,168,0,0,8439,8440,5,69,0,0,8440,8441,5,863,
		0,0,8441,8473,5,859,0,0,8442,8443,5,189,0,0,8443,8444,5,481,0,0,8444,8445,
		5,95,0,0,8445,8468,5,881,0,0,8446,8448,5,883,0,0,8447,8446,1,0,0,0,8447,
		8448,1,0,0,0,8448,8449,1,0,0,0,8449,8450,5,69,0,0,8450,8451,5,863,0,0,
		8451,8469,5,859,0,0,8452,8454,5,883,0,0,8453,8452,1,0,0,0,8453,8454,1,
		0,0,0,8454,8455,1,0,0,0,8455,8456,5,313,0,0,8456,8457,5,18,0,0,8457,8458,
		5,765,0,0,8458,8459,5,863,0,0,8459,8469,5,859,0,0,8460,8462,5,883,0,0,
		8461,8460,1,0,0,0,8461,8462,1,0,0,0,8462,8463,1,0,0,0,8463,8464,5,285,
		0,0,8464,8465,5,18,0,0,8465,8466,5,765,0,0,8466,8467,5,863,0,0,8467,8469,
		5,859,0,0,8468,8447,1,0,0,0,8468,8453,1,0,0,0,8468,8461,1,0,0,0,8469,8470,
		1,0,0,0,8470,8468,1,0,0,0,8470,8471,1,0,0,0,8471,8472,1,0,0,0,8472,8474,
		5,882,0,0,8473,8442,1,0,0,0,8473,8474,1,0,0,0,8474,657,1,0,0,0,8475,8476,
		5,12,0,0,8476,8477,5,730,0,0,8477,8478,5,95,0,0,8478,8479,5,168,0,0,8479,
		8480,5,69,0,0,8480,8481,5,863,0,0,8481,8482,5,859,0,0,8482,8483,5,313,
		0,0,8483,8484,5,18,0,0,8484,8485,5,765,0,0,8485,8486,5,863,0,0,8486,8487,
		5,859,0,0,8487,659,1,0,0,0,8488,8489,5,12,0,0,8489,8490,5,804,0,0,8490,
		8491,5,730,0,0,8491,8492,5,95,0,0,8492,8493,5,168,0,0,8493,8494,5,69,0,
		0,8494,8495,5,863,0,0,8495,8496,5,859,0,0,8496,8497,5,313,0,0,8497,8498,
		5,18,0,0,8498,8499,5,765,0,0,8499,8500,5,863,0,0,8500,8501,5,859,0,0,8501,
		661,1,0,0,0,8502,8506,5,96,0,0,8503,8507,3,664,332,0,8504,8507,3,666,333,
		0,8505,8507,3,668,334,0,8506,8503,1,0,0,0,8506,8504,1,0,0,0,8506,8505,
		1,0,0,0,8507,663,1,0,0,0,8508,8511,7,26,0,0,8509,8511,5,609,0,0,8510,8508,
		1,0,0,0,8510,8509,1,0,0,0,8511,8514,1,0,0,0,8512,8513,5,189,0,0,8513,8515,
		5,568,0,0,8514,8512,1,0,0,0,8514,8515,1,0,0,0,8515,665,1,0,0,0,8516,8517,
		5,488,0,0,8517,8518,5,757,0,0,8518,8521,5,576,0,0,8519,8522,5,3,0,0,8520,
		8522,5,857,0,0,8521,8519,1,0,0,0,8521,8520,1,0,0,0,8522,667,1,0,0,0,8523,
		8524,5,821,0,0,8524,8525,5,373,0,0,8525,8526,5,857,0,0,8526,669,1,0,0,
		0,8527,8528,5,64,0,0,8528,8530,3,674,337,0,8529,8531,5,884,0,0,8530,8529,
		1,0,0,0,8530,8531,1,0,0,0,8531,671,1,0,0,0,8532,8541,3,1012,506,0,8533,
		8538,3,676,338,0,8534,8535,5,883,0,0,8535,8537,3,676,338,0,8536,8534,1,
		0,0,0,8537,8540,1,0,0,0,8538,8536,1,0,0,0,8538,8539,1,0,0,0,8539,8542,
		1,0,0,0,8540,8538,1,0,0,0,8541,8533,1,0,0,0,8541,8542,1,0,0,0,8542,8544,
		1,0,0,0,8543,8545,5,884,0,0,8544,8543,1,0,0,0,8544,8545,1,0,0,0,8545,673,
		1,0,0,0,8546,8547,5,856,0,0,8547,8549,5,863,0,0,8548,8546,1,0,0,0,8548,
		8549,1,0,0,0,8549,8552,1,0,0,0,8550,8553,3,1012,506,0,8551,8553,3,684,
		342,0,8552,8550,1,0,0,0,8552,8551,1,0,0,0,8553,8555,1,0,0,0,8554,8556,
		3,676,338,0,8555,8554,1,0,0,0,8555,8556,1,0,0,0,8556,8580,1,0,0,0,8557,
		8558,5,881,0,0,8558,8563,3,684,342,0,8559,8560,5,883,0,0,8560,8562,3,684,
		342,0,8561,8559,1,0,0,0,8562,8565,1,0,0,0,8563,8561,1,0,0,0,8563,8564,
		1,0,0,0,8564,8566,1,0,0,0,8565,8563,1,0,0,0,8566,8573,5,882,0,0,8567,8569,
		5,7,0,0,8568,8567,1,0,0,0,8568,8569,1,0,0,0,8569,8570,1,0,0,0,8570,8571,
		7,97,0,0,8571,8572,5,863,0,0,8572,8574,5,859,0,0,8573,8568,1,0,0,0,8573,
		8574,1,0,0,0,8574,8577,1,0,0,0,8575,8576,5,194,0,0,8576,8578,3,1066,533,
		0,8577,8575,1,0,0,0,8577,8578,1,0,0,0,8578,8580,1,0,0,0,8579,8548,1,0,
		0,0,8579,8557,1,0,0,0,8580,675,1,0,0,0,8581,8586,3,680,340,0,8582,8583,
		5,883,0,0,8583,8585,3,676,338,0,8584,8582,1,0,0,0,8585,8588,1,0,0,0,8586,
		8584,1,0,0,0,8586,8587,1,0,0,0,8587,8598,1,0,0,0,8588,8586,1,0,0,0,8589,
		8594,3,678,339,0,8590,8591,5,883,0,0,8591,8593,3,678,339,0,8592,8590,1,
		0,0,0,8593,8596,1,0,0,0,8594,8592,1,0,0,0,8594,8595,1,0,0,0,8595,8598,
		1,0,0,0,8596,8594,1,0,0,0,8597,8581,1,0,0,0,8597,8589,1,0,0,0,8598,677,
		1,0,0,0,8599,8600,5,856,0,0,8600,8601,5,863,0,0,8601,8602,3,682,341,0,
		8602,679,1,0,0,0,8603,8604,3,682,341,0,8604,681,1,0,0,0,8605,8614,3,1060,
		530,0,8606,8608,5,856,0,0,8607,8609,7,98,0,0,8608,8607,1,0,0,0,8608,8609,
		1,0,0,0,8609,8614,1,0,0,0,8610,8614,3,1066,533,0,8611,8614,5,47,0,0,8612,
		8614,5,107,0,0,8613,8605,1,0,0,0,8613,8606,1,0,0,0,8613,8610,1,0,0,0,8613,
		8611,1,0,0,0,8613,8612,1,0,0,0,8614,683,1,0,0,0,8615,8617,5,856,0,0,8616,
		8618,7,98,0,0,8617,8616,1,0,0,0,8617,8618,1,0,0,0,8618,8625,1,0,0,0,8619,
		8620,5,890,0,0,8620,8623,5,856,0,0,8621,8622,5,890,0,0,8622,8624,3,684,
		342,0,8623,8621,1,0,0,0,8623,8624,1,0,0,0,8624,8626,1,0,0,0,8625,8619,
		1,0,0,0,8625,8626,1,0,0,0,8626,8637,1,0,0,0,8627,8634,5,859,0,0,8628,8629,
		5,890,0,0,8629,8632,5,856,0,0,8630,8631,5,890,0,0,8631,8633,3,684,342,
		0,8632,8630,1,0,0,0,8632,8633,1,0,0,0,8633,8635,1,0,0,0,8634,8628,1,0,
		0,0,8634,8635,1,0,0,0,8635,8637,1,0,0,0,8636,8615,1,0,0,0,8636,8627,1,
		0,0,0,8637,685,1,0,0,0,8638,8640,3,742,371,0,8639,8641,5,884,0,0,8640,
		8639,1,0,0,0,8640,8641,1,0,0,0,8641,8703,1,0,0,0,8642,8654,5,79,0,0,8643,
		8645,5,3,0,0,8644,8646,5,483,0,0,8645,8644,1,0,0,0,8645,8646,1,0,0,0,8646,
		8655,1,0,0,0,8647,8652,3,714,357,0,8648,8649,5,881,0,0,8649,8650,3,1024,
		512,0,8650,8651,5,882,0,0,8651,8653,1,0,0,0,8652,8648,1,0,0,0,8652,8653,
		1,0,0,0,8653,8655,1,0,0,0,8654,8643,1,0,0,0,8654,8647,1,0,0,0,8655,8663,
		1,0,0,0,8656,8660,5,112,0,0,8657,8658,3,154,77,0,8658,8659,5,886,0,0,8659,
		8661,1,0,0,0,8660,8657,1,0,0,0,8660,8661,1,0,0,0,8661,8662,1,0,0,0,8662,
		8664,3,1004,502,0,8663,8656,1,0,0,0,8663,8664,1,0,0,0,8664,8665,1,0,0,
		0,8665,8666,5,168,0,0,8666,8671,3,688,344,0,8667,8668,5,883,0,0,8668,8670,
		3,688,344,0,8669,8667,1,0,0,0,8670,8673,1,0,0,0,8671,8669,1,0,0,0,8671,
		8672,1,0,0,0,8672,8677,1,0,0,0,8673,8671,1,0,0,0,8674,8675,5,189,0,0,8675,
		8676,5,79,0,0,8676,8678,5,119,0,0,8677,8674,1,0,0,0,8677,8678,1,0,0,0,
		8678,8681,1,0,0,0,8679,8680,5,7,0,0,8680,8682,3,688,344,0,8681,8679,1,
		0,0,0,8681,8682,1,0,0,0,8682,8684,1,0,0,0,8683,8685,5,884,0,0,8684,8683,
		1,0,0,0,8684,8685,1,0,0,0,8685,8703,1,0,0,0,8686,8693,5,143,0,0,8687,8688,
		5,881,0,0,8688,8689,5,189,0,0,8689,8690,5,264,0,0,8690,8691,5,863,0,0,
		8691,8692,5,856,0,0,8692,8694,5,882,0,0,8693,8687,1,0,0,0,8693,8694,1,
		0,0,0,8694,8696,1,0,0,0,8695,8697,5,884,0,0,8696,8695,1,0,0,0,8696,8697,
		1,0,0,0,8697,8703,1,0,0,0,8698,8703,3,700,350,0,8699,8703,3,702,351,0,
		8700,8703,3,704,352,0,8701,8703,3,690,345,0,8702,8638,1,0,0,0,8702,8642,
		1,0,0,0,8702,8686,1,0,0,0,8702,8698,1,0,0,0,8702,8699,1,0,0,0,8702,8700,
		1,0,0,0,8702,8701,1,0,0,0,8703,687,1,0,0,0,8704,8708,1,0,0,0,8705,8708,
		3,1066,533,0,8706,8708,5,132,0,0,8707,8704,1,0,0,0,8707,8705,1,0,0,0,8707,
		8706,1,0,0,0,8708,689,1,0,0,0,8709,8710,5,35,0,0,8710,8711,5,657,0,0,8711,
		8714,3,1066,533,0,8712,8713,5,9,0,0,8713,8715,3,1066,533,0,8714,8712,1,
		0,0,0,8714,8715,1,0,0,0,8715,8719,1,0,0,0,8716,8717,5,75,0,0,8717,8720,
		3,692,346,0,8718,8720,3,696,348,0,8719,8716,1,0,0,0,8719,8718,1,0,0,0,
		8720,8727,1,0,0,0,8721,8722,5,199,0,0,8722,8723,5,71,0,0,8723,8724,5,13,
		0,0,8724,8725,5,299,0,0,8725,8726,5,863,0,0,8726,8728,7,7,0,0,8727,8721,
		1,0,0,0,8727,8728,1,0,0,0,8728,691,1,0,0,0,8729,8730,5,218,0,0,8730,8747,
		3,1066,533,0,8731,8733,5,317,0,0,8732,8731,1,0,0,0,8732,8733,1,0,0,0,8733,
		8734,1,0,0,0,8734,8735,5,69,0,0,8735,8736,5,863,0,0,8736,8744,5,859,0,
		0,8737,8738,5,189,0,0,8738,8739,5,481,0,0,8739,8740,5,95,0,0,8740,8741,
		5,881,0,0,8741,8742,3,694,347,0,8742,8743,5,882,0,0,8743,8745,1,0,0,0,
		8744,8737,1,0,0,0,8744,8745,1,0,0,0,8745,8747,1,0,0,0,8746,8729,1,0,0,
		0,8746,8732,1,0,0,0,8747,693,1,0,0,0,8748,8749,7,99,0,0,8749,8750,5,863,
		0,0,8750,8757,5,859,0,0,8751,8752,5,883,0,0,8752,8753,7,100,0,0,8753,8754,
		5,18,0,0,8754,8755,5,765,0,0,8755,8756,5,863,0,0,8756,8758,5,859,0,0,8757,
		8751,1,0,0,0,8757,8758,1,0,0,0,8758,695,1,0,0,0,8759,8760,5,313,0,0,8760,
		8761,5,18,0,0,8761,8762,5,765,0,0,8762,8763,5,863,0,0,8763,8765,5,859,
		0,0,8764,8759,1,0,0,0,8764,8765,1,0,0,0,8765,8766,1,0,0,0,8766,8767,5,
		189,0,0,8767,8768,5,574,0,0,8768,8769,5,863,0,0,8769,8774,5,859,0,0,8770,
		8771,5,883,0,0,8771,8773,3,698,349,0,8772,8770,1,0,0,0,8773,8776,1,0,0,
		0,8774,8772,1,0,0,0,8774,8775,1,0,0,0,8775,697,1,0,0,0,8776,8774,1,0,0,
		0,8777,8778,7,101,0,0,8778,8779,5,863,0,0,8779,8780,5,859,0,0,8780,699,
		1,0,0,0,8781,8782,5,113,0,0,8782,8783,5,579,0,0,8783,8784,5,95,0,0,8784,
		8785,3,1066,533,0,8785,8786,5,285,0,0,8786,8787,5,18,0,0,8787,8788,3,712,
		356,0,8788,8798,1,0,0,0,8789,8790,5,113,0,0,8790,8791,5,730,0,0,8791,8792,
		5,95,0,0,8792,8793,5,285,0,0,8793,8794,5,18,0,0,8794,8795,5,765,0,0,8795,
		8796,5,863,0,0,8796,8798,5,859,0,0,8797,8781,1,0,0,0,8797,8789,1,0,0,0,
		8798,701,1,0,0,0,8799,8800,5,23,0,0,8800,8801,5,579,0,0,8801,8802,5,95,
		0,0,8802,8811,3,1066,533,0,8803,8804,5,23,0,0,8804,8805,5,3,0,0,8805,8806,
		5,579,0,0,8806,8811,5,379,0,0,8807,8808,5,23,0,0,8808,8809,5,730,0,0,8809,
		8811,5,95,0,0,8810,8799,1,0,0,0,8810,8803,1,0,0,0,8810,8807,1,0,0,0,8811,
		703,1,0,0,0,8812,8813,5,35,0,0,8813,8814,5,730,0,0,8814,8815,5,95,0,0,
		8815,8816,5,313,0,0,8816,8817,5,18,0,0,8817,8818,5,765,0,0,8818,8819,5,
		863,0,0,8819,8848,5,859,0,0,8820,8821,5,35,0,0,8821,8822,5,579,0,0,8822,
		8823,5,95,0,0,8823,8826,3,1066,533,0,8824,8825,5,9,0,0,8825,8827,3,1066,
		533,0,8826,8824,1,0,0,0,8826,8827,1,0,0,0,8827,8831,1,0,0,0,8828,8829,
		5,75,0,0,8829,8830,5,486,0,0,8830,8832,3,1066,533,0,8831,8828,1,0,0,0,
		8831,8832,1,0,0,0,8832,8833,1,0,0,0,8833,8843,5,189,0,0,8834,8839,3,706,
		353,0,8835,8836,5,313,0,0,8836,8837,5,18,0,0,8837,8839,3,710,355,0,8838,
		8834,1,0,0,0,8838,8835,1,0,0,0,8839,8841,1,0,0,0,8840,8842,5,883,0,0,8841,
		8840,1,0,0,0,8841,8842,1,0,0,0,8842,8844,1,0,0,0,8843,8838,1,0,0,0,8844,
		8845,1,0,0,0,8845,8843,1,0,0,0,8845,8846,1,0,0,0,8846,8848,1,0,0,0,8847,
		8812,1,0,0,0,8847,8820,1,0,0,0,8848,705,1,0,0,0,8849,8850,5,378,0,0,8850,
		8851,5,863,0,0,8851,8865,5,859,0,0,8852,8853,5,207,0,0,8853,8854,5,863,
		0,0,8854,8865,3,708,354,0,8855,8856,5,359,0,0,8856,8857,5,863,0,0,8857,
		8865,5,859,0,0,8858,8859,5,487,0,0,8859,8860,5,863,0,0,8860,8865,5,859,
		0,0,8861,8862,5,270,0,0,8862,8863,5,863,0,0,8863,8865,7,10,0,0,8864,8849,
		1,0,0,0,8864,8852,1,0,0,0,8864,8855,1,0,0,0,8864,8858,1,0,0,0,8864,8861,
		1,0,0,0,8865,707,1,0,0,0,8866,8867,7,102,0,0,8867,709,1,0,0,0,8868,8869,
		5,657,0,0,8869,8880,3,1066,533,0,8870,8871,5,641,0,0,8871,8872,5,95,0,
		0,8872,8880,3,1066,533,0,8873,8874,5,579,0,0,8874,8875,5,95,0,0,8875,8880,
		3,1066,533,0,8876,8877,5,765,0,0,8877,8878,5,863,0,0,8878,8880,5,859,0,
		0,8879,8868,1,0,0,0,8879,8870,1,0,0,0,8879,8873,1,0,0,0,8879,8876,1,0,
		0,0,8880,711,1,0,0,0,8881,8882,5,657,0,0,8882,8887,3,1066,533,0,8883,8884,
		5,189,0,0,8884,8885,5,765,0,0,8885,8886,5,863,0,0,8886,8888,5,859,0,0,
		8887,8883,1,0,0,0,8887,8888,1,0,0,0,8888,8905,1,0,0,0,8889,8890,5,641,
		0,0,8890,8891,5,95,0,0,8891,8896,3,1066,533,0,8892,8893,5,189,0,0,8893,
		8894,5,765,0,0,8894,8895,5,863,0,0,8895,8897,5,859,0,0,8896,8892,1,0,0,
		0,8896,8897,1,0,0,0,8897,8905,1,0,0,0,8898,8899,5,579,0,0,8899,8900,5,
		95,0,0,8900,8905,3,1066,533,0,8901,8902,5,765,0,0,8902,8903,5,863,0,0,
		8903,8905,5,859,0,0,8904,8881,1,0,0,0,8904,8889,1,0,0,0,8904,8898,1,0,
		0,0,8904,8901,1,0,0,0,8905,713,1,0,0,0,8906,8912,5,633,0,0,8907,8908,5,
		17,0,0,8908,8913,5,761,0,0,8909,8910,5,43,0,0,8910,8911,5,17,0,0,8911,
		8913,5,761,0,0,8912,8907,1,0,0,0,8912,8909,1,0,0,0,8913,9120,1,0,0,0,8914,
		8985,5,4,0,0,8915,8978,5,6,0,0,8916,8917,5,640,0,0,8917,8979,5,791,0,0,
		8918,8979,5,218,0,0,8919,8920,5,641,0,0,8920,8979,5,95,0,0,8921,8922,5,
		230,0,0,8922,8979,5,80,0,0,8923,8979,5,657,0,0,8924,8929,5,27,0,0,8925,
		8926,5,313,0,0,8926,8930,5,95,0,0,8927,8928,5,730,0,0,8928,8930,5,95,0,
		0,8929,8925,1,0,0,0,8929,8927,1,0,0,0,8930,8979,1,0,0,0,8931,8979,5,666,
		0,0,8932,8979,5,671,0,0,8933,8979,5,271,0,0,8934,8942,5,43,0,0,8935,8943,
		5,219,0,0,8936,8937,5,680,0,0,8937,8943,5,172,0,0,8938,8939,5,690,0,0,
		8939,8943,7,103,0,0,8940,8941,5,533,0,0,8941,8943,5,667,0,0,8942,8935,
		1,0,0,0,8942,8936,1,0,0,0,8942,8938,1,0,0,0,8942,8940,1,0,0,0,8942,8943,
		1,0,0,0,8943,8979,1,0,0,0,8944,8979,5,679,0,0,8945,8979,5,688,0,0,8946,
		8947,5,690,0,0,8947,8979,7,103,0,0,8948,8954,5,67,0,0,8949,8950,5,276,
		0,0,8950,8955,5,813,0,0,8951,8952,5,69,0,0,8952,8955,5,340,0,0,8953,8955,
		5,720,0,0,8954,8949,1,0,0,0,8954,8951,1,0,0,0,8954,8953,1,0,0,0,8955,8979,
		1,0,0,0,8956,8957,5,343,0,0,8957,8979,5,247,0,0,8958,8959,5,722,0,0,8959,
		8979,5,803,0,0,8960,8979,5,394,0,0,8961,8979,5,728,0,0,8962,8963,5,415,
		0,0,8963,8979,5,602,0,0,8964,8965,5,509,0,0,8965,8966,5,804,0,0,8966,8979,
		5,238,0,0,8967,8979,5,791,0,0,8968,8979,5,526,0,0,8969,8979,5,151,0,0,
		8970,8971,5,543,0,0,8971,8979,5,772,0,0,8972,8973,5,803,0,0,8973,8979,
		7,104,0,0,8974,8979,5,804,0,0,8975,8976,5,579,0,0,8976,8979,5,95,0,0,8977,
		8979,5,181,0,0,8978,8916,1,0,0,0,8978,8918,1,0,0,0,8978,8919,1,0,0,0,8978,
		8921,1,0,0,0,8978,8923,1,0,0,0,8978,8924,1,0,0,0,8978,8931,1,0,0,0,8978,
		8932,1,0,0,0,8978,8933,1,0,0,0,8978,8934,1,0,0,0,8978,8944,1,0,0,0,8978,
		8945,1,0,0,0,8978,8946,1,0,0,0,8978,8948,1,0,0,0,8978,8956,1,0,0,0,8978,
		8958,1,0,0,0,8978,8960,1,0,0,0,8978,8961,1,0,0,0,8978,8962,1,0,0,0,8978,
		8964,1,0,0,0,8978,8967,1,0,0,0,8978,8968,1,0,0,0,8978,8969,1,0,0,0,8978,
		8970,1,0,0,0,8978,8972,1,0,0,0,8978,8974,1,0,0,0,8978,8975,1,0,0,0,8978,
		8977,1,0,0,0,8979,8986,1,0,0,0,8980,8986,5,785,0,0,8981,8982,5,803,0,0,
		8982,8986,5,820,0,0,8983,8986,5,808,0,0,8984,8986,5,833,0,0,8985,8915,
		1,0,0,0,8985,8980,1,0,0,0,8985,8981,1,0,0,0,8985,8983,1,0,0,0,8985,8984,
		1,0,0,0,8985,8986,1,0,0,0,8986,9120,1,0,0,0,8987,8989,5,643,0,0,8988,8990,
		5,803,0,0,8989,8988,1,0,0,0,8989,8990,1,0,0,0,8990,9120,1,0,0,0,8991,8992,
		5,12,0,0,8992,9120,7,105,0,0,8993,9120,5,22,0,0,8994,8999,5,665,0,0,8995,
		8996,5,6,0,0,8996,9000,5,43,0,0,8997,9000,5,139,0,0,8998,9000,5,816,0,
		0,8999,8995,1,0,0,0,8999,8997,1,0,0,0,8999,8998,1,0,0,0,8999,9000,1,0,
		0,0,9000,9120,1,0,0,0,9001,9003,5,263,0,0,9002,9004,5,803,0,0,9003,9002,
		1,0,0,0,9003,9004,1,0,0,0,9004,9120,1,0,0,0,9005,9059,5,35,0,0,9006,9060,
		5,206,0,0,9007,9008,5,6,0,0,9008,9060,5,43,0,0,9009,9060,5,218,0,0,9010,
		9011,5,641,0,0,9011,9060,5,95,0,0,9012,9013,5,230,0,0,9013,9060,5,80,0,
		0,9014,9060,5,657,0,0,9015,9060,5,671,0,0,9016,9020,5,43,0,0,9017,9018,
		5,680,0,0,9018,9019,5,690,0,0,9019,9021,5,757,0,0,9020,9017,1,0,0,0,9020,
		9021,1,0,0,0,9021,9060,1,0,0,0,9022,9023,5,680,0,0,9023,9024,5,690,0,0,
		9024,9060,5,757,0,0,9025,9060,5,47,0,0,9026,9060,5,688,0,0,9027,9028,5,
		67,0,0,9028,9060,5,720,0,0,9029,9030,5,343,0,0,9030,9060,5,247,0,0,9031,
		9060,5,77,0,0,9032,9033,5,415,0,0,9033,9060,5,602,0,0,9034,9060,5,131,
		0,0,9035,9060,5,489,0,0,9036,9037,5,509,0,0,9037,9038,5,804,0,0,9038,9060,
		5,238,0,0,9039,9060,5,791,0,0,9040,9060,5,526,0,0,9041,9060,5,149,0,0,
		9042,9060,5,151,0,0,9043,9060,5,550,0,0,9044,9045,5,803,0,0,9045,9060,
		5,791,0,0,9046,9060,5,804,0,0,9047,9048,5,579,0,0,9048,9060,5,95,0,0,9049,
		9060,5,581,0,0,9050,9060,5,164,0,0,9051,9052,5,833,0,0,9052,9053,5,690,
		0,0,9053,9060,5,757,0,0,9054,9060,5,602,0,0,9055,9060,5,184,0,0,9056,9057,
		5,624,0,0,9057,9058,5,151,0,0,9058,9060,5,255,0,0,9059,9006,1,0,0,0,9059,
		9007,1,0,0,0,9059,9009,1,0,0,0,9059,9010,1,0,0,0,9059,9012,1,0,0,0,9059,
		9014,1,0,0,0,9059,9015,1,0,0,0,9059,9016,1,0,0,0,9059,9022,1,0,0,0,9059,
		9025,1,0,0,0,9059,9026,1,0,0,0,9059,9027,1,0,0,0,9059,9029,1,0,0,0,9059,
		9031,1,0,0,0,9059,9032,1,0,0,0,9059,9034,1,0,0,0,9059,9035,1,0,0,0,9059,
		9036,1,0,0,0,9059,9039,1,0,0,0,9059,9040,1,0,0,0,9059,9041,1,0,0,0,9059,
		9042,1,0,0,0,9059,9043,1,0,0,0,9059,9044,1,0,0,0,9059,9046,1,0,0,0,9059,
		9047,1,0,0,0,9059,9049,1,0,0,0,9059,9050,1,0,0,0,9059,9051,1,0,0,0,9059,
		9054,1,0,0,0,9059,9055,1,0,0,0,9059,9056,1,0,0,0,9060,9120,1,0,0,0,9061,
		9120,5,48,0,0,9062,9066,5,64,0,0,9063,9064,5,6,0,0,9064,9065,5,67,0,0,
		9065,9067,5,802,0,0,9066,9063,1,0,0,0,9066,9067,1,0,0,0,9067,9120,1,0,
		0,0,9068,9069,5,67,0,0,9069,9070,5,196,0,0,9070,9120,5,218,0,0,9071,9074,
		5,362,0,0,9072,9073,5,6,0,0,9073,9075,5,394,0,0,9074,9072,1,0,0,0,9074,
		9075,1,0,0,0,9075,9120,1,0,0,0,9076,9120,5,90,0,0,9077,9078,5,96,0,0,9078,
		9079,5,43,0,0,9079,9120,5,666,0,0,9080,9120,5,504,0,0,9081,9120,5,138,
		0,0,9082,9086,5,153,0,0,9083,9084,5,3,0,0,9084,9085,5,181,0,0,9085,9087,
		5,542,0,0,9086,9083,1,0,0,0,9086,9087,1,0,0,0,9087,9120,1,0,0,0,9088,9120,
		5,548,0,0,9089,9120,5,555,0,0,9090,9120,5,160,0,0,9091,9092,5,575,0,0,
		9092,9093,5,488,0,0,9093,9120,5,444,0,0,9094,9095,5,583,0,0,9095,9120,
		5,463,0,0,9096,9120,5,608,0,0,9097,9098,5,838,0,0,9098,9120,5,218,0,0,
		9099,9120,5,178,0,0,9100,9117,5,184,0,0,9101,9108,5,6,0,0,9102,9109,5,
		43,0,0,9103,9109,5,289,0,0,9104,9105,5,27,0,0,9105,9106,7,13,0,0,9106,
		9107,5,95,0,0,9107,9109,5,289,0,0,9108,9102,1,0,0,0,9108,9103,1,0,0,0,
		9108,9104,1,0,0,0,9109,9118,1,0,0,0,9110,9111,5,249,0,0,9111,9118,5,594,
		0,0,9112,9113,5,43,0,0,9113,9118,5,820,0,0,9114,9118,5,289,0,0,9115,9116,
		5,803,0,0,9116,9118,5,820,0,0,9117,9101,1,0,0,0,9117,9110,1,0,0,0,9117,
		9112,1,0,0,0,9117,9114,1,0,0,0,9117,9115,1,0,0,0,9118,9120,1,0,0,0,9119,
		8906,1,0,0,0,9119,8914,1,0,0,0,9119,8987,1,0,0,0,9119,8991,1,0,0,0,9119,
		8993,1,0,0,0,9119,8994,1,0,0,0,9119,9001,1,0,0,0,9119,9005,1,0,0,0,9119,
		9061,1,0,0,0,9119,9062,1,0,0,0,9119,9068,1,0,0,0,9119,9071,1,0,0,0,9119,
		9076,1,0,0,0,9119,9077,1,0,0,0,9119,9080,1,0,0,0,9119,9081,1,0,0,0,9119,
		9082,1,0,0,0,9119,9088,1,0,0,0,9119,9089,1,0,0,0,9119,9090,1,0,0,0,9119,
		9091,1,0,0,0,9119,9094,1,0,0,0,9119,9096,1,0,0,0,9119,9097,1,0,0,0,9119,
		9099,1,0,0,0,9119,9100,1,0,0,0,9120,715,1,0,0,0,9121,9122,5,158,0,0,9122,
		9125,5,856,0,0,9123,9124,5,876,0,0,9124,9126,3,1066,533,0,9125,9123,1,
		0,0,0,9125,9126,1,0,0,0,9126,9127,1,0,0,0,9127,9128,5,863,0,0,9128,9130,
		3,788,394,0,9129,9131,5,884,0,0,9130,9129,1,0,0,0,9130,9131,1,0,0,0,9131,
		9161,1,0,0,0,9132,9133,5,158,0,0,9133,9134,5,856,0,0,9134,9135,3,1074,
		537,0,9135,9137,3,788,394,0,9136,9138,5,884,0,0,9137,9136,1,0,0,0,9137,
		9138,1,0,0,0,9138,9161,1,0,0,0,9139,9140,5,158,0,0,9140,9141,5,856,0,0,
		9141,9142,5,863,0,0,9142,9143,5,42,0,0,9143,9154,3,776,388,0,9144,9152,
		5,71,0,0,9145,9146,5,135,0,0,9146,9153,5,455,0,0,9147,9150,5,178,0,0,9148,
		9149,5,109,0,0,9149,9151,3,1024,512,0,9150,9148,1,0,0,0,9150,9151,1,0,
		0,0,9151,9153,1,0,0,0,9152,9145,1,0,0,0,9152,9147,1,0,0,0,9153,9155,1,
		0,0,0,9154,9144,1,0,0,0,9154,9155,1,0,0,0,9155,9157,1,0,0,0,9156,9158,
		5,884,0,0,9157,9156,1,0,0,0,9157,9158,1,0,0,0,9158,9161,1,0,0,0,9159,9161,
		3,782,391,0,9160,9121,1,0,0,0,9160,9132,1,0,0,0,9160,9139,1,0,0,0,9160,
		9159,1,0,0,0,9161,717,1,0,0,0,9162,9163,5,13,0,0,9163,9164,5,53,0,0,9164,
		9167,7,106,0,0,9165,9168,3,1066,533,0,9166,9168,5,856,0,0,9167,9165,1,
		0,0,0,9167,9166,1,0,0,0,9167,9168,1,0,0,0,9168,9170,1,0,0,0,9169,9171,
		5,884,0,0,9170,9169,1,0,0,0,9170,9171,1,0,0,0,9171,9244,1,0,0,0,9172,9173,
		5,13,0,0,9173,9183,7,106,0,0,9174,9177,3,1066,533,0,9175,9177,5,856,0,
		0,9176,9174,1,0,0,0,9176,9175,1,0,0,0,9177,9181,1,0,0,0,9178,9179,5,189,
		0,0,9179,9180,5,398,0,0,9180,9182,5,859,0,0,9181,9178,1,0,0,0,9181,9182,
		1,0,0,0,9182,9184,1,0,0,0,9183,9176,1,0,0,0,9183,9184,1,0,0,0,9184,9186,
		1,0,0,0,9185,9187,5,884,0,0,9186,9185,1,0,0,0,9186,9187,1,0,0,0,9187,9244,
		1,0,0,0,9188,9189,5,28,0,0,9189,9202,7,106,0,0,9190,9193,3,1066,533,0,
		9191,9193,5,856,0,0,9192,9190,1,0,0,0,9192,9191,1,0,0,0,9193,9200,1,0,
		0,0,9194,9195,5,189,0,0,9195,9196,5,881,0,0,9196,9197,5,291,0,0,9197,9198,
		5,863,0,0,9198,9199,7,7,0,0,9199,9201,5,882,0,0,9200,9194,1,0,0,0,9200,
		9201,1,0,0,0,9201,9203,1,0,0,0,9202,9192,1,0,0,0,9202,9203,1,0,0,0,9203,
		9205,1,0,0,0,9204,9206,5,884,0,0,9205,9204,1,0,0,0,9205,9206,1,0,0,0,9206,
		9244,1,0,0,0,9207,9209,5,28,0,0,9208,9210,5,622,0,0,9209,9208,1,0,0,0,
		9209,9210,1,0,0,0,9210,9212,1,0,0,0,9211,9213,5,884,0,0,9212,9211,1,0,
		0,0,9212,9213,1,0,0,0,9213,9244,1,0,0,0,9214,9215,5,28,0,0,9215,9244,3,
		1066,533,0,9216,9217,5,146,0,0,9217,9244,3,1066,533,0,9218,9219,5,146,
		0,0,9219,9222,7,106,0,0,9220,9223,3,1066,533,0,9221,9223,5,856,0,0,9222,
		9220,1,0,0,0,9222,9221,1,0,0,0,9222,9223,1,0,0,0,9223,9225,1,0,0,0,9224,
		9226,5,884,0,0,9225,9224,1,0,0,0,9225,9226,1,0,0,0,9226,9244,1,0,0,0,9227,
		9229,5,146,0,0,9228,9230,5,622,0,0,9229,9228,1,0,0,0,9229,9230,1,0,0,0,
		9230,9232,1,0,0,0,9231,9233,5,884,0,0,9232,9231,1,0,0,0,9232,9233,1,0,
		0,0,9233,9244,1,0,0,0,9234,9235,5,150,0,0,9235,9238,7,106,0,0,9236,9239,
		3,1066,533,0,9237,9239,5,856,0,0,9238,9236,1,0,0,0,9238,9237,1,0,0,0,9238,
		9239,1,0,0,0,9239,9241,1,0,0,0,9240,9242,5,884,0,0,9241,9240,1,0,0,0,9241,
		9242,1,0,0,0,9242,9244,1,0,0,0,9243,9162,1,0,0,0,9243,9172,1,0,0,0,9243,
		9188,1,0,0,0,9243,9207,1,0,0,0,9243,9214,1,0,0,0,9243,9216,1,0,0,0,9243,
		9218,1,0,0,0,9243,9227,1,0,0,0,9243,9234,1,0,0,0,9244,719,1,0,0,0,9245,
		9247,5,348,0,0,9246,9248,5,857,0,0,9247,9246,1,0,0,0,9247,9248,1,0,0,0,
		9248,721,1,0,0,0,9249,9251,5,349,0,0,9250,9252,5,857,0,0,9251,9250,1,0,
		0,0,9251,9252,1,0,0,0,9252,723,1,0,0,0,9253,9254,5,180,0,0,9254,9256,3,
		1066,533,0,9255,9257,5,884,0,0,9256,9255,1,0,0,0,9256,9257,1,0,0,0,9257,
		725,1,0,0,0,9258,9260,5,159,0,0,9259,9261,5,859,0,0,9260,9259,1,0,0,0,
		9260,9261,1,0,0,0,9261,727,1,0,0,0,9262,9265,5,137,0,0,9263,9264,5,189,
		0,0,9264,9266,5,461,0,0,9265,9263,1,0,0,0,9265,9266,1,0,0,0,9266,729,1,
		0,0,0,9267,9270,5,160,0,0,9268,9269,5,189,0,0,9269,9271,5,445,0,0,9270,
		9268,1,0,0,0,9270,9271,1,0,0,0,9271,731,1,0,0,0,9272,9274,5,22,0,0,9273,
		9275,5,857,0,0,9274,9273,1,0,0,0,9274,9275,1,0,0,0,9275,733,1,0,0,0,9276,
		9277,5,44,0,0,9277,9287,5,809,0,0,9278,9279,5,881,0,0,9279,9280,5,559,
		0,0,9280,9284,5,863,0,0,9281,9285,3,800,400,0,9282,9285,3,1066,533,0,9283,
		9285,5,47,0,0,9284,9281,1,0,0,0,9284,9282,1,0,0,0,9284,9283,1,0,0,0,9285,
		9286,1,0,0,0,9286,9288,5,882,0,0,9287,9278,1,0,0,0,9287,9288,1,0,0,0,9288,
		9290,1,0,0,0,9289,9291,5,884,0,0,9290,9289,1,0,0,0,9290,9291,1,0,0,0,9291,
		735,1,0,0,0,9292,9293,5,44,0,0,9293,9298,3,738,369,0,9294,9295,5,881,0,
		0,9295,9296,3,964,482,0,9296,9297,5,882,0,0,9297,9299,1,0,0,0,9298,9294,
		1,0,0,0,9298,9299,1,0,0,0,9299,9302,1,0,0,0,9300,9301,5,189,0,0,9301,9303,
		3,740,370,0,9302,9300,1,0,0,0,9302,9303,1,0,0,0,9303,9305,1,0,0,0,9304,
		9306,5,884,0,0,9305,9304,1,0,0,0,9305,9306,1,0,0,0,9306,737,1,0,0,0,9307,
		9310,3,1068,534,0,9308,9310,3,1064,532,0,9309,9307,1,0,0,0,9309,9308,1,
		0,0,0,9310,739,1,0,0,0,9311,9314,3,1068,534,0,9312,9313,5,883,0,0,9313,
		9315,3,1068,534,0,9314,9312,1,0,0,0,9314,9315,1,0,0,0,9315,741,1,0,0,0,
		9316,9317,5,64,0,0,9317,9318,5,7,0,0,9318,9319,7,107,0,0,9319,743,1,0,
		0,0,9320,9322,5,856,0,0,9321,9323,5,7,0,0,9322,9321,1,0,0,0,9322,9323,
		1,0,0,0,9323,9324,1,0,0,0,9324,9327,3,1056,528,0,9325,9326,5,863,0,0,9326,
		9328,3,788,394,0,9327,9325,1,0,0,0,9327,9328,1,0,0,0,9328,745,1,0,0,0,
		9329,9330,5,164,0,0,9330,9331,5,881,0,0,9331,9338,3,754,377,0,9332,9334,
		5,883,0,0,9333,9332,1,0,0,0,9333,9334,1,0,0,0,9334,9335,1,0,0,0,9335,9337,
		3,748,374,0,9336,9333,1,0,0,0,9337,9340,1,0,0,0,9338,9336,1,0,0,0,9338,
		9339,1,0,0,0,9339,9341,1,0,0,0,9340,9338,1,0,0,0,9341,9342,5,882,0,0,9342,
		747,1,0,0,0,9343,9344,5,128,0,0,9344,9348,5,95,0,0,9345,9346,5,88,0,0,
		9346,9348,3,1066,533,0,9347,9343,1,0,0,0,9347,9345,1,0,0,0,9348,9350,1,
		0,0,0,9349,9351,7,108,0,0,9350,9349,1,0,0,0,9350,9351,1,0,0,0,9351,9354,
		1,0,0,0,9352,9354,5,176,0,0,9353,9347,1,0,0,0,9353,9352,1,0,0,0,9354,9355,
		1,0,0,0,9355,9356,5,881,0,0,9356,9357,3,1018,509,0,9357,9358,5,882,0,0,
		9358,9365,1,0,0,0,9359,9360,5,21,0,0,9360,9361,5,881,0,0,9361,9362,3,812,
		406,0,9362,9363,5,882,0,0,9363,9365,1,0,0,0,9364,9353,1,0,0,0,9364,9359,
		1,0,0,0,9365,749,1,0,0,0,9366,9367,5,624,0,0,9367,9369,5,881,0,0,9368,
		9370,7,109,0,0,9369,9368,1,0,0,0,9369,9370,1,0,0,0,9370,9371,1,0,0,0,9371,
		9372,3,752,376,0,9372,9373,5,882,0,0,9373,751,1,0,0,0,9374,9375,5,858,
		0,0,9375,9376,5,876,0,0,9376,9377,5,858,0,0,9377,753,1,0,0,0,9378,9385,
		3,756,378,0,9379,9381,5,883,0,0,9380,9379,1,0,0,0,9380,9381,1,0,0,0,9381,
		9382,1,0,0,0,9382,9384,3,756,378,0,9383,9380,1,0,0,0,9384,9387,1,0,0,0,
		9385,9383,1,0,0,0,9385,9386,1,0,0,0,9386,755,1,0,0,0,9387,9385,1,0,0,0,
		9388,9392,3,758,379,0,9389,9392,3,760,380,0,9390,9392,3,764,382,0,9391,
		9388,1,0,0,0,9391,9389,1,0,0,0,9391,9390,1,0,0,0,9392,757,1,0,0,0,9393,
		9400,3,1066,533,0,9394,9401,3,1056,528,0,9395,9396,5,7,0,0,9396,9398,3,
		788,394,0,9397,9399,5,770,0,0,9398,9397,1,0,0,0,9398,9399,1,0,0,0,9399,
		9401,1,0,0,0,9400,9394,1,0,0,0,9400,9395,1,0,0,0,9401,9404,1,0,0,0,9402,
		9403,5,26,0,0,9403,9405,3,1066,533,0,9404,9402,1,0,0,0,9404,9405,1,0,0,
		0,9405,9407,1,0,0,0,9406,9408,3,1032,516,0,9407,9406,1,0,0,0,9407,9408,
		1,0,0,0,9408,9430,1,0,0,0,9409,9410,5,30,0,0,9410,9412,3,1066,533,0,9411,
		9409,1,0,0,0,9411,9412,1,0,0,0,9412,9413,1,0,0,0,9413,9415,3,1034,517,
		0,9414,9416,3,1034,517,0,9415,9414,1,0,0,0,9415,9416,1,0,0,0,9416,9431,
		1,0,0,0,9417,9423,5,83,0,0,9418,9419,5,881,0,0,9419,9420,5,857,0,0,9420,
		9421,5,883,0,0,9421,9422,5,857,0,0,9422,9424,5,882,0,0,9423,9418,1,0,0,
		0,9423,9424,1,0,0,0,9424,9428,1,0,0,0,9425,9426,5,106,0,0,9426,9427,5,
		71,0,0,9427,9429,5,139,0,0,9428,9425,1,0,0,0,9428,9429,1,0,0,0,9429,9431,
		1,0,0,0,9430,9411,1,0,0,0,9430,9417,1,0,0,0,9430,9431,1,0,0,0,9431,9433,
		1,0,0,0,9432,9434,5,148,0,0,9433,9432,1,0,0,0,9433,9434,1,0,0,0,9434,9438,
		1,0,0,0,9435,9437,3,762,381,0,9436,9435,1,0,0,0,9437,9440,1,0,0,0,9438,
		9436,1,0,0,0,9438,9439,1,0,0,0,9439,759,1,0,0,0,9440,9438,1,0,0,0,9441,
		9442,3,1066,533,0,9442,9443,7,110,0,0,9443,9447,3,788,394,0,9444,9448,
		5,399,0,0,9445,9446,5,106,0,0,9446,9448,5,399,0,0,9447,9444,1,0,0,0,9447,
		9445,1,0,0,0,9447,9448,1,0,0,0,9448,761,1,0,0,0,9449,9450,5,30,0,0,9450,
		9452,3,1066,533,0,9451,9449,1,0,0,0,9451,9452,1,0,0,0,9452,9490,1,0,0,
		0,9453,9454,5,128,0,0,9454,9457,5,95,0,0,9455,9457,5,176,0,0,9456,9453,
		1,0,0,0,9456,9455,1,0,0,0,9457,9459,1,0,0,0,9458,9460,3,1030,515,0,9459,
		9458,1,0,0,0,9459,9460,1,0,0,0,9460,9462,1,0,0,0,9461,9463,3,770,385,0,
		9462,9461,1,0,0,0,9462,9463,1,0,0,0,9463,9491,1,0,0,0,9464,9468,5,21,0,
		0,9465,9466,5,106,0,0,9466,9467,5,71,0,0,9467,9469,5,139,0,0,9468,9465,
		1,0,0,0,9468,9469,1,0,0,0,9469,9470,1,0,0,0,9470,9471,5,881,0,0,9471,9472,
		3,812,406,0,9472,9473,5,882,0,0,9473,9491,1,0,0,0,9474,9475,5,72,0,0,9475,
		9477,5,95,0,0,9476,9474,1,0,0,0,9476,9477,1,0,0,0,9477,9478,1,0,0,0,9478,
		9479,5,138,0,0,9479,9480,3,1004,502,0,9480,9481,5,881,0,0,9481,9482,3,
		1024,512,0,9482,9484,5,882,0,0,9483,9485,3,766,383,0,9484,9483,1,0,0,0,
		9484,9485,1,0,0,0,9485,9487,1,0,0,0,9486,9488,3,768,384,0,9487,9486,1,
		0,0,0,9487,9488,1,0,0,0,9488,9491,1,0,0,0,9489,9491,3,1032,516,0,9490,
		9456,1,0,0,0,9490,9464,1,0,0,0,9490,9476,1,0,0,0,9490,9489,1,0,0,0,9491,
		763,1,0,0,0,9492,9493,5,30,0,0,9493,9495,3,1066,533,0,9494,9492,1,0,0,
		0,9494,9495,1,0,0,0,9495,9566,1,0,0,0,9496,9497,5,128,0,0,9497,9500,5,
		95,0,0,9498,9500,5,176,0,0,9499,9496,1,0,0,0,9499,9498,1,0,0,0,9500,9502,
		1,0,0,0,9501,9503,3,1030,515,0,9502,9501,1,0,0,0,9502,9503,1,0,0,0,9503,
		9504,1,0,0,0,9504,9505,5,881,0,0,9505,9506,3,1018,509,0,9506,9508,5,882,
		0,0,9507,9509,3,770,385,0,9508,9507,1,0,0,0,9508,9509,1,0,0,0,9509,9512,
		1,0,0,0,9510,9511,5,112,0,0,9511,9513,3,1066,533,0,9512,9510,1,0,0,0,9512,
		9513,1,0,0,0,9513,9567,1,0,0,0,9514,9518,5,21,0,0,9515,9516,5,106,0,0,
		9516,9517,5,71,0,0,9517,9519,5,139,0,0,9518,9515,1,0,0,0,9518,9519,1,0,
		0,0,9519,9520,1,0,0,0,9520,9521,5,881,0,0,9521,9522,3,812,406,0,9522,9523,
		5,882,0,0,9523,9567,1,0,0,0,9524,9526,5,47,0,0,9525,9527,5,881,0,0,9526,
		9525,1,0,0,0,9526,9527,1,0,0,0,9527,9540,1,0,0,0,9528,9533,5,859,0,0,9529,
		9533,5,890,0,0,9530,9533,3,910,455,0,9531,9533,5,857,0,0,9532,9528,1,0,
		0,0,9532,9529,1,0,0,0,9532,9530,1,0,0,0,9532,9531,1,0,0,0,9533,9534,1,
		0,0,0,9534,9532,1,0,0,0,9534,9535,1,0,0,0,9535,9541,1,0,0,0,9536,9537,
		5,434,0,0,9537,9538,5,613,0,0,9538,9539,5,71,0,0,9539,9541,3,1004,502,
		0,9540,9532,1,0,0,0,9540,9536,1,0,0,0,9541,9543,1,0,0,0,9542,9544,5,882,
		0,0,9543,9542,1,0,0,0,9543,9544,1,0,0,0,9544,9545,1,0,0,0,9545,9546,5,
		71,0,0,9546,9567,3,1066,533,0,9547,9548,5,72,0,0,9548,9549,5,95,0,0,9549,
		9550,5,881,0,0,9550,9551,3,1024,512,0,9551,9552,5,882,0,0,9552,9553,5,
		138,0,0,9553,9558,3,1004,502,0,9554,9555,5,881,0,0,9555,9556,3,1024,512,
		0,9556,9557,5,882,0,0,9557,9559,1,0,0,0,9558,9554,1,0,0,0,9558,9559,1,
		0,0,0,9559,9561,1,0,0,0,9560,9562,3,766,383,0,9561,9560,1,0,0,0,9561,9562,
		1,0,0,0,9562,9564,1,0,0,0,9563,9565,3,768,384,0,9564,9563,1,0,0,0,9564,
		9565,1,0,0,0,9565,9567,1,0,0,0,9566,9499,1,0,0,0,9566,9514,1,0,0,0,9566,
		9524,1,0,0,0,9566,9547,1,0,0,0,9567,765,1,0,0,0,9568,9569,5,112,0,0,9569,
		9577,5,48,0,0,9570,9571,5,435,0,0,9571,9578,5,197,0,0,9572,9578,5,19,0,
		0,9573,9574,5,158,0,0,9574,9578,5,107,0,0,9575,9576,5,158,0,0,9576,9578,
		5,47,0,0,9577,9570,1,0,0,0,9577,9572,1,0,0,0,9577,9573,1,0,0,0,9577,9575,
		1,0,0,0,9578,767,1,0,0,0,9579,9580,5,112,0,0,9580,9588,5,178,0,0,9581,
		9582,5,435,0,0,9582,9589,5,197,0,0,9583,9589,5,19,0,0,9584,9585,5,158,
		0,0,9585,9589,5,107,0,0,9586,9587,5,158,0,0,9587,9589,5,47,0,0,9588,9581,
		1,0,0,0,9588,9583,1,0,0,0,9588,9584,1,0,0,0,9588,9586,1,0,0,0,9589,769,
		1,0,0,0,9590,9591,5,189,0,0,9591,9592,5,881,0,0,9592,9597,3,772,386,0,
		9593,9594,5,883,0,0,9594,9596,3,772,386,0,9595,9593,1,0,0,0,9596,9599,
		1,0,0,0,9597,9595,1,0,0,0,9597,9598,1,0,0,0,9598,9600,1,0,0,0,9599,9597,
		1,0,0,0,9600,9601,5,882,0,0,9601,771,1,0,0,0,9602,9605,3,1068,534,0,9603,
		9605,3,1064,532,0,9604,9602,1,0,0,0,9604,9603,1,0,0,0,9605,9606,1,0,0,
		0,9606,9611,5,863,0,0,9607,9612,3,1068,534,0,9608,9612,3,1064,532,0,9609,
		9612,3,1028,514,0,9610,9612,5,857,0,0,9611,9607,1,0,0,0,9611,9608,1,0,
		0,0,9611,9609,1,0,0,0,9611,9610,1,0,0,0,9612,9644,1,0,0,0,9613,9614,5,
		24,0,0,9614,9615,5,257,0,0,9615,9644,5,88,0,0,9616,9644,5,707,0,0,9617,
		9618,5,685,0,0,9618,9619,5,863,0,0,9619,9620,5,354,0,0,9620,9621,5,881,
		0,0,9621,9622,3,1066,533,0,9622,9623,5,882,0,0,9623,9644,1,0,0,0,9624,
		9625,5,24,0,0,9625,9626,5,88,0,0,9626,9627,5,881,0,0,9627,9629,3,1066,
		533,0,9628,9630,7,111,0,0,9629,9628,1,0,0,0,9629,9630,1,0,0,0,9630,9638,
		1,0,0,0,9631,9632,5,883,0,0,9632,9634,3,1066,533,0,9633,9635,7,111,0,0,
		9634,9633,1,0,0,0,9634,9635,1,0,0,0,9635,9637,1,0,0,0,9636,9631,1,0,0,
		0,9637,9640,1,0,0,0,9638,9636,1,0,0,0,9638,9639,1,0,0,0,9639,9641,1,0,
		0,0,9640,9638,1,0,0,0,9641,9642,5,882,0,0,9642,9644,1,0,0,0,9643,9604,
		1,0,0,0,9643,9613,1,0,0,0,9643,9616,1,0,0,0,9643,9617,1,0,0,0,9643,9624,
		1,0,0,0,9644,773,1,0,0,0,9645,9646,5,46,0,0,9646,9678,3,1026,513,0,9647,
		9657,5,42,0,0,9648,9655,3,776,388,0,9649,9650,5,71,0,0,9650,9653,5,178,
		0,0,9651,9652,5,109,0,0,9652,9654,3,1024,512,0,9653,9651,1,0,0,0,9653,
		9654,1,0,0,0,9654,9656,1,0,0,0,9655,9649,1,0,0,0,9655,9656,1,0,0,0,9656,
		9658,1,0,0,0,9657,9648,1,0,0,0,9657,9658,1,0,0,0,9658,9679,1,0,0,0,9659,
		9661,7,112,0,0,9660,9659,1,0,0,0,9660,9661,1,0,0,0,9661,9663,1,0,0,0,9662,
		9664,5,534,0,0,9663,9662,1,0,0,0,9663,9664,1,0,0,0,9664,9665,1,0,0,0,9665,
		9666,5,42,0,0,9666,9667,5,71,0,0,9667,9676,3,456,228,0,9668,9674,5,71,
		0,0,9669,9670,5,135,0,0,9670,9675,5,455,0,0,9671,9675,5,178,0,0,9672,9673,
		5,109,0,0,9673,9675,3,1024,512,0,9674,9669,1,0,0,0,9674,9671,1,0,0,0,9674,
		9672,1,0,0,0,9675,9677,1,0,0,0,9676,9668,1,0,0,0,9676,9677,1,0,0,0,9677,
		9679,1,0,0,0,9678,9647,1,0,0,0,9678,9660,1,0,0,0,9679,9681,1,0,0,0,9680,
		9682,5,884,0,0,9681,9680,1,0,0,0,9681,9682,1,0,0,0,9682,775,1,0,0,0,9683,
		9685,3,778,389,0,9684,9683,1,0,0,0,9685,9688,1,0,0,0,9686,9684,1,0,0,0,
		9686,9687,1,0,0,0,9687,9689,1,0,0,0,9688,9686,1,0,0,0,9689,9690,5,71,0,
		0,9690,9691,3,456,228,0,9691,777,1,0,0,0,9692,9698,7,70,0,0,9693,9698,
		7,113,0,0,9694,9698,7,114,0,0,9695,9698,7,115,0,0,9696,9698,5,603,0,0,
		9697,9692,1,0,0,0,9697,9693,1,0,0,0,9697,9694,1,0,0,0,9697,9695,1,0,0,
		0,9697,9696,1,0,0,0,9698,779,1,0,0,0,9699,9709,5,68,0,0,9700,9707,5,434,
		0,0,9701,9707,5,478,0,0,9702,9707,5,334,0,0,9703,9707,5,382,0,0,9704,9705,
		7,116,0,0,9705,9707,3,788,394,0,9706,9700,1,0,0,0,9706,9701,1,0,0,0,9706,
		9702,1,0,0,0,9706,9703,1,0,0,0,9706,9704,1,0,0,0,9706,9707,1,0,0,0,9707,
		9708,1,0,0,0,9708,9710,5,75,0,0,9709,9706,1,0,0,0,9709,9710,1,0,0,0,9710,
		9712,1,0,0,0,9711,9713,5,347,0,0,9712,9711,1,0,0,0,9712,9713,1,0,0,0,9713,
		9714,1,0,0,0,9714,9724,3,1026,513,0,9715,9716,5,92,0,0,9716,9721,5,856,
		0,0,9717,9718,5,883,0,0,9718,9720,5,856,0,0,9719,9717,1,0,0,0,9720,9723,
		1,0,0,0,9721,9719,1,0,0,0,9721,9722,1,0,0,0,9722,9725,1,0,0,0,9723,9721,
		1,0,0,0,9724,9715,1,0,0,0,9724,9725,1,0,0,0,9725,9727,1,0,0,0,9726,9728,
		5,884,0,0,9727,9726,1,0,0,0,9727,9728,1,0,0,0,9728,781,1,0,0,0,9729,9730,
		5,158,0,0,9730,9734,3,1066,533,0,9731,9735,3,1066,533,0,9732,9735,3,786,
		393,0,9733,9735,3,1028,514,0,9734,9731,1,0,0,0,9734,9732,1,0,0,0,9734,
		9733,1,0,0,0,9735,9737,1,0,0,0,9736,9738,5,884,0,0,9737,9736,1,0,0,0,9737,
		9738,1,0,0,0,9738,9791,1,0,0,0,9739,9740,5,158,0,0,9740,9741,5,162,0,0,
		9741,9742,7,117,0,0,9742,9744,3,1028,514,0,9743,9745,5,884,0,0,9744,9743,
		1,0,0,0,9744,9745,1,0,0,0,9745,9791,1,0,0,0,9746,9747,5,158,0,0,9747,9748,
		5,147,0,0,9748,9750,7,0,0,0,9749,9751,5,884,0,0,9750,9749,1,0,0,0,9750,
		9751,1,0,0,0,9751,9791,1,0,0,0,9752,9753,5,158,0,0,9753,9754,5,171,0,0,
		9754,9755,5,372,0,0,9755,9765,5,385,0,0,9756,9757,5,135,0,0,9757,9766,
		5,605,0,0,9758,9759,5,135,0,0,9759,9766,5,258,0,0,9760,9761,5,513,0,0,
		9761,9766,5,135,0,0,9762,9766,5,561,0,0,9763,9766,5,551,0,0,9764,9766,
		5,857,0,0,9765,9756,1,0,0,0,9765,9758,1,0,0,0,9765,9760,1,0,0,0,9765,9762,
		1,0,0,0,9765,9763,1,0,0,0,9765,9764,1,0,0,0,9766,9768,1,0,0,0,9767,9769,
		5,884,0,0,9768,9767,1,0,0,0,9768,9769,1,0,0,0,9769,9791,1,0,0,0,9770,9771,
		5,158,0,0,9771,9772,5,84,0,0,9772,9773,3,1004,502,0,9773,9775,3,1028,514,
		0,9774,9776,5,884,0,0,9775,9774,1,0,0,0,9775,9776,1,0,0,0,9776,9791,1,
		0,0,0,9777,9778,5,158,0,0,9778,9783,3,784,392,0,9779,9780,5,883,0,0,9780,
		9782,3,784,392,0,9781,9779,1,0,0,0,9782,9785,1,0,0,0,9783,9781,1,0,0,0,
		9783,9784,1,0,0,0,9784,9786,1,0,0,0,9785,9783,1,0,0,0,9786,9787,3,1028,
		514,0,9787,9791,1,0,0,0,9788,9789,5,158,0,0,9789,9791,3,934,467,0,9790,
		9729,1,0,0,0,9790,9739,1,0,0,0,9790,9746,1,0,0,0,9790,9752,1,0,0,0,9790,
		9770,1,0,0,0,9790,9777,1,0,0,0,9790,9788,1,0,0,0,9791,783,1,0,0,0,9792,
		9793,7,118,0,0,9793,785,1,0,0,0,9794,9797,3,1060,530,0,9795,9797,5,856,
		0,0,9796,9794,1,0,0,0,9796,9795,1,0,0,0,9797,787,1,0,0,0,9798,9799,6,394,
		-1,0,9799,9808,3,792,396,0,9800,9808,3,910,455,0,9801,9808,3,794,397,0,
		9802,9808,3,1016,508,0,9803,9808,3,798,399,0,9804,9808,3,796,398,0,9805,
		9808,3,974,487,0,9806,9808,5,630,0,0,9807,9798,1,0,0,0,9807,9800,1,0,0,
		0,9807,9801,1,0,0,0,9807,9802,1,0,0,0,9807,9803,1,0,0,0,9807,9804,1,0,
		0,0,9807,9805,1,0,0,0,9807,9806,1,0,0,0,9808,9830,1,0,0,0,9809,9810,10,
		5,0,0,9810,9811,7,119,0,0,9811,9829,3,788,394,6,9812,9813,10,4,0,0,9813,
		9814,7,120,0,0,9814,9829,3,788,394,5,9815,9816,10,11,0,0,9816,9821,5,876,
		0,0,9817,9822,3,924,462,0,9818,9822,3,928,464,0,9819,9822,3,932,466,0,
		9820,9822,3,936,468,0,9821,9817,1,0,0,0,9821,9818,1,0,0,0,9821,9819,1,
		0,0,0,9821,9820,1,0,0,0,9822,9829,1,0,0,0,9823,9824,10,10,0,0,9824,9825,
		5,26,0,0,9825,9829,3,1066,533,0,9826,9827,10,3,0,0,9827,9829,3,790,395,
		0,9828,9809,1,0,0,0,9828,9812,1,0,0,0,9828,9815,1,0,0,0,9828,9823,1,0,
		0,0,9828,9826,1,0,0,0,9829,9832,1,0,0,0,9830,9828,1,0,0,0,9830,9831,1,
		0,0,0,9831,789,1,0,0,0,9832,9830,1,0,0,0,9833,9834,5,194,0,0,9834,9835,
		5,589,0,0,9835,9836,5,629,0,0,9836,9837,3,788,394,0,9837,791,1,0,0,0,9838,
		9843,5,47,0,0,9839,9843,5,107,0,0,9840,9843,5,856,0,0,9841,9843,3,1060,
		530,0,9842,9838,1,0,0,0,9842,9839,1,0,0,0,9842,9840,1,0,0,0,9842,9841,
		1,0,0,0,9843,793,1,0,0,0,9844,9845,5,20,0,0,9845,9847,3,788,394,0,9846,
		9848,3,940,470,0,9847,9846,1,0,0,0,9848,9849,1,0,0,0,9849,9847,1,0,0,0,
		9849,9850,1,0,0,0,9850,9853,1,0,0,0,9851,9852,5,59,0,0,9852,9854,3,788,
		394,0,9853,9851,1,0,0,0,9853,9854,1,0,0,0,9854,9855,1,0,0,0,9855,9856,
		5,60,0,0,9856,9870,1,0,0,0,9857,9859,5,20,0,0,9858,9860,3,942,471,0,9859,
		9858,1,0,0,0,9860,9861,1,0,0,0,9861,9859,1,0,0,0,9861,9862,1,0,0,0,9862,
		9865,1,0,0,0,9863,9864,5,59,0,0,9864,9866,3,788,394,0,9865,9863,1,0,0,
		0,9865,9866,1,0,0,0,9866,9867,1,0,0,0,9867,9868,5,60,0,0,9868,9870,1,0,
		0,0,9869,9844,1,0,0,0,9869,9857,1,0,0,0,9870,795,1,0,0,0,9871,9872,5,892,
		0,0,9872,9876,3,788,394,0,9873,9874,7,121,0,0,9874,9876,3,788,394,0,9875,
		9871,1,0,0,0,9875,9873,1,0,0,0,9876,797,1,0,0,0,9877,9878,5,881,0,0,9878,
		9879,3,788,394,0,9879,9880,5,882,0,0,9880,9886,1,0,0,0,9881,9882,5,881,
		0,0,9882,9883,3,802,401,0,9883,9884,5,882,0,0,9884,9886,1,0,0,0,9885,9877,
		1,0,0,0,9885,9881,1,0,0,0,9886,799,1,0,0,0,9887,9896,5,107,0,0,9888,9896,
		3,1060,530,0,9889,9896,3,910,455,0,9890,9896,5,856,0,0,9891,9892,5,881,
		0,0,9892,9893,3,800,400,0,9893,9894,5,882,0,0,9894,9896,1,0,0,0,9895,9887,
		1,0,0,0,9895,9888,1,0,0,0,9895,9889,1,0,0,0,9895,9890,1,0,0,0,9895,9891,
		1,0,0,0,9896,801,1,0,0,0,9897,9898,3,458,229,0,9898,803,1,0,0,0,9899,9900,
		5,189,0,0,9900,9905,3,806,403,0,9901,9902,5,883,0,0,9902,9904,3,806,403,
		0,9903,9901,1,0,0,0,9904,9907,1,0,0,0,9905,9903,1,0,0,0,9905,9906,1,0,
		0,0,9906,805,1,0,0,0,9907,9905,1,0,0,0,9908,9913,3,1066,533,0,9909,9910,
		5,881,0,0,9910,9911,3,1024,512,0,9911,9912,5,882,0,0,9912,9914,1,0,0,0,
		9913,9909,1,0,0,0,9913,9914,1,0,0,0,9914,9915,1,0,0,0,9915,9916,5,7,0,
		0,9916,9917,5,881,0,0,9917,9918,3,458,229,0,9918,9919,5,882,0,0,9919,807,
		1,0,0,0,9920,9921,5,856,0,0,9921,9922,5,863,0,0,9922,9925,3,1016,508,0,
		9923,9926,5,863,0,0,9924,9926,3,1074,537,0,9925,9923,1,0,0,0,9925,9924,
		1,0,0,0,9926,9927,1,0,0,0,9927,9928,3,788,394,0,9928,9946,1,0,0,0,9929,
		9932,3,1016,508,0,9930,9932,5,856,0,0,9931,9929,1,0,0,0,9931,9930,1,0,
		0,0,9932,9935,1,0,0,0,9933,9936,5,863,0,0,9934,9936,3,1074,537,0,9935,
		9933,1,0,0,0,9935,9934,1,0,0,0,9936,9937,1,0,0,0,9937,9946,3,788,394,0,
		9938,9939,3,1066,533,0,9939,9940,5,876,0,0,9940,9941,3,1066,533,0,9941,
		9942,5,881,0,0,9942,9943,3,964,482,0,9943,9944,5,882,0,0,9944,9946,1,0,
		0,0,9945,9920,1,0,0,0,9945,9931,1,0,0,0,9945,9938,1,0,0,0,9946,809,1,0,
		0,0,9947,9950,3,1016,508,0,9948,9950,5,856,0,0,9949,9947,1,0,0,0,9949,
		9948,1,0,0,0,9950,9953,1,0,0,0,9951,9954,5,863,0,0,9952,9954,3,1074,537,
		0,9953,9951,1,0,0,0,9953,9952,1,0,0,0,9954,9955,1,0,0,0,9955,9964,3,788,
		394,0,9956,9957,3,1066,533,0,9957,9958,5,876,0,0,9958,9959,3,1066,533,
		0,9959,9960,5,881,0,0,9960,9961,3,964,482,0,9961,9962,5,882,0,0,9962,9964,
		1,0,0,0,9963,9949,1,0,0,0,9963,9956,1,0,0,0,9964,811,1,0,0,0,9965,9969,
		6,406,-1,0,9966,9968,5,106,0,0,9967,9966,1,0,0,0,9968,9971,1,0,0,0,9969,
		9967,1,0,0,0,9969,9970,1,0,0,0,9970,9977,1,0,0,0,9971,9969,1,0,0,0,9972,
		9978,3,814,407,0,9973,9974,5,881,0,0,9974,9975,3,812,406,0,9975,9976,5,
		882,0,0,9976,9978,1,0,0,0,9977,9972,1,0,0,0,9977,9973,1,0,0,0,9978,9987,
		1,0,0,0,9979,9980,10,2,0,0,9980,9981,5,5,0,0,9981,9986,3,812,406,3,9982,
		9983,10,1,0,0,9983,9984,5,120,0,0,9984,9986,3,812,406,2,9985,9979,1,0,
		0,0,9985,9982,1,0,0,0,9986,9989,1,0,0,0,9987,9985,1,0,0,0,9987,9988,1,
		0,0,0,9988,813,1,0,0,0,9989,9987,1,0,0,0,9990,9991,5,65,0,0,9991,9992,
		5,881,0,0,9992,9993,3,802,401,0,9993,9994,5,882,0,0,9994,10052,1,0,0,0,
		9995,10052,3,916,458,0,9996,9997,3,788,394,0,9997,9998,3,1072,536,0,9998,
		9999,3,788,394,0,9999,10052,1,0,0,0,10000,10001,3,788,394,0,10001,10002,
		3,1072,536,0,10002,10003,7,122,0,0,10003,10004,5,881,0,0,10004,10005,3,
		802,401,0,10005,10006,5,882,0,0,10006,10052,1,0,0,0,10007,10011,3,788,
		394,0,10008,10010,5,106,0,0,10009,10008,1,0,0,0,10010,10013,1,0,0,0,10011,
		10009,1,0,0,0,10011,10012,1,0,0,0,10012,10014,1,0,0,0,10013,10011,1,0,
		0,0,10014,10015,5,14,0,0,10015,10016,3,788,394,0,10016,10017,5,5,0,0,10017,
		10018,3,788,394,0,10018,10052,1,0,0,0,10019,10023,3,788,394,0,10020,10022,
		5,106,0,0,10021,10020,1,0,0,0,10022,10025,1,0,0,0,10023,10021,1,0,0,0,
		10023,10024,1,0,0,0,10024,10026,1,0,0,0,10025,10023,1,0,0,0,10026,10027,
		5,87,0,0,10027,10030,5,881,0,0,10028,10031,3,802,401,0,10029,10031,3,964,
		482,0,10030,10028,1,0,0,0,10030,10029,1,0,0,0,10031,10032,1,0,0,0,10032,
		10033,5,882,0,0,10033,10052,1,0,0,0,10034,10038,3,788,394,0,10035,10037,
		5,106,0,0,10036,10035,1,0,0,0,10037,10040,1,0,0,0,10038,10036,1,0,0,0,
		10038,10039,1,0,0,0,10039,10041,1,0,0,0,10040,10038,1,0,0,0,10041,10042,
		5,98,0,0,10042,10045,3,788,394,0,10043,10044,5,62,0,0,10044,10046,3,788,
		394,0,10045,10043,1,0,0,0,10045,10046,1,0,0,0,10046,10052,1,0,0,0,10047,
		10048,3,788,394,0,10048,10049,5,93,0,0,10049,10050,3,1032,516,0,10050,
		10052,1,0,0,0,10051,9990,1,0,0,0,10051,9995,1,0,0,0,10051,9996,1,0,0,0,
		10051,10000,1,0,0,0,10051,10007,1,0,0,0,10051,10019,1,0,0,0,10051,10034,
		1,0,0,0,10051,10047,1,0,0,0,10052,815,1,0,0,0,10053,10065,3,820,410,0,
		10054,10055,5,881,0,0,10055,10056,3,816,408,0,10056,10062,5,882,0,0,10057,
		10059,5,175,0,0,10058,10060,5,3,0,0,10059,10058,1,0,0,0,10059,10060,1,
		0,0,0,10060,10061,1,0,0,0,10061,10063,3,816,408,0,10062,10057,1,0,0,0,
		10062,10063,1,0,0,0,10063,10065,1,0,0,0,10064,10053,1,0,0,0,10064,10054,
		1,0,0,0,10065,10077,1,0,0,0,10066,10068,3,820,410,0,10067,10069,3,828,
		414,0,10068,10067,1,0,0,0,10068,10069,1,0,0,0,10069,10073,1,0,0,0,10070,
		10072,3,818,409,0,10071,10070,1,0,0,0,10072,10075,1,0,0,0,10073,10071,
		1,0,0,0,10073,10074,1,0,0,0,10074,10077,1,0,0,0,10075,10073,1,0,0,0,10076,
		10064,1,0,0,0,10076,10066,1,0,0,0,10077,817,1,0,0,0,10078,10080,5,175,
		0,0,10079,10081,5,3,0,0,10080,10079,1,0,0,0,10080,10081,1,0,0,0,10081,
		10085,1,0,0,0,10082,10085,5,63,0,0,10083,10085,5,91,0,0,10084,10078,1,
		0,0,0,10084,10082,1,0,0,0,10084,10083,1,0,0,0,10085,10091,1,0,0,0,10086,
		10092,3,820,410,0,10087,10088,5,881,0,0,10088,10089,3,816,408,0,10089,
		10090,5,882,0,0,10090,10092,1,0,0,0,10091,10086,1,0,0,0,10091,10087,1,
		0,0,0,10092,819,1,0,0,0,10093,10095,5,153,0,0,10094,10096,7,123,0,0,10095,
		10094,1,0,0,0,10095,10096,1,0,0,0,10096,10098,1,0,0,0,10097,10099,3,822,
		411,0,10098,10097,1,0,0,0,10098,10099,1,0,0,0,10099,10100,1,0,0,0,10100,
		10103,3,844,422,0,10101,10102,5,92,0,0,10102,10104,3,1004,502,0,10103,
		10101,1,0,0,0,10103,10104,1,0,0,0,10104,10107,1,0,0,0,10105,10106,5,75,
		0,0,10106,10108,3,858,429,0,10107,10105,1,0,0,0,10107,10108,1,0,0,0,10108,
		10111,1,0,0,0,10109,10110,5,187,0,0,10110,10112,3,812,406,0,10111,10109,
		1,0,0,0,10111,10112,1,0,0,0,10112,10126,1,0,0,0,10113,10114,5,80,0,0,10114,
		10116,5,18,0,0,10115,10117,5,3,0,0,10116,10115,1,0,0,0,10116,10117,1,0,
		0,0,10117,10118,1,0,0,0,10118,10123,3,836,418,0,10119,10120,5,883,0,0,
		10120,10122,3,836,418,0,10121,10119,1,0,0,0,10122,10125,1,0,0,0,10123,
		10121,1,0,0,0,10123,10124,1,0,0,0,10124,10127,1,0,0,0,10125,10123,1,0,
		0,0,10126,10113,1,0,0,0,10126,10127,1,0,0,0,10127,10130,1,0,0,0,10128,
		10129,5,81,0,0,10129,10131,3,812,406,0,10130,10128,1,0,0,0,10130,10131,
		1,0,0,0,10131,821,1,0,0,0,10132,10135,5,169,0,0,10133,10136,3,824,412,
		0,10134,10136,3,826,413,0,10135,10133,1,0,0,0,10135,10134,1,0,0,0,10136,
		10139,1,0,0,0,10137,10138,5,189,0,0,10138,10140,5,588,0,0,10139,10137,
		1,0,0,0,10139,10140,1,0,0,0,10140,823,1,0,0,0,10141,10142,7,124,0,0,10142,
		10149,5,124,0,0,10143,10144,5,881,0,0,10144,10145,3,788,394,0,10145,10146,
		5,882,0,0,10146,10147,5,124,0,0,10147,10149,1,0,0,0,10148,10141,1,0,0,
		0,10148,10143,1,0,0,0,10149,825,1,0,0,0,10150,10156,5,857,0,0,10151,10152,
		5,881,0,0,10152,10153,3,788,394,0,10153,10154,5,882,0,0,10154,10156,1,
		0,0,0,10155,10150,1,0,0,0,10155,10151,1,0,0,0,10156,827,1,0,0,0,10157,
		10158,5,121,0,0,10158,10159,5,18,0,0,10159,10164,3,834,417,0,10160,10161,
		5,883,0,0,10161,10163,3,834,417,0,10162,10160,1,0,0,0,10163,10166,1,0,
		0,0,10164,10162,1,0,0,0,10164,10165,1,0,0,0,10165,10178,1,0,0,0,10166,
		10164,1,0,0,0,10167,10168,5,452,0,0,10168,10169,3,788,394,0,10169,10176,
		7,125,0,0,10170,10171,5,68,0,0,10171,10172,7,126,0,0,10172,10173,3,788,
		394,0,10173,10174,7,125,0,0,10174,10175,5,455,0,0,10175,10177,1,0,0,0,
		10176,10170,1,0,0,0,10176,10177,1,0,0,0,10177,10179,1,0,0,0,10178,10167,
		1,0,0,0,10178,10179,1,0,0,0,10179,829,1,0,0,0,10180,10181,5,71,0,0,10181,
		10273,5,16,0,0,10182,10183,5,71,0,0,10183,10191,5,624,0,0,10184,10188,
		5,134,0,0,10185,10186,5,881,0,0,10186,10187,5,859,0,0,10187,10189,5,882,
		0,0,10188,10185,1,0,0,0,10188,10189,1,0,0,0,10189,10192,1,0,0,0,10190,
		10192,5,221,0,0,10191,10184,1,0,0,0,10191,10190,1,0,0,0,10192,10196,1,
		0,0,0,10193,10195,3,832,416,0,10194,10193,1,0,0,0,10195,10198,1,0,0,0,
		10196,10194,1,0,0,0,10196,10197,1,0,0,0,10197,10209,1,0,0,0,10198,10196,
		1,0,0,0,10199,10207,5,883,0,0,10200,10208,5,625,0,0,10201,10205,5,627,
		0,0,10202,10203,5,881,0,0,10203,10204,5,859,0,0,10204,10206,5,882,0,0,
		10205,10202,1,0,0,0,10205,10206,1,0,0,0,10206,10208,1,0,0,0,10207,10200,
		1,0,0,0,10207,10201,1,0,0,0,10208,10210,1,0,0,0,10209,10199,1,0,0,0,10209,
		10210,1,0,0,0,10210,10216,1,0,0,0,10211,10212,5,883,0,0,10212,10214,5,
		307,0,0,10213,10215,7,127,0,0,10214,10213,1,0,0,0,10214,10215,1,0,0,0,
		10215,10217,1,0,0,0,10216,10211,1,0,0,0,10216,10217,1,0,0,0,10217,10273,
		1,0,0,0,10218,10219,5,71,0,0,10219,10220,5,624,0,0,10220,10224,5,321,0,
		0,10221,10223,3,832,416,0,10222,10221,1,0,0,0,10223,10226,1,0,0,0,10224,
		10222,1,0,0,0,10224,10225,1,0,0,0,10225,10229,1,0,0,0,10226,10224,1,0,
		0,0,10227,10228,5,883,0,0,10228,10230,5,625,0,0,10229,10227,1,0,0,0,10229,
		10230,1,0,0,0,10230,10273,1,0,0,0,10231,10232,5,71,0,0,10232,10233,5,624,
		0,0,10233,10237,5,469,0,0,10234,10235,5,881,0,0,10235,10236,5,859,0,0,
		10236,10238,5,882,0,0,10237,10234,1,0,0,0,10237,10238,1,0,0,0,10238,10242,
		1,0,0,0,10239,10241,3,832,416,0,10240,10239,1,0,0,0,10241,10244,1,0,0,
		0,10242,10240,1,0,0,0,10242,10243,1,0,0,0,10243,10250,1,0,0,0,10244,10242,
		1,0,0,0,10245,10246,5,883,0,0,10246,10248,5,307,0,0,10247,10249,7,127,
		0,0,10248,10247,1,0,0,0,10248,10249,1,0,0,0,10249,10251,1,0,0,0,10250,
		10245,1,0,0,0,10250,10251,1,0,0,0,10251,10273,1,0,0,0,10252,10253,5,71,
		0,0,10253,10254,5,374,0,0,10254,10262,7,128,0,0,10255,10256,5,883,0,0,
		10256,10260,5,525,0,0,10257,10258,5,881,0,0,10258,10259,5,859,0,0,10259,
		10261,5,882,0,0,10260,10257,1,0,0,0,10260,10261,1,0,0,0,10261,10263,1,
		0,0,0,10262,10255,1,0,0,0,10262,10263,1,0,0,0,10263,10266,1,0,0,0,10264,
		10265,5,883,0,0,10265,10267,5,364,0,0,10266,10264,1,0,0,0,10266,10267,
		1,0,0,0,10267,10270,1,0,0,0,10268,10269,5,883,0,0,10269,10271,5,621,0,
		0,10270,10268,1,0,0,0,10270,10271,1,0,0,0,10271,10273,1,0,0,0,10272,10180,
		1,0,0,0,10272,10182,1,0,0,0,10272,10218,1,0,0,0,10272,10231,1,0,0,0,10272,
		10252,1,0,0,0,10273,831,1,0,0,0,10274,10283,5,883,0,0,10275,10284,5,236,
		0,0,10276,10284,5,602,0,0,10277,10281,5,525,0,0,10278,10279,5,881,0,0,
		10279,10280,5,859,0,0,10280,10282,5,882,0,0,10281,10278,1,0,0,0,10281,
		10282,1,0,0,0,10282,10284,1,0,0,0,10283,10275,1,0,0,0,10283,10276,1,0,
		0,0,10283,10277,1,0,0,0,10284,833,1,0,0,0,10285,10288,3,788,394,0,10286,
		10289,5,8,0,0,10287,10289,5,50,0,0,10288,10286,1,0,0,0,10288,10287,1,0,
		0,0,10288,10289,1,0,0,0,10289,835,1,0,0,0,10290,10291,3,788,394,0,10291,
		837,1,0,0,0,10292,10293,5,119,0,0,10293,10294,5,881,0,0,10294,10299,3,
		840,420,0,10295,10296,5,883,0,0,10296,10298,3,840,420,0,10297,10295,1,
		0,0,0,10298,10301,1,0,0,0,10299,10297,1,0,0,0,10299,10300,1,0,0,0,10300,
		10302,1,0,0,0,10301,10299,1,0,0,0,10302,10303,5,882,0,0,10303,839,1,0,
		0,0,10304,10305,5,326,0,0,10305,10350,5,857,0,0,10306,10307,7,129,0,0,
		10307,10350,5,80,0,0,10308,10309,7,130,0,0,10309,10350,5,175,0,0,10310,
		10311,7,131,0,0,10311,10350,5,94,0,0,10312,10313,5,319,0,0,10313,10350,
		5,618,0,0,10314,10315,5,337,0,0,10315,10350,5,121,0,0,10316,10350,5,360,
		0,0,10317,10318,5,376,0,0,10318,10350,5,126,0,0,10319,10320,5,377,0,0,
		10320,10350,5,126,0,0,10321,10322,5,409,0,0,10322,10350,5,857,0,0,10323,
		10324,5,410,0,0,10324,10350,5,857,0,0,10325,10326,5,458,0,0,10326,10327,
		5,71,0,0,10327,10328,5,881,0,0,10328,10333,3,842,421,0,10329,10330,5,883,
		0,0,10330,10332,3,842,421,0,10331,10329,1,0,0,0,10332,10335,1,0,0,0,10333,
		10331,1,0,0,0,10333,10334,1,0,0,0,10334,10336,1,0,0,0,10335,10333,1,0,
		0,0,10336,10337,5,882,0,0,10337,10350,1,0,0,0,10338,10339,5,458,0,0,10339,
		10340,5,71,0,0,10340,10350,5,606,0,0,10341,10342,5,465,0,0,10342,10350,
		7,82,0,0,10343,10350,5,505,0,0,10344,10345,5,524,0,0,10345,10350,5,126,
		0,0,10346,10347,5,180,0,0,10347,10348,5,126,0,0,10348,10350,5,859,0,0,
		10349,10304,1,0,0,0,10349,10306,1,0,0,0,10349,10308,1,0,0,0,10349,10310,
		1,0,0,0,10349,10312,1,0,0,0,10349,10314,1,0,0,0,10349,10316,1,0,0,0,10349,
		10317,1,0,0,0,10349,10319,1,0,0,0,10349,10321,1,0,0,0,10349,10323,1,0,
		0,0,10349,10325,1,0,0,0,10349,10338,1,0,0,0,10349,10341,1,0,0,0,10349,
		10343,1,0,0,0,10349,10344,1,0,0,0,10349,10346,1,0,0,0,10350,841,1,0,0,
		0,10351,10358,5,856,0,0,10352,10359,5,606,0,0,10353,10356,5,863,0,0,10354,
		10357,3,1060,530,0,10355,10357,5,107,0,0,10356,10354,1,0,0,0,10356,10355,
		1,0,0,0,10357,10359,1,0,0,0,10358,10352,1,0,0,0,10358,10353,1,0,0,0,10359,
		843,1,0,0,0,10360,10365,3,856,428,0,10361,10362,5,883,0,0,10362,10364,
		3,856,428,0,10363,10361,1,0,0,0,10364,10367,1,0,0,0,10365,10363,1,0,0,
		0,10365,10366,1,0,0,0,10366,845,1,0,0,0,10367,10365,1,0,0,0,10368,10369,
		5,881,0,0,10369,10374,3,684,342,0,10370,10371,5,883,0,0,10371,10373,3,
		684,342,0,10372,10370,1,0,0,0,10373,10376,1,0,0,0,10374,10372,1,0,0,0,
		10374,10375,1,0,0,0,10375,10377,1,0,0,0,10376,10374,1,0,0,0,10377,10378,
		5,882,0,0,10378,847,1,0,0,0,10379,10380,3,1004,502,0,10380,10381,5,876,
		0,0,10381,10383,1,0,0,0,10382,10379,1,0,0,0,10382,10383,1,0,0,0,10383,
		10384,1,0,0,0,10384,10389,5,887,0,0,10385,10386,7,132,0,0,10386,10387,
		5,876,0,0,10387,10389,5,887,0,0,10388,10382,1,0,0,0,10388,10385,1,0,0,
		0,10389,849,1,0,0,0,10390,10397,3,1016,508,0,10391,10392,5,880,0,0,10392,
		10397,5,83,0,0,10393,10394,5,880,0,0,10394,10397,5,529,0,0,10395,10397,
		5,107,0,0,10396,10390,1,0,0,0,10396,10391,1,0,0,0,10396,10393,1,0,0,0,
		10396,10395,1,0,0,0,10397,10399,1,0,0,0,10398,10400,3,944,472,0,10399,
		10398,1,0,0,0,10399,10400,1,0,0,0,10400,851,1,0,0,0,10401,10402,3,1066,
		533,0,10402,10403,5,876,0,0,10403,10404,3,1066,533,0,10404,10406,3,846,
		423,0,10405,10407,3,944,472,0,10406,10405,1,0,0,0,10406,10407,1,0,0,0,
		10407,10418,1,0,0,0,10408,10409,3,1066,533,0,10409,10410,5,886,0,0,10410,
		10412,3,1066,533,0,10411,10413,3,846,423,0,10412,10411,1,0,0,0,10412,10413,
		1,0,0,0,10413,10415,1,0,0,0,10414,10416,3,944,472,0,10415,10414,1,0,0,
		0,10415,10416,1,0,0,0,10416,10418,1,0,0,0,10417,10401,1,0,0,0,10417,10408,
		1,0,0,0,10418,853,1,0,0,0,10419,10420,3,960,480,0,10420,10421,5,863,0,
		0,10421,10422,3,788,394,0,10422,10428,1,0,0,0,10423,10425,3,788,394,0,
		10424,10426,3,944,472,0,10425,10424,1,0,0,0,10425,10426,1,0,0,0,10426,
		10428,1,0,0,0,10427,10419,1,0,0,0,10427,10423,1,0,0,0,10428,855,1,0,0,
		0,10429,10453,3,848,424,0,10430,10453,3,850,425,0,10431,10453,3,852,426,
		0,10432,10435,5,856,0,0,10433,10436,3,1074,537,0,10434,10436,5,863,0,0,
		10435,10433,1,0,0,0,10435,10434,1,0,0,0,10436,10442,1,0,0,0,10437,10443,
		3,788,394,0,10438,10439,5,434,0,0,10439,10440,5,613,0,0,10440,10441,5,
		71,0,0,10441,10443,3,1004,502,0,10442,10437,1,0,0,0,10442,10438,1,0,0,
		0,10443,10453,1,0,0,0,10444,10453,3,854,427,0,10445,10446,5,434,0,0,10446,
		10447,5,613,0,0,10447,10448,5,71,0,0,10448,10450,3,1004,502,0,10449,10451,
		3,944,472,0,10450,10449,1,0,0,0,10450,10451,1,0,0,0,10451,10453,1,0,0,
		0,10452,10429,1,0,0,0,10452,10430,1,0,0,0,10452,10431,1,0,0,0,10452,10432,
		1,0,0,0,10452,10444,1,0,0,0,10452,10445,1,0,0,0,10453,857,1,0,0,0,10454,
		10459,3,860,430,0,10455,10456,5,883,0,0,10456,10458,3,860,430,0,10457,
		10455,1,0,0,0,10458,10461,1,0,0,0,10459,10457,1,0,0,0,10459,10460,1,0,
		0,0,10460,859,1,0,0,0,10461,10459,1,0,0,0,10462,10468,3,862,431,0,10463,
		10464,5,881,0,0,10464,10465,3,860,430,0,10465,10466,5,882,0,0,10466,10468,
		1,0,0,0,10467,10462,1,0,0,0,10467,10463,1,0,0,0,10468,861,1,0,0,0,10469,
		10473,3,864,432,0,10470,10472,3,884,442,0,10471,10470,1,0,0,0,10472,10475,
		1,0,0,0,10473,10471,1,0,0,0,10473,10474,1,0,0,0,10474,10486,1,0,0,0,10475,
		10473,1,0,0,0,10476,10477,5,881,0,0,10477,10478,3,862,431,0,10478,10482,
		5,882,0,0,10479,10481,3,884,442,0,10480,10479,1,0,0,0,10481,10484,1,0,
		0,0,10482,10480,1,0,0,0,10482,10483,1,0,0,0,10483,10486,1,0,0,0,10484,
		10482,1,0,0,0,10485,10469,1,0,0,0,10485,10476,1,0,0,0,10486,863,1,0,0,
		0,10487,10489,3,902,451,0,10488,10490,3,946,473,0,10489,10488,1,0,0,0,
		10489,10490,1,0,0,0,10490,10547,1,0,0,0,10491,10493,3,1002,501,0,10492,
		10494,3,946,473,0,10493,10492,1,0,0,0,10493,10494,1,0,0,0,10494,10547,
		1,0,0,0,10495,10497,3,904,452,0,10496,10498,3,946,473,0,10497,10496,1,
		0,0,0,10497,10498,1,0,0,0,10498,10547,1,0,0,0,10499,10500,5,881,0,0,10500,
		10501,3,908,454,0,10501,10506,5,882,0,0,10502,10504,3,946,473,0,10503,
		10505,3,958,479,0,10504,10503,1,0,0,0,10504,10505,1,0,0,0,10505,10507,
		1,0,0,0,10506,10502,1,0,0,0,10506,10507,1,0,0,0,10507,10547,1,0,0,0,10508,
		10510,3,878,439,0,10509,10511,3,946,473,0,10510,10509,1,0,0,0,10510,10511,
		1,0,0,0,10511,10547,1,0,0,0,10512,10517,3,910,455,0,10513,10515,3,946,
		473,0,10514,10516,3,958,479,0,10515,10514,1,0,0,0,10515,10516,1,0,0,0,
		10516,10518,1,0,0,0,10517,10513,1,0,0,0,10517,10518,1,0,0,0,10518,10547,
		1,0,0,0,10519,10521,5,856,0,0,10520,10522,3,946,473,0,10521,10520,1,0,
		0,0,10521,10522,1,0,0,0,10522,10547,1,0,0,0,10523,10528,3,938,469,0,10524,
		10526,3,946,473,0,10525,10527,3,958,479,0,10526,10525,1,0,0,0,10526,10527,
		1,0,0,0,10527,10529,1,0,0,0,10528,10524,1,0,0,0,10528,10529,1,0,0,0,10529,
		10547,1,0,0,0,10530,10531,5,856,0,0,10531,10532,5,876,0,0,10532,10537,
		3,910,455,0,10533,10535,3,946,473,0,10534,10536,3,958,479,0,10535,10534,
		1,0,0,0,10535,10536,1,0,0,0,10536,10538,1,0,0,0,10537,10533,1,0,0,0,10537,
		10538,1,0,0,0,10538,10547,1,0,0,0,10539,10547,3,866,433,0,10540,10547,
		3,868,434,0,10541,10542,5,886,0,0,10542,10544,3,910,455,0,10543,10545,
		3,946,473,0,10544,10543,1,0,0,0,10544,10545,1,0,0,0,10545,10547,1,0,0,
		0,10546,10487,1,0,0,0,10546,10491,1,0,0,0,10546,10495,1,0,0,0,10546,10499,
		1,0,0,0,10546,10508,1,0,0,0,10546,10512,1,0,0,0,10546,10519,1,0,0,0,10546,
		10523,1,0,0,0,10546,10530,1,0,0,0,10546,10539,1,0,0,0,10546,10540,1,0,
		0,0,10546,10541,1,0,0,0,10547,865,1,0,0,0,10548,10549,5,118,0,0,10549,
		10550,5,881,0,0,10550,10551,3,788,394,0,10551,10552,5,883,0,0,10552,10555,
		3,788,394,0,10553,10554,5,883,0,0,10554,10556,3,788,394,0,10555,10553,
		1,0,0,0,10555,10556,1,0,0,0,10556,10557,1,0,0,0,10557,10563,5,882,0,0,
		10558,10559,5,189,0,0,10559,10560,5,881,0,0,10560,10561,3,874,437,0,10561,
		10562,5,882,0,0,10562,10564,1,0,0,0,10563,10558,1,0,0,0,10563,10564,1,
		0,0,0,10564,10566,1,0,0,0,10565,10567,3,946,473,0,10566,10565,1,0,0,0,
		10566,10567,1,0,0,0,10567,867,1,0,0,0,10568,10569,5,117,0,0,10569,10570,
		5,881,0,0,10570,10573,3,788,394,0,10571,10572,5,883,0,0,10572,10574,3,
		788,394,0,10573,10571,1,0,0,0,10573,10574,1,0,0,0,10574,10575,1,0,0,0,
		10575,10581,5,882,0,0,10576,10577,5,189,0,0,10577,10578,5,881,0,0,10578,
		10579,3,870,435,0,10579,10580,5,882,0,0,10580,10582,1,0,0,0,10581,10576,
		1,0,0,0,10581,10582,1,0,0,0,10582,10584,1,0,0,0,10583,10585,3,946,473,
		0,10584,10583,1,0,0,0,10584,10585,1,0,0,0,10585,869,1,0,0,0,10586,10591,
		3,872,436,0,10587,10588,5,883,0,0,10588,10590,3,872,436,0,10589,10587,
		1,0,0,0,10590,10593,1,0,0,0,10591,10589,1,0,0,0,10591,10592,1,0,0,0,10592,
		871,1,0,0,0,10593,10591,1,0,0,0,10594,10597,3,876,438,0,10595,10596,5,
		7,0,0,10596,10598,5,374,0,0,10597,10595,1,0,0,0,10597,10598,1,0,0,0,10598,
		873,1,0,0,0,10599,10604,3,876,438,0,10600,10601,5,883,0,0,10601,10603,
		3,876,438,0,10602,10600,1,0,0,0,10603,10606,1,0,0,0,10604,10602,1,0,0,
		0,10604,10605,1,0,0,0,10605,875,1,0,0,0,10606,10604,1,0,0,0,10607,10608,
		3,1066,533,0,10608,10610,3,1056,528,0,10609,10611,5,859,0,0,10610,10609,
		1,0,0,0,10610,10611,1,0,0,0,10611,877,1,0,0,0,10612,10615,3,880,440,0,
		10613,10615,3,882,441,0,10614,10612,1,0,0,0,10614,10613,1,0,0,0,10615,
		879,1,0,0,0,10616,10617,5,658,0,0,10617,10618,5,881,0,0,10618,10619,5,
		659,0,0,10619,10620,3,1004,502,0,10620,10621,5,883,0,0,10621,10622,7,133,
		0,0,10622,10623,5,882,0,0,10623,881,1,0,0,0,10624,10625,5,658,0,0,10625,
		10626,5,881,0,0,10626,10627,5,913,0,0,10627,10628,3,1004,502,0,10628,10629,
		5,883,0,0,10629,10630,3,900,450,0,10630,10631,5,883,0,0,10631,10632,3,
		844,422,0,10632,10633,5,882,0,0,10633,883,1,0,0,0,10634,10640,3,886,443,
		0,10635,10640,3,888,444,0,10636,10640,3,890,445,0,10637,10640,3,892,446,
		0,10638,10640,3,894,447,0,10639,10634,1,0,0,0,10639,10635,1,0,0,0,10639,
		10636,1,0,0,0,10639,10637,1,0,0,0,10639,10638,1,0,0,0,10640,885,1,0,0,
		0,10641,10643,5,89,0,0,10642,10641,1,0,0,0,10642,10643,1,0,0,0,10643,10649,
		1,0,0,0,10644,10646,7,134,0,0,10645,10647,5,122,0,0,10646,10645,1,0,0,
		0,10646,10647,1,0,0,0,10647,10649,1,0,0,0,10648,10642,1,0,0,0,10648,10644,
		1,0,0,0,10649,10651,1,0,0,0,10650,10652,7,135,0,0,10651,10650,1,0,0,0,
		10651,10652,1,0,0,0,10652,10653,1,0,0,0,10653,10654,5,94,0,0,10654,10655,
		3,860,430,0,10655,10656,5,112,0,0,10656,10657,3,812,406,0,10657,887,1,
		0,0,0,10658,10659,5,36,0,0,10659,10660,5,94,0,0,10660,10661,3,860,430,
		0,10661,889,1,0,0,0,10662,10663,7,136,0,0,10663,10664,5,216,0,0,10664,
		10665,3,860,430,0,10665,891,1,0,0,0,10666,10667,5,125,0,0,10667,10668,
		3,896,448,0,10668,10669,3,946,473,0,10669,893,1,0,0,0,10670,10671,5,177,
		0,0,10671,10672,3,898,449,0,10672,10673,3,946,473,0,10673,895,1,0,0,0,
		10674,10675,5,881,0,0,10675,10676,3,968,484,0,10676,10677,5,71,0,0,10677,
		10678,3,1016,508,0,10678,10679,5,87,0,0,10679,10680,3,958,479,0,10680,
		10681,5,882,0,0,10681,897,1,0,0,0,10682,10683,5,881,0,0,10683,10684,3,
		788,394,0,10684,10685,5,71,0,0,10685,10686,3,1016,508,0,10686,10687,5,
		87,0,0,10687,10688,5,881,0,0,10688,10689,3,900,450,0,10689,10690,5,882,
		0,0,10690,10691,5,882,0,0,10691,899,1,0,0,0,10692,10697,3,1016,508,0,10693,
		10694,5,883,0,0,10694,10696,3,1016,508,0,10695,10693,1,0,0,0,10696,10699,
		1,0,0,0,10697,10695,1,0,0,0,10697,10698,1,0,0,0,10698,901,1,0,0,0,10699,
		10697,1,0,0,0,10700,10702,3,1004,502,0,10701,10703,3,950,475,0,10702,10701,
		1,0,0,0,10702,10703,1,0,0,0,10703,903,1,0,0,0,10704,10705,5,116,0,0,10705,
		10706,5,881,0,0,10706,10707,5,859,0,0,10707,10708,5,883,0,0,10708,10709,
		5,859,0,0,10709,10710,5,883,0,0,10710,10711,5,859,0,0,10711,10731,5,882,
		0,0,10712,10713,5,116,0,0,10713,10714,5,881,0,0,10714,10715,5,17,0,0,10715,
		10716,5,859,0,0,10716,10726,5,883,0,0,10717,10722,3,906,453,0,10718,10719,
		5,883,0,0,10719,10721,3,906,453,0,10720,10718,1,0,0,0,10721,10724,1,0,
		0,0,10722,10720,1,0,0,0,10722,10723,1,0,0,0,10723,10727,1,0,0,0,10724,
		10722,1,0,0,0,10725,10727,3,1066,533,0,10726,10717,1,0,0,0,10726,10725,
		1,0,0,0,10727,10728,1,0,0,0,10728,10729,5,882,0,0,10729,10731,1,0,0,0,
		10730,10704,1,0,0,0,10730,10712,1,0,0,0,10731,905,1,0,0,0,10732,10733,
		3,1066,533,0,10733,10734,5,863,0,0,10734,10735,7,26,0,0,10735,907,1,0,
		0,0,10736,10755,3,802,401,0,10737,10738,5,881,0,0,10738,10744,3,802,401,
		0,10739,10740,5,175,0,0,10740,10741,5,3,0,0,10741,10743,3,802,401,0,10742,
		10739,1,0,0,0,10743,10746,1,0,0,0,10744,10742,1,0,0,0,10744,10745,1,0,
		0,0,10745,10747,1,0,0,0,10746,10744,1,0,0,0,10747,10748,5,882,0,0,10748,
		10755,1,0,0,0,10749,10755,3,962,481,0,10750,10751,5,881,0,0,10751,10752,
		3,962,481,0,10752,10753,5,882,0,0,10753,10755,1,0,0,0,10754,10736,1,0,
		0,0,10754,10737,1,0,0,0,10754,10749,1,0,0,0,10754,10750,1,0,0,0,10755,
		909,1,0,0,0,10756,10770,3,966,483,0,10757,10770,3,968,484,0,10758,10770,
		3,970,485,0,10759,10770,3,918,459,0,10760,10761,3,1036,518,0,10761,10763,
		5,881,0,0,10762,10764,3,964,482,0,10763,10762,1,0,0,0,10763,10764,1,0,
		0,0,10764,10765,1,0,0,0,10765,10766,5,882,0,0,10766,10770,1,0,0,0,10767,
		10770,3,914,457,0,10768,10770,3,912,456,0,10769,10756,1,0,0,0,10769,10757,
		1,0,0,0,10769,10758,1,0,0,0,10769,10759,1,0,0,0,10769,10760,1,0,0,0,10769,
		10767,1,0,0,0,10769,10768,1,0,0,0,10770,911,1,0,0,0,10771,10772,3,1066,
		533,0,10772,10773,5,876,0,0,10773,10775,1,0,0,0,10774,10771,1,0,0,0,10774,
		10775,1,0,0,0,10775,10776,1,0,0,0,10776,10777,5,192,0,0,10777,10778,5,
		876,0,0,10778,10779,3,1066,533,0,10779,10780,5,881,0,0,10780,10781,3,788,
		394,0,10781,10782,5,882,0,0,10782,913,1,0,0,0,10783,10784,7,137,0,0,10784,
		10785,5,881,0,0,10785,10786,3,1004,502,0,10786,10800,5,883,0,0,10787,10801,
		3,1016,508,0,10788,10789,5,881,0,0,10789,10794,3,1016,508,0,10790,10791,
		5,883,0,0,10791,10793,3,1016,508,0,10792,10790,1,0,0,0,10793,10796,1,0,
		0,0,10794,10792,1,0,0,0,10794,10795,1,0,0,0,10795,10797,1,0,0,0,10796,
		10794,1,0,0,0,10797,10798,5,882,0,0,10798,10801,1,0,0,0,10799,10801,5,
		887,0,0,10800,10787,1,0,0,0,10800,10788,1,0,0,0,10800,10799,1,0,0,0,10801,
		10802,1,0,0,0,10802,10803,5,883,0,0,10803,10807,3,788,394,0,10804,10805,
		5,883,0,0,10805,10806,5,719,0,0,10806,10808,3,788,394,0,10807,10804,1,
		0,0,0,10807,10808,1,0,0,0,10808,10811,1,0,0,0,10809,10810,5,883,0,0,10810,
		10812,3,788,394,0,10811,10809,1,0,0,0,10811,10812,1,0,0,0,10812,10813,
		1,0,0,0,10813,10814,5,882,0,0,10814,10852,1,0,0,0,10815,10816,7,138,0,
		0,10816,10817,5,881,0,0,10817,10818,3,1004,502,0,10818,10832,5,883,0,0,
		10819,10833,3,1016,508,0,10820,10821,5,881,0,0,10821,10826,3,1016,508,
		0,10822,10823,5,883,0,0,10823,10825,3,1016,508,0,10824,10822,1,0,0,0,10825,
		10828,1,0,0,0,10826,10824,1,0,0,0,10826,10827,1,0,0,0,10827,10829,1,0,
		0,0,10828,10826,1,0,0,0,10829,10830,5,882,0,0,10830,10833,1,0,0,0,10831,
		10833,5,887,0,0,10832,10819,1,0,0,0,10832,10820,1,0,0,0,10832,10831,1,
		0,0,0,10833,10834,1,0,0,0,10834,10835,5,883,0,0,10835,10836,3,788,394,
		0,10836,10837,5,882,0,0,10837,10852,1,0,0,0,10838,10839,5,155,0,0,10839,
		10840,5,881,0,0,10840,10841,3,1004,502,0,10841,10842,5,883,0,0,10842,10843,
		3,1016,508,0,10843,10844,5,883,0,0,10844,10845,3,788,394,0,10845,10846,
		5,883,0,0,10846,10847,3,1016,508,0,10847,10848,5,883,0,0,10848,10849,3,
		788,394,0,10849,10850,5,882,0,0,10850,10852,1,0,0,0,10851,10783,1,0,0,
		0,10851,10815,1,0,0,0,10851,10838,1,0,0,0,10852,915,1,0,0,0,10853,10854,
		5,31,0,0,10854,10875,5,881,0,0,10855,10876,3,1016,508,0,10856,10857,5,
		881,0,0,10857,10862,3,1016,508,0,10858,10859,5,883,0,0,10859,10861,3,1016,
		508,0,10860,10858,1,0,0,0,10861,10864,1,0,0,0,10862,10860,1,0,0,0,10862,
		10863,1,0,0,0,10863,10865,1,0,0,0,10864,10862,1,0,0,0,10865,10866,5,882,
		0,0,10866,10876,1,0,0,0,10867,10876,5,887,0,0,10868,10869,5,485,0,0,10869,
		10870,5,881,0,0,10870,10871,3,1016,508,0,10871,10872,5,883,0,0,10872,10873,
		3,788,394,0,10873,10874,5,882,0,0,10874,10876,1,0,0,0,10875,10855,1,0,
		0,0,10875,10856,1,0,0,0,10875,10867,1,0,0,0,10875,10868,1,0,0,0,10876,
		10877,1,0,0,0,10877,10878,5,883,0,0,10878,10879,3,788,394,0,10879,10880,
		5,882,0,0,10880,10910,1,0,0,0,10881,10882,5,73,0,0,10882,10883,5,881,0,
		0,10883,10884,3,1004,502,0,10884,10898,5,883,0,0,10885,10899,3,1016,508,
		0,10886,10887,5,881,0,0,10887,10892,3,1016,508,0,10888,10889,5,883,0,0,
		10889,10891,3,1016,508,0,10890,10888,1,0,0,0,10891,10894,1,0,0,0,10892,
		10890,1,0,0,0,10892,10893,1,0,0,0,10893,10895,1,0,0,0,10894,10892,1,0,
		0,0,10895,10896,5,882,0,0,10896,10899,1,0,0,0,10897,10899,5,887,0,0,10898,
		10885,1,0,0,0,10898,10886,1,0,0,0,10898,10897,1,0,0,0,10899,10900,1,0,
		0,0,10900,10901,5,883,0,0,10901,10905,3,788,394,0,10902,10903,5,883,0,
		0,10903,10904,5,719,0,0,10904,10906,3,788,394,0,10905,10902,1,0,0,0,10905,
		10906,1,0,0,0,10906,10907,1,0,0,0,10907,10908,5,882,0,0,10908,10910,1,
		0,0,0,10909,10853,1,0,0,0,10909,10881,1,0,0,0,10910,917,1,0,0,0,10911,
		10912,5,237,0,0,10912,10913,5,881,0,0,10913,10914,5,887,0,0,10914,11058,
		5,882,0,0,10915,10916,5,245,0,0,10916,10917,5,881,0,0,10917,10918,3,788,
		394,0,10918,10919,5,7,0,0,10919,10920,3,1056,528,0,10920,10921,5,882,0,
		0,10921,11058,1,0,0,0,10922,10923,5,246,0,0,10923,10924,5,881,0,0,10924,
		10925,3,788,394,0,10925,10926,5,7,0,0,10926,10927,3,1056,528,0,10927,10928,
		5,882,0,0,10928,11058,1,0,0,0,10929,10930,5,34,0,0,10930,10931,5,881,0,
		0,10931,10932,3,1056,528,0,10932,10933,5,883,0,0,10933,10936,3,788,394,
		0,10934,10935,5,883,0,0,10935,10937,3,788,394,0,10936,10934,1,0,0,0,10936,
		10937,1,0,0,0,10937,10938,1,0,0,0,10938,10939,5,882,0,0,10939,11058,1,
		0,0,0,10940,10941,5,252,0,0,10941,10942,5,881,0,0,10942,10943,5,887,0,
		0,10943,11058,5,882,0,0,10944,10945,5,25,0,0,10945,10946,5,881,0,0,10946,
		10947,3,964,482,0,10947,10948,5,882,0,0,10948,11058,1,0,0,0,10949,11058,
		5,40,0,0,10950,11058,5,41,0,0,10951,10952,5,278,0,0,10952,10953,5,881,
		0,0,10953,10954,5,858,0,0,10954,10955,5,883,0,0,10955,10956,3,788,394,
		0,10956,10957,5,883,0,0,10957,10958,3,788,394,0,10958,10959,5,882,0,0,
		10959,11058,1,0,0,0,10960,10961,5,279,0,0,10961,10962,5,881,0,0,10962,
		10963,5,858,0,0,10963,10964,5,883,0,0,10964,10965,3,788,394,0,10965,10966,
		5,883,0,0,10966,10967,3,788,394,0,10967,10968,5,882,0,0,10968,11058,1,
		0,0,0,10969,10970,5,280,0,0,10970,10971,5,881,0,0,10971,10972,5,858,0,
		0,10972,10973,5,883,0,0,10973,10974,3,788,394,0,10974,10975,5,882,0,0,
		10975,11058,1,0,0,0,10976,10977,5,281,0,0,10977,10978,5,881,0,0,10978,
		10979,5,858,0,0,10979,10980,5,883,0,0,10980,10981,3,788,394,0,10981,10982,
		5,882,0,0,10982,11058,1,0,0,0,10983,10984,5,345,0,0,10984,10985,5,881,
		0,0,10985,11058,5,882,0,0,10986,10987,5,346,0,0,10987,10988,5,881,0,0,
		10988,11058,5,882,0,0,10989,10990,5,83,0,0,10990,10991,5,881,0,0,10991,
		10994,3,1056,528,0,10992,10993,5,883,0,0,10993,10995,5,857,0,0,10994,10992,
		1,0,0,0,10994,10995,1,0,0,0,10995,10998,1,0,0,0,10996,10997,5,883,0,0,
		10997,10999,5,857,0,0,10998,10996,1,0,0,0,10998,10999,1,0,0,0,10999,11000,
		1,0,0,0,11000,11001,5,882,0,0,11001,11058,1,0,0,0,11002,11003,5,417,0,
		0,11003,11004,5,881,0,0,11004,11058,5,882,0,0,11005,11006,5,108,0,0,11006,
		11007,5,881,0,0,11007,11008,3,788,394,0,11008,11009,5,883,0,0,11009,11010,
		3,788,394,0,11010,11011,5,882,0,0,11011,11058,1,0,0,0,11012,11013,5,573,
		0,0,11013,11014,5,881,0,0,11014,11015,3,788,394,0,11015,11016,5,883,0,
		0,11016,11017,5,857,0,0,11017,11018,5,883,0,0,11018,11019,5,857,0,0,11019,
		11020,5,883,0,0,11020,11021,3,788,394,0,11021,11022,5,882,0,0,11022,11058,
		1,0,0,0,11023,11058,5,157,0,0,11024,11058,5,163,0,0,11025,11058,5,181,
		0,0,11026,11027,5,715,0,0,11027,11028,5,881,0,0,11028,11029,3,788,394,
		0,11029,11030,5,883,0,0,11030,11031,3,788,394,0,11031,11032,5,882,0,0,
		11032,11058,1,0,0,0,11033,11058,3,920,460,0,11034,11035,5,708,0,0,11035,
		11036,5,881,0,0,11036,11037,3,812,406,0,11037,11038,5,883,0,0,11038,11039,
		3,788,394,0,11039,11040,5,883,0,0,11040,11041,3,788,394,0,11041,11042,
		5,882,0,0,11042,11058,1,0,0,0,11043,11044,5,572,0,0,11044,11045,5,881,
		0,0,11045,11046,3,788,394,0,11046,11047,5,883,0,0,11047,11048,3,788,394,
		0,11048,11055,5,882,0,0,11049,11050,5,190,0,0,11050,11051,5,80,0,0,11051,
		11052,5,881,0,0,11052,11053,3,828,414,0,11053,11054,5,882,0,0,11054,11056,
		1,0,0,0,11055,11049,1,0,0,0,11055,11056,1,0,0,0,11056,11058,1,0,0,0,11057,
		10911,1,0,0,0,11057,10915,1,0,0,0,11057,10922,1,0,0,0,11057,10929,1,0,
		0,0,11057,10940,1,0,0,0,11057,10944,1,0,0,0,11057,10949,1,0,0,0,11057,
		10950,1,0,0,0,11057,10951,1,0,0,0,11057,10960,1,0,0,0,11057,10969,1,0,
		0,0,11057,10976,1,0,0,0,11057,10983,1,0,0,0,11057,10986,1,0,0,0,11057,
		10989,1,0,0,0,11057,11002,1,0,0,0,11057,11005,1,0,0,0,11057,11012,1,0,
		0,0,11057,11023,1,0,0,0,11057,11024,1,0,0,0,11057,11025,1,0,0,0,11057,
		11026,1,0,0,0,11057,11033,1,0,0,0,11057,11034,1,0,0,0,11057,11043,1,0,
		0,0,11058,919,1,0,0,0,11059,11064,3,922,461,0,11060,11064,3,926,463,0,
		11061,11064,3,930,465,0,11062,11064,3,934,467,0,11063,11059,1,0,0,0,11063,
		11060,1,0,0,0,11063,11061,1,0,0,0,11063,11062,1,0,0,0,11064,921,1,0,0,
		0,11065,11074,5,856,0,0,11066,11074,3,1066,533,0,11067,11074,5,691,0,0,
		11068,11074,3,926,463,0,11069,11070,5,881,0,0,11070,11071,3,802,401,0,
		11071,11072,5,882,0,0,11072,11074,1,0,0,0,11073,11065,1,0,0,0,11073,11066,
		1,0,0,0,11073,11067,1,0,0,0,11073,11068,1,0,0,0,11073,11069,1,0,0,0,11074,
		11075,1,0,0,0,11075,11076,5,876,0,0,11076,11077,3,924,462,0,11077,923,
		1,0,0,0,11078,11079,5,613,0,0,11079,11080,5,881,0,0,11080,11081,5,859,
		0,0,11081,11082,5,883,0,0,11082,11083,5,859,0,0,11083,11084,5,882,0,0,
		11084,925,1,0,0,0,11085,11093,5,856,0,0,11086,11093,3,1066,533,0,11087,
		11093,3,1002,501,0,11088,11089,5,881,0,0,11089,11090,3,802,401,0,11090,
		11091,5,882,0,0,11091,11093,1,0,0,0,11092,11085,1,0,0,0,11092,11086,1,
		0,0,0,11092,11087,1,0,0,0,11092,11088,1,0,0,0,11093,11094,1,0,0,0,11094,
		11095,5,876,0,0,11095,11096,3,928,464,0,11096,927,1,0,0,0,11097,11098,
		5,488,0,0,11098,11099,5,881,0,0,11099,11100,5,859,0,0,11100,11101,5,882,
		0,0,11101,929,1,0,0,0,11102,11109,5,856,0,0,11103,11109,3,1066,533,0,11104,
		11105,5,881,0,0,11105,11106,3,802,401,0,11106,11107,5,882,0,0,11107,11109,
		1,0,0,0,11108,11102,1,0,0,0,11108,11103,1,0,0,0,11108,11104,1,0,0,0,11109,
		11110,1,0,0,0,11110,11111,5,876,0,0,11111,11112,3,932,466,0,11112,931,
		1,0,0,0,11113,11114,5,318,0,0,11114,11115,5,881,0,0,11115,11116,5,859,
		0,0,11116,11117,5,882,0,0,11117,933,1,0,0,0,11118,11125,5,856,0,0,11119,
		11125,3,1066,533,0,11120,11121,5,881,0,0,11121,11122,3,802,401,0,11122,
		11123,5,882,0,0,11123,11125,1,0,0,0,11124,11118,1,0,0,0,11124,11119,1,
		0,0,0,11124,11120,1,0,0,0,11125,11126,1,0,0,0,11126,11127,5,876,0,0,11127,
		11128,3,936,468,0,11128,935,1,0,0,0,11129,11130,5,425,0,0,11130,11131,
		5,881,0,0,11131,11132,5,859,0,0,11132,11133,5,882,0,0,11133,937,1,0,0,
		0,11134,11141,5,856,0,0,11135,11141,3,1066,533,0,11136,11137,5,881,0,0,
		11137,11138,3,802,401,0,11138,11139,5,882,0,0,11139,11141,1,0,0,0,11140,
		11134,1,0,0,0,11140,11135,1,0,0,0,11140,11136,1,0,0,0,11141,11142,1,0,
		0,0,11142,11143,5,876,0,0,11143,11144,5,439,0,0,11144,11145,5,881,0,0,
		11145,11146,5,859,0,0,11146,11147,5,882,0,0,11147,939,1,0,0,0,11148,11149,
		5,186,0,0,11149,11150,3,788,394,0,11150,11151,5,167,0,0,11151,11152,3,
		788,394,0,11152,941,1,0,0,0,11153,11154,5,186,0,0,11154,11155,3,812,406,
		0,11155,11156,5,167,0,0,11156,11157,3,788,394,0,11157,943,1,0,0,0,11158,
		11160,5,7,0,0,11159,11158,1,0,0,0,11159,11160,1,0,0,0,11160,11161,1,0,
		0,0,11161,11162,3,960,480,0,11162,945,1,0,0,0,11163,11165,5,7,0,0,11164,
		11163,1,0,0,0,11164,11165,1,0,0,0,11165,11166,1,0,0,0,11166,11167,3,948,
		474,0,11167,947,1,0,0,0,11168,11170,3,1066,533,0,11169,11171,3,950,475,
		0,11170,11169,1,0,0,0,11170,11171,1,0,0,0,11171,949,1,0,0,0,11172,11174,
		5,189,0,0,11173,11172,1,0,0,0,11173,11174,1,0,0,0,11174,11175,1,0,0,0,
		11175,11176,5,881,0,0,11176,11183,3,954,477,0,11177,11179,5,883,0,0,11178,
		11177,1,0,0,0,11178,11179,1,0,0,0,11179,11180,1,0,0,0,11180,11182,3,954,
		477,0,11181,11178,1,0,0,0,11182,11185,1,0,0,0,11183,11181,1,0,0,0,11183,
		11184,1,0,0,0,11184,11186,1,0,0,0,11185,11183,1,0,0,0,11186,11187,5,882,
		0,0,11187,951,1,0,0,0,11188,11189,5,189,0,0,11189,11190,5,881,0,0,11190,
		11197,3,954,477,0,11191,11193,5,883,0,0,11192,11191,1,0,0,0,11192,11193,
		1,0,0,0,11193,11194,1,0,0,0,11194,11196,3,954,477,0,11195,11192,1,0,0,
		0,11196,11199,1,0,0,0,11197,11195,1,0,0,0,11197,11198,1,0,0,0,11198,11200,
		1,0,0,0,11199,11197,1,0,0,0,11200,11201,5,882,0,0,11201,953,1,0,0,0,11202,
		11204,5,440,0,0,11203,11202,1,0,0,0,11203,11204,1,0,0,0,11204,11254,1,
		0,0,0,11205,11225,5,88,0,0,11206,11207,5,881,0,0,11207,11212,3,956,478,
		0,11208,11209,5,883,0,0,11209,11211,3,956,478,0,11210,11208,1,0,0,0,11211,
		11214,1,0,0,0,11212,11210,1,0,0,0,11212,11213,1,0,0,0,11213,11215,1,0,
		0,0,11214,11212,1,0,0,0,11215,11216,5,882,0,0,11216,11226,1,0,0,0,11217,
		11222,3,956,478,0,11218,11219,5,883,0,0,11219,11221,3,956,478,0,11220,
		11218,1,0,0,0,11221,11224,1,0,0,0,11222,11220,1,0,0,0,11222,11223,1,0,
		0,0,11223,11226,1,0,0,0,11224,11222,1,0,0,0,11225,11206,1,0,0,0,11225,
		11217,1,0,0,0,11226,11255,1,0,0,0,11227,11228,5,88,0,0,11228,11229,5,863,
		0,0,11229,11255,3,956,478,0,11230,11245,5,701,0,0,11231,11232,5,881,0,
		0,11232,11233,3,956,478,0,11233,11234,5,881,0,0,11234,11239,5,858,0,0,
		11235,11236,5,883,0,0,11236,11238,5,858,0,0,11237,11235,1,0,0,0,11238,
		11241,1,0,0,0,11239,11237,1,0,0,0,11239,11240,1,0,0,0,11240,11242,1,0,
		0,0,11241,11239,1,0,0,0,11242,11243,5,882,0,0,11243,11244,5,882,0,0,11244,
		11246,1,0,0,0,11245,11231,1,0,0,0,11245,11246,1,0,0,0,11246,11255,1,0,
		0,0,11247,11255,5,551,0,0,11248,11255,5,561,0,0,11249,11250,5,562,0,0,
		11250,11251,5,863,0,0,11251,11255,5,857,0,0,11252,11255,5,82,0,0,11253,
		11255,5,858,0,0,11254,11205,1,0,0,0,11254,11227,1,0,0,0,11254,11230,1,
		0,0,0,11254,11247,1,0,0,0,11254,11248,1,0,0,0,11254,11249,1,0,0,0,11254,
		11252,1,0,0,0,11254,11253,1,0,0,0,11255,955,1,0,0,0,11256,11259,3,1066,
		533,0,11257,11259,5,857,0,0,11258,11256,1,0,0,0,11258,11257,1,0,0,0,11259,
		957,1,0,0,0,11260,11261,5,881,0,0,11261,11266,3,960,480,0,11262,11263,
		5,883,0,0,11263,11265,3,960,480,0,11264,11262,1,0,0,0,11265,11268,1,0,
		0,0,11266,11264,1,0,0,0,11266,11267,1,0,0,0,11267,11269,1,0,0,0,11268,
		11266,1,0,0,0,11269,11270,5,882,0,0,11270,959,1,0,0,0,11271,11274,3,1066,
		533,0,11272,11274,5,859,0,0,11273,11271,1,0,0,0,11273,11272,1,0,0,0,11274,
		961,1,0,0,0,11275,11276,5,182,0,0,11276,11277,5,881,0,0,11277,11278,3,
		964,482,0,11278,11286,5,882,0,0,11279,11280,5,883,0,0,11280,11281,5,881,
		0,0,11281,11282,3,964,482,0,11282,11283,5,882,0,0,11283,11285,1,0,0,0,
		11284,11279,1,0,0,0,11285,11288,1,0,0,0,11286,11284,1,0,0,0,11286,11287,
		1,0,0,0,11287,963,1,0,0,0,11288,11286,1,0,0,0,11289,11294,3,788,394,0,
		11290,11291,5,883,0,0,11291,11293,3,788,394,0,11292,11290,1,0,0,0,11293,
		11296,1,0,0,0,11294,11292,1,0,0,0,11294,11295,1,0,0,0,11295,965,1,0,0,
		0,11296,11294,1,0,0,0,11297,11298,7,139,0,0,11298,11299,5,881,0,0,11299,
		11300,5,882,0,0,11300,11308,3,974,487,0,11301,11302,5,446,0,0,11302,11303,
		5,881,0,0,11303,11304,3,788,394,0,11304,11305,5,882,0,0,11305,11306,3,
		974,487,0,11306,11308,1,0,0,0,11307,11297,1,0,0,0,11307,11301,1,0,0,0,
		11308,967,1,0,0,0,11309,11310,7,140,0,0,11310,11311,5,881,0,0,11311,11312,
		3,972,486,0,11312,11314,5,882,0,0,11313,11315,3,974,487,0,11314,11313,
		1,0,0,0,11314,11315,1,0,0,0,11315,11342,1,0,0,0,11316,11317,7,141,0,0,
		11317,11320,5,881,0,0,11318,11321,5,887,0,0,11319,11321,3,972,486,0,11320,
		11318,1,0,0,0,11320,11319,1,0,0,0,11321,11322,1,0,0,0,11322,11324,5,882,
		0,0,11323,11325,3,974,487,0,11324,11323,1,0,0,0,11324,11325,1,0,0,0,11325,
		11342,1,0,0,0,11326,11327,5,253,0,0,11327,11328,5,881,0,0,11328,11329,
		3,972,486,0,11329,11330,5,882,0,0,11330,11342,1,0,0,0,11331,11332,5,351,
		0,0,11332,11333,5,881,0,0,11333,11334,3,788,394,0,11334,11335,5,882,0,
		0,11335,11342,1,0,0,0,11336,11337,5,352,0,0,11337,11338,5,881,0,0,11338,
		11339,3,964,482,0,11339,11340,5,882,0,0,11340,11342,1,0,0,0,11341,11309,
		1,0,0,0,11341,11316,1,0,0,0,11341,11326,1,0,0,0,11341,11331,1,0,0,0,11341,
		11336,1,0,0,0,11342,969,1,0,0,0,11343,11344,7,142,0,0,11344,11345,5,881,
		0,0,11345,11346,3,788,394,0,11346,11347,5,882,0,0,11347,11348,3,974,487,
		0,11348,11400,1,0,0,0,11349,11350,7,143,0,0,11350,11351,5,881,0,0,11351,
		11358,3,788,394,0,11352,11353,5,883,0,0,11353,11356,3,788,394,0,11354,
		11355,5,883,0,0,11355,11357,3,788,394,0,11356,11354,1,0,0,0,11356,11357,
		1,0,0,0,11357,11359,1,0,0,0,11358,11352,1,0,0,0,11358,11359,1,0,0,0,11359,
		11360,1,0,0,0,11360,11361,5,882,0,0,11361,11362,3,974,487,0,11362,11400,
		1,0,0,0,11363,11364,7,144,0,0,11364,11365,5,881,0,0,11365,11366,5,882,
		0,0,11366,11367,5,123,0,0,11367,11371,5,881,0,0,11368,11369,5,466,0,0,
		11369,11370,5,18,0,0,11370,11372,3,964,482,0,11371,11368,1,0,0,0,11371,
		11372,1,0,0,0,11372,11373,1,0,0,0,11373,11374,3,828,414,0,11374,11375,
		5,882,0,0,11375,11400,1,0,0,0,11376,11377,7,145,0,0,11377,11378,5,881,
		0,0,11378,11379,3,788,394,0,11379,11380,5,882,0,0,11380,11381,5,190,0,
		0,11381,11382,5,80,0,0,11382,11383,5,881,0,0,11383,11384,5,121,0,0,11384,
		11385,5,18,0,0,11385,11387,3,788,394,0,11386,11388,7,111,0,0,11387,11386,
		1,0,0,0,11387,11388,1,0,0,0,11388,11389,1,0,0,0,11389,11390,5,882,0,0,
		11390,11391,5,123,0,0,11391,11395,5,881,0,0,11392,11393,5,466,0,0,11393,
		11394,5,18,0,0,11394,11396,3,964,482,0,11395,11392,1,0,0,0,11395,11396,
		1,0,0,0,11396,11397,1,0,0,0,11397,11398,5,882,0,0,11398,11400,1,0,0,0,
		11399,11343,1,0,0,0,11399,11349,1,0,0,0,11399,11363,1,0,0,0,11399,11376,
		1,0,0,0,11400,971,1,0,0,0,11401,11403,7,123,0,0,11402,11401,1,0,0,0,11402,
		11403,1,0,0,0,11403,11404,1,0,0,0,11404,11405,3,788,394,0,11405,973,1,
		0,0,0,11406,11407,5,123,0,0,11407,11411,5,881,0,0,11408,11409,5,466,0,
		0,11409,11410,5,18,0,0,11410,11412,3,964,482,0,11411,11408,1,0,0,0,11411,
		11412,1,0,0,0,11412,11414,1,0,0,0,11413,11415,3,828,414,0,11414,11413,
		1,0,0,0,11414,11415,1,0,0,0,11415,11417,1,0,0,0,11416,11418,3,976,488,
		0,11417,11416,1,0,0,0,11417,11418,1,0,0,0,11418,11419,1,0,0,0,11419,11420,
		5,882,0,0,11420,975,1,0,0,0,11421,11422,7,146,0,0,11422,11423,3,978,489,
		0,11423,977,1,0,0,0,11424,11431,3,982,491,0,11425,11426,5,14,0,0,11426,
		11427,3,980,490,0,11427,11428,5,5,0,0,11428,11429,3,980,490,0,11429,11431,
		1,0,0,0,11430,11424,1,0,0,0,11430,11425,1,0,0,0,11431,979,1,0,0,0,11432,
		11435,3,982,491,0,11433,11435,3,984,492,0,11434,11432,1,0,0,0,11434,11433,
		1,0,0,0,11435,981,1,0,0,0,11436,11437,5,604,0,0,11437,11443,5,476,0,0,
		11438,11439,5,857,0,0,11439,11443,5,476,0,0,11440,11441,5,37,0,0,11441,
		11443,5,527,0,0,11442,11436,1,0,0,0,11442,11438,1,0,0,0,11442,11440,1,
		0,0,0,11443,983,1,0,0,0,11444,11445,5,604,0,0,11445,11449,5,336,0,0,11446,
		11447,5,857,0,0,11447,11449,5,336,0,0,11448,11444,1,0,0,0,11448,11446,
		1,0,0,0,11449,985,1,0,0,0,11450,11451,5,332,0,0,11451,11456,3,988,494,
		0,11452,11453,5,883,0,0,11453,11455,3,988,494,0,11454,11452,1,0,0,0,11455,
		11458,1,0,0,0,11456,11454,1,0,0,0,11456,11457,1,0,0,0,11457,11485,1,0,
		0,0,11458,11456,1,0,0,0,11459,11460,5,288,0,0,11460,11463,5,863,0,0,11461,
		11464,3,1066,533,0,11462,11464,5,859,0,0,11463,11461,1,0,0,0,11463,11462,
		1,0,0,0,11464,11485,1,0,0,0,11465,11466,5,287,0,0,11466,11469,5,863,0,
		0,11467,11470,3,1066,533,0,11468,11470,5,859,0,0,11469,11467,1,0,0,0,11469,
		11468,1,0,0,0,11470,11485,1,0,0,0,11471,11472,5,429,0,0,11472,11473,5,
		863,0,0,11473,11485,7,7,0,0,11474,11475,5,595,0,0,11475,11476,5,863,0,
		0,11476,11485,7,7,0,0,11477,11478,5,601,0,0,11478,11479,5,863,0,0,11479,
		11485,5,857,0,0,11480,11481,5,283,0,0,11481,11485,7,7,0,0,11482,11483,
		5,598,0,0,11483,11485,7,7,0,0,11484,11450,1,0,0,0,11484,11459,1,0,0,0,
		11484,11465,1,0,0,0,11484,11471,1,0,0,0,11484,11474,1,0,0,0,11484,11477,
		1,0,0,0,11484,11480,1,0,0,0,11484,11482,1,0,0,0,11485,987,1,0,0,0,11486,
		11493,5,881,0,0,11487,11488,5,441,0,0,11488,11489,5,863,0,0,11489,11494,
		7,147,0,0,11490,11491,5,300,0,0,11491,11492,5,863,0,0,11492,11494,5,859,
		0,0,11493,11487,1,0,0,0,11493,11490,1,0,0,0,11494,11495,1,0,0,0,11495,
		11496,5,882,0,0,11496,989,1,0,0,0,11497,11500,3,992,496,0,11498,11500,
		3,994,497,0,11499,11497,1,0,0,0,11499,11498,1,0,0,0,11500,991,1,0,0,0,
		11501,11502,5,328,0,0,11502,11505,3,1066,533,0,11503,11504,5,31,0,0,11504,
		11506,5,332,0,0,11505,11503,1,0,0,0,11505,11506,1,0,0,0,11506,11508,1,
		0,0,0,11507,11509,5,47,0,0,11508,11507,1,0,0,0,11508,11509,1,0,0,0,11509,
		11512,1,0,0,0,11510,11511,5,31,0,0,11511,11513,5,414,0,0,11512,11510,1,
		0,0,0,11512,11513,1,0,0,0,11513,11514,1,0,0,0,11514,11519,3,994,497,0,
		11515,11516,5,883,0,0,11516,11518,3,994,497,0,11517,11515,1,0,0,0,11518,
		11521,1,0,0,0,11519,11517,1,0,0,0,11519,11520,1,0,0,0,11520,993,1,0,0,
		0,11521,11519,1,0,0,0,11522,11523,5,881,0,0,11523,11524,5,428,0,0,11524,
		11527,5,863,0,0,11525,11528,3,1066,533,0,11526,11528,5,859,0,0,11527,11525,
		1,0,0,0,11527,11526,1,0,0,0,11528,11530,1,0,0,0,11529,11531,5,883,0,0,
		11530,11529,1,0,0,0,11530,11531,1,0,0,0,11531,11532,1,0,0,0,11532,11533,
		5,330,0,0,11533,11534,5,863,0,0,11534,11536,5,859,0,0,11535,11537,5,883,
		0,0,11536,11535,1,0,0,0,11536,11537,1,0,0,0,11537,11544,1,0,0,0,11538,
		11539,5,559,0,0,11539,11540,5,863,0,0,11540,11542,3,1076,538,0,11541,11543,
		5,883,0,0,11542,11541,1,0,0,0,11542,11543,1,0,0,0,11543,11545,1,0,0,0,
		11544,11538,1,0,0,0,11544,11545,1,0,0,0,11545,11555,1,0,0,0,11546,11547,
		5,411,0,0,11547,11550,5,863,0,0,11548,11551,3,1076,538,0,11549,11551,5,
		607,0,0,11550,11548,1,0,0,0,11550,11549,1,0,0,0,11551,11553,1,0,0,0,11552,
		11554,5,883,0,0,11553,11552,1,0,0,0,11553,11554,1,0,0,0,11554,11556,1,
		0,0,0,11555,11546,1,0,0,0,11555,11556,1,0,0,0,11556,11563,1,0,0,0,11557,
		11558,5,329,0,0,11558,11559,5,863,0,0,11559,11561,3,1076,538,0,11560,11562,
		5,883,0,0,11561,11560,1,0,0,0,11561,11562,1,0,0,0,11562,11564,1,0,0,0,
		11563,11557,1,0,0,0,11563,11564,1,0,0,0,11564,11565,1,0,0,0,11565,11566,
		5,882,0,0,11566,995,1,0,0,0,11567,11568,3,1066,533,0,11568,11569,5,876,
		0,0,11569,11570,3,1066,533,0,11570,11571,5,876,0,0,11571,11572,3,1066,
		533,0,11572,11573,5,876,0,0,11573,11585,1,0,0,0,11574,11575,3,1066,533,
		0,11575,11577,5,876,0,0,11576,11578,3,1066,533,0,11577,11576,1,0,0,0,11577,
		11578,1,0,0,0,11578,11579,1,0,0,0,11579,11580,5,876,0,0,11580,11585,1,
		0,0,0,11581,11582,3,1066,533,0,11582,11583,5,876,0,0,11583,11585,1,0,0,
		0,11584,11567,1,0,0,0,11584,11574,1,0,0,0,11584,11581,1,0,0,0,11584,11585,
		1,0,0,0,11585,11586,1,0,0,0,11586,11587,3,1066,533,0,11587,997,1,0,0,0,
		11588,11594,3,1066,533,0,11589,11590,3,1066,533,0,11590,11591,5,876,0,
		0,11591,11592,3,1066,533,0,11592,11594,1,0,0,0,11593,11588,1,0,0,0,11593,
		11589,1,0,0,0,11594,999,1,0,0,0,11595,11601,3,1066,533,0,11596,11597,3,
		1066,533,0,11597,11598,5,876,0,0,11598,11599,3,1066,533,0,11599,11601,
		1,0,0,0,11600,11595,1,0,0,0,11600,11596,1,0,0,0,11601,1001,1,0,0,0,11602,
		11603,3,1066,533,0,11603,11604,5,876,0,0,11604,11605,5,876,0,0,11605,11606,
		3,1066,533,0,11606,11607,5,876,0,0,11607,11626,1,0,0,0,11608,11609,3,1066,
		533,0,11609,11610,5,876,0,0,11610,11611,3,1066,533,0,11611,11612,5,876,
		0,0,11612,11613,3,1066,533,0,11613,11614,5,876,0,0,11614,11626,1,0,0,0,
		11615,11616,3,1066,533,0,11616,11618,5,876,0,0,11617,11619,3,1066,533,
		0,11618,11617,1,0,0,0,11618,11619,1,0,0,0,11619,11620,1,0,0,0,11620,11621,
		5,876,0,0,11621,11626,1,0,0,0,11622,11623,3,1066,533,0,11623,11624,5,876,
		0,0,11624,11626,1,0,0,0,11625,11602,1,0,0,0,11625,11608,1,0,0,0,11625,
		11615,1,0,0,0,11625,11622,1,0,0,0,11625,11626,1,0,0,0,11626,11627,1,0,
		0,0,11627,11628,3,1066,533,0,11628,1003,1,0,0,0,11629,11630,3,1066,533,
		0,11630,11632,5,876,0,0,11631,11633,3,1066,533,0,11632,11631,1,0,0,0,11632,
		11633,1,0,0,0,11633,11634,1,0,0,0,11634,11635,5,876,0,0,11635,11640,1,
		0,0,0,11636,11637,3,1066,533,0,11637,11638,5,876,0,0,11638,11640,1,0,0,
		0,11639,11629,1,0,0,0,11639,11636,1,0,0,0,11639,11640,1,0,0,0,11640,11641,
		1,0,0,0,11641,11656,3,1066,533,0,11642,11643,3,1066,533,0,11643,11645,
		5,876,0,0,11644,11646,3,1066,533,0,11645,11644,1,0,0,0,11645,11646,1,0,
		0,0,11646,11647,1,0,0,0,11647,11648,5,876,0,0,11648,11653,1,0,0,0,11649,
		11650,3,1066,533,0,11650,11651,5,876,0,0,11651,11653,1,0,0,0,11652,11642,
		1,0,0,0,11652,11649,1,0,0,0,11652,11653,1,0,0,0,11653,11654,1,0,0,0,11654,
		11656,5,652,0,0,11655,11639,1,0,0,0,11655,11652,1,0,0,0,11656,1005,1,0,
		0,0,11657,11658,3,1066,533,0,11658,11659,5,876,0,0,11659,11661,1,0,0,0,
		11660,11657,1,0,0,0,11660,11661,1,0,0,0,11661,11662,1,0,0,0,11662,11663,
		3,1066,533,0,11663,1007,1,0,0,0,11664,11665,3,1066,533,0,11665,11666,5,
		876,0,0,11666,11668,1,0,0,0,11667,11664,1,0,0,0,11667,11668,1,0,0,0,11668,
		11669,1,0,0,0,11669,11670,3,1066,533,0,11670,1009,1,0,0,0,11671,11673,
		3,1066,533,0,11672,11671,1,0,0,0,11672,11673,1,0,0,0,11673,11674,1,0,0,
		0,11674,11676,5,876,0,0,11675,11677,3,1066,533,0,11676,11675,1,0,0,0,11676,
		11677,1,0,0,0,11677,11678,1,0,0,0,11678,11679,5,876,0,0,11679,11682,3,
		1066,533,0,11680,11682,3,1008,504,0,11681,11672,1,0,0,0,11681,11680,1,
		0,0,0,11682,1011,1,0,0,0,11683,11685,3,1066,533,0,11684,11683,1,0,0,0,
		11684,11685,1,0,0,0,11685,11686,1,0,0,0,11686,11688,5,876,0,0,11687,11689,
		3,1066,533,0,11688,11687,1,0,0,0,11688,11689,1,0,0,0,11689,11690,1,0,0,
		0,11690,11692,5,876,0,0,11691,11693,3,1066,533,0,11692,11691,1,0,0,0,11692,
		11693,1,0,0,0,11693,11694,1,0,0,0,11694,11695,5,876,0,0,11695,11698,3,
		1066,533,0,11696,11698,3,1010,505,0,11697,11684,1,0,0,0,11697,11696,1,
		0,0,0,11698,1013,1,0,0,0,11699,11702,3,1002,501,0,11700,11702,5,856,0,
		0,11701,11699,1,0,0,0,11701,11700,1,0,0,0,11702,1015,1,0,0,0,11703,11704,
		7,132,0,0,11704,11705,5,876,0,0,11705,11735,3,1066,533,0,11706,11708,3,
		1066,533,0,11707,11706,1,0,0,0,11707,11708,1,0,0,0,11708,11709,1,0,0,0,
		11709,11711,5,876,0,0,11710,11712,3,1066,533,0,11711,11710,1,0,0,0,11711,
		11712,1,0,0,0,11712,11713,1,0,0,0,11713,11715,5,876,0,0,11714,11716,3,
		1066,533,0,11715,11714,1,0,0,0,11715,11716,1,0,0,0,11716,11717,1,0,0,0,
		11717,11718,5,876,0,0,11718,11735,3,1066,533,0,11719,11721,3,1066,533,
		0,11720,11719,1,0,0,0,11720,11721,1,0,0,0,11721,11722,1,0,0,0,11722,11724,
		5,876,0,0,11723,11725,3,1066,533,0,11724,11723,1,0,0,0,11724,11725,1,0,
		0,0,11725,11726,1,0,0,0,11726,11727,5,876,0,0,11727,11735,3,1066,533,0,
		11728,11730,3,1066,533,0,11729,11728,1,0,0,0,11729,11730,1,0,0,0,11730,
		11731,1,0,0,0,11731,11732,5,876,0,0,11732,11735,3,1066,533,0,11733,11735,
		3,1066,533,0,11734,11703,1,0,0,0,11734,11707,1,0,0,0,11734,11720,1,0,0,
		0,11734,11729,1,0,0,0,11734,11733,1,0,0,0,11735,1017,1,0,0,0,11736,11738,
		3,1066,533,0,11737,11739,7,111,0,0,11738,11737,1,0,0,0,11738,11739,1,0,
		0,0,11739,11747,1,0,0,0,11740,11741,5,883,0,0,11741,11743,3,1066,533,0,
		11742,11744,7,111,0,0,11743,11742,1,0,0,0,11743,11744,1,0,0,0,11744,11746,
		1,0,0,0,11745,11740,1,0,0,0,11746,11749,1,0,0,0,11747,11745,1,0,0,0,11747,
		11748,1,0,0,0,11748,1019,1,0,0,0,11749,11747,1,0,0,0,11750,11755,3,1022,
		511,0,11751,11752,5,883,0,0,11752,11754,3,1022,511,0,11753,11751,1,0,0,
		0,11754,11757,1,0,0,0,11755,11753,1,0,0,0,11755,11756,1,0,0,0,11756,1021,
		1,0,0,0,11757,11755,1,0,0,0,11758,11760,3,1066,533,0,11759,11758,1,0,0,
		0,11759,11760,1,0,0,0,11760,11761,1,0,0,0,11761,11763,5,876,0,0,11762,
		11759,1,0,0,0,11763,11766,1,0,0,0,11764,11762,1,0,0,0,11764,11765,1,0,
		0,0,11765,11767,1,0,0,0,11766,11764,1,0,0,0,11767,11768,3,1066,533,0,11768,
		1023,1,0,0,0,11769,11774,3,1066,533,0,11770,11771,5,883,0,0,11771,11773,
		3,1066,533,0,11772,11770,1,0,0,0,11773,11776,1,0,0,0,11774,11772,1,0,0,
		0,11774,11775,1,0,0,0,11775,1025,1,0,0,0,11776,11774,1,0,0,0,11777,11780,
		3,1066,533,0,11778,11780,5,856,0,0,11779,11777,1,0,0,0,11779,11778,1,0,
		0,0,11780,1027,1,0,0,0,11781,11782,7,7,0,0,11782,1029,1,0,0,0,11783,11784,
		7,108,0,0,11784,1031,1,0,0,0,11785,11787,5,106,0,0,11786,11785,1,0,0,0,
		11786,11787,1,0,0,0,11787,11788,1,0,0,0,11788,11789,5,107,0,0,11789,1033,
		1,0,0,0,11790,11802,3,1032,516,0,11791,11792,5,47,0,0,11792,11795,3,800,
		400,0,11793,11794,5,26,0,0,11794,11796,3,1066,533,0,11795,11793,1,0,0,
		0,11795,11796,1,0,0,0,11796,11799,1,0,0,0,11797,11798,5,189,0,0,11798,
		11800,5,182,0,0,11799,11797,1,0,0,0,11799,11800,1,0,0,0,11800,11802,1,
		0,0,0,11801,11790,1,0,0,0,11801,11791,1,0,0,0,11802,1035,1,0,0,0,11803,
		11809,3,1012,506,0,11804,11809,5,145,0,0,11805,11809,5,97,0,0,11806,11809,
		5,237,0,0,11807,11809,5,252,0,0,11808,11803,1,0,0,0,11808,11804,1,0,0,
		0,11808,11805,1,0,0,0,11808,11806,1,0,0,0,11808,11807,1,0,0,0,11809,1037,
		1,0,0,0,11810,11811,5,13,0,0,11811,11812,5,673,0,0,11812,11813,5,591,0,
		0,11813,11814,5,881,0,0,11814,11815,5,856,0,0,11815,11816,5,882,0,0,11816,
		11817,5,590,0,0,11817,11818,5,863,0,0,11818,11820,3,460,230,0,11819,11821,
		5,884,0,0,11820,11819,1,0,0,0,11820,11821,1,0,0,0,11821,1039,1,0,0,0,11822,
		11823,5,13,0,0,11823,11825,5,299,0,0,11824,11826,5,673,0,0,11825,11824,
		1,0,0,0,11825,11826,1,0,0,0,11826,11827,1,0,0,0,11827,11828,5,856,0,0,
		11828,11829,5,75,0,0,11829,11830,5,804,0,0,11830,11831,3,1044,522,0,11831,
		11832,5,168,0,0,11832,11833,5,804,0,0,11833,11836,3,1044,522,0,11834,11835,
		5,883,0,0,11835,11837,5,859,0,0,11836,11834,1,0,0,0,11836,11837,1,0,0,
		0,11837,11838,1,0,0,0,11838,11839,5,112,0,0,11839,11840,5,671,0,0,11840,
		11863,3,1042,521,0,11841,11848,5,189,0,0,11842,11843,7,148,0,0,11843,11844,
		5,863,0,0,11844,11846,5,856,0,0,11845,11847,5,883,0,0,11846,11845,1,0,
		0,0,11846,11847,1,0,0,0,11847,11849,1,0,0,0,11848,11842,1,0,0,0,11848,
		11849,1,0,0,0,11849,11856,1,0,0,0,11850,11851,5,721,0,0,11851,11852,5,
		863,0,0,11852,11854,7,0,0,0,11853,11855,5,883,0,0,11854,11853,1,0,0,0,
		11854,11855,1,0,0,0,11855,11857,1,0,0,0,11856,11850,1,0,0,0,11856,11857,
		1,0,0,0,11857,11861,1,0,0,0,11858,11859,5,313,0,0,11859,11860,5,863,0,
		0,11860,11862,7,7,0,0,11861,11858,1,0,0,0,11861,11862,1,0,0,0,11862,11864,
		1,0,0,0,11863,11841,1,0,0,0,11863,11864,1,0,0,0,11864,11866,1,0,0,0,11865,
		11867,5,884,0,0,11866,11865,1,0,0,0,11866,11867,1,0,0,0,11867,1041,1,0,
		0,0,11868,11871,3,1066,533,0,11869,11871,3,788,394,0,11870,11868,1,0,0,
		0,11870,11869,1,0,0,0,11871,1043,1,0,0,0,11872,11875,3,1066,533,0,11873,
		11875,3,788,394,0,11874,11872,1,0,0,0,11874,11873,1,0,0,0,11875,1045,1,
		0,0,0,11876,11877,5,60,0,0,11877,11878,5,673,0,0,11878,11880,5,856,0,0,
		11879,11881,5,884,0,0,11880,11879,1,0,0,0,11880,11881,1,0,0,0,11881,11894,
		1,0,0,0,11882,11889,5,189,0,0,11883,11884,5,689,0,0,11884,11885,5,863,
		0,0,11885,11886,7,1,0,0,11886,11887,5,296,0,0,11887,11888,5,863,0,0,11888,
		11890,7,1,0,0,11889,11883,1,0,0,0,11889,11890,1,0,0,0,11890,11892,1,0,
		0,0,11891,11893,5,254,0,0,11892,11891,1,0,0,0,11892,11893,1,0,0,0,11893,
		11895,1,0,0,0,11894,11882,1,0,0,0,11894,11895,1,0,0,0,11895,1047,1,0,0,
		0,11896,11898,5,185,0,0,11897,11896,1,0,0,0,11897,11898,1,0,0,0,11898,
		11899,1,0,0,0,11899,11900,5,881,0,0,11900,11901,3,1050,525,0,11901,11907,
		5,882,0,0,11902,11904,5,883,0,0,11903,11902,1,0,0,0,11903,11904,1,0,0,
		0,11904,11905,1,0,0,0,11905,11906,5,590,0,0,11906,11908,3,460,230,0,11907,
		11903,1,0,0,0,11907,11908,1,0,0,0,11908,11910,1,0,0,0,11909,11911,5,884,
		0,0,11910,11909,1,0,0,0,11910,11911,1,0,0,0,11911,1049,1,0,0,0,11912,11913,
		5,703,0,0,11913,11914,5,673,0,0,11914,11915,5,80,0,0,11915,11916,7,1,0,
		0,11916,11917,5,75,0,0,11917,11919,3,1052,526,0,11918,11920,5,884,0,0,
		11919,11918,1,0,0,0,11919,11920,1,0,0,0,11920,1051,1,0,0,0,11921,11922,
		3,1066,533,0,11922,11923,5,876,0,0,11923,11924,3,1066,533,0,11924,11925,
		5,876,0,0,11925,11926,3,1066,533,0,11926,11929,1,0,0,0,11927,11929,3,1066,
		533,0,11928,11921,1,0,0,0,11928,11927,1,0,0,0,11929,1053,1,0,0,0,11930,
		11931,5,548,0,0,11931,11932,5,112,0,0,11932,11933,5,673,0,0,11933,11934,
		7,1,0,0,11934,11935,5,415,0,0,11935,11936,5,602,0,0,11936,11940,3,788,
		394,0,11937,11938,5,881,0,0,11938,11939,7,1,0,0,11939,11941,5,882,0,0,
		11940,11937,1,0,0,0,11940,11941,1,0,0,0,11941,11943,1,0,0,0,11942,11944,
		5,884,0,0,11943,11942,1,0,0,0,11943,11944,1,0,0,0,11944,1055,1,0,0,0,11945,
		11946,7,149,0,0,11946,11947,5,881,0,0,11947,11948,5,400,0,0,11948,11976,
		5,882,0,0,11949,11950,3,1066,533,0,11950,11951,5,881,0,0,11951,11952,5,
		857,0,0,11952,11953,5,883,0,0,11953,11954,5,857,0,0,11954,11955,5,882,
		0,0,11955,11976,1,0,0,0,11956,11957,3,1066,533,0,11957,11958,5,881,0,0,
		11958,11959,5,857,0,0,11959,11960,5,882,0,0,11960,11976,1,0,0,0,11961,
		11962,3,1066,533,0,11962,11968,5,83,0,0,11963,11964,5,881,0,0,11964,11965,
		5,857,0,0,11965,11966,5,883,0,0,11966,11967,5,857,0,0,11967,11969,5,882,
		0,0,11968,11963,1,0,0,0,11968,11969,1,0,0,0,11969,11976,1,0,0,0,11970,
		11972,5,54,0,0,11971,11973,5,127,0,0,11972,11971,1,0,0,0,11972,11973,1,
		0,0,0,11973,11976,1,0,0,0,11974,11976,3,1066,533,0,11975,11945,1,0,0,0,
		11975,11949,1,0,0,0,11975,11956,1,0,0,0,11975,11961,1,0,0,0,11975,11970,
		1,0,0,0,11975,11974,1,0,0,0,11976,1057,1,0,0,0,11977,11981,5,107,0,0,11978,
		11981,5,47,0,0,11979,11981,3,1060,530,0,11980,11977,1,0,0,0,11980,11978,
		1,0,0,0,11980,11979,1,0,0,0,11981,1059,1,0,0,0,11982,11998,5,859,0,0,11983,
		11998,5,860,0,0,11984,11986,3,1062,531,0,11985,11984,1,0,0,0,11985,11986,
		1,0,0,0,11986,11987,1,0,0,0,11987,11998,5,857,0,0,11988,11990,3,1062,531,
		0,11989,11988,1,0,0,0,11989,11990,1,0,0,0,11990,11991,1,0,0,0,11991,11998,
		7,150,0,0,11992,11994,3,1062,531,0,11993,11992,1,0,0,0,11993,11994,1,0,
		0,0,11994,11995,1,0,0,0,11995,11996,5,880,0,0,11996,11998,7,151,0,0,11997,
		11982,1,0,0,0,11997,11983,1,0,0,0,11997,11985,1,0,0,0,11997,11989,1,0,
		0,0,11997,11993,1,0,0,0,11998,1061,1,0,0,0,11999,12000,7,121,0,0,12000,
		1063,1,0,0,0,12001,12002,7,152,0,0,12002,1065,1,0,0,0,12003,12008,5,858,
		0,0,12004,12008,5,853,0,0,12005,12008,5,855,0,0,12006,12008,3,1064,532,
		0,12007,12003,1,0,0,0,12007,12004,1,0,0,0,12007,12005,1,0,0,0,12007,12006,
		1,0,0,0,12008,1067,1,0,0,0,12009,12010,5,858,0,0,12010,1069,1,0,0,0,12011,
		12014,3,1066,533,0,12012,12014,5,859,0,0,12013,12011,1,0,0,0,12013,12012,
		1,0,0,0,12014,1071,1,0,0,0,12015,12031,5,863,0,0,12016,12031,5,864,0,0,
		12017,12031,5,865,0,0,12018,12019,5,865,0,0,12019,12031,5,863,0,0,12020,
		12021,5,864,0,0,12021,12031,5,863,0,0,12022,12023,5,865,0,0,12023,12031,
		5,864,0,0,12024,12025,5,866,0,0,12025,12031,5,863,0,0,12026,12027,5,866,
		0,0,12027,12031,5,864,0,0,12028,12029,5,866,0,0,12029,12031,5,865,0,0,
		12030,12015,1,0,0,0,12030,12016,1,0,0,0,12030,12017,1,0,0,0,12030,12018,
		1,0,0,0,12030,12020,1,0,0,0,12030,12022,1,0,0,0,12030,12024,1,0,0,0,12030,
		12026,1,0,0,0,12030,12028,1,0,0,0,12031,1073,1,0,0,0,12032,12033,7,153,
		0,0,12033,1075,1,0,0,0,12034,12036,5,857,0,0,12035,12037,7,154,0,0,12036,
		12035,1,0,0,0,12036,12037,1,0,0,0,12037,1077,1,0,0,0,1680,1081,1089,1094,
		1098,1104,1106,1111,1118,1122,1128,1132,1136,1140,1144,1148,1152,1156,
		1159,1166,1329,1336,1350,1354,1359,1364,1368,1372,1377,1382,1384,1388,
		1391,1398,1401,1410,1413,1424,1429,1434,1439,1444,1450,1454,1457,1461,
		1464,1467,1474,1478,1480,1485,1491,1495,1508,1514,1517,1526,1529,1550,
		1558,1563,1566,1571,1574,1579,1587,1592,1595,1600,1606,1611,1628,1631,
		1634,1637,1642,1651,1666,1683,1694,1700,1715,1730,1739,1743,1748,1754,
		1760,1763,1768,1773,1781,1791,1810,1818,1831,1833,1845,1847,1854,1863,
		1869,1878,1892,1902,1912,1952,1975,2011,2013,2031,2055,2058,2072,2104,
		2122,2125,2130,2133,2138,2141,2146,2149,2154,2157,2165,2168,2176,2189,
		2200,2205,2209,2215,2238,2250,2261,2266,2270,2276,2278,2291,2314,2321,
		2330,2335,2338,2343,2346,2351,2356,2384,2392,2398,2405,2407,2420,2427,
		2442,2460,2463,2465,2470,2474,2477,2479,2485,2488,2490,2496,2498,2520,
		2528,2536,2538,2540,2549,2570,2583,2598,2602,2637,2640,2645,2668,2671,
		2676,2702,2716,2721,2729,2734,2741,2762,2799,2804,2823,2835,2838,2843,
		2846,2852,2867,2872,2880,2883,2888,2893,2896,2920,2927,2932,2937,2942,
		2944,2951,2964,2970,2975,2983,2999,3006,3011,3016,3019,3025,3031,3036,
		3041,3046,3049,3055,3061,3072,3075,3085,3091,3095,3099,3128,3141,3147,
		3157,3160,3180,3184,3188,3193,3208,3215,3224,3232,3235,3240,3245,3253,
		3259,3263,3269,3274,3278,3285,3293,3301,3310,3315,3319,3322,3326,3332,
		3337,3345,3353,3359,3365,3368,3373,3376,3383,3385,3388,3394,3397,3402,
		3405,3410,3413,3418,3421,3426,3429,3432,3435,3442,3446,3453,3460,3466,
		3479,3483,3488,3498,3507,3511,3523,3529,3534,3536,3556,3560,3568,3577,
		3583,3589,3597,3599,3609,3613,3616,3620,3625,3631,3634,3638,3646,3648,
		3651,3659,3667,3674,3681,3683,3685,3690,3696,3699,3701,3703,3706,3711,
		3714,3719,3734,3741,3748,3750,3752,3757,3763,3766,3768,3770,3773,3778,
		3781,3786,3799,3804,3813,3818,3824,3828,3832,3849,3851,3861,3866,3868,
		3872,3878,3886,3891,3894,3902,3905,3910,3915,3920,3925,3930,3935,3939,
		3944,3955,3960,3963,3966,3971,3974,3979,3982,3987,3990,3995,3998,4003,
		4006,4011,4017,4022,4025,4030,4037,4039,4045,4054,4059,4061,4073,4079,
		4091,4094,4099,4101,4111,4116,4118,4122,4128,4146,4148,4163,4181,4189,
		4199,4215,4236,4247,4253,4262,4271,4277,4286,4291,4294,4299,4302,4307,
		4310,4318,4324,4328,4335,4341,4345,4348,4350,4353,4358,4361,4366,4369,
		4374,4377,4382,4385,4400,4411,4423,4430,4437,4441,4446,4449,4454,4457,
		4462,4465,4474,4481,4496,4499,4504,4515,4524,4535,4541,4543,4551,4559,
		4564,4575,4578,4582,4590,4594,4598,4606,4611,4619,4624,4628,4630,4635,
		4644,4647,4652,4659,4665,4667,4672,4678,4684,4689,4695,4702,4707,4712,
		4717,4720,4724,4727,4731,4735,4738,4742,4747,4751,4755,4765,4771,4778,
		4781,4787,4793,4798,4800,4806,4808,4813,4819,4825,4830,4832,4836,4840,
		4843,4857,4862,4866,4879,4882,4884,4892,4902,4908,4915,4918,4924,4930,
		4935,4937,4943,4945,4950,4956,4962,4968,4973,4975,4979,4983,4986,5000,
		5005,5009,5022,5025,5027,5035,5046,5055,5064,5075,5084,5093,5105,5109,
		5114,5116,5118,5123,5127,5132,5134,5136,5150,5155,5177,5199,5204,5217,
		5225,5245,5248,5254,5262,5269,5274,5278,5282,5285,5292,5310,5312,5332,
		5339,5346,5351,5356,5362,5367,5369,5376,5382,5388,5391,5397,5407,5410,
		5417,5420,5425,5427,5435,5439,5445,5450,5452,5455,5462,5468,5475,5478,
		5484,5489,5491,5494,5502,5508,5515,5518,5524,5529,5531,5539,5547,5553,
		5558,5560,5570,5575,5585,5591,5603,5605,5612,5618,5624,5630,5635,5637,
		5644,5652,5658,5672,5674,5677,5682,5684,5696,5702,5716,5718,5721,5726,
		5729,5734,5736,5745,5752,5764,5780,5789,5798,5801,5806,5813,5815,5821,
		5823,5831,5833,5839,5841,5847,5849,5856,5859,5861,5864,5868,5870,5879,
		5885,5889,5897,5904,5910,5912,5923,5928,5934,5938,5948,5956,5968,5971,
		5979,5981,5984,5988,5991,6000,6003,6006,6014,6020,6027,6031,6042,6048,
		6050,6059,6063,6070,6075,6078,6086,6090,6093,6097,6100,6104,6111,6115,
		6117,6119,6122,6125,6128,6134,6137,6145,6147,6150,6154,6157,6163,6166,
		6170,6173,6176,6183,6186,6193,6199,6203,6213,6216,6219,6225,6228,6231,
		6234,6238,6241,6249,6251,6255,6258,6266,6270,6274,6281,6285,6287,6289,
		6292,6295,6298,6306,6312,6318,6320,6324,6327,6335,6339,6346,6349,6358,
		6361,6365,6373,6376,6380,6383,6397,6401,6404,6408,6411,6422,6428,6431,
		6436,6438,6446,6450,6453,6457,6469,6472,6476,6479,6483,6499,6501,6503,
		6506,6509,6514,6517,6523,6526,6533,6537,6539,6547,6550,6554,6561,6564,
		6576,6581,6584,6596,6599,6605,6612,6617,6622,6628,6632,6639,6642,6650,
		6658,6661,6669,6676,6683,6686,6696,6703,6708,6711,6721,6724,6727,6736,
		6738,6749,6752,6755,6762,6767,6771,6773,6783,6786,6789,6796,6802,6806,
		6810,6815,6819,6823,6826,6831,6845,6861,6865,6871,6873,6876,6880,6885,
		6890,6898,6903,6907,6912,6917,6923,6928,6931,6936,6942,6946,6955,6965,
		6968,6977,6985,6988,6995,6998,7023,7034,7047,7051,7053,7061,7069,7075,
		7078,7081,7084,7090,7094,7102,7114,7126,7130,7133,7142,7148,7158,7167,
		7177,7183,7189,7196,7202,7206,7217,7232,7234,7261,7272,7280,7291,7296,
		7299,7307,7317,7324,7331,7333,7345,7356,7360,7365,7368,7370,7373,7385,
		7387,7389,7392,7397,7400,7405,7415,7419,7424,7427,7429,7432,7444,7446,
		7448,7451,7457,7467,7487,7493,7518,7520,7546,7552,7563,7571,7574,7591,
		7599,7606,7629,7642,7648,7655,7663,7666,7669,7678,7688,7695,7699,7703,
		7709,7716,7720,7726,7733,7740,7743,7749,7756,7760,7765,7770,7775,7783,
		7787,7793,7800,7804,7813,7821,7827,7833,7850,7854,7862,7866,7869,7877,
		7881,7886,7890,7900,7905,7907,7914,7918,7922,7926,7929,7933,7939,7943,
		7945,7952,7959,7962,7965,7972,7977,7982,7986,7992,7996,7998,8003,8008,
		8012,8017,8023,8027,8031,8033,8037,8041,8045,8049,8055,8058,8064,8068,
		8072,8078,8084,8086,8089,8093,8097,8101,8107,8110,8116,8122,8125,8131,
		8134,8140,8143,8147,8151,8155,8160,8163,8167,8171,8188,8190,8192,8195,
		8202,8207,8211,8217,8221,8223,8228,8233,8237,8242,8248,8252,8256,8258,
		8262,8266,8270,8274,8280,8283,8289,8293,8297,8303,8309,8311,8314,8318,
		8322,8326,8332,8335,8341,8347,8350,8356,8359,8365,8368,8372,8376,8380,
		8385,8388,8392,8396,8402,8405,8409,8426,8428,8430,8433,8447,8453,8461,
		8468,8470,8473,8506,8510,8514,8521,8530,8538,8541,8544,8548,8552,8555,
		8563,8568,8573,8577,8579,8586,8594,8597,8608,8613,8617,8623,8625,8632,
		8634,8636,8640,8645,8652,8654,8660,8663,8671,8677,8681,8684,8693,8696,
		8702,8707,8714,8719,8727,8732,8744,8746,8757,8764,8774,8797,8810,8826,
		8831,8838,8841,8845,8847,8864,8879,8887,8896,8904,8912,8929,8942,8954,
		8978,8985,8989,8999,9003,9020,9059,9066,9074,9086,9108,9117,9119,9125,
		9130,9137,9150,9152,9154,9157,9160,9167,9170,9176,9181,9183,9186,9192,
		9200,9202,9205,9209,9212,9222,9225,9229,9232,9238,9241,9243,9247,9251,
		9256,9260,9265,9270,9274,9284,9287,9290,9298,9302,9305,9309,9314,9322,
		9327,9333,9338,9347,9350,9353,9364,9369,9380,9385,9391,9398,9400,9404,
		9407,9411,9415,9423,9428,9430,9433,9438,9447,9451,9456,9459,9462,9468,
		9476,9484,9487,9490,9494,9499,9502,9508,9512,9518,9526,9532,9534,9540,
		9543,9558,9561,9564,9566,9577,9588,9597,9604,9611,9629,9634,9638,9643,
		9653,9655,9657,9660,9663,9674,9676,9678,9681,9686,9697,9706,9709,9712,
		9721,9724,9727,9734,9737,9744,9750,9765,9768,9775,9783,9790,9796,9807,
		9821,9828,9830,9842,9849,9853,9861,9865,9869,9875,9885,9895,9905,9913,
		9925,9931,9935,9945,9949,9953,9963,9969,9977,9985,9987,10011,10023,10030,
		10038,10045,10051,10059,10062,10064,10068,10073,10076,10080,10084,10091,
		10095,10098,10103,10107,10111,10116,10123,10126,10130,10135,10139,10148,
		10155,10164,10176,10178,10188,10191,10196,10205,10207,10209,10214,10216,
		10224,10229,10237,10242,10248,10250,10260,10262,10266,10270,10272,10281,
		10283,10288,10299,10333,10349,10356,10358,10365,10374,10382,10388,10396,
		10399,10406,10412,10415,10417,10425,10427,10435,10442,10450,10452,10459,
		10467,10473,10482,10485,10489,10493,10497,10504,10506,10510,10515,10517,
		10521,10526,10528,10535,10537,10544,10546,10555,10563,10566,10573,10581,
		10584,10591,10597,10604,10610,10614,10639,10642,10646,10648,10651,10697,
		10702,10722,10726,10730,10744,10754,10763,10769,10774,10794,10800,10807,
		10811,10826,10832,10851,10862,10875,10892,10898,10905,10909,10936,10994,
		10998,11055,11057,11063,11073,11092,11108,11124,11140,11159,11164,11170,
		11173,11178,11183,11192,11197,11203,11212,11222,11225,11239,11245,11254,
		11258,11266,11273,11286,11294,11307,11314,11320,11324,11341,11356,11358,
		11371,11387,11395,11399,11402,11411,11414,11417,11430,11434,11442,11448,
		11456,11463,11469,11484,11493,11499,11505,11508,11512,11519,11527,11530,
		11536,11542,11544,11550,11553,11555,11561,11563,11577,11584,11593,11600,
		11618,11625,11632,11639,11645,11652,11655,11660,11667,11672,11676,11681,
		11684,11688,11692,11697,11701,11707,11711,11715,11720,11724,11729,11734,
		11738,11743,11747,11755,11759,11764,11774,11779,11786,11795,11799,11801,
		11808,11820,11825,11836,11846,11848,11854,11856,11861,11863,11866,11870,
		11874,11880,11889,11892,11894,11897,11903,11907,11910,11919,11928,11940,
		11943,11968,11972,11975,11980,11985,11989,11993,11997,12007,12013,12030,
		12036
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SQLParser.Parsers.TSql
